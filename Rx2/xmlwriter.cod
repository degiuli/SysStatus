; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

	TITLE	c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file@ ; `string'
PUBLIC	??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCU@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7@				; `string'
PUBLIC	??_C@_03FONCMJME@?$DM?$CFs@			; `string'
PUBLIC	??_C@_04FDKPOGFN@?5?$CFs?$DN@			; `string'
PUBLIC	??_C@_04OEDFLLKD@?$CC?$CFs?$CC@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_05POIKLDCH@?$DM?1?$CFs?$DO@		; `string'
PUBLIC	??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO@	; `string'
PUBLIC	??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO@ ; `string'
PUBLIC	??_C@_02HEIIMGGB@a_@				; `string'
PUBLIC	??_C@_05JKJFEODM@?$CGamp?$DL@			; `string'
PUBLIC	??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL@		; `string'
PUBLIC	??_C@_0CF@EFJHEPJ@TID?5?$CF?45u?5ID?5?$CF?45i?5?9?9?5XmlWritter?3@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EFJHEPJ@TID?5?$CF?45u?5ID?5?$CF?45i?5?9?9?5XmlWritter?3@
CONST	SEGMENT
??_C@_0CF@EFJHEPJ@TID?5?$CF?45u?5ID?5?$CF?45i?5?9?9?5XmlWritter?3@ DB 'TI'
	DB	'D %.5u ID %.5i -- XmlWritter: %s', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL@
CONST	SEGMENT
??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL@ DB '&#%d;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKJFEODM@?$CGamp?$DL@
CONST	SEGMENT
??_C@_05JKJFEODM@?$CGamp?$DL@ DB '&amp;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEIIMGGB@a_@
CONST	SEGMENT
??_C@_02HEIIMGGB@a_@ DB 'a_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO@
CONST	SEGMENT
??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO@ DB '<!-- %s -->', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO@
CONST	SEGMENT
??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO@ DB '>%s</%s>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO@
CONST	SEGMENT
??_C@_05POIKLDCH@?$DM?1?$CFs?$DO@ DB '</%s>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEDFLLKD@?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_04OEDFLLKD@?$CC?$CFs?$CC@ DB '"%s"', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDKPOGFN@?5?$CFs?$DN@
CONST	SEGMENT
??_C@_04FDKPOGFN@?5?$CFs?$DN@ DB ' %s=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FONCMJME@?$DM?$CFs@
CONST	SEGMENT
??_C@_03FONCMJME@?$DM?$CFs@ DB '<%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCU@
CONST	SEGMENT
??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCU@ DB '<'
	DB	'?xml version="1.0" encoding="UTF-8"?>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file@
CONST	SEGMENT
??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file@ DB 'Unable to open out'
	DB	'put file', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
PUBLIC	??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Destroy_range1@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Uninitialized_value_construct_n1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_value_construct_n1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Seek_wrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Uninitialized_copy_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Get_unwrapped_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@H@Z ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,int,0>
PUBLIC	??$_Get_unwrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Uninitialized_value_construct_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Idl_distance@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$addressof@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Setcont
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator+=
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Alloc_proxy
PUBLIC	?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myproxy
PUBLIC	?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocate
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEII@Z ; std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getblock
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator-=
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
PUBLIC	?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
PUBLIC	?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEII@Z ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getblock
PUBLIC	??0?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Free_proxy
PUBLIC	?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
PUBLIC	?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	?_Map@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Map
PUBLIC	?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mapsize
PUBLIC	?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myoff
PUBLIC	?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mysize
PUBLIC	?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABIXZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mysize
PUBLIC	?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::deallocate
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator-
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
PUBLIC	?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
PUBLIC	?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::size
PUBLIC	?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::top
PUBLIC	?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::push
PUBLIC	?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::pop
PUBLIC	?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
PUBLIC	?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
PUBLIC	?Write@xmlwriter@@AAAXHPBDZZ			; xmlwriter::Write
PUBLIC	?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; xmlwriter::validateValue
PUBLIC	?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; xmlwriter::validateTagName
PUBLIC	??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	_vfprintf
PUBLIC	__vfprintf_l
PUBLIC	?AddComment@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; xmlwriter::AddComment
PUBLIC	?CloseAlltags@xmlwriter@@QAEXXZ			; xmlwriter::CloseAlltags
PUBLIC	?CloseLasttag@xmlwriter@@QAEXXZ			; xmlwriter::CloseLasttag
PUBLIC	?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; xmlwriter::Createtag
PUBLIC	?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; xmlwriter::CreateChild
PUBLIC	??1xmlwriter@@QAE@XZ				; xmlwriter::~xmlwriter
PUBLIC	??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z ; xmlwriter::xmlwriter
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z$0
__ehfuncinfo$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z$0
__ehfuncinfo$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$??1xmlwriter@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1xmlwriter@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1xmlwriter@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$4
__ehfuncinfo$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$2
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_sTmp$ = 8						; size = 4
_dbg$dead$ = 12						; size = 4
??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z PROC ; xmlwriter::xmlwriter
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 30   : xmlwriter::xmlwriter(std::string const& sTmp, DebugMsg dbg) : sXmlFile(sTmp), pDebug(dbg), iLevel(0)

  0002c	ff 75 08	 push	 DWORD PTR _sTmp$[ebp]
  0002f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  0003b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 390  : 		_Mylast(),

  00042	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 391  : 		_Myend()

  00049	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 31   : {

  00050	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00054	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
  00057	89 75 08	 mov	 DWORD PTR _this$[ebp], esi
  0005a	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00061	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 30   : 		: c()

  00063	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00066	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 680  : 		: _Map(),

  0006c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 681  : 		_Mapsize(0),

  00073	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 682  : 		_Myoff(0),

  0007a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 683  : 		_Mysize(0)

  00081	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00088	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 787  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0008d	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0008f	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00092	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00098	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 789  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	89 30		 mov	 DWORD PTR [eax], esi
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 31   : {

  000a3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000a7	8b c7		 mov	 eax, edi
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 30   : xmlwriter::xmlwriter(std::string const& sTmp, DebugMsg dbg) : sXmlFile(sTmp), pDebug(dbg), iLevel(0)

  000a9	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], OFFSET ?DebugStringToFile@@YAXPADH@Z ; DebugStringToFile

; 32   :     iLevel = 0;

  000b0	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000b7	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  000bb	72 02		 jb	 SHORT $LN114@xmlwriter
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000bd	8b 07		 mov	 eax, DWORD PTR [edi]
$LN114@xmlwriter:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 33   :     fp = fopen(sXmlFile.c_str(), "w");

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _fopen
  000ca	83 c4 08	 add	 esp, 8
  000cd	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 34   :     if (fp == nullptr)

  000d0	85 c0		 test	 eax, eax
  000d2	75 09		 jne	 SHORT $LN2@xmlwriter

; 35   :     {
; 36   :         Write(__LINE__, "Unable to open output file");

  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file@
  000d9	6a 24		 push	 36			; 00000024H

; 37   :         return;

  000db	eb 07		 jmp	 SHORT $LN122@xmlwriter
$LN2@xmlwriter:

; 38   :     }
; 39   :     else
; 40   :     {
; 41   :         Write(__LINE__, "<?xml version=\"1.0\" encoding=\"UTF-8\"\?>");

  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCU@
  000e2	6a 29		 push	 41			; 00000029H
$LN122@xmlwriter:

; 42   :     }
; 43   : }

  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f4	8b c7		 mov	 eax, edi
  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$4:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$3:
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$2:
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00029	e9 00 00 00 00	 jmp	 ??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
__ehhandler$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z:
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0xmlwriter@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z ENDP ; xmlwriter::xmlwriter
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1xmlwriter@@QAE@XZ PROC				; xmlwriter::~xmlwriter
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1xmlwriter@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 47   :     if (fp != NULL)

  00034	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  00037	85 c0		 test	 eax, eax
  00039	74 09		 je	 SHORT $LN2@xmlwriter

; 48   :         fclose(fp);

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _fclose
  00041	83 c4 04	 add	 esp, 4
$LN2@xmlwriter:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00044	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  00047	51		 push	 ecx
  00048	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  0004b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1592 : 		this->_Mylast() = this->_Myfirst();

  00050	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00053	83 c4 04	 add	 esp, 4

; 1592 : 		this->_Mylast() = this->_Myfirst();

  00056	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 50   : }

  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005d	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  00060	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00063	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00067	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1192 : 		{	// destroy the deque

  0006a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 1377 : 		return (this->_Mysize() == 0);

  0006e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00071	85 c9		 test	 ecx, ecx

; 1871 : 		while (!empty())

  00073	74 6a		 je	 SHORT $LN413@xmlwriter
$LL54@xmlwriter:

; 1514 : 		size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;

  00075	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00078	48		 dec	 eax
  00079	03 c1		 add	 eax, ecx

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0007b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0007e	49		 dec	 ecx
  0007f	23 c8		 and	 ecx, eax

; 1516 : 		_Alty_traits::destroy(this->_Getal(),

  00081	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00084	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00087	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0008a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0008d	72 2b		 jb	 SHORT $LN158@xmlwriter

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  0008f	8b 07		 mov	 eax, DWORD PTR [edi]

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00091	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00092	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00098	72 16		 jb	 SHORT $LN157@xmlwriter

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0009a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009d	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a0	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a8	0f 87 14 01 00
	00		 ja	 $LN154@xmlwriter

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000ae	8b c2		 mov	 eax, edx
$LN157@xmlwriter:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000b0	51		 push	 ecx
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b7	83 c4 08	 add	 esp, 8
$LN158@xmlwriter:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  000ba	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000c1	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000c8	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1518 : 		if (--this->_Mysize() == 0)

  000cb	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  000cf	75 07		 jne	 SHORT $LN412@xmlwriter

; 1519 : 			{
; 1520 : 			this->_Myoff() = 0;

  000d1	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN412@xmlwriter:

; 1377 : 		return (this->_Mysize() == 0);

  000d8	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000db	85 c9		 test	 ecx, ecx

; 1871 : 		while (!empty())

  000dd	75 96		 jne	 SHORT $LL54@xmlwriter
$LN413@xmlwriter:

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  000df	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  000e2	85 ff		 test	 edi, edi
  000e4	74 1a		 je	 SHORT $LN57@xmlwriter
$LL56@xmlwriter:

; 1877 : 			{	// free storage for a block and destroy pointer
; 1878 : 			if (this->_Map()[--_Block] != pointer())

  000e6	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e9	4f		 dec	 edi
  000ea	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000ed	85 c0		 test	 eax, eax
  000ef	74 0b		 je	 SHORT $LN225@xmlwriter
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  000f1	6a 18		 push	 24			; 00000018H
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f9	83 c4 08	 add	 esp, 8
$LN225@xmlwriter:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  000fc	85 ff		 test	 edi, edi
  000fe	75 e6		 jne	 SHORT $LL56@xmlwriter
$LN57@xmlwriter:

; 1879 : 				{	// free block and destroy its pointer
; 1880 : 				this->_Getal().deallocate(this->_Map()[_Block], _DEQUESIZ);
; 1881 : 				_Alpty_traits::destroy(_Almap, _STD addressof(this->_Map()[_Block]));
; 1882 : 				}
; 1883 : 			}
; 1884 : 
; 1885 : 		if (this->_Map() != _Mapptr())

  00100	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00103	85 c9		 test	 ecx, ecx
  00105	74 32		 je	 SHORT $LN270@xmlwriter

; 1886 : 			{
; 1887 : 			_Almap.deallocate(this->_Map(), this->_Mapsize());	// free storage for map

  00107	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010a	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00111	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00117	72 16		 jb	 SHORT $LN269@xmlwriter

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00119	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  0011c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0011f	2b cf		 sub	 ecx, edi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00121	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00124	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00127	0f 87 95 00 00
	00		 ja	 $LN154@xmlwriter

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0012d	8b cf		 mov	 ecx, edi
$LN269@xmlwriter:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0012f	52		 push	 edx
  00130	51		 push	 ecx
  00131	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00136	83 c4 08	 add	 esp, 8
$LN270@xmlwriter:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1890 : 		this->_Mapsize() = 0;

  00139	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1891 : 		this->_Map() = _Mapptr();

  00140	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1194 : 		}

  00147	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0014b	6a 08		 push	 8
  0014d	ff 36		 push	 DWORD PTR [esi]
  0014f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00154	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 798  : 		_Myproxy() = nullptr;

  00157	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 50   : }

  0015d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  00161	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00164	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 50   : }

  00169	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00170	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00173	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00176	72 27		 jb	 SHORT $LN391@xmlwriter
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00178	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0017a	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0017b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00181	72 12		 jb	 SHORT $LN390@xmlwriter

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00183	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00186	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00189	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0018e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00191	77 2f		 ja	 SHORT $LN154@xmlwriter

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00193	8b c2		 mov	 eax, edx
$LN390@xmlwriter:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00195	51		 push	 ecx
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0019c	83 c4 08	 add	 esp, 8
$LN391@xmlwriter:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0019f	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  001a6	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001ad	c6 03 00	 mov	 BYTE PTR [ebx], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 50   : }

  001b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ba	59		 pop	 ecx
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx
  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c3		 ret	 0
$LN154@xmlwriter:
  001c2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN415@xmlwriter:
  001c7	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1xmlwriter@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1xmlwriter@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??1xmlwriter@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00019	e9 00 00 00 00	 jmp	 ??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
__unwindfunclet$??1xmlwriter@@QAE@XZ$3:
  0001e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??1xmlwriter@@QAE@XZ$4:
  00026	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__ehhandler$??1xmlwriter@@QAE@XZ:
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1xmlwriter@@QAE@XZ
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1xmlwriter@@QAE@XZ ENDP				; xmlwriter::~xmlwriter
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
__New_capacity$1$ = -100				; size = 4
__Right_size$1$ = -96					; size = 4
_value$ = -92						; size = 24
_tag$ = -68						; size = 24
_sTmp$2 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_sTag$ = 8						; size = 4
_sValue$ = 12						; size = 4
?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; xmlwriter::CreateChild
; _this$ = ecx

; 113  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 58	 sub	 esp, 88			; 00000058H
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00032	56		 push	 esi
  00033	57		 push	 edi
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	8b f9		 mov	 edi, ecx
  00040	8b 43 08	 mov	 eax, DWORD PTR _sTag$[ebx]
  00043	8b 73 0c	 mov	 esi, DWORD PTR _sValue$[ebx]

; 114  :     std::string tag = validateTagName(sTag);

  00046	50		 push	 eax
  00047	8d 45 bc	 lea	 eax, DWORD PTR _tag$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; xmlwriter::validateTagName
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :     std::string value = validateValue(sValue);

  00057	8d 45 a4	 lea	 eax, DWORD PTR _value$[ebp]
  0005a	56		 push	 esi
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; xmlwriter::validateValue
  00061	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 116  : 
; 117  :     Write(__LINE__, "\n");

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0006a	6a 75		 push	 117			; 00000075H
  0006c	57		 push	 edi
  0006d	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 118  : 
; 119  :     //Indent properly
; 120  :     for (int iTmp = 0; iTmp < iLevel; iTmp++)

  00072	33 f6		 xor	 esi, esi
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	39 77 28	 cmp	 DWORD PTR [edi+40], esi
  0007a	7e 1a		 jle	 SHORT $LN3@CreateChil
  0007c	0f 1f 40 00	 npad	 4
$LL4@CreateChil:

; 121  :         Write(__LINE__, "\t");

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  00085	6a 79		 push	 121			; 00000079H
  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0008d	46		 inc	 esi
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00091	3b 77 28	 cmp	 esi, DWORD PTR [edi+40]
  00094	7c ea		 jl	 SHORT $LL4@CreateChil
$LN3@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00096	83 7d d0 10	 cmp	 DWORD PTR _tag$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0009a	8d 45 bc	 lea	 eax, DWORD PTR _tag$[ebp]

; 1815 : 		if (_Large_string_engaged())

  0009d	0f 43 45 bc	 cmovae	 eax, DWORD PTR _tag$[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 123  :     Write(__LINE__, "<%s", tag.c_str());

  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_03FONCMJME@?$DM?$CFs@
  000a7	6a 7b		 push	 123			; 0000007bH
  000a9	57		 push	 edi
  000aa	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  000af	83 c4 10	 add	 esp, 16			; 00000010H
$LN669@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1792 : 		return (this->_Mylast()[-1]);

  000b2	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  000b5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000ba	8b ce		 mov	 ecx, esi
  000bc	2b 4f 18	 sub	 ecx, DWORD PTR [edi+24]
  000bf	f7 e9		 imul	 ecx
  000c1	c1 fa 02	 sar	 edx, 2
  000c4	8b c2		 mov	 eax, edx
  000c6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c9	03 c2		 add	 eax, edx
  000cb	a9 fe ff ff ff	 test	 eax, -2			; fffffffeH
  000d0	0f 86 fe 01 00
	00		 jbe	 $LN6@CreateChil
  000d6	83 ee 18	 sub	 esi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  000d9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+16], 0

; 1785 : 		_Myres(0)

  000e0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1792 : 		return (this->_Mylast()[-1]);

  000e7	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000ec	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  000f0	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000f3	89 4d a0	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 1815 : 		if (_Large_string_engaged())

  000f6	72 02		 jb	 SHORT $LN76@CreateChil
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000f8	8b 36		 mov	 esi, DWORD PTR [esi]
$LN76@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  000fa	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000fd	73 13		 jae	 SHORT $LN65@CreateChil
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ff	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2404 : 			_My_data._Mysize = _Right_size;

  00102	89 4d e4	 mov	 DWORD PTR _sTmp$2[ebp+16], ecx

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  00105	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0010c	0f 11 45 d4	 movups	 XMMWORD PTR _sTmp$2[ebp], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2406 : 			return;

  00110	eb 75		 jmp	 SHORT $LN64@CreateChil
$LN65@CreateChil:

; 2407 : 			}
; 2408 : 
; 2409 : 		auto& _Al = this->_Getal();
; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00112	8b c1		 mov	 eax, ecx
  00114	83 c8 0f	 or	 eax, 15			; 0000000fH
  00117	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0011c	0f 47 c2	 cmova	 eax, edx
  0011f	89 45 9c	 mov	 DWORD PTR __New_capacity$1$[ebp], eax

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00122	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00125	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012b	72 29		 jb	 SHORT $LN109@CreateChil

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0012d	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00130	3b c1		 cmp	 eax, ecx
  00132	b9 ff ff ff ff	 mov	 ecx, -1
  00137	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00140	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00143	85 c0		 test	 eax, eax
  00145	0f 84 7b 02 00
	00		 je	 $LN118@CreateChil

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0014b	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0014e	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00151	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00154	eb 13		 jmp	 SHORT $LN108@CreateChil
$LN109@CreateChil:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00156	85 c9		 test	 ecx, ecx
  00158	74 0d		 je	 SHORT $LN110@CreateChil

; 52   : 		return (::operator new(_Bytes));

  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00160	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00163	8b c8		 mov	 ecx, eax
  00165	eb 02		 jmp	 SHORT $LN108@CreateChil
$LN110@CreateChil:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00167	33 c9		 xor	 ecx, ecx
$LN108@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00169	8b 45 a0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0016c	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0016d	89 4d d4	 mov	 DWORD PTR _sTmp$2[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00170	50		 push	 eax
  00171	56		 push	 esi
  00172	51		 push	 ecx
  00173	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  00178	8b 45 a0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  0017e	89 45 e4	 mov	 DWORD PTR _sTmp$2[ebp+16], eax

; 2415 : 		_My_data._Myres = _New_capacity;

  00181	8b 45 9c	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  00184	89 45 e8	 mov	 DWORD PTR _sTmp$2[ebp+20], eax
$LN64@CreateChil:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 128  :         std::string sTmp = vectAttrData.back();

  00187	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0018b	8d 45 d4	 lea	 eax, DWORD PTR _sTmp$2[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0018e	83 7d e8 10	 cmp	 DWORD PTR _sTmp$2[ebp+20], 16 ; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00192	0f 43 45 d4	 cmovae	 eax, DWORD PTR _sTmp$2[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 129  :         Write(__LINE__, " %s=", sTmp.c_str());

  00196	50		 push	 eax
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_04FDKPOGFN@?5?$CFs?$DN@
  0019c	68 81 00 00 00	 push	 129			; 00000081H
  001a1	57		 push	 edi
  001a2	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1548 : 		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));

  001a7	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 129  :         Write(__LINE__, " %s=", sTmp.c_str());

  001aa	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001ad	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  001b0	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001b3	72 2c		 jb	 SHORT $LN218@CreateChil

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  001b5	8b 46 e8	 mov	 eax, DWORD PTR [esi-24]

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001b8	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001b9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bf	72 16		 jb	 SHORT $LN217@CreateChil

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  001c1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c4	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001c7	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c9	83 c0 fc	 add	 eax, -4			; fffffffcH
  001cc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cf	0f 87 f1 01 00
	00		 ja	 $LN118@CreateChil

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  001d5	8b c2		 mov	 eax, edx
$LN217@CreateChil:

; 207  : 	::operator delete(_Ptr, _Bytes);

  001d7	51		 push	 ecx
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001de	83 c4 08	 add	 esp, 8
$LN218@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  001e1	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0

; 2467 : 		if (this != _STD addressof(_Right))

  001e8	8d 4d d4	 lea	 ecx, DWORD PTR _sTmp$2[ebp]

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  001eb	c7 46 fc 0f 00
	00 00		 mov	 DWORD PTR [esi-4], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001f2	c6 46 e8 00	 mov	 BYTE PTR [esi-24], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1549 : 		--this->_Mylast();

  001f6	83 47 1c e8	 add	 DWORD PTR [edi+28], -24	; ffffffe8H
  001fa	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 1792 : 		return (this->_Mylast()[-1]);

  001fd	83 c0 e8	 add	 eax, -24		; ffffffe8H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  00200	3b c8		 cmp	 ecx, eax
  00202	74 15		 je	 SHORT $LN250@CreateChil

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00204	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00208	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 1815 : 		if (_Large_string_engaged())

  0020b	72 02		 jb	 SHORT $LN320@CreateChil
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0020d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN320@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  0020f	51		 push	 ecx
  00210	50		 push	 eax
  00211	8d 4d d4	 lea	 ecx, DWORD PTR _sTmp$2[ebp]
  00214	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN250@CreateChil:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00219	83 7d e8 10	 cmp	 DWORD PTR _sTmp$2[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0021d	8d 45 d4	 lea	 eax, DWORD PTR _sTmp$2[ebp]

; 1815 : 		if (_Large_string_engaged())

  00220	0f 43 45 d4	 cmovae	 eax, DWORD PTR _sTmp$2[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 132  :         Write(__LINE__, "\"%s\"", sTmp.c_str());

  00224	50		 push	 eax
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_04OEDFLLKD@?$CC?$CFs?$CC@
  0022a	68 84 00 00 00	 push	 132			; 00000084H
  0022f	57		 push	 edi
  00230	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1548 : 		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));

  00235	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 132  :         Write(__LINE__, "\"%s\"", sTmp.c_str());

  00238	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0023b	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  0023e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00241	72 2c		 jb	 SHORT $LN400@CreateChil

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  00243	8b 46 e8	 mov	 eax, DWORD PTR [esi-24]

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00246	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00247	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0024d	72 16		 jb	 SHORT $LN399@CreateChil

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0024f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00252	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00255	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00257	83 c0 fc	 add	 eax, -4			; fffffffcH
  0025a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0025d	0f 87 63 01 00
	00		 ja	 $LN118@CreateChil

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00263	8b c2		 mov	 eax, edx
$LN399@CreateChil:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00265	51		 push	 ecx
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0026c	83 c4 08	 add	 esp, 8
$LN400@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0026f	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00276	c7 46 fc 0f 00
	00 00		 mov	 DWORD PTR [esi-4], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0027d	c6 46 e8 00	 mov	 BYTE PTR [esi-24], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1549 : 		--this->_Mylast();

  00281	83 47 1c e8	 add	 DWORD PTR [edi+28], -24	; ffffffe8H
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 134  :     }

  00285	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00289	8b 55 e8	 mov	 edx, DWORD PTR _sTmp$2[ebp+20]
  0028c	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0028f	72 2c		 jb	 SHORT $LN465@CreateChil
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00291	8b 4d d4	 mov	 ecx, DWORD PTR _sTmp$2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00294	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00295	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00297	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0029d	72 14		 jb	 SHORT $LN464@CreateChil

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0029f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002a2	83 c2 23	 add	 edx, 35			; 00000023H
  002a5	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a7	83 c0 fc	 add	 eax, -4			; fffffffcH
  002aa	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ad	0f 87 13 01 00
	00		 ja	 $LN118@CreateChil
$LN464@CreateChil:

; 207  : 	::operator delete(_Ptr, _Bytes);

  002b3	52		 push	 edx
  002b4	51		 push	 ecx
  002b5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ba	83 c4 08	 add	 esp, 8
$LN465@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  002bd	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002c4	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002cb	c6 45 d4 00	 mov	 BYTE PTR _sTmp$2[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 126  :     while (0 < vectAttrData.size() / 2)

  002cf	e9 de fd ff ff	 jmp	 $LN669@CreateChil
$LN6@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  002d4	51		 push	 ecx
  002d5	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  002d8	8b d6		 mov	 edx, esi
  002da	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1592 : 		this->_Mylast() = this->_Myfirst();

  002df	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  002e2	8d 4d bc	 lea	 ecx, DWORD PTR _tag$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  002e5	83 c4 04	 add	 esp, 4

; 1592 : 		this->_Mylast() = this->_Myfirst();

  002e8	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002eb	83 7d d0 10	 cmp	 DWORD PTR _tag$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  002ef	8d 45 a4	 lea	 eax, DWORD PTR _value$[ebp]

; 1815 : 		if (_Large_string_engaged())

  002f2	0f 43 4d bc	 cmovae	 ecx, DWORD PTR _tag$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002f6	83 7d b8 10	 cmp	 DWORD PTR _value$[ebp+20], 16 ; 00000010H
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 139  :     Write(__LINE__, ">%s</%s>", value.c_str(), tag.c_str());

  002fa	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  002fb	0f 43 45 a4	 cmovae	 eax, DWORD PTR _value$[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 139  :     Write(__LINE__, ">%s</%s>", value.c_str(), tag.c_str());

  002ff	50		 push	 eax
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO@
  00305	68 8b 00 00 00	 push	 139			; 0000008bH
  0030a	57		 push	 edi
  0030b	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00310	83 c4 14	 add	 esp, 20			; 00000014H

; 140  : }

  00313	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00317	8b 55 b8	 mov	 edx, DWORD PTR _value$[ebp+20]
  0031a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0031d	72 2c		 jb	 SHORT $LN587@CreateChil
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0031f	8b 4d a4	 mov	 ecx, DWORD PTR _value$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00322	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00323	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00325	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0032b	72 14		 jb	 SHORT $LN586@CreateChil

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0032d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00330	83 c2 23	 add	 edx, 35			; 00000023H
  00333	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00335	83 c0 fc	 add	 eax, -4			; fffffffcH
  00338	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0033b	0f 87 85 00 00
	00		 ja	 $LN118@CreateChil
$LN586@CreateChil:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00341	52		 push	 edx
  00342	51		 push	 ecx
  00343	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00348	83 c4 08	 add	 esp, 8
$LN587@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0034b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _value$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00352	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR _value$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00359	c6 45 a4 00	 mov	 BYTE PTR _value$[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 140  : }

  0035d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00364	8b 55 d0	 mov	 edx, DWORD PTR _tag$[ebp+20]
  00367	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0036a	72 28		 jb	 SHORT $LN643@CreateChil
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0036c	8b 4d bc	 mov	 ecx, DWORD PTR _tag$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0036f	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00370	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00372	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00378	72 10		 jb	 SHORT $LN642@CreateChil

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0037a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0037d	83 c2 23	 add	 edx, 35			; 00000023H
  00380	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00382	83 c0 fc	 add	 eax, -4			; fffffffcH
  00385	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00388	77 41		 ja	 SHORT $LN671@CreateChil
$LN642@CreateChil:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0038a	52		 push	 edx
  0038b	51		 push	 ecx
  0038c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00391	83 c4 08	 add	 esp, 8
$LN643@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00394	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _tag$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0039b	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR _tag$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  003a2	c6 45 bc 00	 mov	 BYTE PTR _tag$[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 140  : }

  003a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b0	59		 pop	 ecx
  003b1	5f		 pop	 edi
  003b2	5e		 pop	 esi
  003b3	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b6	33 cd		 xor	 ecx, ebp
  003b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003bd	8b e5		 mov	 esp, ebp
  003bf	5d		 pop	 ebp
  003c0	8b e3		 mov	 esp, ebx
  003c2	5b		 pop	 ebx
  003c3	c2 08 00	 ret	 8
$LN118@CreateChil:
  003c6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN671@CreateChil:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003cb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN667@CreateChil:
  003d0	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _tag$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR _value$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR _sTmp$2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateChild@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; xmlwriter::CreateChild
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
__New_capacity$1$ = -76					; size = 4
tv1986 = -72						; size = 4
__Right_size$1$ = -72					; size = 4
_tag$ = -68						; size = 24
_sTmp$2 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_sTag$ = 8						; size = 4
?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; xmlwriter::Createtag
; _this$ = ecx

; 53   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 40	 sub	 esp, 64			; 00000040H
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00032	56		 push	 esi
  00033	57		 push	 edi
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	8b f1		 mov	 esi, ecx
  00040	8b 43 08	 mov	 eax, DWORD PTR _sTag$[ebx]

; 54   :     std::string tag = validateTagName(sTag);

  00043	50		 push	 eax
  00044	8d 45 bc	 lea	 eax, DWORD PTR _tag$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; xmlwriter::validateTagName
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   : 
; 56   :     Write(__LINE__, "\n");

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00059	6a 38		 push	 56			; 00000038H
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 57   : 
; 58   :     //Indent properly
; 59   :     for (int iTmp = 0; iTmp < iLevel; iTmp++)

  00061	33 ff		 xor	 edi, edi
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	39 7e 28	 cmp	 DWORD PTR [esi+40], edi
  00069	7e 1b		 jle	 SHORT $LN3@Createtag
  0006b	0f 1f 44 00 00	 npad	 5
$LL4@Createtag:

; 60   :         Write(__LINE__, "\t");

  00070	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  00075	6a 3c		 push	 60			; 0000003cH
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0007d	47		 inc	 edi
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	3b 7e 28	 cmp	 edi, DWORD PTR [esi+40]
  00084	7c ea		 jl	 SHORT $LL4@Createtag
$LN3@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00086	83 7d d0 10	 cmp	 DWORD PTR _tag$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0008a	8d 45 bc	 lea	 eax, DWORD PTR _tag$[ebp]

; 1815 : 		if (_Large_string_engaged())

  0008d	0f 43 45 bc	 cmovae	 eax, DWORD PTR _tag$[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 62   :     Write(__LINE__, "<%s", tag.c_str());

  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_03FONCMJME@?$DM?$CFs@
  00097	6a 3e		 push	 62			; 0000003eH
  00099	56		 push	 esi
  0009a	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
$LN725@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1792 : 		return (this->_Mylast()[-1]);

  000a2	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  000a5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000aa	8b cf		 mov	 ecx, edi
  000ac	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
  000af	f7 e9		 imul	 ecx
  000b1	c1 fa 02	 sar	 edx, 2
  000b4	8b c2		 mov	 eax, edx
  000b6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b9	03 c2		 add	 eax, edx
  000bb	a9 fe ff ff ff	 test	 eax, -2			; fffffffeH
  000c0	0f 86 f8 01 00
	00		 jbe	 $LN6@Createtag
  000c6	83 ef 18	 sub	 edi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  000c9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+16], 0

; 1785 : 		_Myres(0)

  000d0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1792 : 		return (this->_Mylast()[-1]);

  000d7	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000dc	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  000e0	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000e3	89 4d b8	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 1815 : 		if (_Large_string_engaged())

  000e6	72 02		 jb	 SHORT $LN75@Createtag
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000e8	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN75@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  000ea	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ed	73 13		 jae	 SHORT $LN64@Createtag
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ef	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2404 : 			_My_data._Mysize = _Right_size;

  000f2	89 4d e4	 mov	 DWORD PTR _sTmp$2[ebp+16], ecx

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  000f5	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000fc	0f 11 45 d4	 movups	 XMMWORD PTR _sTmp$2[ebp], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2406 : 			return;

  00100	eb 75		 jmp	 SHORT $LN63@Createtag
$LN64@Createtag:

; 2407 : 			}
; 2408 : 
; 2409 : 		auto& _Al = this->_Getal();
; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00102	8b c1		 mov	 eax, ecx
  00104	83 c8 0f	 or	 eax, 15			; 0000000fH
  00107	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0010c	0f 47 c2	 cmova	 eax, edx
  0010f	89 45 b4	 mov	 DWORD PTR __New_capacity$1$[ebp], eax

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00112	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00115	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011b	72 29		 jb	 SHORT $LN108@Createtag

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0011d	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00120	3b c1		 cmp	 eax, ecx
  00122	b9 ff ff ff ff	 mov	 ecx, -1
  00127	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00130	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00133	85 c0		 test	 eax, eax
  00135	0f 84 76 02 00
	00		 je	 $LN117@Createtag

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0013b	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0013e	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00141	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00144	eb 13		 jmp	 SHORT $LN107@Createtag
$LN108@Createtag:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00146	85 c9		 test	 ecx, ecx
  00148	74 0d		 je	 SHORT $LN109@Createtag

; 52   : 		return (::operator new(_Bytes));

  0014a	51		 push	 ecx
  0014b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00150	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00153	8b c8		 mov	 ecx, eax
  00155	eb 02		 jmp	 SHORT $LN107@Createtag
$LN109@Createtag:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00157	33 c9		 xor	 ecx, ecx
$LN107@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00159	8b 45 b8	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0015c	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0015d	89 4d d4	 mov	 DWORD PTR _sTmp$2[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00160	50		 push	 eax
  00161	57		 push	 edi
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  00168	8b 45 b8	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  0016e	89 45 e4	 mov	 DWORD PTR _sTmp$2[ebp+16], eax

; 2415 : 		_My_data._Myres = _New_capacity;

  00171	8b 45 b4	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  00174	89 45 e8	 mov	 DWORD PTR _sTmp$2[ebp+20], eax
$LN63@Createtag:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 67   :         std::string sTmp = vectAttrData.back();

  00177	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0017b	8d 45 d4	 lea	 eax, DWORD PTR _sTmp$2[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0017e	83 7d e8 10	 cmp	 DWORD PTR _sTmp$2[ebp+20], 16 ; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00182	0f 43 45 d4	 cmovae	 eax, DWORD PTR _sTmp$2[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 68   :         Write(__LINE__, " %s=", sTmp.c_str());

  00186	50		 push	 eax
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_04FDKPOGFN@?5?$CFs?$DN@
  0018c	6a 44		 push	 68			; 00000044H
  0018e	56		 push	 esi
  0018f	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1548 : 		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));

  00194	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 68   :         Write(__LINE__, " %s=", sTmp.c_str());

  00197	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0019a	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  0019d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001a0	72 2c		 jb	 SHORT $LN217@Createtag

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  001a2	8b 47 e8	 mov	 eax, DWORD PTR [edi-24]

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001a5	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001a6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ac	72 16		 jb	 SHORT $LN216@Createtag

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  001ae	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b1	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001b4	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b6	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001bc	0f 87 ef 01 00
	00		 ja	 $LN117@Createtag

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  001c2	8b c2		 mov	 eax, edx
$LN216@Createtag:

; 207  : 	::operator delete(_Ptr, _Bytes);

  001c4	51		 push	 ecx
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001cb	83 c4 08	 add	 esp, 8
$LN217@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  001ce	c7 47 f8 00 00
	00 00		 mov	 DWORD PTR [edi-8], 0

; 2467 : 		if (this != _STD addressof(_Right))

  001d5	8d 4d d4	 lea	 ecx, DWORD PTR _sTmp$2[ebp]

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  001d8	c7 47 fc 0f 00
	00 00		 mov	 DWORD PTR [edi-4], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001df	c6 47 e8 00	 mov	 BYTE PTR [edi-24], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1549 : 		--this->_Mylast();

  001e3	83 46 1c e8	 add	 DWORD PTR [esi+28], -24	; ffffffe8H
  001e7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 1792 : 		return (this->_Mylast()[-1]);

  001ea	83 c0 e8	 add	 eax, -24		; ffffffe8H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  001ed	3b c8		 cmp	 ecx, eax
  001ef	74 15		 je	 SHORT $LN249@Createtag

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001f1	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  001f5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 1815 : 		if (_Large_string_engaged())

  001f8	72 02		 jb	 SHORT $LN319@Createtag
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  001fa	8b 00		 mov	 eax, DWORD PTR [eax]
$LN319@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  001fc	51		 push	 ecx
  001fd	50		 push	 eax
  001fe	8d 4d d4	 lea	 ecx, DWORD PTR _sTmp$2[ebp]
  00201	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN249@Createtag:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00206	83 7d e8 10	 cmp	 DWORD PTR _sTmp$2[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0020a	8d 45 d4	 lea	 eax, DWORD PTR _sTmp$2[ebp]

; 1815 : 		if (_Large_string_engaged())

  0020d	0f 43 45 d4	 cmovae	 eax, DWORD PTR _sTmp$2[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 71   :         Write(__LINE__, "\"%s\"", sTmp.c_str());

  00211	50		 push	 eax
  00212	68 00 00 00 00	 push	 OFFSET ??_C@_04OEDFLLKD@?$CC?$CFs?$CC@
  00217	6a 47		 push	 71			; 00000047H
  00219	56		 push	 esi
  0021a	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1548 : 		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));

  0021f	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 71   :         Write(__LINE__, "\"%s\"", sTmp.c_str());

  00222	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00225	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  00228	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0022b	72 2c		 jb	 SHORT $LN399@Createtag

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  0022d	8b 47 e8	 mov	 eax, DWORD PTR [edi-24]

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00230	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00231	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00237	72 16		 jb	 SHORT $LN398@Createtag

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00239	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0023c	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0023f	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00241	83 c0 fc	 add	 eax, -4			; fffffffcH
  00244	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00247	0f 87 64 01 00
	00		 ja	 $LN117@Createtag

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0024d	8b c2		 mov	 eax, edx
$LN398@Createtag:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0024f	51		 push	 ecx
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00256	83 c4 08	 add	 esp, 8
$LN399@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00259	c7 47 f8 00 00
	00 00		 mov	 DWORD PTR [edi-8], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00260	c7 47 fc 0f 00
	00 00		 mov	 DWORD PTR [edi-4], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00267	c6 47 e8 00	 mov	 BYTE PTR [edi-24], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1549 : 		--this->_Mylast();

  0026b	83 46 1c e8	 add	 DWORD PTR [esi+28], -24	; ffffffe8H
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 73   :     }

  0026f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00273	8b 55 e8	 mov	 edx, DWORD PTR _sTmp$2[ebp+20]
  00276	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00279	72 2c		 jb	 SHORT $LN464@Createtag
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0027b	8b 4d d4	 mov	 ecx, DWORD PTR _sTmp$2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0027e	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0027f	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00281	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00287	72 14		 jb	 SHORT $LN463@Createtag

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00289	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0028c	83 c2 23	 add	 edx, 35			; 00000023H
  0028f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00291	83 c0 fc	 add	 eax, -4			; fffffffcH
  00294	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00297	0f 87 14 01 00
	00		 ja	 $LN117@Createtag
$LN463@Createtag:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0029d	52		 push	 edx
  0029e	51		 push	 ecx
  0029f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002a4	83 c4 08	 add	 esp, 8
$LN464@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  002a7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002ae	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _sTmp$2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002b5	c6 45 d4 00	 mov	 BYTE PTR _sTmp$2[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 65   :     while (0 < vectAttrData.size() / 2)

  002b9	e9 e4 fd ff ff	 jmp	 $LN725@Createtag
$LN6@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  002be	51		 push	 ecx
  002bf	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  002c2	8b d7		 mov	 edx, edi
  002c4	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1592 : 		this->_Mylast() = this->_Myfirst();

  002c9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  002cc	83 c4 04	 add	 esp, 4

; 1592 : 		this->_Mylast() = this->_Myfirst();

  002cf	89 46 1c	 mov	 DWORD PTR [esi+28], eax
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 76   :     Write(__LINE__, ">");

  002d2	68 00 00 00 00	 push	 OFFSET ??_C@_01PPODPGHN@?$DO@
  002d7	6a 4c		 push	 76			; 0000004cH
  002d9	56		 push	 esi
  002da	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  002df	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 76   :     Write(__LINE__, ">");

  002e2	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  002e5	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  002e8	40		 inc	 eax
  002e9	3b c8		 cmp	 ecx, eax
  002eb	77 0c		 ja	 SHORT $LN521@Createtag
  002ed	51		 push	 ecx
  002ee	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  002f1	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
  002f6	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
$LN521@Createtag:
  002f9	49		 dec	 ecx
  002fa	23 4e 38	 and	 ecx, DWORD PTR [esi+56]
  002fd	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00300	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00303	03 c1		 add	 eax, ecx

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00305	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00308	49		 dec	 ecx
  00309	23 c8		 and	 ecx, eax

; 1487 : 		_PUSH_BACK_BEGIN;

  0030b	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00312	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00315	89 45 b8	 mov	 DWORD PTR tv1986[ebp], eax
  00318	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  0031c	75 18		 jne	 SHORT $LN522@Createtag
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0031e	6a 18		 push	 24			; 00000018H
  00320	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  00325	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00328	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  0032b	8b 55 b8	 mov	 edx, DWORD PTR tv1986[ebp]
  0032e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
  00331	8b c2		 mov	 eax, edx
  00333	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
$LN522@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00336	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00339	8d 55 bc	 lea	 edx, DWORD PTR _tag$[ebp]
  0033c	52		 push	 edx
  0033d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1490 : 		_PUSH_BACK_END;

  00342	ff 46 3c	 inc	 DWORD PTR [esi+60]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 78   :     iLevel++;

  00345	ff 46 28	 inc	 DWORD PTR [esi+40]

; 79   : }

  00348	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0034f	8b 55 d0	 mov	 edx, DWORD PTR _tag$[ebp+20]
  00352	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00355	72 28		 jb	 SHORT $LN698@Createtag
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00357	8b 4d bc	 mov	 ecx, DWORD PTR _tag$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0035a	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0035b	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0035d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00363	72 10		 jb	 SHORT $LN697@Createtag

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00365	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00368	83 c2 23	 add	 edx, 35			; 00000023H
  0036b	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00370	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00373	77 3c		 ja	 SHORT $LN117@Createtag
$LN697@Createtag:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00375	52		 push	 edx
  00376	51		 push	 ecx
  00377	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0037c	83 c4 08	 add	 esp, 8
$LN698@Createtag:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0037f	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _tag$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00386	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR _tag$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0038d	c6 45 bc 00	 mov	 BYTE PTR _tag$[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 79   : }

  00391	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00394	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0039b	59		 pop	 ecx
  0039c	5f		 pop	 edi
  0039d	5e		 pop	 esi
  0039e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a1	33 cd		 xor	 ecx, ebp
  003a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	8b e3		 mov	 esp, ebx
  003ad	5b		 pop	 ebx
  003ae	c2 04 00	 ret	 4
$LN117@Createtag:
  003b1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN723@Createtag:
  003b6	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _tag$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _sTmp$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Createtag@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; xmlwriter::Createtag
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
?CloseLasttag@xmlwriter@@QAEXXZ PROC			; xmlwriter::CloseLasttag
; _this$ = ecx

; 82   : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 83   :     Write(__LINE__, "\n");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00008	8b f9		 mov	 edi, ecx
  0000a	6a 53		 push	 83			; 00000053H
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 84   :     iLevel--;

  00012	ff 4f 28	 dec	 DWORD PTR [edi+40]

; 85   : 
; 86   :     //Indent properly
; 87   :     for (int iTmp = 0; iTmp < iLevel; iTmp++)

  00015	33 f6		 xor	 esi, esi
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	39 77 28	 cmp	 DWORD PTR [edi+40], esi
  0001d	7e 17		 jle	 SHORT $LN3@CloseLastt
  0001f	90		 npad	 1
$LL4@CloseLastt:

; 88   :         Write(__LINE__, "\t");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  00025	6a 58		 push	 88			; 00000058H
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0002d	46		 inc	 esi
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	3b 77 28	 cmp	 esi, DWORD PTR [edi+40]
  00034	7c ea		 jl	 SHORT $LL4@CloseLastt
$LN3@CloseLastt:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00036	8b 57 3c	 mov	 edx, DWORD PTR [edi+60]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00039	33 c0		 xor	 eax, eax

; 170  : 			_Myproxy = _Parent_proxy;

  0003b	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  0003e	4a		 dec	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0003f	85 c9		 test	 ecx, ecx
  00041	74 08		 je	 SHORT $LN57@CloseLastt

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00043	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 148  : 		if (_Parent == nullptr)

  00045	85 c9		 test	 ecx, ecx
  00047	74 02		 je	 SHORT $LN57@CloseLastt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN57@CloseLastt:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 571  : 		this->_Myoff += _Off;

  0004b	03 57 38	 add	 edx, DWORD PTR [edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0004e	85 c0		 test	 eax, eax

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00050	74 10		 je	 SHORT $LN126@CloseLastt

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00052	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  00054	85 c0		 test	 eax, eax
  00056	74 0a		 je	 SHORT $LN126@CloseLastt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  00058	8b 00		 mov	 eax, DWORD PTR [eax]

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  0005a	85 c0		 test	 eax, eax
  0005c	74 04		 je	 SHORT $LN126@CloseLastt
  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
  00060	eb 02		 jmp	 SHORT $LN91@CloseLastt
$LN126@CloseLastt:
  00062	33 c0		 xor	 eax, eax
$LN91@CloseLastt:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00064	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3280 : 		return (this->_Get_data()._Myptr());

  00067	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0006a	49		 dec	 ecx
  0006b	23 ca		 and	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3280 : 		return (this->_Get_data()._Myptr());

  0006d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00070	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00074	72 02		 jb	 SHORT $LN113@CloseLastt
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00076	8b 00		 mov	 eax, DWORD PTR [eax]
$LN113@CloseLastt:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 90   :     Write(__LINE__, "</%s>", sTagStack.top().c_str());

  00078	50		 push	 eax
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO@
  0007e	6a 5a		 push	 90			; 0000005aH
  00080	57		 push	 edi
  00081	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00086	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 125  : 		c.pop_back();

  00089	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  0008c	e8 00 00 00 00	 call	 ?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 93   : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	59		 pop	 ecx
  00094	c3		 ret	 0
?CloseLasttag@xmlwriter@@QAEXXZ ENDP			; xmlwriter::CloseLasttag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
?CloseAlltags@xmlwriter@@QAEXXZ PROC			; xmlwriter::CloseAlltags
; _this$ = ecx

; 96   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 97   :     while (sTagStack.size() != 0)

  00003	83 7f 3c 00	 cmp	 DWORD PTR [edi+60], 0
  00007	0f 84 a2 00 00
	00		 je	 $LN3@CloseAllta
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	90		 npad	 1
$LL2@CloseAllta:

; 98   :     {
; 99   :         Write(__LINE__, "\n");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00015	6a 63		 push	 99			; 00000063H
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 100  :         iLevel--;

  0001d	ff 4f 28	 dec	 DWORD PTR [edi+40]

; 101  : 
; 102  :         //Indent properly
; 103  :         for (int iTmp = 0; iTmp < iLevel; iTmp++)

  00020	33 f6		 xor	 esi, esi
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	39 77 28	 cmp	 DWORD PTR [edi+40], esi
  00028	7e 1c		 jle	 SHORT $LN145@CloseAllta
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL6@CloseAllta:

; 104  :             Write(__LINE__, "\t");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  00035	6a 68		 push	 104			; 00000068H
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0003d	46		 inc	 esi
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	3b 77 28	 cmp	 esi, DWORD PTR [edi+40]
  00044	7c ea		 jl	 SHORT $LL6@CloseAllta
$LN145@CloseAllta:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00046	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00049	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  0004b	03 4f 3c	 add	 ecx, DWORD PTR [edi+60]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 170  : 			_Myproxy = _Parent_proxy;

  0004e	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00051	85 d2		 test	 edx, edx

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00053	74 08		 je	 SHORT $LN69@CloseAllta

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00055	8b 12		 mov	 edx, DWORD PTR [edx]

; 148  : 		if (_Parent == nullptr)

  00057	85 d2		 test	 edx, edx
  00059	74 02		 je	 SHORT $LN69@CloseAllta

; 170  : 			_Myproxy = _Parent_proxy;

  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
$LN69@CloseAllta:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 571  : 		this->_Myoff += _Off;

  0005d	8d 51 ff	 lea	 edx, DWORD PTR [ecx-1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00060	85 c0		 test	 eax, eax

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00062	74 10		 je	 SHORT $LN144@CloseAllta

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00064	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  00066	85 c0		 test	 eax, eax
  00068	74 0a		 je	 SHORT $LN144@CloseAllta

; 170  : 			_Myproxy = _Parent_proxy;

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN144@CloseAllta
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN103@CloseAllta
$LN144@CloseAllta:
  00074	33 c0		 xor	 eax, eax
$LN103@CloseAllta:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00076	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3280 : 		return (this->_Get_data()._Myptr());

  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0007c	49		 dec	 ecx
  0007d	23 ca		 and	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3280 : 		return (this->_Get_data()._Myptr());

  0007f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00082	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00086	72 02		 jb	 SHORT $LN125@CloseAllta
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN125@CloseAllta:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 106  :         Write(__LINE__, "</%s>", sTagStack.top().c_str());

  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO@
  00090	6a 6a		 push	 106			; 0000006aH
  00092	57		 push	 edi
  00093	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00098	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 125  : 		c.pop_back();

  0009b	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  0009e	e8 00 00 00 00	 call	 ?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 97   :     while (sTagStack.size() != 0)

  000a3	83 7f 3c 00	 cmp	 DWORD PTR [edi+60], 0
  000a7	0f 85 63 ff ff
	ff		 jne	 $LL2@CloseAllta
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
$LN3@CloseAllta:
  000af	5f		 pop	 edi

; 107  :         sTagStack.pop();//pop out the last tag
; 108  :     }
; 109  :     return;
; 110  : }

  000b0	c3		 ret	 0
?CloseAlltags@xmlwriter@@QAEXXZ ENDP			; xmlwriter::CloseAlltags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
_sComment$ = 8						; size = 4
?AddComment@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; xmlwriter::AddComment
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 150  :     Write(__LINE__, "\n");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0000b	8b f9		 mov	 edi, ecx
  0000d	68 96 00 00 00	 push	 150			; 00000096H
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 151  : 
; 152  :     //Indent properly
; 153  :     for (int iTmp = 0; iTmp < iLevel; iTmp++)

  00018	33 f6		 xor	 esi, esi
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	39 77 28	 cmp	 DWORD PTR [edi+40], esi
  00020	7e 19		 jle	 SHORT $LN3@AddComment
$LL4@AddComment:

; 154  :         Write(__LINE__, "\t");

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  00027	68 9a 00 00 00	 push	 154			; 0000009aH
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00032	46		 inc	 esi
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	3b 77 28	 cmp	 esi, DWORD PTR [edi+40]
  00039	7c e7		 jl	 SHORT $LL4@AddComment
$LN3@AddComment:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _sComment$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0003e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00042	72 02		 jb	 SHORT $LN13@AddComment
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00044	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@AddComment:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 156  :     Write(__LINE__, "<!-- %s -->", sComment.c_str());

  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO@
  0004c	68 9c 00 00 00	 push	 156			; 0000009cH
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00057	83 c4 10	 add	 esp, 16			; 00000010H

; 157  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	59		 pop	 ecx
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?AddComment@xmlwriter@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; xmlwriter::AddComment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Locale$dead$ = 8					; size = 4
__ArgList$ = 12						; size = 4
__vfprintf_l PROC					; COMDAT
; __Stream$ = ecx
; __Format$ = edx

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00006	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00009	6a 00		 push	 0
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00012	ff 70 04	 push	 DWORD PTR [eax+4]
  00015	ff 30		 push	 DWORD PTR [eax]
  00017	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001c	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vfprintf
_TEXT	SEGMENT
__ArgList$ = 8						; size = 4
_vfprintf PROC						; COMDAT
; __Stream$ = ecx
; __Format$ = edx

; 656  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 657  :         return _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00004	ff 75 08	 push	 DWORD PTR __ArgList$[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 __vfprintf_l
  0000d	83 c4 08	 add	 esp, 8

; 658  :     }

  00010	59		 pop	 ecx
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_vfprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 70   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 82   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 110  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN13@Iterator_b

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN13@Iterator_b

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Iterator_b:

; 115  : 		*this = _Right;
; 116  : 		}

  00023	8b c1		 mov	 eax, ecx
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 119  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	74 0e		 je	 SHORT $LN10@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)

  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN10@operator

; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN10@operator

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 01		 mov	 DWORD PTR [ecx], eax
$LN10@operator:

; 132  : 				}
; 133  : 			}
; 134  : 
; 135  : 		return (*this);
; 136  : 		}

  0001a	8b c1		 mov	 eax, ecx
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$dead$ = ecx

; 140  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 141  : 		_Lockit _Lock(_LOCK_DEBUG);
; 142  : 		_Orphan_me();
; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00000	c3		 ret	 0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 147  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  : 		if (_Parent == nullptr)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN3@Adopt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@Adopt:

; 171  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 172  : 			}
; 173  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 01		 jne	 SHORT $LN3@Getcont

; 183  : 		}

  00006	c3		 ret	 0
$LN3@Getcont:

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00007	8b 00		 mov	 eax, DWORD PTR [eax]

; 183  : 		}

  00009	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)
; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);
; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)
; 222  : 			(*_Pnext)->_Myproxy = nullptr;
; 223  : 		_Myproxy->_Myfirstiter = nullptr;
; 224  : 		}
; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00031	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1192 : 		{	// destroy the deque

  00034	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1377 : 		return (this->_Mysize() == 0);

  0003b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003e	85 c9		 test	 ecx, ecx

; 1871 : 		while (!empty())

  00040	74 6a		 je	 SHORT $LN308@stack
$LL8@stack:

; 1514 : 		size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;

  00042	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00045	48		 dec	 eax
  00046	03 c1		 add	 eax, ecx

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00048	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004b	49		 dec	 ecx
  0004c	23 c8		 and	 ecx, eax

; 1516 : 		_Alty_traits::destroy(this->_Getal(),

  0004e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00051	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00054	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00057	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0005a	72 2b		 jb	 SHORT $LN112@stack

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  0005c	8b 07		 mov	 eax, DWORD PTR [edi]

; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0005e	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0005f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00065	72 16		 jb	 SHORT $LN111@stack

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00067	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006a	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006d	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00072	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00075	0f 87 bf 00 00
	00		 ja	 $LN108@stack

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0007b	8b c2		 mov	 eax, edx
$LN111@stack:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0007d	51		 push	 ecx
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00084	83 c4 08	 add	 esp, 8
$LN112@stack:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00087	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0008e	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00095	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1518 : 		if (--this->_Mysize() == 0)

  00098	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  0009c	75 07		 jne	 SHORT $LN307@stack

; 1519 : 			{
; 1520 : 			this->_Myoff() = 0;

  0009e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN307@stack:

; 1377 : 		return (this->_Mysize() == 0);

  000a5	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000a8	85 c9		 test	 ecx, ecx

; 1871 : 		while (!empty())

  000aa	75 96		 jne	 SHORT $LL8@stack
$LN308@stack:

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  000ac	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  000af	85 ff		 test	 edi, edi
  000b1	74 1a		 je	 SHORT $LN11@stack
$LL10@stack:

; 1877 : 			{	// free storage for a block and destroy pointer
; 1878 : 			if (this->_Map()[--_Block] != pointer())

  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	4f		 dec	 edi
  000b7	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000ba	85 c0		 test	 eax, eax
  000bc	74 0b		 je	 SHORT $LN179@stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  000be	6a 18		 push	 24			; 00000018H
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c6	83 c4 08	 add	 esp, 8
$LN179@stack:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  000c9	85 ff		 test	 edi, edi
  000cb	75 e6		 jne	 SHORT $LL10@stack
$LN11@stack:

; 1879 : 				{	// free block and destroy its pointer
; 1880 : 				this->_Getal().deallocate(this->_Map()[_Block], _DEQUESIZ);
; 1881 : 				_Alpty_traits::destroy(_Almap, _STD addressof(this->_Map()[_Block]));
; 1882 : 				}
; 1883 : 			}
; 1884 : 
; 1885 : 		if (this->_Map() != _Mapptr())

  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	85 c9		 test	 ecx, ecx
  000d2	74 2e		 je	 SHORT $LN224@stack

; 1886 : 			{
; 1887 : 			_Almap.deallocate(this->_Map(), this->_Mapsize());	// free storage for map

  000d4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d7	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000de	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000e4	72 12		 jb	 SHORT $LN223@stack

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000e6	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  000e9	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ec	2b cf		 sub	 ecx, edi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ee	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000f1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f4	77 44		 ja	 SHORT $LN108@stack

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000f6	8b cf		 mov	 ecx, edi
$LN223@stack:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000f8	52		 push	 edx
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ff	83 c4 08	 add	 esp, 8
$LN224@stack:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1890 : 		this->_Mapsize() = 0;

  00102	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1891 : 		this->_Map() = _Mapptr();

  00109	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1194 : 		}

  00110	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00117	6a 08		 push	 8
  00119	ff 36		 push	 DWORD PTR [esi]
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00120	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 798  : 		_Myproxy() = nullptr;

  00123	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00129	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00133	59		 pop	 ecx
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
$LN108@stack:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN310@stack:
  0013f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__ehhandler$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -48				; size = 4
$T2 = -44						; size = 4
_temp$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_sTemp$ = 12						; size = 4
?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z PROC ; xmlwriter::validateTagName
; _this$dead$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8b 75 0c	 mov	 esi, DWORD PTR _sTemp$[ebp]
  00030	89 7d d0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00033	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0003a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp+16], 0

; 1785 : 		_Myres(0)

  00041	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp+20], 0

; 3976 : 		_My_data._Mysize = 0;

  00048	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0004f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _temp$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00056	c6 45 d8 00	 mov	 BYTE PTR _temp$[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 161  :     std::string temp;

  0005a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00061	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00063	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00066	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00069	72 02		 jb	 SHORT $LN180@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0006b	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN180@validateTa:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 164  :     if ((sTemp[0] >= 0x41 && sTemp[0] <= 0x5A) ||

  0006d	80 39 41	 cmp	 BYTE PTR [ecx], 65	; 00000041H
  00070	7c 0e		 jl	 SHORT $LN5@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00072	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00074	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00077	72 02		 jb	 SHORT $LN181@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00079	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN181@validateTa:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 164  :     if ((sTemp[0] >= 0x41 && sTemp[0] <= 0x5A) ||

  0007b	80 39 5a	 cmp	 BYTE PTR [ecx], 90	; 0000005aH
  0007e	7e 1c		 jle	 SHORT $LN4@validateTa
$LN5@validateTa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00080	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00082	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00085	72 02		 jb	 SHORT $LN182@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00087	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN182@validateTa:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 164  :     if ((sTemp[0] >= 0x41 && sTemp[0] <= 0x5A) ||

  00089	80 39 61	 cmp	 BYTE PTR [ecx], 97	; 00000061H
  0008c	7c 2b		 jl	 SHORT $LN2@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0008e	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00090	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00093	72 02		 jb	 SHORT $LN183@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00095	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN183@validateTa:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 164  :     if ((sTemp[0] >= 0x41 && sTemp[0] <= 0x5A) ||

  00097	80 39 7a	 cmp	 BYTE PTR [ecx], 122	; 0000007aH
  0009a	7f 1d		 jg	 SHORT $LN2@validateTa
$LN4@validateTa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  0009c	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  0009f	3b ce		 cmp	 ecx, esi
  000a1	74 2e		 je	 SHORT $LN3@validateTa

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  000a3	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000a6	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  000a9	72 02		 jb	 SHORT $LN107@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000ab	8b 36		 mov	 esi, DWORD PTR [esi]
$LN107@validateTa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  000ad	51		 push	 ecx
  000ae	56		 push	 esi
  000af	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  000b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 169  :     else

  000b7	eb 18		 jmp	 SHORT $LN3@validateTa
$LN2@validateTa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000b9	6a 02		 push	 2
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_02HEIIMGGB@a_@
  000c0	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  000c3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 172  :         temp.append(sTemp);

  000c8	56		 push	 esi
  000c9	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  000cc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN3@validateTa:

; 174  :     return validateValue(temp);

  000d1	8d 45 d8	 lea	 eax, DWORD PTR _temp$[ebp]
  000d4	50		 push	 eax
  000d5	57		 push	 edi
  000d6	e8 00 00 00 00	 call	 ?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ; xmlwriter::validateValue
  000db	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  000e2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000e6	8b 55 ec	 mov	 edx, DWORD PTR _temp$[ebp+20]
  000e9	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  000ec	72 28		 jb	 SHORT $LN161@validateTa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ee	8b 4d d8	 mov	 ecx, DWORD PTR _temp$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f1	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f2	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000f4	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000fa	72 10		 jb	 SHORT $LN160@validateTa

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000fc	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000ff	83 c2 23	 add	 edx, 35			; 00000023H
  00102	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 3b		 ja	 SHORT $LN187@validateTa
$LN160@validateTa:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0010c	52		 push	 edx
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00113	83 c4 08	 add	 esp, 8
$LN161@validateTa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00116	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0011d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _temp$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00124	c6 45 d8 00	 mov	 BYTE PTR _temp$[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 174  :     return validateValue(temp);

  00128	8b c7		 mov	 eax, edi

; 175  : }

  0012a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00134	59		 pop	 ecx
  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013a	33 cd		 xor	 ecx, ebp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 08 00	 ret	 8
$LN187@validateTa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00147	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN185@validateTa:
  0014c	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _temp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z$1:
  00008	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN9@validateTa
  00014	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d d0	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@validateTa:
  00020	c3		 ret	 0
__ehhandler$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ENDP ; xmlwriter::validateTagName
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -68				; size = 4
$T2 = -64						; size = 4
___$ReturnUdt$GSCopy$1$ = -60				; size = 4
_str$1$ = -56						; size = 4
_newSize$1$ = -52					; size = 4
_validSpecChars$ = -48					; size = 30
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_sTmp$ = 12						; size = 4
?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z PROC ; xmlwriter::validateValue
; _this$dead$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 75 0c	 mov	 esi, DWORD PTR _sTmp$[ebp]
  00035	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00038	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 178  : {

  0003b	89 45 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  0003e	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 179  :     char validSpecChars[] = {
; 180  :         '!',    '@',    '#',    '$',    '%',

  00045	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@2c27225c7c2f5f2d29282a2524234021
  0004c	89 45 c4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  0004f	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 188  :     char * str = new char[sTmp.size() + 1];

  00051	40		 inc	 eax
  00052	c7 45 e0 2e 3b
	3a 5b		 mov	 DWORD PTR _validSpecChars$[ebp+16], 1530542894 ; 5b3a3b2eH
  00059	50		 push	 eax
  0005a	0f 11 45 d0	 movups	 XMMWORD PTR _validSpecChars$[ebp], xmm0
  0005e	c7 45 e4 5d 7b
	7d 3d		 mov	 DWORD PTR _validSpecChars$[ebp+20], 1031633757 ; 3d7d7b5dH
  00065	c7 45 e8 2b 3f
	5e 7e		 mov	 DWORD PTR _validSpecChars$[ebp+24], 2120105771 ; 7e5e3f2bH
  0006c	66 c7 45 ec 20
	00		 mov	 WORD PTR _validSpecChars$[ebp+28], 32 ; 00000020H
  00072	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00077	8b d8		 mov	 ebx, eax
  00079	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 189  :     memset(str, 0x00, sizeof(char)*sTmp.size() + 1);

  0007e	40		 inc	 eax
  0007f	89 5d c8	 mov	 DWORD PTR _str$1$[ebp], ebx
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	53		 push	 ebx
  00086	e8 00 00 00 00	 call	 _memset
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0008e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00092	72 02		 jb	 SHORT $LN38@validateVa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00094	8b 36		 mov	 esi, DWORD PTR [esi]
$LN38@validateVa:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 190  :     strcpy(str, sTmp.c_str());

  00096	8b cb		 mov	 ecx, ebx
  00098	2b ce		 sub	 ecx, esi
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL16@validateVa:
  000a0	8a 06		 mov	 al, BYTE PTR [esi]
  000a2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000a5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000a9	84 c0		 test	 al, al
  000ab	75 f3		 jne	 SHORT $LL16@validateVa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  000ad	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 192  :     int newSize = sTmp.size() * 5 + 1;

  000af	8d 1c 85 01 00
	00 00		 lea	 ebx, DWORD PTR [eax*4+1]
  000b6	03 d8		 add	 ebx, eax

; 193  :     char * newStr = new char[newSize];

  000b8	53		 push	 ebx
  000b9	89 5d cc	 mov	 DWORD PTR _newSize$1$[ebp], ebx
  000bc	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000c1	83 c4 04	 add	 esp, 4
  000c4	8b f8		 mov	 edi, eax

; 194  :     memset(newStr, 0x00, sizeof(char)*newSize);

  000c6	53		 push	 ebx
  000c7	6a 00		 push	 0
  000c9	57		 push	 edi
  000ca	e8 00 00 00 00	 call	 _memset

; 195  : 
; 196  :     int i = 0, pos = 0;
; 197  : 
; 198  :     while (str[i] != NULL)

  000cf	8b 4d c8	 mov	 ecx, DWORD PTR _str$1$[ebp]
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	33 f6		 xor	 esi, esi
  000d7	8a 01		 mov	 al, BYTE PTR [ecx]
  000d9	84 c0		 test	 al, al
  000db	74 7b		 je	 SHORT $LN3@validateVa
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  000dd	8b d9		 mov	 ebx, ecx
  000df	90		 npad	 1
$LL2@validateVa:
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 202  :             (str[i] >= 0x61 && str[i] <= 0x7A) ||

  000e0	3c 41		 cmp	 al, 65			; 00000041H
  000e2	7c 04		 jl	 SHORT $LN9@validateVa
  000e4	3c 5a		 cmp	 al, 90			; 0000005aH
  000e6	7e 64		 jle	 SHORT $LN77@validateVa
$LN9@validateVa:
  000e8	3c 61		 cmp	 al, 97			; 00000061H
  000ea	7c 04		 jl	 SHORT $LN10@validateVa
  000ec	3c 7a		 cmp	 al, 122			; 0000007aH
  000ee	7e 5c		 jle	 SHORT $LN77@validateVa
$LN10@validateVa:
  000f0	8d 48 d0	 lea	 ecx, DWORD PTR [eax-48]
  000f3	80 f9 09	 cmp	 cl, 9
  000f6	76 54		 jbe	 SHORT $LN77@validateVa

; 203  :             (str[i] >= 0x30 && str[i] <= 0x39))
; 204  :         {
; 205  :             newStr[pos] = str[i];
; 206  :             pos++;
; 207  :         }
; 208  :         else if (str[i] == '&')

  000f8	3c 26		 cmp	 al, 38			; 00000026H
  000fa	75 1c		 jne	 SHORT $LN11@validateVa

; 209  :         {
; 210  :             pos += _snprintf(&newStr[pos], newSize - pos - 1, "&amp;"); // , str[i]);

  000fc	8b 45 cc	 mov	 eax, DWORD PTR _newSize$1$[ebp]
  000ff	2b c6		 sub	 eax, esi
  00101	48		 dec	 eax
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_05JKJFEODM@?$CGamp?$DL@
  00107	50		 push	 eax
  00108	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 __snprintf
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	03 f0		 add	 esi, eax

; 211  :         }
; 212  :         //else if(ispunct(str[i]) && str[i]!=0x60)
; 213  :         //{
; 214  :         //    newStr[pos] = str[i];
; 215  :         //    pos++;
; 216  :         //}
; 217  :         //else
; 218  :         //{
; 219  :         //    pos += _snprintf(&newStr[pos],newSize-pos-1,"&#%d;",str[i]);
; 220  :         //}
; 221  :         else

  00116	eb 38		 jmp	 SHORT $LN14@validateVa
$LN11@validateVa:
  00118	b1 21		 mov	 cl, 33			; 00000021H

; 222  :         {
; 223  :             int x = 0;

  0011a	8d 55 d0	 lea	 edx, DWORD PTR _validSpecChars$[ebp]
  0011d	0f 1f 00	 npad	 3
$LL4@validateVa:

; 224  :             bool found = false;
; 225  :             while (validSpecChars[x] != 0x00)
; 226  :             {
; 227  :                 if (str[i] == validSpecChars[x])

  00120	3a c1		 cmp	 al, cl
  00122	74 28		 je	 SHORT $LN77@validateVa

; 228  :                 {
; 229  :                     newStr[pos] = str[i];
; 230  :                     pos++;
; 231  :                     found = true;
; 232  :                     break;
; 233  :                 }
; 234  :                 x++;

  00124	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  00127	42		 inc	 edx
  00128	84 c9		 test	 cl, cl
  0012a	75 f4		 jne	 SHORT $LL4@validateVa

; 235  :             }
; 236  : 
; 237  :             if (!found)
; 238  :             {
; 239  :                 pos += _snprintf(&newStr[pos], newSize - pos - 1, "&#%d;", str[i]);

  0012c	0f be c0	 movsx	 eax, al
  0012f	50		 push	 eax
  00130	8b 45 cc	 mov	 eax, DWORD PTR _newSize$1$[ebp]
  00133	2b c6		 sub	 eax, esi
  00135	48		 dec	 eax
  00136	68 00 00 00 00	 push	 OFFSET ??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL@
  0013b	50		 push	 eax
  0013c	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 __snprintf
  00145	83 c4 10	 add	 esp, 16			; 00000010H
  00148	03 f0		 add	 esi, eax
  0014a	eb 04		 jmp	 SHORT $LN14@validateVa
$LN77@validateVa:

; 240  :             }
; 241  :         }
; 242  :         i++;

  0014c	88 04 3e	 mov	 BYTE PTR [esi+edi], al
  0014f	46		 inc	 esi
$LN14@validateVa:
  00150	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  00153	43		 inc	 ebx
  00154	84 c0		 test	 al, al
  00156	75 88		 jne	 SHORT $LL2@validateVa
$LN3@validateVa:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00158	8b 5d c4	 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0015b	8b cf		 mov	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0015d	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00164	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00167	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0016e	c6 03 00	 mov	 BYTE PTR [ebx], 0
$LL87@validateVa:

; 462  : 		return (__builtin_strlen(_First));

  00171	8a 01		 mov	 al, BYTE PTR [ecx]
  00173	41		 inc	 ecx
  00174	84 c0		 test	 al, al
  00176	75 f9		 jne	 SHORT $LL87@validateVa
  00178	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0017a	51		 push	 ecx
  0017b	57		 push	 edi
  0017c	8b cb		 mov	 ecx, ebx
  0017e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 250  :     return temp;

  00183	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0018a	ff 75 c8	 push	 DWORD PTR _str$1$[ebp]
  0018d	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00194	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00199	83 c4 04	 add	 esp, 4
  0019c	57		 push	 edi
  0019d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001a2	83 c4 04	 add	 esp, 4
  001a5	8b c3		 mov	 eax, ebx

; 251  : }

  001a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b1	59		 pop	 ecx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b8	33 cd		 xor	 ecx, ebp
  001ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z$0:
  00000	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN18@validateVa
  0000c	83 65 c0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d bc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN18@validateVa:
  00018	c3		 ret	 0
__ehhandler$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@@Z ENDP ; xmlwriter::validateValue
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp
_TEXT	SEGMENT
_message$1 = -5060					; size = 3000
_buffer$ = -2060					; size = 2048
__$ArrayPad$ = -8					; size = 4
_this$ = 8						; size = 4
_id$ = 12						; size = 4
_format$ = 16						; size = 4
?Write@xmlwriter@@AAAXHPBDZZ PROC			; xmlwriter::Write

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 c8 13 00 00	 mov	 eax, 5064		; 000013c8H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]

; 255  :     char buffer[2048] = { 0 };

  0001b	8d 85 f4 f7 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	68 00 08 00 00	 push	 2048			; 00000800H
  00026	6a 00		 push	 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset

; 256  :     va_list	argptr;
; 257  : 
; 258  :     //Format the message to be logged
; 259  :     va_start(argptr, format);
; 260  :     if (fp)

  0002e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c9		 test	 ecx, ecx
  00036	74 10		 je	 SHORT $LN2@Write
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 657  :         return _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00038	8b 55 10	 mov	 edx, DWORD PTR _format$[ebp]
  0003b	8d 45 14	 lea	 eax, DWORD PTR _format$[ebp+4]
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 __vfprintf_l
  00045	83 c4 08	 add	 esp, 8
$LN2@Write:

; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00048	8d 45 14	 lea	 eax, DWORD PTR _format$[ebp+4]
  0004b	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  00050	50		 push	 eax
  00051	51		 push	 ecx
  00052	ff 75 10	 push	 DWORD PTR _format$[ebp]
  00055	8d 8d f4 f7 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0005b	e8 00 00 00 00	 call	 __vsnprintf_l
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\giulif\downloads\study\git\sysstatus\xmlwriter.cpp

; 266  :     if (_vsnprintf(buffer, sizeof(buffer) - 1, format, argptr) > 2)    //do not write CR/LF

  00063	83 f8 02	 cmp	 eax, 2
  00066	7e 4e		 jle	 SHORT $LN3@Write

; 267  :     {
; 268  :         char message[3000] = { 0 };

  00068	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  0006d	8d 85 3c ec ff
	ff		 lea	 eax, DWORD PTR _message$1[ebp]
  00073	6a 00		 push	 0
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _memset
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 269  :         _snprintf(message, sizeof(message), "TID %.5u ID %.5i -- XmlWritter: %s\r\n", GetCurrentThreadId(), id, buffer);

  0007e	8d 85 f4 f7 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00084	50		 push	 eax
  00085	ff 75 0c	 push	 DWORD PTR _id$[ebp]
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EFJHEPJ@TID?5?$CF?45u?5ID?5?$CF?45i?5?9?9?5XmlWritter?3@
  00094	8d 85 3c ec ff
	ff		 lea	 eax, DWORD PTR _message$1[ebp]
  0009a	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 __snprintf

; 270  :         (*pDebug)(message, 0/*LOG_NONE*/);

  000a5	8d 85 3c ec ff
	ff		 lea	 eax, DWORD PTR _message$1[ebp]
  000ab	6a 00		 push	 0
  000ad	50		 push	 eax
  000ae	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000b1	ff d0		 call	 eax
  000b3	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@Write:

; 271  :     }
; 272  :     va_end(argptr);
; 273  : }

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	33 cd		 xor	 ecx, ebp
  000bb	5e		 pop	 esi
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
?Write@xmlwriter@@AAAXHPBDZZ ENDP			; xmlwriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back, COMDAT
; _this$ = ecx

; 1788 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1789 : 		_STL_VERIFY(!empty(), "back() called on empty vector");
; 1790 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1791 : 
; 1792 : 		return (this->_Mylast()[-1]);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e8 18	 sub	 eax, 24			; 00000018H

; 1793 : 		}

  00006	c3		 ret	 0
?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back, COMDAT
; _this$ = ecx

; 1542 : 		{	// erase element at end

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1543 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1544 : 		_STL_VERIFY(!empty(), "vector empty before pop");
; 1545 : 		_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1546 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1547 : 
; 1548 : 		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00007	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  0000a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0000d	72 28		 jb	 SHORT $LN62@pop_back
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 46 e8	 mov	 eax, DWORD PTR [esi-24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00012	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00013	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00019	72 12		 jb	 SHORT $LN61@pop_back

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001e	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00021	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00023	83 c0 fc	 add	 eax, -4			; fffffffcH
  00026	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00029	77 25		 ja	 SHORT $LN58@pop_back

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN61@pop_back:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN62@pop_back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00037	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003e	c7 46 fc 0f 00
	00 00		 mov	 DWORD PTR [esi-4], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00045	c6 46 e8 00	 mov	 BYTE PTR [esi-24], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1549 : 		--this->_Mylast();

  00049	83 47 04 e8	 add	 DWORD PTR [edi+4], -24	; ffffffe8H
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 1550 : 		}

  0004f	c3		 ret	 0
$LN58@pop_back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@pop_back:
  00055	cc		 int	 3
?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
;	COMDAT ?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::pop, COMDAT
; _this$ = ecx

; 125  : 		c.pop_back();

  00000	e9 00 00 00 00	 jmp	 ?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
;	COMDAT ?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::push, COMDAT
; _this$ = ecx

; 119  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000d	40		 inc	 eax
  0000e	3b c8		 cmp	 ecx, eax
  00010	77 0b		 ja	 SHORT $LN4@push
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
  0001a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN4@push:
  0001d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00020	21 46 0c	 and	 DWORD PTR [esi+12], eax
  00023	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00026	03 4e 0c	 add	 ecx, DWORD PTR [esi+12]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	48		 dec	 eax
  0002d	23 c8		 and	 ecx, eax

; 1487 : 		_PUSH_BACK_BEGIN;

  0002f	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  00036	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00039	83 3c 39 00	 cmp	 DWORD PTR [ecx+edi], 0
  0003d	75 13		 jne	 SHORT $LN5@push
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0003f	6a 18		 push	 24			; 00000018H
  00041	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  00046	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00049	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  0004c	89 04 17	 mov	 DWORD PTR [edi+edx], eax
  0004f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN5@push:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00052	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00055	8b 0c 0f	 mov	 ecx, DWORD PTR [edi+ecx]
  00058	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1490 : 		_PUSH_BACK_END;

  0005d	ff 46 10	 inc	 DWORD PTR [esi+16]
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 121  : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
;	COMDAT ?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::top, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00003	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00005	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 170  : 			_Myproxy = _Parent_proxy;

  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0000a	85 c9		 test	 ecx, ecx
  0000c	74 08		 je	 SHORT $LN52@top

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0000e	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 148  : 		if (_Parent == nullptr)

  00010	85 c9		 test	 ecx, ecx
  00012	74 02		 je	 SHORT $LN52@top

; 170  : 			_Myproxy = _Parent_proxy;

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN52@top:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 571  : 		this->_Myoff += _Off;

  00016	4a		 dec	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00017	85 c0		 test	 eax, eax

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00019	74 1b		 je	 SHORT $LN102@top

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0001b	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  0001d	85 c0		 test	 eax, eax
  0001f	74 15		 je	 SHORT $LN102@top

; 170  : 			_Myproxy = _Parent_proxy;

  00021	8b 00		 mov	 eax, DWORD PTR [eax]

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00023	85 c0		 test	 eax, eax
  00025	74 0f		 je	 SHORT $LN102@top
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00029	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 110  : 		return (c.back());

  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0002f	49		 dec	 ecx
  00030	23 ca		 and	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 110  : 		return (c.back());

  00032	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 111  : 		}

  00035	c3		 ret	 0
$LN102@top:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00036	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00038	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 110  : 		return (c.back());

  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0003e	49		 dec	 ecx
  0003f	23 ca		 and	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 110  : 		return (c.back());

  00041	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 111  : 		}

  00044	c3		 ret	 0
?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::top
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
;	COMDAT ?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::size, COMDAT
; _this$ = ecx

; 105  : 		return (c.size());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 106  : 		}

  00003	c3		 ret	 0
?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack
;	COMDAT ??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 31   : 		{	// construct with empty container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0002b	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 30   : 		: c()

  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 680  : 		: _Map(),

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 681  : 		_Mapsize(0),

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 682  : 		_Myoff(0),

  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 683  : 		_Mysize(0)

  0004b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00052	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 787  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00057	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00059	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 789  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stack

; 32   : 		}

  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	8b c6		 mov	 eax, esi
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5e		 pop	 esi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$1:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__unwindfunclet$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1192 : 		{	// destroy the deque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1377 : 		return (this->_Mysize() == 0);

  00031	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00034	85 c9		 test	 ecx, ecx

; 1871 : 		while (!empty())

  00036	74 6a		 je	 SHORT $LN304@deque
$LL5@deque:

; 1514 : 		size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;

  00038	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003b	48		 dec	 eax
  0003c	03 c1		 add	 eax, ecx

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0003e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00041	49		 dec	 ecx
  00042	23 c8		 and	 ecx, eax

; 1516 : 		_Alty_traits::destroy(this->_Getal(),

  00044	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00047	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0004a	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0004d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00050	72 2b		 jb	 SHORT $LN109@deque

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  00052	8b 07		 mov	 eax, DWORD PTR [edi]

; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00054	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00055	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005b	72 16		 jb	 SHORT $LN108@deque

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0005d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00060	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00063	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00065	83 c0 fc	 add	 eax, -4			; fffffffcH
  00068	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006b	0f 87 c6 00 00
	00		 ja	 $LN105@deque

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00071	8b c2		 mov	 eax, edx
$LN108@deque:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00073	51		 push	 ecx
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007a	83 c4 08	 add	 esp, 8
$LN109@deque:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0007d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00084	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0008b	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1518 : 		if (--this->_Mysize() == 0)

  0008e	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  00092	75 07		 jne	 SHORT $LN303@deque

; 1519 : 			{
; 1520 : 			this->_Myoff() = 0;

  00094	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN303@deque:

; 1377 : 		return (this->_Mysize() == 0);

  0009b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0009e	85 c9		 test	 ecx, ecx

; 1871 : 		while (!empty())

  000a0	75 96		 jne	 SHORT $LL5@deque
$LN304@deque:

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  000a2	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  000a5	85 ff		 test	 edi, edi
  000a7	74 21		 je	 SHORT $LN8@deque
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@deque:

; 1877 : 			{	// free storage for a block and destroy pointer
; 1878 : 			if (this->_Map()[--_Block] != pointer())

  000b0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b3	4f		 dec	 edi
  000b4	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000b7	85 c0		 test	 eax, eax
  000b9	74 0b		 je	 SHORT $LN176@deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  000bb	6a 18		 push	 24			; 00000018H
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c3	83 c4 08	 add	 esp, 8
$LN176@deque:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  000c6	85 ff		 test	 edi, edi
  000c8	75 e6		 jne	 SHORT $LL7@deque
$LN8@deque:

; 1879 : 				{	// free block and destroy its pointer
; 1880 : 				this->_Getal().deallocate(this->_Map()[_Block], _DEQUESIZ);
; 1881 : 				_Alpty_traits::destroy(_Almap, _STD addressof(this->_Map()[_Block]));
; 1882 : 				}
; 1883 : 			}
; 1884 : 
; 1885 : 		if (this->_Map() != _Mapptr())

  000ca	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000cd	85 c9		 test	 ecx, ecx
  000cf	74 2e		 je	 SHORT $LN221@deque

; 1886 : 			{
; 1887 : 			_Almap.deallocate(this->_Map(), this->_Mapsize());	// free storage for map

  000d1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d4	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000db	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000e1	72 12		 jb	 SHORT $LN220@deque

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000e3	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  000e6	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e9	2b cf		 sub	 ecx, edi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f1	77 44		 ja	 SHORT $LN105@deque

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000f3	8b cf		 mov	 ecx, edi
$LN220@deque:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000f5	52		 push	 edx
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fc	83 c4 08	 add	 esp, 8
$LN221@deque:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1890 : 		this->_Mapsize() = 0;

  000ff	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1891 : 		this->_Map() = _Mapptr();

  00106	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1193 : 		_Tidy();
; 1194 : 		}

  0010d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00114	6a 08		 push	 8
  00116	ff 36		 push	 DWORD PTR [esi]
  00118	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011d	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 798  : 		_Myproxy() = nullptr;

  00120	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1193 : 		_Tidy();
; 1194 : 		}

  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
$LN105@deque:
  00137	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN306@deque:
  0013c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__ehhandler$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 3303 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00004	72 05		 jb	 SHORT $LN14@operator

; 3211 : 		auto& _My_data = this->_Get_data();
; 3212 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 3213 : 		_STL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");
; 3214 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 3215 : 		return (_My_data._Myptr()[_Off]);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3216 : 		}

  00008	c2 04 00	 ret	 4
$LN14@operator:

; 3211 : 		auto& _My_data = this->_Get_data();
; 3212 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 3213 : 		_STL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");
; 3214 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 3215 : 		return (_My_data._Myptr()[_Off]);

  0000b	8b c1		 mov	 eax, ecx

; 3216 : 		}

  0000d	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2625 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2467 : 		if (this != _STD addressof(_Right))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 2625 : 		{	// assign _Right

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 2467 : 		if (this != _STD addressof(_Right))

  00009	3b f0		 cmp	 esi, eax
  0000b	74 14		 je	 SHORT $LN34@assign

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00011	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 1815 : 		if (_Large_string_engaged())

  00014	72 02		 jb	 SHORT $LN28@assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
$LN28@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00018	51		 push	 ecx
  00019	50		 push	 eax
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN34@assign:

; 2626 : 		*this = _Right;
; 2627 : 		return (*this);
; 2628 : 		}

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 744  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00025	6a 08		 push	 8
  00027	ff 36		 push	 DWORD PTR [esi]
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 798  : 		_Myproxy() = nullptr;

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 745  : 		_Free_proxy();
; 746  : 		}

  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5e		 pop	 esi
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1869 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 1377 : 		return (this->_Mysize() == 0);

  00004	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00007	85 c9		 test	 ecx, ecx

; 1870 : 		_Alpty _Almap(this->_Getal());
; 1871 : 		while (!empty())

  00009	74 6f		 je	 SHORT $LN3@Tidy
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@Tidy:

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00010	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00013	48		 dec	 eax
  00014	03 c8		 add	 ecx, eax
  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	48		 dec	 eax
  0001a	23 c8		 and	 ecx, eax

; 1516 : 		_Alty_traits::destroy(this->_Getal(),

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00025	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00028	72 2b		 jb	 SHORT $LN106@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002a	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0002c	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0002d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00033	72 16		 jb	 SHORT $LN105@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00035	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00038	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003b	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00040	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00043	0f 87 94 00 00
	00		 ja	 $LN214@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN105@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN106@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00055	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0005c	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00063	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1518 : 		if (--this->_Mysize() == 0)

  00066	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  0006a	75 07		 jne	 SHORT $LN239@Tidy

; 1519 : 			{
; 1520 : 			this->_Myoff() = 0;

  0006c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN239@Tidy:

; 1377 : 		return (this->_Mysize() == 0);

  00073	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00076	85 c9		 test	 ecx, ecx

; 1870 : 		_Alpty _Almap(this->_Getal());
; 1871 : 		while (!empty())

  00078	75 96		 jne	 SHORT $LL2@Tidy
$LN3@Tidy:

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  0007a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0007d	85 ff		 test	 edi, edi
  0007f	74 1a		 je	 SHORT $LN5@Tidy
$LL4@Tidy:

; 1877 : 			{	// free storage for a block and destroy pointer
; 1878 : 			if (this->_Map()[--_Block] != pointer())

  00081	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00084	4f		 dec	 edi
  00085	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00088	85 c0		 test	 eax, eax
  0008a	74 0b		 je	 SHORT $LN173@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0008c	6a 18		 push	 24			; 00000018H
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00094	83 c4 08	 add	 esp, 8
$LN173@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1876 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

  00097	85 ff		 test	 edi, edi
  00099	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:

; 1879 : 				{	// free block and destroy its pointer
; 1880 : 				this->_Getal().deallocate(this->_Map()[_Block], _DEQUESIZ);
; 1881 : 				_Alpty_traits::destroy(_Almap, _STD addressof(this->_Map()[_Block]));
; 1882 : 				}
; 1883 : 			}
; 1884 : 
; 1885 : 		if (this->_Map() != _Mapptr())

  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	85 c0		 test	 eax, eax
  000a0	74 2a		 je	 SHORT $LN218@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a5	c1 e1 02	 shl	 ecx, 2

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ae	72 12		 jb	 SHORT $LN217@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000b0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b3	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b6	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000be	77 1d		 ja	 SHORT $LN214@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000c0	8b c2		 mov	 eax, edx
$LN217@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000c2	51		 push	 ecx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c9	83 c4 08	 add	 esp, 8
$LN218@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1891 : 		this->_Map() = _Mapptr();

  000cc	5f		 pop	 edi
  000cd	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000d4	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000db	5e		 pop	 esi

; 1892 : 		}

  000dc	c3		 ret	 0
$LN214@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000dd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN240@Tidy:
  000e2	cc		 int	 3
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back, COMDAT
; _this$ = ecx

; 1494 : 		{	// erase element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00004	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00007	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0000a	48		 dec	 eax
  0000b	03 d0		 add	 edx, eax
  0000d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00010	48		 dec	 eax
  00011	23 d0		 and	 edx, eax

; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			{
; 1498 : 			_STL_REPORT_ERROR("deque empty before pop");
; 1499 : 			}
; 1500 : 		else
; 1501 : 			{	// something to erase, do it
; 1502 : 			size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;
; 1503 : 			_Orphan_off(_Newoff);
; 1504 : 			size_type _Block = this->_Getblock(_Newoff);
; 1505 : 			_Alty_traits::destroy(this->_Getal(),
; 1506 : 				_Unfancy(this->_Map()[_Block] + _Newoff % _DEQUESIZ));
; 1507 : 			if (--this->_Mysize() == 0)
; 1508 : 				{
; 1509 : 				this->_Myoff() = 0;
; 1510 : 				}
; 1511 : 			}
; 1512 : 
; 1513 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1514 : 		size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;
; 1515 : 		size_type _Block = this->_Getblock(_Newoff);
; 1516 : 		_Alty_traits::destroy(this->_Getal(),

  00013	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00016	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0001f	72 27		 jb	 SHORT $LN83@pop_back
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00021	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00023	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00024	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002a	72 12		 jb	 SHORT $LN82@pop_back

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0002c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002f	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00032	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00034	83 c0 fc	 add	 eax, -4			; fffffffcH
  00037	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003a	77 2d		 ja	 SHORT $LN79@pop_back

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003c	8b c2		 mov	 eax, edx
$LN82@pop_back:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN83@pop_back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00048	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0004f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00056	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1518 : 		if (--this->_Mysize() == 0)

  00059	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  0005d	75 07		 jne	 SHORT $LN2@pop_back

; 1519 : 			{
; 1520 : 			this->_Myoff() = 0;

  0005f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN2@pop_back:
  00066	5f		 pop	 edi

; 1523 : 		}

  00067	5e		 pop	 esi
  00068	c3		 ret	 0
$LN79@pop_back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00069	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN112@pop_back:
  0006e	cc		 int	 3
?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 1485 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1487 : 		_PUSH_BACK_BEGIN;

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000d	40		 inc	 eax
  0000e	3b c8		 cmp	 ecx, eax
  00010	77 0b		 ja	 SHORT $LN2@push_back
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
  0001a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN2@push_back:
  0001d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00020	21 46 0c	 and	 DWORD PTR [esi+12], eax
  00023	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00026	03 4e 0c	 add	 ecx, DWORD PTR [esi+12]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	48		 dec	 eax
  0002d	23 c8		 and	 ecx, eax

; 1487 : 		_PUSH_BACK_BEGIN;

  0002f	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  00036	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00039	83 3c 39 00	 cmp	 DWORD PTR [ecx+edi], 0
  0003d	75 13		 jne	 SHORT $LN3@push_back
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0003f	6a 18		 push	 24			; 00000018H
  00041	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  00046	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00049	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  0004c	89 04 17	 mov	 DWORD PTR [edi+edx], eax
  0004f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN3@push_back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00052	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00055	8b 0c 0f	 mov	 ecx, DWORD PTR [edi+ecx]
  00058	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1490 : 		_PUSH_BACK_END;

  0005d	ff 46 10	 inc	 DWORD PTR [esi+16]
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 1491 : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back, COMDAT
; _this$ = ecx

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00003	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00005	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 170  : 			_Myproxy = _Parent_proxy;

  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0000a	85 c9		 test	 ecx, ecx
  0000c	74 08		 je	 SHORT $LN50@back

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0000e	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 148  : 		if (_Parent == nullptr)

  00010	85 c9		 test	 ecx, ecx
  00012	74 02		 je	 SHORT $LN50@back

; 170  : 			_Myproxy = _Parent_proxy;

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN50@back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 571  : 		this->_Myoff += _Off;

  00016	4a		 dec	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00017	85 c0		 test	 eax, eax

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00019	74 1b		 je	 SHORT $LN100@back

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0001b	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  0001d	85 c0		 test	 eax, eax
  0001f	74 15		 je	 SHORT $LN100@back

; 170  : 			_Myproxy = _Parent_proxy;

  00021	8b 00		 mov	 eax, DWORD PTR [eax]

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00023	85 c0		 test	 eax, eax
  00025	74 0f		 je	 SHORT $LN100@back
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00029	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1429 : 		return (*(end() - 1));

  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0002f	49		 dec	 ecx
  00030	23 ca		 and	 ecx, edx

; 1429 : 		return (*(end() - 1));

  00032	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1430 : 		}

  00035	c3		 ret	 0
$LN100@back:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00036	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00038	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1429 : 		return (*(end() - 1));

  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0003e	49		 dec	 ecx
  0003f	23 ca		 and	 ecx, edx

; 1429 : 		return (*(end() - 1));

  00041	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1430 : 		}

  00044	c3		 ret	 0
?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1367 : 		return (this->_Mysize());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1368 : 		}

  00003	c3		 ret	 0
?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 930  : 		{	// construct empty deque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00029	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 680  : 		: _Map(),

  00031	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 681  : 		_Mapsize(0),

  00038	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 682  : 		_Myoff(0),

  0003f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 683  : 		_Mysize(0)

  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 787  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00052	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00054	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00057	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 789  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00064	8b 06		 mov	 eax, DWORD PTR [esi]
  00066	89 30		 mov	 DWORD PTR [eax], esi

; 931  : 		}

  00068	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006f	8b c6		 mov	 eax, esi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__ehhandler$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$dead$ = 12					; size = 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator-, COMDAT
; _this$ = ecx

; 587  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 587  : 		{	// return this - integer

  00005	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00006	33 f6		 xor	 esi, esi

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00008	85 c0		 test	 eax, eax
  0000a	74 08		 je	 SHORT $LN16@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN16@operator

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
$LN16@operator:

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 571  : 		this->_Myoff += _Off;

  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	4a		 dec	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00021	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00028	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002b	85 f6		 test	 esi, esi
  0002d	74 0a		 je	 SHORT $LN35@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 148  : 		if (_Parent == nullptr)

  00031	85 c9		 test	 ecx, ecx
  00033	74 04		 je	 SHORT $LN35@operator

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  00035	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00037	89 08		 mov	 DWORD PTR [eax], ecx
$LN35@operator:
  00039	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 590  : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 534  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN7@operator
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 535  : 		return ((reference)**(_Mybase *)this);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 535  : 		return ((reference)**(_Mybase *)this);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 536  : 		}

  00015	c3		 ret	 0
$LN7@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 535  : 		return ((reference)**(_Mybase *)this);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 535  : 		return ((reference)**(_Mybase *)this);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 536  : 		}

  00025	c3		 ret	 0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 10		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8

; 993  : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003d	cc		 int	 3
?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mysize, COMDAT
; _this$ = ecx

; 883  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 884  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mysize, COMDAT
; _this$ = ecx

; 878  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 879  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myoff, COMDAT
; _this$ = ecx

; 868  : 		return (_Get_data()._Myoff);

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]

; 869  : 		}

  00003	c3		 ret	 0
?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mapsize, COMDAT
; _this$ = ecx

; 858  : 		return (_Get_data()._Mapsize);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 859  : 		}

  00003	c3		 ret	 0
?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mapsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Map@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Map@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Map, COMDAT
; _this$ = ecx

; 848  : 		return (_Get_data()._Map);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 849  : 		}

  00003	c3		 ret	 0
?_Map@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Map
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 828  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 829  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 818  : 		_Get_data()._Orphan_all();
; 819  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Free_proxy, COMDAT
; _this$ = ecx

; 793  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00003	6a 08		 push	 8
  00005	ff 36		 push	 DWORD PTR [esi]
  00007	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 798  : 		_Myproxy() = nullptr;

  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00015	5e		 pop	 esi

; 799  : 		}

  00016	c3		 ret	 0
?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??0?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 730  : 		{	// default construct allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 680  : 		: _Map(),

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 681  : 		_Mapsize(0),

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 682  : 		_Myoff(0),

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 683  : 		_Mysize(0)

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 787  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0002c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0002e	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00037	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 789  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	89 30		 mov	 DWORD PTR [eax], esi

; 731  : 		_Alloc_proxy();
; 732  : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	c3		 ret	 0
??0?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEII@Z PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getblock, COMDAT
; _this$ = ecx

; 724  : 		{	// determine block from offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	48		 dec	 eax
  00007	23 45 08	 and	 eax, DWORD PTR __Off$[ebp]

; 725  : 		return (_Get_data()._Getblock(_Off));
; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEII@Z ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Myptr$1$ = -24					; size = 4
__Count$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__Myboff$1$ = -12					; size = 4
$T1 = -8						; size = 4
$T2 = -1						; size = 1
$T3 = -1						; size = 1
$T4 = -1						; size = 1
__Count$dead$ = 8					; size = 4
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap, COMDAT
; _this$ = ecx

; 1811 : 		{	// grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1812 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1813 : 			"The _Xlen() test should always be performed.");
; 1814 : 
; 1815 : 		_Alpty _Almap(this->_Getal());
; 1816 : 		size_type _Newsize = 0 < this->_Mapsize() ? this->_Mapsize() : 1;

  0000a	b8 01 00 00 00	 mov	 eax, 1
  0000f	57		 push	 edi
  00010	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi
  00013	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00016	85 d2		 test	 edx, edx
  00018	0f 45 c2	 cmovne	 eax, edx
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@Growmap:

; 1817 : 		while (_Newsize - this->_Mapsize() < _Count
; 1818 : 			|| _Newsize < _DEQUEMAPSIZ)

  00020	8b c8		 mov	 ecx, eax
  00022	2b ca		 sub	 ecx, edx
  00024	89 4d ec	 mov	 DWORD PTR __Count$1$[ebp], ecx
  00027	83 f9 01	 cmp	 ecx, 1
  0002a	72 05		 jb	 SHORT $LN4@Growmap
  0002c	83 f8 08	 cmp	 eax, 8
  0002f	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1819 : 			{	// scale _Newsize to 2^N >= _Mapsize() + _Count
; 1820 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

  00031	b9 aa aa aa 0a	 mov	 ecx, 178956970		; 0aaaaaaaH
  00036	2b c8		 sub	 ecx, eax
  00038	3b c8		 cmp	 ecx, eax
  0003a	0f 82 7a 01 00
	00		 jb	 $LN296@Growmap

; 1823 : 				}
; 1824 : 
; 1825 : 			_Newsize *= 2;

  00040	03 c0		 add	 eax, eax

; 1826 : 			}

  00042	eb dc		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1829 : 		size_type _Myboff = this->_Myoff() / _DEQUESIZ;

  00044	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00047	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1829 : 		size_type _Myboff = this->_Myoff() / _DEQUESIZ;

  0004e	89 5d f4	 mov	 DWORD PTR __Myboff$1$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 26   : 	if (_Max_possible < _Count)

  00051	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00056	76 05		 jbe	 SHORT $LN65@Growmap

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00058	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  0005b	eb 08		 jmp	 SHORT $LN299@Growmap
$LN65@Growmap:
  0005d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00063	72 29		 jb	 SHORT $LN68@Growmap
$LN299@Growmap:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00065	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00068	83 ca ff	 or	 edx, -1
  0006b	3b c1		 cmp	 eax, ecx
  0006d	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00076	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00078	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0007b	85 c9		 test	 ecx, ecx
  0007d	0f 84 3c 01 00
	00		 je	 $LN276@Growmap

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00083	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00086	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00089	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0008c	eb 11		 jmp	 SHORT $LN303@Growmap
$LN68@Growmap:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0008e	85 c9		 test	 ecx, ecx
  00090	74 0b		 je	 SHORT $LN69@Growmap

; 52   : 		return (::operator new(_Bytes));

  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0009b	eb 02		 jmp	 SHORT $LN303@Growmap
$LN69@Growmap:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0009d	33 c0		 xor	 eax, eax
$LN303@Growmap:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1833 : 		_Myptr = _Uninitialized_copy(this->_Map() + _Myboff,

  0009f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000a2	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000a9	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  000ac	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  000af	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1833 : 		_Myptr = _Uninitialized_copy(this->_Map() + _Myboff,

  000b0	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  000b3	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  000b6	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1833 : 		_Myptr = _Uninitialized_copy(this->_Map() + _Myboff,

  000bb	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  000be	c1 e6 02	 shl	 esi, 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000c1	2b f7		 sub	 esi, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 848  : 		return (_Get_data()._Map);

  000c3	03 f2		 add	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000c5	56		 push	 esi
  000c6	57		 push	 edi
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1833 : 		_Myptr = _Uninitialized_copy(this->_Map() + _Myboff,

  000cd	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  000d0	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1836 : 		if (_Myboff <= _Count)

  000d3	8b 5d ec	 mov	 ebx, DWORD PTR __Count$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000d6	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  000d9	89 55 e8	 mov	 DWORD PTR __Myptr$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1833 : 		_Myptr = _Uninitialized_copy(this->_Map() + _Myboff,

  000dc	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 1836 : 		if (_Myboff <= _Count)

  000df	51		 push	 ecx
  000e0	8d 4d ff	 lea	 ecx, DWORD PTR $T3[ebp]
  000e3	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
  000e8	39 5d f4	 cmp	 DWORD PTR __Myboff$1$[ebp], ebx
  000eb	77 3b		 ja	 SHORT $LN6@Growmap
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000ed	8b 45 f4	 mov	 eax, DWORD PTR __Myboff$1$[ebp]
  000f0	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  000f7	56		 push	 esi
  000f8	ff 77 04	 push	 DWORD PTR [edi+4]
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00101	8b c3		 mov	 eax, ebx
  00103	2b 45 f4	 sub	 eax, DWORD PTR __Myboff$1$[ebp]
  00106	c1 e0 02	 shl	 eax, 2
  00109	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0010a	8b 45 e8	 mov	 eax, DWORD PTR __Myptr$1$[ebp]
  0010d	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0010f	6a 00		 push	 0
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _memset
  00117	56		 push	 esi
  00118	8b 75 f8	 mov	 esi, DWORD PTR $T1[ebp]
  0011b	6a 00		 push	 0
  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 _memset
  00123	83 c4 28	 add	 esp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1846 : 		else

  00126	eb 52		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1847 : 			{	// increment not greater than offset of initial block
; 1848 : 			_Uninitialized_copy(this->_Map(),

  00128	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0012f	57		 push	 edi
  00130	56		 push	 esi
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1851 : 			_Myptr = _Uninitialized_copy(this->_Map() + _Count,

  00137	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  0013a	8d 4d ff	 lea	 ecx, DWORD PTR $T2[ebp]
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1851 : 			_Myptr = _Uninitialized_copy(this->_Map() + _Count,

  00140	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00143	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  00146	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 848  : 		return (_Get_data()._Map);

  0014b	8b 4d f4	 mov	 ecx, DWORD PTR __Myboff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0014e	2b f2		 sub	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 848  : 		return (_Get_data()._Map);

  00150	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00157	03 f0		 add	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00159	56		 push	 esi
  0015a	52		 push	 edx
  0015b	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0015e	e8 00 00 00 00	 call	 _memmove

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00163	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00166	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00167	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00169	6a 00		 push	 0
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _memset
  00171	8b 75 f8	 mov	 esi, DWORD PTR $T1[ebp]
  00174	83 c4 1c	 add	 esp, 28			; 0000001cH
  00177	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN7@Growmap:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1859 : 		if (this->_Map() != _Mapptr())

  0017a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0017d	85 c0		 test	 eax, eax
  0017f	74 2a		 je	 SHORT $LN280@Growmap
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00181	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00184	c1 e1 02	 shl	 ecx, 2

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00187	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0018d	72 12		 jb	 SHORT $LN279@Growmap

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0018f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00192	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00195	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00197	83 c0 fc	 add	 eax, -4			; fffffffcH
  0019a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0019d	77 20		 ja	 SHORT $LN276@Growmap

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0019f	8b c2		 mov	 eax, edx
$LN279@Growmap:

; 207  : 	::operator delete(_Ptr, _Bytes);

  001a1	51		 push	 ecx
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a8	83 c4 08	 add	 esp, 8
$LN280@Growmap:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1864 : 		this->_Map() = _Newmap;	// point at new

  001ab	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1865 : 		this->_Mapsize() += _Count;

  001ae	01 5f 08	 add	 DWORD PTR [edi+8], ebx
  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	5b		 pop	 ebx

; 1866 : 		}

  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c2 04 00	 ret	 4
$LN296@Growmap:

; 1821 : 				{
; 1822 : 				_Xlen();	// result too long

  001ba	e8 00 00 00 00	 call	 ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN276@Growmap:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001bf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN302@Growmap:
  001c4	cc		 int	 3
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty, COMDAT
; _this$ = ecx

; 1377 : 		return (this->_Mysize() == 0);

  00000	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00004	0f 94 c0	 sete	 al

; 1378 : 		}

  00007	c3		 ret	 0
?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 1243 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1244 : 		return (iterator(this->_Myoff() + this->_Mysize(),

  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 170  : 			_Myproxy = _Parent_proxy;

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0000e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 306  : 		: _Myoff(_Off)

  00015	89 50 08	 mov	 DWORD PTR [eax+8], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 170  : 			_Myproxy = _Parent_proxy;

  00018	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 1246 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN14@Deque_iter

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN14@Deque_iter

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN14@Deque_iter:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN12@Deque_cons

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 148  : 		if (_Parent == nullptr)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN12@Deque_cons

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@Deque_cons:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 312  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN5@operator
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 313  : 		const auto _Mycont = static_cast<const _Mydeque *>(this->_Getcont());
; 314  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 315  : 		_STL_VERIFY(_Mycont, "cannot dereference value-initialized deque iterator");
; 316  : 		_STL_VERIFY(_Mycont->_Myoff <= this->_Myoff
; 317  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize,
; 318  : 			"cannot deference out of range deque iterator");
; 319  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 320  : 
; 321  : 		_Size_type _Block = _Mycont->_Getblock(_Myoff);
; 322  : 		_Size_type _Off = _Myoff % _DEQUESIZ;
; 323  : 		return (_Mycont->_Map[_Block][_Off]);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 313  : 		const auto _Mycont = static_cast<const _Mydeque *>(this->_Getcont());
; 314  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 315  : 		_STL_VERIFY(_Mycont, "cannot dereference value-initialized deque iterator");
; 316  : 		_STL_VERIFY(_Mycont->_Myoff <= this->_Myoff
; 317  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize,
; 318  : 			"cannot deference out of range deque iterator");
; 319  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 320  : 
; 321  : 		_Size_type _Block = _Mycont->_Getblock(_Myoff);
; 322  : 		_Size_type _Off = _Myoff % _DEQUESIZ;
; 323  : 		return (_Mycont->_Map[_Block][_Off]);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 324  : 		}

  00015	c3		 ret	 0
$LN5@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 313  : 		const auto _Mycont = static_cast<const _Mydeque *>(this->_Getcont());
; 314  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 315  : 		_STL_VERIFY(_Mycont, "cannot dereference value-initialized deque iterator");
; 316  : 		_STL_VERIFY(_Mycont->_Myoff <= this->_Myoff
; 317  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize,
; 318  : 			"cannot deference out of range deque iterator");
; 319  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 320  : 
; 321  : 		_Size_type _Block = _Mycont->_Getblock(_Myoff);
; 322  : 		_Size_type _Off = _Myoff % _DEQUESIZ;
; 323  : 		return (_Mycont->_Map[_Block][_Off]);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 313  : 		const auto _Mycont = static_cast<const _Mydeque *>(this->_Getcont());
; 314  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 315  : 		_STL_VERIFY(_Mycont, "cannot dereference value-initialized deque iterator");
; 316  : 		_STL_VERIFY(_Mycont->_Myoff <= this->_Myoff
; 317  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize,
; 318  : 			"cannot deference out of range deque iterator");
; 319  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 320  : 
; 321  : 		_Size_type _Block = _Mycont->_Getblock(_Myoff);
; 322  : 		_Size_type _Off = _Myoff % _DEQUESIZ;
; 323  : 		return (_Mycont->_Map[_Block][_Off]);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 324  : 		}

  00025	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator-=, COMDAT
; _this$ = ecx

; 571  : 		this->_Myoff += _Off;

  00000	ff 49 08	 dec	 DWORD PTR [ecx+8]

; 583  : 		return (*this += -_Off);

  00003	8b c1		 mov	 eax, ecx

; 584  : 		}

  00005	c2 04 00	 ret	 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 530  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 306  : 		: _Myoff(_Off)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0000c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00012	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 148  : 		if (_Parent == nullptr)

  00019	85 c0		 test	 eax, eax
  0001b	74 04		 je	 SHORT $LN13@Deque_iter

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 531  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEII@Z PROC ; std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getblock, COMDAT
; _this$ = ecx

; 688  : 		{	// determine block from offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 690  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	48		 dec	 eax
  00007	23 45 08	 and	 eax, DWORD PTR __Off$[ebp]

; 691  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEII@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]

; 26   : 	if (_Max_possible < _Count)

  0000d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00012	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00014	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00017	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 27		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00021	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00024	83 ca ff	 or	 edx, -1
  00027	3b c1		 cmp	 eax, ecx
  00029	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00034	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00037	85 c9		 test	 ecx, ecx
  00039	74 24		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003e	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00041	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  00048	85 c9		 test	 ecx, ecx
  0004a	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00052	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  00059	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@allocate:
  00064	cc		 int	 3
?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 843  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 844  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 838  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 839  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myproxy, COMDAT
; _this$ = ecx

; 808  : 		return (_Get_data()._Myproxy);

  00000	8b c1		 mov	 eax, ecx

; 809  : 		}

  00002	c3		 ret	 0
?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 785  : 		{	// construct proxy

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00001	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 785  : 		{	// construct proxy

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 787  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0000a	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0000c	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 789  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 30		 mov	 DWORD PTR [eax], esi
  00020	5e		 pop	 esi

; 790  : 		}

  00021	c3		 ret	 0
?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$dead$ = ecx

; 1802 : 		_Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$dead$ = ecx

; 1372 : 		return (_Alty_traits::max_size(this->_Getal()));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1373 : 		}

  00005	c3		 ret	 0
?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 306  : 		: _Myoff(_Off)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0000c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00012	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 148  : 		if (_Parent == nullptr)

  00019	85 c0		 test	 eax, eax
  0001b	74 04		 je	 SHORT $LN11@Deque_cons

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 309  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator+=, COMDAT
; _this$ = ecx

; 571  : 		this->_Myoff += _Off;

  00000	ff 49 08	 dec	 DWORD PTR [ecx+8]

; 572  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 573  : 		}

  00005	c2 04 00	 ret	 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 833  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 834  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$dead$ = ecx

; 52   : 		return (::operator new(_Bytes));

  00000	6a 08		 push	 8
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Setcont, COMDAT
; _this$ = ecx

; 457  : 		{	// set container pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN5@Setcont

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);
; 152  : 			_Orphan_me();
; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}
; 155  : 		else
; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)
; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);
; 163  : 				_Orphan_me();
; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}
; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN5@Setcont:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 459  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 987  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z
_TEXT	SEGMENT
??$addressof@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
??$destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 987  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 08		 push	 8
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8

; 1213 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);
; 1214 : 	}

  0000b	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 680  : 		: _Map(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 681  : 		_Mapsize(0),

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 682  : 		_Myoff(0),

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 683  : 		_Mysize(0)

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00024	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,

  00006	51		 push	 ecx
  00007	8b f1		 mov	 esi, ecx
  00009	8b fa		 mov	 edi, edx
  0000b	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00013	2b fe		 sub	 edi, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00015	57		 push	 edi
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00023	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 219  : 	return (_Dest);

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 220  : 	}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]
  00004	c1 f8 02	 sar	 eax, 2

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00007	c3		 ret	 0
??$_Idl_distance@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 343  : 	{	// value-initialize _Count objects to raw _First, using _Al

  00000	56		 push	 esi
  00001	57		 push	 edi

; 336  : 	return (_Zero_range(_First, _First + _Count));

  00002	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]

; 343  : 	{	// value-initialize _Count objects to raw _First, using _Al

  00009	8b f9		 mov	 edi, ecx

; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0000b	56		 push	 esi
  0000c	6a 00		 push	 0
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 336  : 	return (_Zero_range(_First, _First + _Count));

  00017	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]

; 344  : 	return (_Uninitialized_value_construct_n1(_First, _Count, _Al,

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 345  : 		bool_constant<conjunction_v<_Use_memset_value_construct_t<_FwdIt>,
; 346  : 			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>>{}));
; 347  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_value_construct_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	89 02		 mov	 DWORD PTR [edx], eax
  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 08		 push	 8
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 874  : 		}

  0000b	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\deque

; 685  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_val<std::_Deque_simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z PROC ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z ENDP ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@H@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@H@Z PROC ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@H@Z ENDP ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1071 : 	}

  00005	c3		 ret	 0
??$_Ptr_copy_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_copy_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 203  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z
_TEXT	SEGMENT
??$_Seek_wrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z PROC ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@@Z ENDP ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$ = 12						; size = 1
??$_Uninitialized_value_construct_n1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_value_construct_n1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 335  : 	{	// value-initialize _Count objects to raw _First, using default _Alloc construct, all-bits-zero type

  00000	56		 push	 esi
  00001	57		 push	 edi

; 336  : 	return (_Zero_range(_First, _First + _Count));

  00002	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  00009	8b f9		 mov	 edi, ecx

; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0000b	56		 push	 esi
  0000c	6a 00		 push	 0
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 336  : 	return (_Zero_range(_First, _First + _Count));

  00017	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 337  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_value_construct_n1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@IAAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_value_construct_n1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1146 : 		// nothing to do
; 1147 : 	}

  00000	c3		 ret	 0
??$_Destroy_range1@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z PROC ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	char const*  const _First_ch = const_cast<char const* >(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	char const*  const _Last_ch = const_cast<char const* >(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ENDP ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z PROC ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 310  : 	{	// fill [_First, _Last) with zeroes

  00000	56		 push	 esi
  00001	8b f2		 mov	 esi, edx

; 311  : 	char * const _First_ch = reinterpret_cast<char *>(_First);
; 312  : 	char * const _Last_ch = reinterpret_cast<char *>(_Last);
; 313  : 	_CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b c6		 mov	 eax, esi
  00005	2b c1		 sub	 eax, ecx
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 314  : 	return (_Last);

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi

; 315  : 	}

  00016	c3		 ret	 0
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ENDP ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
END
