; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	e:\Tools\SysStatus\xmlwriter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	?destroy@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::destroy
PUBLIC	?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::deallocate
PUBLIC	??$_Allocate@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocate
PUBLIC	?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
PUBLIC	??$_Uninit_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Iter_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Iter_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@@Z ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$unchecked_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@@Z ; stdext::unchecked_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Uninit_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; stdext::unchecked_uninitialized_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Ptr_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
PUBLIC	?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
PUBLIC	?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::push
PUBLIC	?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::size
PUBLIC	??0?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>
PUBLIC	??0?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>
PUBLIC	?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@2@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	??D?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*
PUBLIC	??D?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*
PUBLIC	??Y?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator+=
PUBLIC	??Y?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator+=
PUBLIC	??Z?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator-=
PUBLIC	??G?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator-
PUBLIC	?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
PUBLIC	?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::top
PUBLIC	?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
PUBLIC	?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
PUBLIC	?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::pop
PUBLIC	??Z?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-=
PUBLIC	??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-
PUBLIC	?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
PUBLIC	?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
PUBLIC	?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file?$AA@ ; `string'
PUBLIC	??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	??_C@_03FONCMJME@?$DM?$CFs?$AA@			; `string'
PUBLIC	??_C@_04FDKPOGFN@?5?$CFs?$DN?$AA@		; `string'
PUBLIC	??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@		; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@		; `string'
PUBLIC	??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO?$AA@	; `string'
PUBLIC	??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO?$AA@ ; `string'
PUBLIC	??_C@_02HEIIMGGB@a_?$AA@			; `string'
PUBLIC	??_C@_05JKJFEODM@?$CGamp?$DL?$AA@		; `string'
PUBLIC	??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL?$AA@		; `string'
PUBLIC	??_C@_0CC@HMAJOFMG@TID?5?$CF?45u?5ID?5?$CF?45u?5XmlWritter?3?5?$CFs?$AN@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	_fopen:PROC
EXTRN	_fclose:PROC
EXTRN	_vfprintf:PROC
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HMAJOFMG@TID?5?$CF?45u?5ID?5?$CF?45u?5XmlWritter?3?5?$CFs?$AN@
CONST	SEGMENT
??_C@_0CC@HMAJOFMG@TID?5?$CF?45u?5ID?5?$CF?45u?5XmlWritter?3?5?$CFs?$AN@ DB 'T'
	DB	'ID %.5u ID %.5u XmlWritter: %s', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL?$AA@
CONST	SEGMENT
??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL?$AA@ DB '&#%d;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKJFEODM@?$CGamp?$DL?$AA@
CONST	SEGMENT
??_C@_05JKJFEODM@?$CGamp?$DL?$AA@ DB '&amp;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEIIMGGB@a_?$AA@
CONST	SEGMENT
??_C@_02HEIIMGGB@a_?$AA@ DB 'a_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO?$AA@
CONST	SEGMENT
??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO?$AA@ DB '<!-- %s -->', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO?$AA@ DB '>%s</%s>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@ DB '</%s>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@ DB '"%s"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDKPOGFN@?5?$CFs?$DN?$AA@
CONST	SEGMENT
??_C@_04FDKPOGFN@?5?$CFs?$DN?$AA@ DB ' %s=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03FONCMJME@?$DM?$CFs?$AA@
CONST	SEGMENT
??_C@_03FONCMJME@?$DM?$CFs?$AA@ DB '<%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@
CONST	SEGMENT
??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@ DB '<'
	DB	'?xml version="1.0" encoding="UTF-8"?>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file?$AA@
CONST	SEGMENT
??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file?$AA@ DB 'Unable to open'
	DB	' output file', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ecx
; __Count$ = eax
; __Val$ = edx

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	85 c0		 test	 eax, eax
  00002	76 0e		 jbe	 SHORT $LN1@Fill_n
  00004	56		 push	 esi
$LL3@Fill_n:

; 3198 : 		*_First = _Val;

  00005	8b 32		 mov	 esi, DWORD PTR [edx]
  00007	89 31		 mov	 DWORD PTR [ecx], esi
  00009	48		 dec	 eax
  0000a	83 c1 04	 add	 ecx, 4
  0000d	85 c0		 test	 eax, eax
  0000f	77 f4		 ja	 SHORT $LL3@Fill_n
  00011	5e		 pop	 esi
$LN1@Fill_n:

; 3199 : 	}

  00012	c3		 ret	 0
??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
??$_Iter_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Iter_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT
; ___$ReturnUdt$ = eax

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);
; 955  : 	}

  00000	c3		 ret	 0
??$_Iter_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Iter_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT
; __It$ = eax

; 1147 : 		return _It;

  00000	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00002	c3		 ret	 0
??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT

; 242  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = 8						; size = 4
??$_Uninit_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Dest$ = edx
; __Count$ = eax

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);
; 149  : 	_FwdIt _Result = _Dest + _Count;
; 150  : 	if (_Count > 0)
; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

  00000	03 c0		 add	 eax, eax
  00002	03 c0		 add	 eax, eax
  00004	50		 push	 eax
  00005	51		 push	 ecx
  00006	50		 push	 eax
  00007	52		 push	 edx
  00008	e8 00 00 00 00	 call	 _memmove_s

; 152  : 	return (_Result);

  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Result$[esp+12]
  00011	83 c4 10	 add	 esp, 16			; 00000010H

; 153  : 	}

  00014	c3		 ret	 0
??$_Uninit_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@@Z
_TEXT	SEGMENT
??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@@Z PROC ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT
; __It$ = eax

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00002	c3		 ret	 0
??$_Checked_base@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAPAV10@@Z ENDP ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = eax

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00000	c3		 ret	 0
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
??$_Destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
??$unchecked_uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = edi
; __Last$ = eax
; __Dest$ = edx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00000	2b c7		 sub	 eax, edi
  00002	c1 f8 02	 sar	 eax, 2
  00005	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000c	56		 push	 esi
  0000d	8d 34 11	 lea	 esi, DWORD PTR [ecx+edx]
  00010	85 c0		 test	 eax, eax
  00012	76 0c		 jbe	 SHORT $LN16@unchecked_
  00014	51		 push	 ecx
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _memmove_s
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@unchecked_:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi

; 823  : 	}

  00023	c3		 ret	 0
??$unchecked_uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@00AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
?destroy@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::destroy, COMDAT

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c3		 ret	 0
?destroy@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::deallocate, COMDAT
; __Ptr$ = eax

; 140  : 		::operator delete(_Ptr);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00006	59		 pop	 ecx

; 141  : 		}

  00007	c3		 ret	 0
?deallocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
_TEXT	ENDS
;	COMDAT ?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty, COMDAT
; _this$ = ecx

; 734  : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 1c	 cmp	 DWORD PTR [ecx+28], eax
  00005	0f 94 c0	 sete	 al

; 735  : 		}

  00008	c3		 ret	 0
?empty@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = eax

; 724  : 		return (_Mysize);

  00000	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 725  : 		}

  00003	c3		 ret	 0
?size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stack
_TEXT	ENDS
;	COMDAT ?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::size, COMDAT
; _this$ = eax

; 43   : 		return (c.size());

  00000	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 44   : 		}

  00003	c3		 ret	 0
?size@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QBEIXZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::size
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Write@xmlwriter@@AAAXHPBDZZ			; xmlwriter::Write
EXTRN	___security_cookie:DWORD
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
;	COMDAT ?Write@xmlwriter@@AAAXHPBDZZ
_TEXT	SEGMENT
_buffer$ = -5052					; size = 2048
_message$ = -3004					; size = 3000
__$ArrayPad$ = -4					; size = 4
_id$ = 8						; size = 4
_format$ = 12						; size = 4
?Write@xmlwriter@@AAAXHPBDZZ PROC			; xmlwriter::Write, COMDAT
; _this$ = esi

; 226  : {

  00000	b8 bc 13 00 00	 mov	 eax, 5052		; 000013bcH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 b8 13
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+5052], eax

; 227  :     char message[3000] = {0};

  00018	68 b7 0b 00 00	 push	 2999			; 00000bb7H
  0001d	8d 84 24 05 08
	00 00		 lea	 eax, DWORD PTR _message$[esp+5057]
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	c6 84 24 0c 08
	00 00 00	 mov	 BYTE PTR _message$[esp+5064], 0
  0002f	e8 00 00 00 00	 call	 _memset

; 228  :     char buffer[2048] = {0};

  00034	68 ff 07 00 00	 push	 2047			; 000007ffH
  00039	8d 4c 24 11	 lea	 ecx, DWORD PTR _buffer$[esp+5069]
  0003d	6a 00		 push	 0
  0003f	51		 push	 ecx
  00040	c6 44 24 18 00	 mov	 BYTE PTR _buffer$[esp+5076], 0
  00045	e8 00 00 00 00	 call	 _memset

; 229  :     va_list	argptr;
; 230  : 
; 231  :     //Format the message to be logged
; 232  :     va_start(argptr,format);
; 233  :     if(fp)

  0004a	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	85 c0		 test	 eax, eax
  00052	74 19		 je	 SHORT $LN2@Write

; 234  :     {
; 235  :         vfprintf(fp,format,argptr);

  00054	8b 8c 24 c4 13
	00 00		 mov	 ecx, DWORD PTR _format$[esp+5048]
  0005b	8d 94 24 c8 13
	00 00		 lea	 edx, DWORD PTR _format$[esp+5052]
  00062	52		 push	 edx
  00063	51		 push	 ecx
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _vfprintf
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@Write:

; 236  :     }
; 237  : 
; 238  :     //Write debug
; 239  :     _vsnprintf(buffer,sizeof(buffer)-1,format,argptr);

  0006d	8b 84 24 c4 13
	00 00		 mov	 eax, DWORD PTR _format$[esp+5048]
  00074	8d 94 24 c8 13
	00 00		 lea	 edx, DWORD PTR _format$[esp+5052]
  0007b	52		 push	 edx
  0007c	50		 push	 eax
  0007d	8d 4c 24 08	 lea	 ecx, DWORD PTR _buffer$[esp+5060]
  00081	68 ff 07 00 00	 push	 2047			; 000007ffH
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 __vsnprintf

; 240  :     if(strlen(buffer)>2)    //do not write CR/LF

  0008c	8d 44 24 10	 lea	 eax, DWORD PTR _buffer$[esp+5068]
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL5@Write:
  00096	8a 08		 mov	 cl, BYTE PTR [eax]
  00098	40		 inc	 eax
  00099	84 c9		 test	 cl, cl
  0009b	75 f9		 jne	 SHORT $LL5@Write
  0009d	2b c2		 sub	 eax, edx
  0009f	83 f8 02	 cmp	 eax, 2
  000a2	76 3c		 jbe	 SHORT $LN1@Write

; 241  :     {
; 242  :         _snprintf(message,sizeof(message),"TID %.5u ID %.5u XmlWritter: %s\r\n",GetCurrentThreadId(),id,buffer);

  000a4	8b 84 24 c0 13
	00 00		 mov	 eax, DWORD PTR _id$[esp+5048]
  000ab	8d 14 24	 lea	 edx, DWORD PTR _buffer$[esp+5052]
  000ae	52		 push	 edx
  000af	50		 push	 eax
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HMAJOFMG@TID?5?$CF?45u?5ID?5?$CF?45u?5XmlWritter?3?5?$CFs?$AN@
  000bc	8d 8c 24 10 08
	00 00		 lea	 ecx, DWORD PTR _message$[esp+5068]
  000c3	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 __snprintf

; 243  :         (*pDebug)(message,0/*LOG_NONE*/);

  000ce	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  000d1	8d 94 24 18 08
	00 00		 lea	 edx, DWORD PTR _message$[esp+5076]
  000d8	6a 00		 push	 0
  000da	52		 push	 edx
  000db	ff d0		 call	 eax
  000dd	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@Write:

; 244  :     }
; 245  :     va_end(argptr);
; 246  : }

  000e0	8b 8c 24 b8 13
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+5052]
  000e7	33 cc		 xor	 ecx, esp
  000e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ee	81 c4 bc 13 00
	00		 add	 esp, 5052		; 000013bcH
  000f4	c3		 ret	 0
?Write@xmlwriter@@AAAXHPBDZZ ENDP			; xmlwriter::Write
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
___formal$ = 12						; size = 1
??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ecx
; __Count$ = eax
; __Val$ = edx

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);
; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

  00000	85 c0		 test	 eax, eax
  00002	76 0e		 jbe	 SHORT $LN7@Fill_n@10
  00004	56		 push	 esi
$LL9@Fill_n@10:
  00005	8b 32		 mov	 esi, DWORD PTR [edx]
  00007	89 31		 mov	 DWORD PTR [ecx], esi
  00009	48		 dec	 eax
  0000a	83 c1 04	 add	 ecx, 4
  0000d	85 c0		 test	 eax, eax
  0000f	77 f4		 ja	 SHORT $LL9@Fill_n@10
  00011	5e		 pop	 esi
$LN7@Fill_n@10:

; 3255 : 	}

  00012	c3		 ret	 0
??$_Fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@@Z
_TEXT	SEGMENT
??$unchecked_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@@Z PROC ; stdext::unchecked_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ecx
; __Count$ = eax
; __Val$ = edx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

  00000	85 c0		 test	 eax, eax
  00002	76 0e		 jbe	 SHORT $LN11@unchecked_@10
  00004	56		 push	 esi
$LL13@unchecked_@10:
  00005	8b 32		 mov	 esi, DWORD PTR [edx]
  00007	89 31		 mov	 DWORD PTR [ecx], esi
  00009	48		 dec	 eax
  0000a	83 c1 04	 add	 ecx, 4
  0000d	85 c0		 test	 eax, eax
  0000f	77 f4		 ja	 SHORT $LL13@unchecked_@10
  00011	5e		 pop	 esi
$LN11@unchecked_@10:

; 3722 : 	}

  00012	c3		 ret	 0
??$unchecked_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@@Z ENDP ; stdext::unchecked_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
___formal$ = 12						; size = 1
??$_Uninit_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Count$ = eax
; __Val$ = edx

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

  00000	85 c0		 test	 eax, eax
  00002	76 0e		 jbe	 SHORT $LN13@Uninit_fil
  00004	56		 push	 esi
$LL15@Uninit_fil:
  00005	8b 32		 mov	 esi, DWORD PTR [edx]
  00007	89 31		 mov	 DWORD PTR [ecx], esi
  00009	48		 dec	 eax
  0000a	83 c1 04	 add	 ecx, 4
  0000d	85 c0		 test	 eax, eax
  0000f	77 f4		 ja	 SHORT $LL15@Uninit_fil
  00011	5e		 pop	 esi
$LN13@Uninit_fil:

; 420  : 	}

  00012	c3		 ret	 0
??$_Uninit_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABQAV10@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
_TEXT	ENDS
EXTRN	__CxxThrowException@8:PROC
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAPAV10@@Z
_TEXT	SEGMENT
$T166547 = -12						; size = 12
??$_Allocate@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAPAV10@@Z PROC ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __Count$ = ecx

; 37   : 	if (_Count <= 0)
; 38   : 		_Count = 0;
; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00000	83 c8 ff	 or	 eax, -1
  00003	33 d2		 xor	 edx, edx
  00005	f7 f1		 div	 ecx
  00007	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000a	83 f8 04	 cmp	 eax, 4
  0000d	73 1a		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0000f	6a 00		 push	 0
  00011	8d 4c 24 04	 lea	 ecx, DWORD PTR $T166547[esp+16]
  00015	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0001a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0001f	8d 44 24 04	 lea	 eax, DWORD PTR $T166547[esp+16]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@Allocate:
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  00029	03 c9		 add	 ecx, ecx
  0002b	03 c9		 add	 ecx, ecx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	83 c4 04	 add	 esp, 4

; 44   : 	}

  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	c3		 ret	 0
$LN10@Allocate:
??$_Allocate@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAPAV10@@Z ENDP ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
??$unchecked_uninitialized_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >, COMDAT
; __First$ = ecx
; __Count$ = eax
; __Val$ = edx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00000	85 c0		 test	 eax, eax
  00002	76 0e		 jbe	 SHORT $LN17@unchecked_@11
  00004	56		 push	 esi
$LL19@unchecked_@11:
  00005	8b 32		 mov	 esi, DWORD PTR [edx]
  00007	89 31		 mov	 DWORD PTR [ecx], esi
  00009	48		 dec	 eax
  0000a	83 c1 04	 add	 ecx, 4
  0000d	85 c0		 test	 eax, eax
  0000f	77 f4		 ja	 SHORT $LL19@unchecked_@11
  00011	5e		 pop	 esi
$LN17@unchecked_@11:

; 943  : 	}

  00012	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IPAV12@V?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABQAV12@AAV?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
$T166667 = -12						; size = 12
?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocate, COMDAT
; __Count$ = ecx

; 144  : 		{	// allocate array of _Count elements

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00003	85 c9		 test	 ecx, ecx
  00005	77 13		 ja	 SHORT $LN5@allocate
  00007	33 c9		 xor	 ecx, ecx
$LN3@allocate:
  00009	03 c9		 add	 ecx, ecx
  0000b	03 c9		 add	 ecx, ecx
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 146  : 		}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0

; 145  : 		return (_Allocate(_Count, (pointer)0));

$LN5@allocate:
  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 04	 cmp	 eax, 4
  00024	73 e3		 jae	 SHORT $LN3@allocate
  00026	6a 00		 push	 0
  00028	8d 4c 24 04	 lea	 ecx, DWORD PTR $T166667[esp+16]
  0002c	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 44 24 04	 lea	 eax, DWORD PTR $T166667[esp+16]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@allocate:
$LN9@allocate:
  00040	cc		 int	 3
?allocate@?$allocator@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::allocate
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
_TEXT	ENDS
;	COMDAT ?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT

; 729  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 730  : 		}

  00005	c3		 ret	 0
?max_size@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty, COMDAT
; _this$ = eax

; 736  : 		return (size() == 0);

  00000	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00003	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 e9		 imul	 ecx
  0000d	03 d1		 add	 edx, ecx
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	f7 d8		 neg	 eax
  0001b	1b c0		 sbb	 eax, eax
  0001d	40		 inc	 eax

; 737  : 		}

  0001e	c3		 ret	 0
?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
;	COMDAT ??Y?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Y?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator+=, COMDAT
; _this$ = esi

; 199  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00000	8b 06		 mov	 eax, DWORD PTR [esi]
  00002	57		 push	 edi
  00003	85 c0		 test	 eax, eax
  00005	75 0b		 jne	 SHORT $LN34@operator@31
  00007	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 200  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(
; 201  : 			_Myoff + _Off <= ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize &&
; 202  : 			_Myoff + _Off >= ((_Mydeque *)(this->_Getmycont()))->_Myoff);

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	85 c0		 test	 eax, eax
  00010	74 04		 je	 SHORT $LN18@operator@31
$LN34@operator@31:
  00012	8b 38		 mov	 edi, DWORD PTR [eax]
  00014	eb 02		 jmp	 SHORT $LN19@operator@31
$LN18@operator@31:
  00016	33 ff		 xor	 edi, edi
$LN19@operator@31:
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN24@operator@31
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN25@operator@31
$LN24@operator@31:
  00020	33 d2		 xor	 edx, edx
$LN25@operator@31:
  00022	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00028	03 57 18	 add	 edx, DWORD PTR [edi+24]
  0002b	49		 dec	 ecx
  0002c	5f		 pop	 edi
  0002d	3b ca		 cmp	 ecx, edx
  0002f	77 0f		 ja	 SHORT $LN4@operator@31
  00031	85 c0		 test	 eax, eax
  00033	74 04		 je	 SHORT $LN30@operator@31
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	eb 02		 jmp	 SHORT $LN31@operator@31
$LN30@operator@31:
  00039	33 c0		 xor	 eax, eax
$LN31@operator@31:
  0003b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0003e	73 05		 jae	 SHORT $LN35@operator@31
$LN4@operator@31:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN35@operator@31:

; 203  : 		_Myoff += _Off;

  00045	ff 4e 04	 dec	 DWORD PTR [esi+4]

; 204  : 		return (*this);

  00048	8b c6		 mov	 eax, esi

; 205  : 		}

  0004a	c3		 ret	 0
??Y?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
??0?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>, COMDAT
; _this$ = edi
; __Off$ = ebx
; __Pdeque$ = esi

; 125  : 		_Deque_const_iterator(size_type _Off, const _Mydequebase *_Pdeque)

  00000	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 126  : 			{	// construct with offset _Off in *_Pdeque
; 127  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 128  : 				_Pdeque != NULL &&
; 129  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

  00006	85 f6		 test	 esi, esi
  00008	74 10		 je	 SHORT $LN4@Deque_cons
  0000a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000d	3b c3		 cmp	 eax, ebx
  0000f	77 09		 ja	 SHORT $LN4@Deque_cons
  00011	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00014	03 c8		 add	 ecx, eax
  00016	3b d9		 cmp	 ebx, ecx
  00018	76 05		 jbe	 SHORT $LN3@Deque_cons
$LN4@Deque_cons:
  0001a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Deque_cons:

; 130  : 				
; 131  : 			this->_Set_container(_Pdeque);

  0001f	8b 16		 mov	 edx, DWORD PTR [esi]
  00021	89 17		 mov	 DWORD PTR [edi], edx

; 132  : 			_Myoff = _Off;

  00023	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 133  : 			}

  00026	8b c7		 mov	 eax, edi
  00028	c3		 ret	 0
??0?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Y?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator+=, COMDAT
; _this$ = esi

; 422  : 		*(_Mybase *)this += _Off;

  00000	8b 06		 mov	 eax, DWORD PTR [esi]
  00002	57		 push	 edi
  00003	85 c0		 test	 eax, eax
  00005	75 0b		 jne	 SHORT $LN36@operator@32
  00007	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	85 c0		 test	 eax, eax
  00010	74 04		 je	 SHORT $LN20@operator@32
$LN36@operator@32:
  00012	8b 38		 mov	 edi, DWORD PTR [eax]
  00014	eb 02		 jmp	 SHORT $LN21@operator@32
$LN20@operator@32:
  00016	33 ff		 xor	 edi, edi
$LN21@operator@32:
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN26@operator@32
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN27@operator@32
$LN26@operator@32:
  00020	33 d2		 xor	 edx, edx
$LN27@operator@32:
  00022	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00028	03 57 18	 add	 edx, DWORD PTR [edi+24]
  0002b	49		 dec	 ecx
  0002c	5f		 pop	 edi
  0002d	3b ca		 cmp	 ecx, edx
  0002f	77 0f		 ja	 SHORT $LN6@operator@32
  00031	85 c0		 test	 eax, eax
  00033	74 04		 je	 SHORT $LN32@operator@32
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	eb 02		 jmp	 SHORT $LN33@operator@32
$LN32@operator@32:
  00039	33 c0		 xor	 eax, eax
$LN33@operator@32:
  0003b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0003e	73 05		 jae	 SHORT $LN37@operator@32
$LN6@operator@32:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN37@operator@32:
  00045	ff 4e 04	 dec	 DWORD PTR [esi+4]

; 423  : 		return (*this);

  00048	8b c6		 mov	 eax, esi

; 424  : 		}

  0004a	c3		 ret	 0
??Y?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*, COMDAT
; _this$ = esi

; 137  : 			size_type _Block = _Myoff / _DEQUESIZ;
; 138  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2
; 139  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00000	8b 06		 mov	 eax, DWORD PTR [esi]
  00002	57		 push	 edi
  00003	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN44@operator@33
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 140  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN16@operator@33
$LN44@operator@33:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN17@operator@33
$LN16@operator@33:
  00019	33 c9		 xor	 ecx, ecx
$LN17@operator@33:
  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN22@operator@33
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	eb 02		 jmp	 SHORT $LN23@operator@33
$LN22@operator@33:
  00023	33 c0		 xor	 eax, eax
$LN23@operator@33:
  00025	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00028	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0002b	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  0002e	72 05		 jb	 SHORT $LN4@operator@33
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN4@operator@33:

; 141  : 			if (static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize <= _Block)

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	85 c0		 test	 eax, eax
  00039	74 04		 je	 SHORT $LN28@operator@33
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	eb 02		 jmp	 SHORT $LN29@operator@33
$LN28@operator@33:
  0003f	33 c9		 xor	 ecx, ecx
$LN29@operator@33:
  00041	39 79 14	 cmp	 DWORD PTR [ecx+20], edi
  00044	77 0d		 ja	 SHORT $LN1@operator@33

; 142  : 				_Block -= static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize;

  00046	85 c0		 test	 eax, eax
  00048	74 04		 je	 SHORT $LN34@operator@33
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	eb 02		 jmp	 SHORT $LN35@operator@33
$LN34@operator@33:
  0004e	33 c9		 xor	 ecx, ecx
$LN35@operator@33:
  00050	2b 79 14	 sub	 edi, DWORD PTR [ecx+20]
$LN1@operator@33:

; 143  : 			return ((static_cast<const _Mydeque *>(this->_Getmycont())->_Map)[_Block][_Off]);

  00053	85 c0		 test	 eax, eax
  00055	74 0a		 je	 SHORT $LN40@operator@33
  00057	8b 00		 mov	 eax, DWORD PTR [eax]
  00059	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005c	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  0005f	5f		 pop	 edi

; 144  : 			}

  00060	c3		 ret	 0

; 143  : 			return ((static_cast<const _Mydeque *>(this->_Getmycont())->_Map)[_Block][_Off]);

$LN40@operator@33:
  00061	33 c0		 xor	 eax, eax
  00063	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00066	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  00069	5f		 pop	 edi

; 144  : 			}

  0006a	c3		 ret	 0
??D?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Z?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Z?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator-=, COMDAT
; _this$ = esi

; 434  : 		return (*this += -_Off);

  00000	8b 06		 mov	 eax, DWORD PTR [esi]
  00002	57		 push	 edi
  00003	85 c0		 test	 eax, eax
  00005	75 0b		 jne	 SHORT $LN38@operator@34
  00007	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	85 c0		 test	 eax, eax
  00010	74 04		 je	 SHORT $LN22@operator@34
$LN38@operator@34:
  00012	8b 38		 mov	 edi, DWORD PTR [eax]
  00014	eb 02		 jmp	 SHORT $LN23@operator@34
$LN22@operator@34:
  00016	33 ff		 xor	 edi, edi
$LN23@operator@34:
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN28@operator@34
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN29@operator@34
$LN28@operator@34:
  00020	33 d2		 xor	 edx, edx
$LN29@operator@34:
  00022	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00028	03 57 18	 add	 edx, DWORD PTR [edi+24]
  0002b	49		 dec	 ecx
  0002c	5f		 pop	 edi
  0002d	3b ca		 cmp	 ecx, edx
  0002f	77 0f		 ja	 SHORT $LN8@operator@34
  00031	85 c0		 test	 eax, eax
  00033	74 04		 je	 SHORT $LN34@operator@34
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	eb 02		 jmp	 SHORT $LN35@operator@34
$LN34@operator@34:
  00039	33 c0		 xor	 eax, eax
$LN35@operator@34:
  0003b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0003e	73 05		 jae	 SHORT $LN39@operator@34
$LN8@operator@34:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@operator@34:
  00045	ff 4e 04	 dec	 DWORD PTR [esi+4]
  00048	8b c6		 mov	 eax, esi

; 435  : 		}

  0004a	c3		 ret	 0
??Z?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator-=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
??0?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>, COMDAT
; _this$ = edi
; __Off$ = ebx
; __Pdeque$ = esi

; 381  : 		{	// construct with offset _Off in *_Pdeque

  00000	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00006	85 f6		 test	 esi, esi
  00008	74 10		 je	 SHORT $LN6@Deque_iter
  0000a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000d	3b c3		 cmp	 eax, ebx
  0000f	77 09		 ja	 SHORT $LN6@Deque_iter
  00011	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00014	03 c8		 add	 ecx, eax
  00016	3b d9		 cmp	 ebx, ecx
  00018	76 05		 jbe	 SHORT $LN5@Deque_iter
$LN6@Deque_iter:
  0001a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Deque_iter:
  0001f	8b 16		 mov	 edx, DWORD PTR [esi]
  00021	89 17		 mov	 DWORD PTR [edi], edx
  00023	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 382  : 		}

  00026	8b c7		 mov	 eax, edi
  00028	c3		 ret	 0
??0?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$0
__ehfuncinfo$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
$T181693 = -16						; size = 4
$T181688 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 478  : 		{	// construct allocator from _Al

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 74 24 1c	 mov	 esi, DWORD PTR _this$[esp+20]
  00026	51		 push	 ecx
  00027	89 64 24 0c	 mov	 DWORD PTR $T181688[esp+28], esp
  0002b	89 64 24 0c	 mov	 DWORD PTR $T181693[esp+28], esp
  0002f	e8 00 00 00 00	 call	 ??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 479  : 		}

  00034	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  0003c	8b c6		 mov	 eax, esi
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
??G?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator-, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = ebx

; 438  : 		{	// return this - integer

  00000	56		 push	 esi

; 439  : 		_Myt _Tmp = *this;

  00001	8b 30		 mov	 esi, DWORD PTR [eax]
  00003	57		 push	 edi
  00004	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 440  : 		return (_Tmp -= _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 1c		 jne	 SHORT $LN40@operator@35
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
  00012	33 c9		 xor	 ecx, ecx
$LN31@operator@35:
  00014	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00017	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  0001a	4f		 dec	 edi
  0001b	3b f9		 cmp	 edi, ecx
  0001d	77 15		 ja	 SHORT $LN10@operator@35
  0001f	85 f6		 test	 esi, esi
  00021	74 0a		 je	 SHORT $LN36@operator@35
  00023	8b 06		 mov	 eax, DWORD PTR [esi]
  00025	eb 08		 jmp	 SHORT $LN37@operator@35
$LN40@operator@35:
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	8b c8		 mov	 ecx, eax
  0002b	eb e7		 jmp	 SHORT $LN31@operator@35
$LN36@operator@35:
  0002d	33 c0		 xor	 eax, eax
$LN37@operator@35:
  0002f	3b 78 18	 cmp	 edi, DWORD PTR [eax+24]
  00032	73 05		 jae	 SHORT $LN9@operator@35
$LN10@operator@35:
  00034	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@operator@35:
  00039	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 441  : 		}

  0003c	5f		 pop	 edi
  0003d	89 33		 mov	 DWORD PTR [ebx], esi
  0003f	8b c3		 mov	 eax, ebx
  00041	5e		 pop	 esi
  00042	c3		 ret	 0
??G?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*, COMDAT
; _this$ = esi

; 386  : 		return ((reference)**(_Mybase *)this);

  00000	e9 00 00 00 00	 jmp	 ??D?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*
??D?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Deque_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@2@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ebx
; ___$ReturnUdt$ = edi

; 676  : 		return (iterator(_Myoff + _Mysize, this));

  00000	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00003	56		 push	 esi
  00004	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  00007	03 f0		 add	 esi, eax
  00009	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000f	3b c6		 cmp	 eax, esi
  00011	76 05		 jbe	 SHORT $LN7@end@11
  00013	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end@11:
  00018	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001a	89 07		 mov	 DWORD PTR [edi], eax
  0001c	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0001f	8b c7		 mov	 eax, edi
  00021	5e		 pop	 esi

; 677  : 		}

  00022	c3		 ret	 0
?end@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@2@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
__Tmp$182155 = -12					; size = 8
$T181925 = -12						; size = 8
?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back, COMDAT
; _this$ = eax

; 789  : 		{	// return last element of mutable sequence

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f8		 mov	 edi, eax

; 790  : 		return (*(end() - 1));

  00008	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0000b	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  0000e	03 f0		 add	 esi, eax
  00010	3b c6		 cmp	 eax, esi
  00012	76 05		 jbe	 SHORT $LN9@back
  00014	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@back:
  00019	8b 3f		 mov	 edi, DWORD PTR [edi]
  0001b	8b df		 mov	 ebx, edi
  0001d	89 74 24 14	 mov	 DWORD PTR __Tmp$182155[esp+32], esi
  00021	85 ff		 test	 edi, edi
  00023	75 1c		 jne	 SHORT $LN64@back
  00025	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0002a	33 c0		 xor	 eax, eax
  0002c	33 c9		 xor	 ecx, ecx
$LN53@back:
  0002e	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00031	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  00034	4e		 dec	 esi
  00035	3b f1		 cmp	 esi, ecx
  00037	77 15		 ja	 SHORT $LN32@back
  00039	85 ff		 test	 edi, edi
  0003b	74 0a		 je	 SHORT $LN58@back
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	eb 08		 jmp	 SHORT $LN59@back
$LN64@back:
  00041	8b 07		 mov	 eax, DWORD PTR [edi]
  00043	8b c8		 mov	 ecx, eax
  00045	eb e7		 jmp	 SHORT $LN53@back
$LN58@back:
  00047	33 ff		 xor	 edi, edi
$LN59@back:
  00049	3b 77 18	 cmp	 esi, DWORD PTR [edi+24]
  0004c	73 05		 jae	 SHORT $LN31@back
$LN32@back:
  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN31@back:
  00053	89 74 24 14	 mov	 DWORD PTR $T181925[esp+32], esi
  00057	8d 74 24 10	 lea	 esi, DWORD PTR $T181925[esp+28]
  0005b	89 5c 24 10	 mov	 DWORD PTR $T181925[esp+28], ebx
  0005f	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@$00@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Deque_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,1>::operator*

; 791  : 		}

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	c3		 ret	 0
?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+24], -1
  00028	8b 44 24 14	 mov	 eax, DWORD PTR _this$[esp+12]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00034	83 c4 04	 add	 esp, 4
  00037	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 02		 lea	 eax, DWORD PTR [edx]
  0000e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00011	33 c8		 xor	 ecx, eax
  00013	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00018	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0001d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Deque_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+24], -1
  00028	8b 44 24 14	 mov	 eax, DWORD PTR _this$[esp+12]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00034	83 c4 04	 add	 esp, 4
  00037	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00009	c3		 ret	 0
__unwindfunclet$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$1:
  0000a	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000d	e9 00 00 00 00	 jmp	 ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 02		 lea	 eax, DWORD PTR [edx]
  00018	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stack
;	COMDAT ?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::top, COMDAT
; _this$ = eax

; 47   : 		{	// return last element of mutable stack

  00000	51		 push	 ecx

; 48   : 		return (c.back());

  00001	e8 00 00 00 00	 call	 ?back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
  00006	59		 pop	 ecx

; 49   : 		}

  00007	c3		 ret	 0
?top@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::top
_TEXT	ENDS
PUBLIC	?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; xmlwriter::AddComment
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_sComment$ = 8						; size = 28
?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; xmlwriter::AddComment, COMDAT
; _this$ = ecx

; 118  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 119  : 	Write(__LINE__,"\n");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00031	6a 77		 push	 119			; 00000077H
  00033	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 120  : 	//Indent properly
; 121  : 	for(int iTmp =0;iTmp<iLevel;iTmp++)

  00038	33 ff		 xor	 edi, edi
  0003a	83 c4 08	 add	 esp, 8
  0003d	39 7e 38	 cmp	 DWORD PTR [esi+56], edi
  00040	7e 15		 jle	 SHORT $LN1@AddComment
$LL3@AddComment:

; 122  : 		Write(__LINE__,"\t");

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  00047	6a 7a		 push	 122			; 0000007aH
  00049	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0004e	47		 inc	 edi
  0004f	83 c4 08	 add	 esp, 8
  00052	3b 7e 38	 cmp	 edi, DWORD PTR [esi+56]
  00055	7c eb		 jl	 SHORT $LL3@AddComment
$LN1@AddComment:

; 123  : 	Write(__LINE__,"<!-- %s -->",sComment.c_str());

  00057	8b 44 24 20	 mov	 eax, DWORD PTR _sComment$[esp+24]
  0005b	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00060	39 7c 24 34	 cmp	 DWORD PTR _sComment$[esp+44], edi
  00064	73 04		 jae	 SHORT $LN12@AddComment
  00066	8d 44 24 20	 lea	 eax, DWORD PTR _sComment$[esp+24]
$LN12@AddComment:
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAIKGCLN@?$DM?$CB?9?9?5?$CFs?5?9?9?$DO?$AA@
  00070	6a 7b		 push	 123			; 0000007bH
  00072	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 124  : }

  0007a	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00082	39 7c 24 34	 cmp	 DWORD PTR _sComment$[esp+44], edi
  00086	72 0d		 jb	 SHORT $LN29@AddComment
  00088	8b 44 24 20	 mov	 eax, DWORD PTR _sComment$[esp+24]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00092	83 c4 04	 add	 esp, 4
$LN29@AddComment:
  00095	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR _sComment$[esp+44], 15 ; 0000000fH
  0009d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _sComment$[esp+40], 0
  000a5	c6 44 24 20 00	 mov	 BYTE PTR _sComment$[esp+24], 0
  000aa	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _sComment$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddComment@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; xmlwriter::AddComment
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Z?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Z?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-=, COMDAT
; _this$ = esi

; 387  : 		return (*this += -_Off);

  00000	8b 06		 mov	 eax, DWORD PTR [esi]
  00002	85 c0		 test	 eax, eax
  00004	75 0b		 jne	 SHORT $LN30@operator@67
  00006	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	85 c0		 test	 eax, eax
  0000f	74 04		 je	 SHORT $LN20@operator@67
$LN30@operator@67:
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	eb 02		 jmp	 SHORT $LN21@operator@67
$LN20@operator@67:
  00015	33 d2		 xor	 edx, edx
$LN21@operator@67:
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	83 c1 e4	 add	 ecx, -28		; ffffffe4H
  0001d	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  00020	77 0f		 ja	 SHORT $LN8@operator@67
  00022	85 c0		 test	 eax, eax
  00024	74 04		 je	 SHORT $LN26@operator@67
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	eb 02		 jmp	 SHORT $LN27@operator@67
$LN26@operator@67:
  0002a	33 c0		 xor	 eax, eax
$LN27@operator@67:
  0002c	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0002f	73 05		 jae	 SHORT $LN31@operator@67
$LN8@operator@67:
  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN31@operator@67:
  00036	83 46 04 e4	 add	 DWORD PTR [esi+4], -28	; ffffffe4H
  0003a	8b c6		 mov	 eax, esi

; 388  : 		}

  0003c	c3		 ret	 0
??Z?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-=
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$0
__ehfuncinfo$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
$T188731 = -16						; size = 4
$T188736 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 500  : 		{	// construct allocator and base from _Al

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 74 24 1c	 mov	 esi, DWORD PTR _this$[esp+20]
  00026	51		 push	 ecx
  00027	89 64 24 0c	 mov	 DWORD PTR $T188736[esp+28], esp
  0002b	89 64 24 0c	 mov	 DWORD PTR $T188731[esp+28], esp
  0002f	e8 00 00 00 00	 call	 ??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 501  : 		}

  00034	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  0003c	8b c6		 mov	 eax, esi
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$1:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$0:
  00008	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00011	c3		 ret	 0
__ehhandler$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Deque_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = ebx

; 391  : 		{	// return this - integer

  00000	56		 push	 esi

; 392  : 		_Myt _Tmp = *this;

  00001	8b 30		 mov	 esi, DWORD PTR [eax]
  00003	57		 push	 edi
  00004	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 393  : 		return (_Tmp -= _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 17		 jne	 SHORT $LN32@operator@68
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN23@operator@68:
  00012	8d 4f e4	 lea	 ecx, DWORD PTR [edi-28]
  00015	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00018	77 13		 ja	 SHORT $LN10@operator@68
  0001a	85 f6		 test	 esi, esi
  0001c	74 08		 je	 SHORT $LN28@operator@68
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	eb 06		 jmp	 SHORT $LN29@operator@68
$LN32@operator@68:
  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	eb ec		 jmp	 SHORT $LN23@operator@68
$LN28@operator@68:
  00026	33 c0		 xor	 eax, eax
$LN29@operator@68:
  00028	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0002b	73 05		 jae	 SHORT $LN9@operator@68
$LN10@operator@68:
  0002d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@operator@68:
  00032	83 ef 1c	 sub	 edi, 28			; 0000001cH
  00035	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 394  : 		}

  00038	5f		 pop	 edi
  00039	89 33		 mov	 DWORD PTR [ebx], esi
  0003b	8b c3		 mov	 eax, ebx
  0003d	5e		 pop	 esi
  0003e	c3		 ret	 0
??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back, COMDAT
; _this$ = esi

; 864  : 
; 865  :  #if _HAS_ITERATOR_DEBUGGING
; 866  : 		if (empty())
; 867  : 			_DEBUG_ERROR("deque empty before pop");
; 868  : 		else
; 869  : 			{	// something to erase, do it
; 870  : 			_Orphan_off(_Myoff + _Mysize - 1);
; 871  : 
; 872  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 873  : 		if (!empty())

  00000	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00003	85 c0		 test	 eax, eax
  00005	74 49		 je	 SHORT $LN1@pop_back

; 874  : 			{	// something to erase, do it
; 875  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 876  : 
; 877  : 			size_type _Newoff = _Mysize + _Myoff - 1;
; 878  : 			size_type _Block = _Newoff / _DEQUESIZ;

  00007	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000a	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]

; 879  : 			if (_Mapsize <= _Block)

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	3b c8		 cmp	 ecx, eax
  00013	77 02		 ja	 SHORT $LN2@pop_back

; 880  : 				_Block -= _Mapsize;

  00015	2b c1		 sub	 eax, ecx
$LN2@pop_back:

; 881  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	57		 push	 edi
  0001b	8b 3c 82	 mov	 edi, DWORD PTR [edx+eax*4]
  0001e	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00022	72 0c		 jb	 SHORT $LN31@pop_back
  00024	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
$LN31@pop_back:
  00030	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  00037	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0003e	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0

; 882  : 			if (--_Mysize == 0)

  00042	83 46 1c ff	 add	 DWORD PTR [esi+28], -1
  00046	5f		 pop	 edi
  00047	75 07		 jne	 SHORT $LN1@pop_back

; 883  : 				_Myoff = 0;

  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN1@pop_back:

; 884  : 			}
; 885  : 			}

  00050	c3		 ret	 0
?pop_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T189117 = -16						; size = 4
$T189139 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 554  : 		{	// construct empty deque

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 74 24 1c	 mov	 esi, DWORD PTR _this$[esp+20]
  00026	51		 push	 ecx
  00027	89 64 24 0c	 mov	 DWORD PTR $T189139[esp+28], esp
  0002b	89 64 24 0c	 mov	 DWORD PTR $T189117[esp+28], esp
  0002f	e8 00 00 00 00	 call	 ??0?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00034	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 2
  0003c	33 c0		 xor	 eax, eax
  0003e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00041	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00044	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00047	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 555  : 		}

  0004a	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00052	8b c6		 mov	 eax, esi
  00054	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$2:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$1:
  00008	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00011	c3		 ret	 0
__unwindfunclet$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00012	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0001b	c3		 ret	 0
__ehhandler$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00023	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stack
;	COMDAT ?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::pop, COMDAT
; _this$ = esi

; 63   : 		c.pop_back();

  00000	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00003	85 c0		 test	 eax, eax
  00005	74 49		 je	 SHORT $LN3@pop
  00007	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000a	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	3b c8		 cmp	 ecx, eax
  00013	77 02		 ja	 SHORT $LN4@pop
  00015	2b c1		 sub	 eax, ecx
$LN4@pop:
  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	57		 push	 edi
  0001b	8b 3c 82	 mov	 edi, DWORD PTR [edx+eax*4]
  0001e	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00022	72 0c		 jb	 SHORT $LN33@pop
  00024	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
$LN33@pop:
  00030	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  00037	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0003e	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  00042	83 46 1c ff	 add	 DWORD PTR [esi+28], -1
  00046	5f		 pop	 edi
  00047	75 07		 jne	 SHORT $LN3@pop
  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN3@pop:

; 64   : 		}

  00050	c3		 ret	 0
?pop@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXXZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::pop
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Cat$189452 = -4					; size = 1
?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back, COMDAT
; _this$ = esi

; 841  : 		{	// erase element at end

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 842  : 		if (!empty())

  00002	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00005	8b cf		 mov	 ecx, edi
  00007	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  0000a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000f	f7 e9		 imul	 ecx
  00011	03 d1		 add	 edx, ecx
  00013	c1 fa 04	 sar	 edx, 4
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx
  0001d	74 14		 je	 SHORT $LN1@pop_back@2

; 843  : 			{	// erase last element
; 844  : 			_Destroy(_Mylast - 1, _Mylast);

  0001f	8b 4c 24 04	 mov	 ecx, DWORD PTR __Cat$189452[esp+8]
  00023	51		 push	 ecx
  00024	8d 47 e4	 lea	 eax, DWORD PTR [edi-28]
  00027	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0002c	83 c4 04	 add	 esp, 4

; 845  : 			--_Mylast;

  0002f	83 46 10 e4	 add	 DWORD PTR [esi+16], -28	; ffffffe4H
$LN1@pop_back@2:
  00033	5f		 pop	 edi

; 846  : 			}
; 847  : 		}

  00034	59		 pop	 ecx
  00035	c3		 ret	 0
?pop_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::pop_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
__Tmp$189656 = -8					; size = 8
?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back, COMDAT
; _this$ = eax

; 799  : 		{	// return last element of mutable sequence

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f0		 mov	 esi, eax
  00007	57		 push	 edi

; 800  : 		return (*(end() - 1));

  00008	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000b	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  0000e	76 05		 jbe	 SHORT $LN9@back@2
  00010	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@back@2:
  00015	8b 36		 mov	 esi, DWORD PTR [esi]
  00017	8b de		 mov	 ebx, esi
  00019	89 7c 24 10	 mov	 DWORD PTR __Tmp$189656[esp+24], edi
  0001d	85 f6		 test	 esi, esi
  0001f	75 17		 jne	 SHORT $LN74@back@2
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00026	33 c0		 xor	 eax, eax
$LN44@back@2:
  00028	8d 4f e4	 lea	 ecx, DWORD PTR [edi-28]
  0002b	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0002e	77 13		 ja	 SHORT $LN31@back@2
  00030	85 f6		 test	 esi, esi
  00032	74 08		 je	 SHORT $LN49@back@2
  00034	8b 36		 mov	 esi, DWORD PTR [esi]
  00036	eb 06		 jmp	 SHORT $LN50@back@2
$LN74@back@2:
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	eb ec		 jmp	 SHORT $LN44@back@2
$LN49@back@2:
  0003c	33 f6		 xor	 esi, esi
$LN50@back@2:
  0003e	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00041	73 05		 jae	 SHORT $LN30@back@2
$LN31@back@2:
  00043	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN30@back@2:
  00048	8d 77 e4	 lea	 esi, DWORD PTR [edi-28]
  0004b	85 db		 test	 ebx, ebx
  0004d	75 1a		 jne	 SHORT $LN73@back@2
  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00054	33 c0		 xor	 eax, eax
$LN70@back@2:
  00056	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00059	72 05		 jb	 SHORT $LN75@back@2
  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN75@back@2:

; 801  : 		}

  00060	5f		 pop	 edi
  00061	8b c6		 mov	 eax, esi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	83 c4 08	 add	 esp, 8
  00068	c3		 ret	 0
$LN73@back@2:

; 800  : 		return (*(end() - 1));

  00069	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006b	eb e9		 jmp	 SHORT $LN70@back@2
?back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::back
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = esi
; __Right$ = eax

; 946  : 		return (append(_Right, 0, npos));

  00000	6a 00		 push	 0
  00002	50		 push	 eax
  00003	83 c8 ff	 or	 eax, -1
  00006	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000b	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?CloseAlltags@xmlwriter@@QAEXXZ			; xmlwriter::CloseAlltags
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
;	COMDAT ?CloseAlltags@xmlwriter@@QAEXXZ
_TEXT	SEGMENT
__Tmp$190333 = -8					; size = 8
?CloseAlltags@xmlwriter@@QAEXXZ PROC			; xmlwriter::CloseAlltags, COMDAT
; _this$ = eax

; 72   : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f0		 mov	 esi, eax

; 73   : 	while(sTagStack.size() != 0)

  00008	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0000c	57		 push	 edi
  0000d	0f 84 3f 01 00
	00		 je	 $LN4@CloseAllta
$LN5@CloseAllta:

; 74   : 	{
; 75   : 	   Write(__LINE__,"\n");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00018	6a 4b		 push	 75			; 0000004bH
  0001a	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 76   : 	   iLevel--;

  0001f	ff 4e 38	 dec	 DWORD PTR [esi+56]
  00022	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00025	83 c4 08	 add	 esp, 8

; 77   :         //Indent properly
; 78   : 	   for(int iTmp =0;iTmp<iLevel;iTmp++)

  00028	33 ff		 xor	 edi, edi
  0002a	85 c0		 test	 eax, eax
  0002c	7e 17		 jle	 SHORT $LN1@CloseAllta
  0002e	8b ff		 npad	 2
$LL3@CloseAllta:

; 79   : 	       Write(__LINE__,"\t");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  00035	6a 4f		 push	 79			; 0000004fH
  00037	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  0003c	47		 inc	 edi
  0003d	83 c4 08	 add	 esp, 8
  00040	3b 7e 38	 cmp	 edi, DWORD PTR [esi+56]
  00043	7c eb		 jl	 SHORT $LL3@CloseAllta
$LN1@CloseAllta:

; 80   : 	   Write(__LINE__,"</%s>",sTagStack.top().c_str());

  00045	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00048	8b 7e 58	 mov	 edi, DWORD PTR [esi+88]
  0004b	03 f8		 add	 edi, eax
  0004d	3b c7		 cmp	 eax, edi
  0004f	76 05		 jbe	 SHORT $LN22@CloseAllta
  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@CloseAllta:
  00056	8b 6e 3c	 mov	 ebp, DWORD PTR [esi+60]
  00059	8b dd		 mov	 ebx, ebp
  0005b	89 7c 24 18	 mov	 DWORD PTR __Tmp$190333[esp+32], edi
  0005f	85 ed		 test	 ebp, ebp
  00061	75 1d		 jne	 SHORT $LN172@CloseAllta
  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00068	33 c0		 xor	 eax, eax
  0006a	33 c9		 xor	 ecx, ecx
$LN66@CloseAllta:
  0006c	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0006f	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  00072	4f		 dec	 edi
  00073	3b f9		 cmp	 edi, ecx
  00075	77 17		 ja	 SHORT $LN45@CloseAllta
  00077	85 ed		 test	 ebp, ebp
  00079	74 0c		 je	 SHORT $LN71@CloseAllta
  0007b	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
  0007e	eb 09		 jmp	 SHORT $LN72@CloseAllta
$LN172@CloseAllta:
  00080	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00083	8b c8		 mov	 ecx, eax
  00085	eb e5		 jmp	 SHORT $LN66@CloseAllta
$LN71@CloseAllta:
  00087	33 ed		 xor	 ebp, ebp
$LN72@CloseAllta:
  00089	3b 7d 18	 cmp	 edi, DWORD PTR [ebp+24]
  0008c	73 05		 jae	 SHORT $LN44@CloseAllta
$LN45@CloseAllta:
  0008e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN44@CloseAllta:
  00093	85 db		 test	 ebx, ebx
  00095	75 20		 jne	 SHORT $LN171@CloseAllta
  00097	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0009c	33 c0		 xor	 eax, eax
  0009e	33 c9		 xor	 ecx, ecx
$LN99@CloseAllta:
  000a0	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000a3	03 50 18	 add	 edx, DWORD PTR [eax+24]
  000a6	3b fa		 cmp	 edi, edx
  000a8	72 05		 jb	 SHORT $LN80@CloseAllta
  000aa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN80@CloseAllta:
  000af	85 db		 test	 ebx, ebx
  000b1	74 0a		 je	 SHORT $LN104@CloseAllta
  000b3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b5	eb 08		 jmp	 SHORT $LN105@CloseAllta
$LN171@CloseAllta:
  000b7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b9	8b c8		 mov	 ecx, eax
  000bb	eb e3		 jmp	 SHORT $LN99@CloseAllta
$LN104@CloseAllta:
  000bd	33 c0		 xor	 eax, eax
$LN105@CloseAllta:
  000bf	39 78 14	 cmp	 DWORD PTR [eax+20], edi
  000c2	77 0d		 ja	 SHORT $LN77@CloseAllta
  000c4	85 db		 test	 ebx, ebx
  000c6	74 04		 je	 SHORT $LN110@CloseAllta
  000c8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ca	eb 02		 jmp	 SHORT $LN111@CloseAllta
$LN110@CloseAllta:
  000cc	33 c0		 xor	 eax, eax
$LN111@CloseAllta:
  000ce	2b 78 14	 sub	 edi, DWORD PTR [eax+20]
$LN77@CloseAllta:
  000d1	85 db		 test	 ebx, ebx
  000d3	74 04		 je	 SHORT $LN116@CloseAllta
  000d5	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d7	eb 02		 jmp	 SHORT $LN117@CloseAllta
$LN116@CloseAllta:
  000d9	33 c0		 xor	 eax, eax
$LN117@CloseAllta:
  000db	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000de	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000e1	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  000e6	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  000e9	72 05		 jb	 SHORT $LN124@CloseAllta
  000eb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ee	eb 03		 jmp	 SHORT $LN125@CloseAllta
$LN124@CloseAllta:
  000f0	83 c0 04	 add	 eax, 4
$LN125@CloseAllta:
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@
  000f9	6a 50		 push	 80			; 00000050H
  000fb	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 81   : 	   sTagStack.pop();//pop out the last tag

  00100	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00103	33 db		 xor	 ebx, ebx
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	3b c3		 cmp	 eax, ebx
  0010a	74 3d		 je	 SHORT $LN128@CloseAllta
  0010c	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0010f	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00113	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00116	3b c8		 cmp	 ecx, eax
  00118	77 02		 ja	 SHORT $LN129@CloseAllta
  0011a	2b c1		 sub	 eax, ecx
$LN129@CloseAllta:
  0011c	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0011f	8b 3c 82	 mov	 edi, DWORD PTR [edx+eax*4]
  00122	39 6f 18	 cmp	 DWORD PTR [edi+24], ebp
  00125	72 0c		 jb	 SHORT $LN158@CloseAllta
  00127	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00130	83 c4 04	 add	 esp, 4
$LN158@CloseAllta:
  00133	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  0013a	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  0013d	88 5f 04	 mov	 BYTE PTR [edi+4], bl
  00140	83 46 58 ff	 add	 DWORD PTR [esi+88], -1
  00144	75 03		 jne	 SHORT $LN128@CloseAllta
  00146	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN128@CloseAllta:

; 73   : 	while(sTagStack.size() != 0)

  00149	39 5e 58	 cmp	 DWORD PTR [esi+88], ebx
  0014c	0f 85 c1 fe ff
	ff		 jne	 $LN5@CloseAllta
$LN4@CloseAllta:

; 82   :     }
; 83   : 	return;
; 84   : }

  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5d		 pop	 ebp
  00155	5b		 pop	 ebx
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
  00159	c3		 ret	 0
?CloseAlltags@xmlwriter@@QAEXXZ ENDP			; xmlwriter::CloseAlltags
_TEXT	ENDS
PUBLIC	?CloseLasttag@xmlwriter@@QAEXXZ			; xmlwriter::CloseLasttag
; Function compile flags: /Ogtpy
;	COMDAT ?CloseLasttag@xmlwriter@@QAEXXZ
_TEXT	SEGMENT
__Tmp$191335 = -8					; size = 8
?CloseLasttag@xmlwriter@@QAEXXZ PROC			; xmlwriter::CloseLasttag, COMDAT
; _this$ = eax

; 60   : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi

; 61   : 	Write(__LINE__,"\n");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0000c	8b f0		 mov	 esi, eax
  0000e	6a 3d		 push	 61			; 0000003dH
  00010	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 62   : 	iLevel--;

  00015	ff 4e 38	 dec	 DWORD PTR [esi+56]
  00018	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0001b	83 c4 08	 add	 esp, 8

; 63   :     //Indent properly
; 64   : 	for(int iTmp =0;iTmp<iLevel;iTmp++)

  0001e	33 ff		 xor	 edi, edi
  00020	85 c0		 test	 eax, eax
  00022	7e 15		 jle	 SHORT $LN1@CloseLastt
$LL3@CloseLastt:

; 65   : 		Write(__LINE__,"\t");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  00029	6a 41		 push	 65			; 00000041H
  0002b	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00030	47		 inc	 edi
  00031	83 c4 08	 add	 esp, 8
  00034	3b 7e 38	 cmp	 edi, DWORD PTR [esi+56]
  00037	7c eb		 jl	 SHORT $LL3@CloseLastt
$LN1@CloseLastt:

; 66   : 	Write(__LINE__,"</%s>",sTagStack.top().c_str());

  00039	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0003c	8b 7e 58	 mov	 edi, DWORD PTR [esi+88]
  0003f	03 f8		 add	 edi, eax
  00041	3b c7		 cmp	 eax, edi
  00043	76 05		 jbe	 SHORT $LN16@CloseLastt
  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN16@CloseLastt:
  0004a	8b 6e 3c	 mov	 ebp, DWORD PTR [esi+60]
  0004d	8b dd		 mov	 ebx, ebp
  0004f	89 7c 24 18	 mov	 DWORD PTR __Tmp$191335[esp+32], edi
  00053	85 ed		 test	 ebp, ebp
  00055	75 1d		 jne	 SHORT $LN165@CloseLastt
  00057	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0005c	33 c0		 xor	 eax, eax
  0005e	33 c9		 xor	 ecx, ecx
$LN60@CloseLastt:
  00060	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00063	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  00066	4f		 dec	 edi
  00067	3b f9		 cmp	 edi, ecx
  00069	77 17		 ja	 SHORT $LN39@CloseLastt
  0006b	85 ed		 test	 ebp, ebp
  0006d	74 0c		 je	 SHORT $LN65@CloseLastt
  0006f	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
  00072	eb 09		 jmp	 SHORT $LN66@CloseLastt
$LN165@CloseLastt:
  00074	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00077	8b c8		 mov	 ecx, eax
  00079	eb e5		 jmp	 SHORT $LN60@CloseLastt
$LN65@CloseLastt:
  0007b	33 ed		 xor	 ebp, ebp
$LN66@CloseLastt:
  0007d	3b 7d 18	 cmp	 edi, DWORD PTR [ebp+24]
  00080	73 05		 jae	 SHORT $LN38@CloseLastt
$LN39@CloseLastt:
  00082	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN38@CloseLastt:
  00087	85 db		 test	 ebx, ebx
  00089	75 20		 jne	 SHORT $LN164@CloseLastt
  0008b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00090	33 c0		 xor	 eax, eax
  00092	33 c9		 xor	 ecx, ecx
$LN93@CloseLastt:
  00094	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00097	03 50 18	 add	 edx, DWORD PTR [eax+24]
  0009a	3b fa		 cmp	 edi, edx
  0009c	72 05		 jb	 SHORT $LN74@CloseLastt
  0009e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN74@CloseLastt:
  000a3	85 db		 test	 ebx, ebx
  000a5	74 0a		 je	 SHORT $LN98@CloseLastt
  000a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a9	eb 08		 jmp	 SHORT $LN99@CloseLastt
$LN164@CloseLastt:
  000ab	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ad	8b c8		 mov	 ecx, eax
  000af	eb e3		 jmp	 SHORT $LN93@CloseLastt
$LN98@CloseLastt:
  000b1	33 c0		 xor	 eax, eax
$LN99@CloseLastt:
  000b3	39 78 14	 cmp	 DWORD PTR [eax+20], edi
  000b6	77 0d		 ja	 SHORT $LN71@CloseLastt
  000b8	85 db		 test	 ebx, ebx
  000ba	74 04		 je	 SHORT $LN104@CloseLastt
  000bc	8b 03		 mov	 eax, DWORD PTR [ebx]
  000be	eb 02		 jmp	 SHORT $LN105@CloseLastt
$LN104@CloseLastt:
  000c0	33 c0		 xor	 eax, eax
$LN105@CloseLastt:
  000c2	2b 78 14	 sub	 edi, DWORD PTR [eax+20]
$LN71@CloseLastt:
  000c5	85 db		 test	 ebx, ebx
  000c7	74 04		 je	 SHORT $LN110@CloseLastt
  000c9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cb	eb 02		 jmp	 SHORT $LN111@CloseLastt
$LN110@CloseLastt:
  000cd	33 c0		 xor	 eax, eax
$LN111@CloseLastt:
  000cf	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000d2	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000d5	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  000da	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  000dd	72 05		 jb	 SHORT $LN118@CloseLastt
  000df	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e2	eb 03		 jmp	 SHORT $LN119@CloseLastt
$LN118@CloseLastt:
  000e4	83 c0 04	 add	 eax, 4
$LN119@CloseLastt:
  000e7	50		 push	 eax
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@
  000ed	6a 42		 push	 66			; 00000042H
  000ef	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 67   : 	sTagStack.pop();//pop out the last tag

  000f4	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000f7	33 db		 xor	 ebx, ebx
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fc	3b c3		 cmp	 eax, ebx
  000fe	74 3d		 je	 SHORT $LN122@CloseLastt
  00100	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00103	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00107	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0010a	3b c8		 cmp	 ecx, eax
  0010c	77 02		 ja	 SHORT $LN123@CloseLastt
  0010e	2b c1		 sub	 eax, ecx
$LN123@CloseLastt:
  00110	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  00113	8b 3c 82	 mov	 edi, DWORD PTR [edx+eax*4]
  00116	39 6f 18	 cmp	 DWORD PTR [edi+24], ebp
  00119	72 0c		 jb	 SHORT $LN152@CloseLastt
  0011b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00124	83 c4 04	 add	 esp, 4
$LN152@CloseLastt:
  00127	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  0012e	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00131	88 5f 04	 mov	 BYTE PTR [edi+4], bl
  00134	83 46 58 ff	 add	 DWORD PTR [esi+88], -1
  00138	75 03		 jne	 SHORT $LN122@CloseLastt
  0013a	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN122@CloseLastt:

; 68   : 	return;
; 69   : }

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5d		 pop	 ebp
  00140	5b		 pop	 ebx
  00141	83 c4 0c	 add	 esp, 12			; 0000000cH
  00144	c3		 ret	 0
?CloseLasttag@xmlwriter@@QAEXXZ ENDP			; xmlwriter::CloseLasttag
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ$1
__ehfuncinfo$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
_TEXT	SEGMENT
$T193293 = -80						; size = 28
$T193292 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT

; 1210 : 		{	// report length error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 48	 sub	 esp, 72			; 00000048H
  00011	53		 push	 ebx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1211 : 		_THROW(length_error, "deque<T> too long");

  00024	6a 11		 push	 17			; 00000011H
  00026	33 db		 xor	 ebx, ebx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  0002d	8d 4c 24 14	 lea	 ecx, DWORD PTR $T193293[esp+100]
  00031	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T193293[esp+124], 15 ; 0000000fH
  00039	89 5c 24 28	 mov	 DWORD PTR $T193293[esp+120], ebx
  0003d	88 5c 24 18	 mov	 BYTE PTR $T193293[esp+104], bl
  00041	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00046	89 5c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], ebx
  0004a	8d 44 24 0c	 lea	 eax, DWORD PTR $T193293[esp+92]
  0004e	50		 push	 eax
  0004f	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T193292[esp+96]
  00053	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00058	c6 44 24 58 01	 mov	 BYTE PTR __$EHRec$[esp+100], 1
  0005d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T193292[esp+92], OFFSET ??_7length_error@std@@6B@
  00065	88 5c 24 58	 mov	 BYTE PTR __$EHRec$[esp+100], bl
  00069	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  0006e	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T193292[esp+96]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@Xlen:
$LN44@Xlen:
  00078	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T193293[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ$1:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR $T193292[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
__ehhandler$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  00017	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = -24						; size = 4
__Myboff$ = -20						; size = 4
__Newmap$ = -16						; size = 4
$T193507 = -12						; size = 12
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap, COMDAT
; _this$ = ebx

; 1225 : 		{	// grow map by _Count pointers

  00000	83 ec 18	 sub	 esp, 24			; 00000018H

; 1226 : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

  00003	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00006	55		 push	 ebp
  00007	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H
  0000c	ba 01 00 00 00	 mov	 edx, 1
  00011	2b c1		 sub	 eax, ecx
  00013	56		 push	 esi
  00014	57		 push	 edi

; 1236 : 		_Mapptr _Myptr = _Newmap + _Myboff;
; 1237 : 
; 1238 : 		_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Myboff,
; 1239 : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

  00015	89 54 24 0c	 mov	 DWORD PTR __Count$[esp+36], edx
  00019	3b c2		 cmp	 eax, edx
  0001b	73 05		 jae	 SHORT $LN6@Growmap

; 1227 : 			_Xlen();	// result too long

  0001d	e8 00 00 00 00	 call	 ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN166@Growmap:
$LN6@Growmap:

; 1228 : 
; 1229 : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

  00022	8b c1		 mov	 eax, ecx
  00024	d1 e8		 shr	 eax, 1

; 1230 : 		if (_Inc < _DEQUEMAPSIZ)

  00026	83 f8 08	 cmp	 eax, 8
  00029	73 07		 jae	 SHORT $LN5@Growmap

; 1231 : 			_Inc = _DEQUEMAPSIZ;

  0002b	b8 08 00 00 00	 mov	 eax, 8

; 1232 : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

  00030	eb 05		 jmp	 SHORT $LN161@Growmap
$LN5@Growmap:
  00032	83 f8 01	 cmp	 eax, 1
  00035	76 11		 jbe	 SHORT $LN4@Growmap
$LN161@Growmap:
  00037	be 49 92 24 09	 mov	 esi, 153391689		; 09249249H
  0003c	2b f0		 sub	 esi, eax
  0003e	3b ce		 cmp	 ecx, esi
  00040	77 06		 ja	 SHORT $LN4@Growmap

; 1233 : 			_Count = _Inc;

  00042	8b d0		 mov	 edx, eax
  00044	89 44 24 0c	 mov	 DWORD PTR __Count$[esp+36], eax
$LN4@Growmap:

; 1234 : 		size_type _Myboff = _Myoff / _DEQUESIZ;
; 1235 : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

  00048	03 ca		 add	 ecx, edx
  0004a	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  0004d	89 74 24 10	 mov	 DWORD PTR __Myboff$[esp+36], esi
  00051	0f 85 9e 00 00
	00		 jne	 $LN25@Growmap
$LN23@Growmap:
  00057	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1236 : 		_Mapptr _Myptr = _Newmap + _Myboff;
; 1237 : 
; 1238 : 		_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Myboff,
; 1239 : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

  00064	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00067	89 44 24 18	 mov	 DWORD PTR __Newmap$[esp+40], eax
  0006b	03 f6		 add	 esi, esi
  0006d	03 f6		 add	 esi, esi
  0006f	8d 3c 06	 lea	 edi, DWORD PTR [esi+eax]
  00072	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00075	03 c0		 add	 eax, eax
  00077	03 c0		 add	 eax, eax
  00079	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  0007c	2b c2		 sub	 eax, edx
  0007e	03 c1		 add	 eax, ecx
  00080	c1 f8 02	 sar	 eax, 2
  00083	83 c4 04	 add	 esp, 4
  00086	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0008d	8d 2c 39	 lea	 ebp, DWORD PTR [ecx+edi]
  00090	85 c0		 test	 eax, eax
  00092	76 0c		 jbe	 SHORT $LN42@Growmap
  00094	51		 push	 ecx
  00095	52		 push	 edx
  00096	51		 push	 ecx
  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 _memmove_s
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
$LN42@Growmap:

; 1240 : 		if (_Myboff <= _Count)

  000a0	8b 54 24 10	 mov	 edx, DWORD PTR __Myboff$[esp+36]
  000a4	8b 44 24 0c	 mov	 eax, DWORD PTR __Count$[esp+36]
  000a8	3b d0		 cmp	 edx, eax
  000aa	77 73		 ja	 SHORT $LN3@Growmap

; 1241 : 			{	// increment greater than offset of initial block
; 1242 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map,
; 1243 : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

  000ac	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  000af	c1 fe 02	 sar	 esi, 2
  000b2	8d 0c b5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*4]
  000b9	8d 3c 29	 lea	 edi, DWORD PTR [ecx+ebp]
  000bc	85 f6		 test	 esi, esi
  000be	76 10		 jbe	 SHORT $LN57@Growmap
  000c0	51		 push	 ecx
  000c1	50		 push	 eax
  000c2	51		 push	 ecx
  000c3	55		 push	 ebp
  000c4	e8 00 00 00 00	 call	 _memmove_s
  000c9	8b 54 24 20	 mov	 edx, DWORD PTR __Myboff$[esp+52]
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$LN57@Growmap:

; 1244 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 1245 : 				(_Tptr)0, this->_Almap);	// clear suffix of new

  000d0	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp+36]
  000d4	2b ca		 sub	 ecx, edx
  000d6	74 08		 je	 SHORT $LN78@Growmap
  000d8	8b 54 24 10	 mov	 edx, DWORD PTR __Myboff$[esp+36]
  000dc	33 c0		 xor	 eax, eax
  000de	f3 ab		 rep stosd
$LN78@Growmap:

; 1246 : 			_STDEXT unchecked_uninitialized_fill_n(_Newmap, _Myboff,
; 1247 : 				(_Tptr)0, this->_Almap);	// clear prefix of new

  000e0	8b 6c 24 14	 mov	 ebp, DWORD PTR __Newmap$[esp+36]
  000e4	85 d2		 test	 edx, edx
  000e6	0f 86 8d 00 00
	00		 jbe	 $LN150@Growmap
  000ec	8b ca		 mov	 ecx, edx
  000ee	8b fd		 mov	 edi, ebp

; 1248 : 			}
; 1249 : 		else

  000f0	e9 80 00 00 00	 jmp	 $LN165@Growmap

; 1234 : 		size_type _Myboff = _Myoff / _DEQUESIZ;
; 1235 : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

$LN25@Growmap:
  000f5	83 c8 ff	 or	 eax, -1
  000f8	33 d2		 xor	 edx, edx
  000fa	f7 f1		 div	 ecx
  000fc	83 f8 04	 cmp	 eax, 4
  000ff	0f 83 52 ff ff
	ff		 jae	 $LN23@Growmap
  00105	6a 00		 push	 0
  00107	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T193507[esp+40]
  0010b	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  00110	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00115	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T193507[esp+40]
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN167@Growmap:
$LN3@Growmap:

; 1250 : 			{	// increment not greater than offset of initial block
; 1251 : 			_STDEXT unchecked_uninitialized_copy(_Map,
; 1252 : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

  0011f	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00122	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00129	8b c7		 mov	 eax, edi
  0012b	c1 f8 02	 sar	 eax, 2
  0012e	85 c0		 test	 eax, eax
  00130	76 10		 jbe	 SHORT $LN114@Growmap
  00132	03 c0		 add	 eax, eax
  00134	03 c0		 add	 eax, eax
  00136	50		 push	 eax
  00137	51		 push	 ecx
  00138	50		 push	 eax
  00139	55		 push	 ebp
  0013a	e8 00 00 00 00	 call	 _memmove_s
  0013f	83 c4 10	 add	 esp, 16			; 00000010H
$LN114@Growmap:

; 1253 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Count,
; 1254 : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

  00142	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00145	8b 6c 24 14	 mov	 ebp, DWORD PTR __Newmap$[esp+36]
  00149	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
  0014c	2b f1		 sub	 esi, ecx
  0014e	03 f0		 add	 esi, eax
  00150	c1 fe 02	 sar	 esi, 2
  00153	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  0015a	8d 3c 28	 lea	 edi, DWORD PTR [eax+ebp]
  0015d	85 f6		 test	 esi, esi
  0015f	76 0c		 jbe	 SHORT $LN129@Growmap
  00161	50		 push	 eax
  00162	51		 push	 ecx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	e8 00 00 00 00	 call	 _memmove_s
  0016a	83 c4 10	 add	 esp, 16			; 00000010H
$LN129@Growmap:

; 1255 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count,
; 1256 : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

  0016d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp+36]
  00171	85 c9		 test	 ecx, ecx
  00173	76 04		 jbe	 SHORT $LN150@Growmap
$LN165@Growmap:
  00175	33 c0		 xor	 eax, eax
  00177	f3 ab		 rep stosd
$LN150@Growmap:

; 1257 : 			}
; 1258 : 
; 1259 : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);
; 1260 : 		if (_Map)

  00179	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0017c	85 c0		 test	 eax, eax
  0017e	74 09		 je	 SHORT $LN153@Growmap

; 1261 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00186	83 c4 04	 add	 esp, 4
$LN153@Growmap:

; 1262 : 
; 1263 : 		_Map = _Newmap;	// point at new
; 1264 : 		_Mapsize += _Count;

  00189	8b 44 24 0c	 mov	 eax, DWORD PTR __Count$[esp+36]
  0018d	01 43 14	 add	 DWORD PTR [ebx+20], eax

; 1265 : 		}

  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	89 6b 10	 mov	 DWORD PTR [ebx+16], ebp
  00195	5d		 pop	 ebp
  00196	83 c4 18	 add	 esp, 24			; 00000018H
  00199	c3		 ret	 0
$LN164@Growmap:
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = esi

; 1268 : 		{	// free all storage

  00000	53		 push	 ebx

; 1269 : 		while (!empty())

  00001	33 db		 xor	 ebx, ebx
  00003	57		 push	 edi
  00004	39 5e 1c	 cmp	 DWORD PTR [esi+28], ebx
  00007	74 51		 je	 SHORT $LN5@Tidy@11
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Tidy@11:

; 1270 : 			pop_back();

  00010	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00013	3b c3		 cmp	 eax, ebx
  00015	74 3e		 je	 SHORT $LN11@Tidy@11
  00017	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0001a	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]
  0001e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00021	3b c8		 cmp	 ecx, eax
  00023	77 02		 ja	 SHORT $LN12@Tidy@11
  00025	2b c1		 sub	 eax, ecx
$LN12@Tidy@11:
  00027	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0002a	8b 3c 82	 mov	 edi, DWORD PTR [edx+eax*4]
  0002d	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00031	72 0c		 jb	 SHORT $LN41@Tidy@11
  00033	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN41@Tidy@11:
  0003f	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  00046	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00049	88 5f 04	 mov	 BYTE PTR [edi+4], bl
  0004c	83 46 1c ff	 add	 DWORD PTR [esi+28], -1
  00050	75 03		 jne	 SHORT $LN11@Tidy@11
  00052	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
$LN11@Tidy@11:

; 1269 : 		while (!empty())

  00055	39 5e 1c	 cmp	 DWORD PTR [esi+28], ebx
  00058	75 b6		 jne	 SHORT $LL6@Tidy@11
$LN5@Tidy@11:

; 1271 : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  0005a	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0005d	3b fb		 cmp	 edi, ebx
  0005f	76 1b		 jbe	 SHORT $LN3@Tidy@11
$LL4@Tidy@11:
  00061	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 1272 : 			{	// free storage for a block and destroy pointer
; 1273 : 			if (*(_Map + --_Count) != 0)

  00064	4f		 dec	 edi
  00065	39 1c b9	 cmp	 DWORD PTR [ecx+edi*4], ebx
  00068	8d 04 b9	 lea	 eax, DWORD PTR [ecx+edi*4]
  0006b	74 0b		 je	 SHORT $LN51@Tidy@11

; 1274 : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

  0006d	8b 10		 mov	 edx, DWORD PTR [eax]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
$LN51@Tidy@11:

; 1271 : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00078	3b fb		 cmp	 edi, ebx
  0007a	77 e5		 ja	 SHORT $LL4@Tidy@11
$LN3@Tidy@11:

; 1275 : 			this->_Almap.destroy(_Map + _Count);
; 1276 : 			}
; 1277 : 
; 1278 : 		if (_Map)

  0007c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0007f	3b c3		 cmp	 eax, ebx
  00081	74 09		 je	 SHORT $LN58@Tidy@11

; 1279 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00089	83 c4 04	 add	 esp, 4
$LN58@Tidy@11:
  0008c	5f		 pop	 edi

; 1280 : 		_Mapsize = 0;
; 1281 : 		_Map = 0;

  0008d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00093	5b		 pop	 ebx

; 1282 : 		}

  00094	c3		 ret	 0
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = eax

; 843  : 		{	// insert element at end

  00000	53		 push	 ebx
  00001	8b d8		 mov	 ebx, eax

; 844  : 
; 845  :  #if _HAS_ITERATOR_DEBUGGING
; 846  : 		this->_Orphan_all();
; 847  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 848  : 
; 849  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 850  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

  00003	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00006	40		 inc	 eax
  00007	56		 push	 esi
  00008	39 43 14	 cmp	 DWORD PTR [ebx+20], eax
  0000b	77 05		 ja	 SHORT $LN3@push_back

; 851  : 			_Growmap(1);

  0000d	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
$LN3@push_back:

; 852  : 		size_type _Newoff = _Myoff + _Mysize;

  00012	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  00015	03 73 1c	 add	 esi, DWORD PTR [ebx+28]

; 853  : 		size_type _Block = _Newoff / _DEQUESIZ;
; 854  : 		if (_Mapsize <= _Block)

  00018	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0001b	3b c6		 cmp	 eax, esi
  0001d	77 02		 ja	 SHORT $LN2@push_back

; 855  : 			_Block -= _Mapsize;

  0001f	2b f0		 sub	 esi, eax
$LN2@push_back:

; 856  : 		if (_Map[_Block] == 0)

  00021	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00024	83 3c b1 00	 cmp	 DWORD PTR [ecx+esi*4], 0
  00028	75 10		 jne	 SHORT $LN1@push_back

; 857  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

  0002a	6a 1c		 push	 28			; 0000001cH
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00034	83 c4 04	 add	 esp, 4
  00037	89 04 b2	 mov	 DWORD PTR [edx+esi*4], eax
$LN1@push_back:

; 858  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

  0003a	8b 44 24 0c	 mov	 eax, DWORD PTR __Val$[esp+4]
  0003e	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00041	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 859  : 		++_Mysize;

  0004a	ff 43 1c	 inc	 DWORD PTR [ebx+28]
  0004d	83 c4 04	 add	 esp, 4

; 860  : 		}

  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	c2 04 00	 ret	 4
?push_back@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$2
__ehfuncinfo$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\deque
xdata$x	ENDS
;	COMDAT ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 640  : 		{	// destroy the deque

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00021	8b 74 24 18	 mov	 esi, DWORD PTR _this$[esp+16]
  00025	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0

; 641  : 		_Tidy();

  0002d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 642  : 		}

  00032	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+28], -1
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
  00045	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	5e		 pop	 esi
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??1?$_Deque_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00009	c3		 ret	 0
__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$1:
  0000a	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??1?$_Deque_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00013	c3		 ret	 0
__unwindfunclet$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ$2:
  00014	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00017	e9 00 00 00 00	 jmp	 ??1?$_Container_base_aux_alloc_real@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Container_base_aux_alloc_real<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stack
;	COMDAT ?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::push, COMDAT
; _this$ = eax

; 57   : 		{	// insert element at end

  00000	53		 push	 ebx
  00001	8b d8		 mov	 ebx, eax

; 58   : 		c.push_back(_Val);

  00003	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00006	40		 inc	 eax
  00007	56		 push	 esi
  00008	39 43 14	 cmp	 DWORD PTR [ebx+20], eax
  0000b	77 05		 ja	 SHORT $LN5@push
  0000d	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
$LN5@push:
  00012	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  00015	03 73 1c	 add	 esi, DWORD PTR [ebx+28]
  00018	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0001b	3b c6		 cmp	 eax, esi
  0001d	77 02		 ja	 SHORT $LN4@push
  0001f	2b f0		 sub	 esi, eax
$LN4@push:
  00021	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00024	83 3c b1 00	 cmp	 DWORD PTR [ecx+esi*4], 0
  00028	75 10		 jne	 SHORT $LN3@push
  0002a	6a 1c		 push	 28			; 0000001cH
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00034	83 c4 04	 add	 esp, 4
  00037	89 04 b2	 mov	 DWORD PTR [edx+esi*4], eax
$LN3@push:
  0003a	8b 44 24 0c	 mov	 eax, DWORD PTR __Val$[esp+4]
  0003e	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00041	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0004a	ff 43 1c	 inc	 DWORD PTR [ebx+28]
  0004d	83 c4 04	 add	 esp, 4

; 59   : 		}

  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	c2 04 00	 ret	 4
?push@?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::push
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 28   : 		{	// construct with empty container

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00021	8b 74 24 18	 mov	 esi, DWORD PTR _this$[esp+16]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 29   : 		}

  0002b	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+28], -1
  00033	8b c6		 mov	 eax, esi
  00035	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5e		 pop	 esi
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00009	c3		 ret	 0
__ehhandler$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00011	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; xmlwriter::validateValue
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$0
__ehfuncinfo$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
_TEXT	SEGMENT
tv612 = -64						; size = 4
_str$ = -60						; size = 4
___$ReturnUdt$GSCopy$ = -56				; size = 4
$T194591 = -52						; size = 4
_validSpecChars$ = -48					; size = 30
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_sTmp$ = 12						; size = 28
?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z PROC ; xmlwriter::validateValue, COMDAT

; 150  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 34	 sub	 esp, 52			; 00000034H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 30	 mov	 DWORD PTR __$ArrayPad$[esp+64], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	33 db		 xor	 ebx, ebx
  00034	89 5c 24 50	 mov	 DWORD PTR __$EHRec$[esp+92], ebx

; 218  : 
; 219  :     delete [] str;
; 220  :     delete [] newStr;
; 221  : 
; 222  :     return temp;

  00038	8b 44 24 58	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+80]
  0003c	89 44 24 1c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+84], eax
  00040	89 5c 24 20	 mov	 DWORD PTR $T194591[esp+84], ebx
  00044	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 1
  0004c	8b 4c 24 70	 mov	 ecx, DWORD PTR _sTmp$[esp+100]
  00050	41		 inc	 ecx
  00051	51		 push	 ecx
  00052	c6 44 24 28 21	 mov	 BYTE PTR _validSpecChars$[esp+88], 33 ; 00000021H
  00057	c6 44 24 29 40	 mov	 BYTE PTR _validSpecChars$[esp+89], 64 ; 00000040H
  0005c	c6 44 24 2a 23	 mov	 BYTE PTR _validSpecChars$[esp+90], 35 ; 00000023H
  00061	c6 44 24 2b 24	 mov	 BYTE PTR _validSpecChars$[esp+91], 36 ; 00000024H
  00066	c6 44 24 2c 25	 mov	 BYTE PTR _validSpecChars$[esp+92], 37 ; 00000025H
  0006b	c6 44 24 2d 2a	 mov	 BYTE PTR _validSpecChars$[esp+93], 42 ; 0000002aH
  00070	c6 44 24 2e 28	 mov	 BYTE PTR _validSpecChars$[esp+94], 40 ; 00000028H
  00075	c6 44 24 2f 29	 mov	 BYTE PTR _validSpecChars$[esp+95], 41 ; 00000029H
  0007a	c6 44 24 30 2d	 mov	 BYTE PTR _validSpecChars$[esp+96], 45 ; 0000002dH
  0007f	c6 44 24 31 5f	 mov	 BYTE PTR _validSpecChars$[esp+97], 95 ; 0000005fH
  00084	c6 44 24 32 2f	 mov	 BYTE PTR _validSpecChars$[esp+98], 47 ; 0000002fH
  00089	c6 44 24 33 7c	 mov	 BYTE PTR _validSpecChars$[esp+99], 124 ; 0000007cH
  0008e	c6 44 24 34 5c	 mov	 BYTE PTR _validSpecChars$[esp+100], 92 ; 0000005cH
  00093	c6 44 24 35 22	 mov	 BYTE PTR _validSpecChars$[esp+101], 34 ; 00000022H
  00098	c6 44 24 36 27	 mov	 BYTE PTR _validSpecChars$[esp+102], 39 ; 00000027H
  0009d	c6 44 24 37 2c	 mov	 BYTE PTR _validSpecChars$[esp+103], 44 ; 0000002cH
  000a2	c6 44 24 38 2e	 mov	 BYTE PTR _validSpecChars$[esp+104], 46 ; 0000002eH
  000a7	c6 44 24 39 3b	 mov	 BYTE PTR _validSpecChars$[esp+105], 59 ; 0000003bH
  000ac	c6 44 24 3a 3a	 mov	 BYTE PTR _validSpecChars$[esp+106], 58 ; 0000003aH
  000b1	c6 44 24 3b 5b	 mov	 BYTE PTR _validSpecChars$[esp+107], 91 ; 0000005bH
  000b6	c6 44 24 3c 5d	 mov	 BYTE PTR _validSpecChars$[esp+108], 93 ; 0000005dH
  000bb	c6 44 24 3d 7b	 mov	 BYTE PTR _validSpecChars$[esp+109], 123 ; 0000007bH
  000c0	c6 44 24 3e 7d	 mov	 BYTE PTR _validSpecChars$[esp+110], 125 ; 0000007dH
  000c5	c6 44 24 3f 3d	 mov	 BYTE PTR _validSpecChars$[esp+111], 61 ; 0000003dH
  000ca	c6 44 24 40 2b	 mov	 BYTE PTR _validSpecChars$[esp+112], 43 ; 0000002bH
  000cf	c6 44 24 41 3f	 mov	 BYTE PTR _validSpecChars$[esp+113], 63 ; 0000003fH
  000d4	c6 44 24 42 5e	 mov	 BYTE PTR _validSpecChars$[esp+114], 94 ; 0000005eH
  000d9	c6 44 24 43 7e	 mov	 BYTE PTR _validSpecChars$[esp+115], 126 ; 0000007eH
  000de	c6 44 24 44 20	 mov	 BYTE PTR _validSpecChars$[esp+116], 32 ; 00000020H
  000e3	88 5c 24 45	 mov	 BYTE PTR _validSpecChars$[esp+117], bl
  000e7	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000ec	8b 54 24 74	 mov	 edx, DWORD PTR _sTmp$[esp+104]
  000f0	42		 inc	 edx
  000f1	52		 push	 edx
  000f2	8b f0		 mov	 esi, eax
  000f4	53		 push	 ebx
  000f5	56		 push	 esi
  000f6	89 74 24 28	 mov	 DWORD PTR _str$[esp+100], esi
  000fa	e8 00 00 00 00	 call	 _memset
  000ff	8b 54 24 70	 mov	 edx, DWORD PTR _sTmp$[esp+100]
  00103	83 c4 10	 add	 esp, 16			; 00000010H
  00106	83 7c 24 74 10	 cmp	 DWORD PTR _sTmp$[esp+104], 16 ; 00000010H
  0010b	73 04		 jae	 SHORT $LN29@validateVa

; 151  :     char validSpecChars[] = {
; 152  :         '!',    '@',    '#',    '$',    '%',
; 153  :         '*',    '(',    ')',    '-',    '_',
; 154  :         '/',    '|',    '\\',   '\"',   '\'',
; 155  :         ',',    '.',    ';',    ':',    '[',
; 156  :         ']',    '{',    '}',    '=',    '+',
; 157  :         '?',    '^',    '~',    0x20,   0x00
; 158  :     };
; 159  : 
; 160  :     char * str = new char[sTmp.size()+1];
; 161  :     memset(str,0x00,sizeof(char)*sTmp.size()+1);
; 162  :     strcpy(str,sTmp.c_str());

  0010d	8d 54 24 60	 lea	 edx, DWORD PTR _sTmp$[esp+84]
$LN29@validateVa:
  00111	8b ce		 mov	 ecx, esi
$LL16@validateVa:
  00113	8a 02		 mov	 al, BYTE PTR [edx]
  00115	88 01		 mov	 BYTE PTR [ecx], al
  00117	42		 inc	 edx
  00118	41		 inc	 ecx
  00119	3a c3		 cmp	 al, bl
  0011b	75 f6		 jne	 SHORT $LL16@validateVa

; 163  : 
; 164  :     int newSize = sTmp.size()*5+1;

  0011d	8b 44 24 70	 mov	 eax, DWORD PTR _sTmp$[esp+100]
  00121	8d 6c 80 01	 lea	 ebp, DWORD PTR [eax+eax*4+1]

; 165  :     char * newStr = new char[newSize];

  00125	55		 push	 ebp
  00126	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 166  :     memset(newStr,0x00,sizeof(char)*newSize);

  0012b	55		 push	 ebp
  0012c	8b f8		 mov	 edi, eax
  0012e	53		 push	 ebx
  0012f	57		 push	 edi
  00130	e8 00 00 00 00	 call	 _memset

; 167  : 
; 168  :     int i = 0, pos = 0;
; 169  : 
; 170  :     while(str[i]!=NULL)

  00135	8b 44 24 28	 mov	 eax, DWORD PTR _str$[esp+100]
  00139	83 c4 10	 add	 esp, 16			; 00000010H
  0013c	33 f6		 xor	 esi, esi
  0013e	38 18		 cmp	 BYTE PTR [eax], bl
  00140	74 74		 je	 SHORT $LN12@validateVa

; 163  : 
; 164  :     int newSize = sTmp.size()*5+1;

  00142	89 44 24 14	 mov	 DWORD PTR tv612[esp+84], eax
$LL13@validateVa:

; 171  :     {
; 172  :         //if(isalnum(str[i]) || str[i]==0x20)
; 173  :         if((str[i]>=0x41 && str[i]<=0x5A) ||
; 174  :            (str[i]>=0x61 && str[i]<=0x7A) ||
; 175  :            (str[i]>=0x30 && str[i]<=0x39))

  00146	8a 00		 mov	 al, BYTE PTR [eax]
  00148	3c 41		 cmp	 al, 65			; 00000041H
  0014a	7c 04		 jl	 SHORT $LN9@validateVa
  0014c	3c 5a		 cmp	 al, 90			; 0000005aH
  0014e	7e 10		 jle	 SHORT $LN10@validateVa
$LN9@validateVa:
  00150	3c 61		 cmp	 al, 97			; 00000061H
  00152	7c 04		 jl	 SHORT $LN8@validateVa
  00154	3c 7a		 cmp	 al, 122			; 0000007aH
  00156	7e 08		 jle	 SHORT $LN10@validateVa
$LN8@validateVa:
  00158	3c 30		 cmp	 al, 48			; 00000030H
  0015a	7c 0a		 jl	 SHORT $LN11@validateVa
  0015c	3c 39		 cmp	 al, 57			; 00000039H
  0015e	7f 06		 jg	 SHORT $LN11@validateVa
$LN10@validateVa:

; 176  :         {
; 177  :             newStr[pos] = str[i];

  00160	88 04 3e	 mov	 BYTE PTR [esi+edi], al

; 178  :             pos++;

  00163	46		 inc	 esi
  00164	eb 43		 jmp	 SHORT $LN1@validateVa
$LN11@validateVa:

; 179  :         }
; 180  :         else if(str[i]=='&')

  00166	3c 26		 cmp	 al, 38			; 00000026H
  00168	75 0b		 jne	 SHORT $LN6@validateVa

; 181  :         {
; 182  :             pos += _snprintf(&newStr[pos],newSize-pos-1,"&amp;",str[i]);

  0016a	0f be c0	 movsx	 eax, al
  0016d	50		 push	 eax
  0016e	68 00 00 00 00	 push	 OFFSET ??_C@_05JKJFEODM@?$CGamp?$DL?$AA@

; 183  :         }
; 184  :         //else if(ispunct(str[i]) && str[i]!=0x60)
; 185  :         //{
; 186  :         //    newStr[pos] = str[i];
; 187  :         //    pos++;
; 188  :         //}
; 189  :         //else
; 190  :         //{
; 191  :         //    pos += _snprintf(&newStr[pos],newSize-pos-1,"&#%d;",str[i]);
; 192  :         //}
; 193  :         else

  00173	eb 20		 jmp	 SHORT $LN103@validateVa
$LN6@validateVa:
  00175	b1 21		 mov	 cl, 33			; 00000021H

; 194  :         {
; 195  :             int x = 0;

  00177	8d 54 24 24	 lea	 edx, DWORD PTR _validSpecChars$[esp+84]
  0017b	eb 03 8d 49 00	 npad	 5
$LL4@validateVa:

; 196  :             bool found = false;
; 197  :             while(validSpecChars[x]!=0x00)
; 198  :             {
; 199  :                 if(str[i]==validSpecChars[x])

  00180	3a c1		 cmp	 al, cl
  00182	74 dc		 je	 SHORT $LN10@validateVa
  00184	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]

; 200  :                 {
; 201  :                     newStr[pos] = str[i];
; 202  :                     pos++;
; 203  :                     found = true;
; 204  :                     break;
; 205  :                 }
; 206  :                 x++;

  00187	42		 inc	 edx
  00188	3a cb		 cmp	 cl, bl
  0018a	75 f4		 jne	 SHORT $LL4@validateVa

; 207  :             }
; 208  : 
; 209  :             if(!found)
; 210  :             {
; 211  :                 pos += _snprintf(&newStr[pos],newSize-pos-1,"&#%d;",str[i]);

  0018c	0f be c0	 movsx	 eax, al
  0018f	50		 push	 eax
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_05PNCJDOGL@?$CG?$CD?$CFd?$DL?$AA@
$LN103@validateVa:
  00195	8b cd		 mov	 ecx, ebp
  00197	2b ce		 sub	 ecx, esi
  00199	49		 dec	 ecx
  0019a	51		 push	 ecx
  0019b	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  0019e	52		 push	 edx
  0019f	e8 00 00 00 00	 call	 __snprintf
  001a4	83 c4 10	 add	 esp, 16			; 00000010H
  001a7	03 f0		 add	 esi, eax
$LN1@validateVa:

; 212  :             }
; 213  :         }
; 214  :         i++;

  001a9	8b 44 24 14	 mov	 eax, DWORD PTR tv612[esp+84]
  001ad	40		 inc	 eax
  001ae	89 44 24 14	 mov	 DWORD PTR tv612[esp+84], eax
  001b2	38 18		 cmp	 BYTE PTR [eax], bl
  001b4	75 90		 jne	 SHORT $LL13@validateVa
$LN12@validateVa:

; 215  :     }
; 216  : 
; 217  :     string temp(newStr);

  001b6	8b 6c 24 1c	 mov	 ebp, DWORD PTR ___$ReturnUdt$GSCopy$[esp+84]
  001ba	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  001bf	8b c7		 mov	 eax, edi
  001c1	89 75 18	 mov	 DWORD PTR [ebp+24], esi
  001c4	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx
  001c7	88 5d 04	 mov	 BYTE PTR [ebp+4], bl
  001ca	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  001cd	8d 49 00	 npad	 3
$LL101@validateVa:
  001d0	8a 08		 mov	 cl, BYTE PTR [eax]
  001d2	40		 inc	 eax
  001d3	3a cb		 cmp	 cl, bl
  001d5	75 f9		 jne	 SHORT $LL101@validateVa
  001d7	2b c2		 sub	 eax, edx
  001d9	50		 push	 eax
  001da	57		 push	 edi
  001db	8b cd		 mov	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 218  : 
; 219  :     delete [] str;
; 220  :     delete [] newStr;
; 221  : 
; 222  :     return temp;

  001e2	8b 44 24 18	 mov	 eax, DWORD PTR _str$[esp+84]
  001e6	50		 push	 eax
  001e7	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR $T194591[esp+88], 1
  001ef	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001f4	57		 push	 edi
  001f5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001fa	83 c4 08	 add	 esp, 8
  001fd	88 5c 24 50	 mov	 BYTE PTR __$EHRec$[esp+92], bl
  00201	83 7c 24 74 10	 cmp	 DWORD PTR _sTmp$[esp+104], 16 ; 00000010H
  00206	72 0d		 jb	 SHORT $LN84@validateVa
  00208	8b 4c 24 60	 mov	 ecx, DWORD PTR _sTmp$[esp+84]
  0020c	51		 push	 ecx
  0020d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00212	83 c4 04	 add	 esp, 4
$LN84@validateVa:
  00215	89 74 24 74	 mov	 DWORD PTR _sTmp$[esp+104], esi
  00219	89 5c 24 70	 mov	 DWORD PTR _sTmp$[esp+100], ebx
  0021d	88 5c 24 60	 mov	 BYTE PTR _sTmp$[esp+84], bl
  00221	8b c5		 mov	 eax, ebp

; 223  : }

  00223	8b 4c 24 48	 mov	 ecx, DWORD PTR __$EHRec$[esp+84]
  00227	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022e	59		 pop	 ecx
  0022f	5f		 pop	 edi
  00230	5e		 pop	 esi
  00231	5d		 pop	 ebp
  00232	5b		 pop	 ebx
  00233	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+64]
  00237	33 cc		 xor	 ecx, esp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	83 c4 40	 add	 esp, 64			; 00000040H
  00241	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _sTmp$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$1:
  00008	8b 45 cc	 mov	 eax, DWORD PTR $T194591[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN19@validateVa
  00014	83 65 cc fe	 and	 DWORD PTR $T194591[ebp], -2 ; fffffffeH
  00018	8b 4d c8	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN19@validateVa:
  00020	c3		 ret	 0
__ehhandler$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  00028	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	83 c0 10	 add	 eax, 16			; 00000010H
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ENDP ; xmlwriter::validateValue
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; xmlwriter::validateTagName
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$2
__ehfuncinfo$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
_TEXT	SEGMENT
$T194900 = -56						; size = 4
___$ReturnUdt$GSCopy$ = -52				; size = 4
$T194895 = -48						; size = 4
_temp$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_sTmp$ = 12						; size = 28
?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z PROC ; xmlwriter::validateTagName, COMDAT

; 127  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+56], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 40	 lea	 eax, DWORD PTR __$EHRec$[esp+76]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 6c 24 50	 mov	 ebp, DWORD PTR ___$ReturnUdt$[esp+72]
  00036	33 db		 xor	 ebx, ebx
  00038	89 6c 24 18	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+76], ebp
  0003c	89 5c 24 14	 mov	 DWORD PTR $T194900[esp+76], ebx
  00040	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+84], 1

; 128  :     string temp;

  00048	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  0004d	89 74 24 38	 mov	 DWORD PTR _temp$[esp+100], esi
  00051	89 5c 24 34	 mov	 DWORD PTR _temp$[esp+96], ebx
  00055	88 5c 24 24	 mov	 BYTE PTR _temp$[esp+80], bl
  00059	c6 44 24 48 02	 mov	 BYTE PTR __$EHRec$[esp+84], 2

; 129  :     char * str = new char[sTmp.size()+1];

  0005e	8b 44 24 68	 mov	 eax, DWORD PTR _sTmp$[esp+92]
  00062	40		 inc	 eax
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 130  :     memset(str,0x00,sizeof(char)*sTmp.size()+1);

  00069	8b 4c 24 6c	 mov	 ecx, DWORD PTR _sTmp$[esp+96]
  0006d	41		 inc	 ecx
  0006e	51		 push	 ecx
  0006f	8b f8		 mov	 edi, eax
  00071	53		 push	 ebx
  00072	57		 push	 edi
  00073	e8 00 00 00 00	 call	 _memset

; 131  :     strcpy(str,sTmp.c_str());

  00078	8b 54 24 68	 mov	 edx, DWORD PTR _sTmp$[esp+92]
  0007c	83 c4 10	 add	 esp, 16			; 00000010H
  0007f	83 7c 24 6c 10	 cmp	 DWORD PTR _sTmp$[esp+96], 16 ; 00000010H
  00084	73 04		 jae	 SHORT $LN54@validateTa
  00086	8d 54 24 58	 lea	 edx, DWORD PTR _sTmp$[esp+76]
$LN54@validateTa:
  0008a	8b cf		 mov	 ecx, edi
  0008c	8d 64 24 00	 npad	 4
$LL7@validateTa:
  00090	8a 02		 mov	 al, BYTE PTR [edx]
  00092	88 01		 mov	 BYTE PTR [ecx], al
  00094	42		 inc	 edx
  00095	41		 inc	 ecx
  00096	3a c3		 cmp	 al, bl
  00098	75 f6		 jne	 SHORT $LL7@validateTa

; 132  : 
; 133  :     //first character must be a alphabetic one
; 134  :     //if(isalpha(str[0]))
; 135  :     if((str[0]>=0x41 && str[0]<=0x5A) ||
; 136  :        (str[0]>=0x61 && str[0]<=0x7A))

  0009a	8a 07		 mov	 al, BYTE PTR [edi]
  0009c	3c 41		 cmp	 al, 65			; 00000041H
  0009e	7c 04		 jl	 SHORT $LN2@validateTa
  000a0	3c 5a		 cmp	 al, 90			; 0000005aH
  000a2	7e 08		 jle	 SHORT $LN3@validateTa
$LN2@validateTa:
  000a4	3c 61		 cmp	 al, 97			; 00000061H
  000a6	7c 17		 jl	 SHORT $LN4@validateTa
  000a8	3c 7a		 cmp	 al, 122			; 0000007aH
  000aa	7f 13		 jg	 SHORT $LN4@validateTa
$LN3@validateTa:

; 137  :     {
; 138  :         temp.assign(sTmp);

  000ac	6a ff		 push	 -1
  000ae	53		 push	 ebx
  000af	8d 54 24 5c	 lea	 edx, DWORD PTR _sTmp$[esp+80]
  000b3	52		 push	 edx
  000b4	8d 4c 24 2c	 lea	 ecx, DWORD PTR _temp$[esp+88]
  000b8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 139  :     }
; 140  :     else

  000bd	eb 27		 jmp	 SHORT $LN61@validateTa
$LN4@validateTa:

; 141  :     {
; 142  :         temp.assign("a_");

  000bf	6a 02		 push	 2
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_02HEIIMGGB@a_?$AA@
  000c6	8d 4c 24 28	 lea	 ecx, DWORD PTR _temp$[esp+84]
  000ca	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 143  :         temp.append(sTmp);

  000cf	53		 push	 ebx
  000d0	8d 44 24 58	 lea	 eax, DWORD PTR _sTmp$[esp+76]
  000d4	50		 push	 eax
  000d5	83 c8 ff	 or	 eax, -1
  000d8	8d 74 24 28	 lea	 esi, DWORD PTR _temp$[esp+84]
  000dc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000e1	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
$LN61@validateTa:

; 144  :     }
; 145  :     delete [] str;

  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 146  :     return validateValue(temp);

  000ec	83 ec 18	 sub	 esp, 24			; 00000018H
  000ef	8b cc		 mov	 ecx, esp
  000f1	89 64 24 38	 mov	 DWORD PTR $T194895[esp+104], esp
  000f5	6a ff		 push	 -1
  000f7	53		 push	 ebx
  000f8	8d 54 24 44	 lea	 edx, DWORD PTR _temp$[esp+112]
  000fc	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  000ff	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00102	52		 push	 edx
  00103	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00106	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0010b	c6 44 24 64 03	 mov	 BYTE PTR __$EHRec$[esp+112], 3
  00110	55		 push	 ebp
  00111	c6 44 24 68 02	 mov	 BYTE PTR __$EHRec$[esp+116], 2
  00116	e8 00 00 00 00	 call	 ?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; xmlwriter::validateValue
  0011b	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T194900[esp+76], 1
  00123	c6 44 24 48 01	 mov	 BYTE PTR __$EHRec$[esp+84], 1
  00128	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0012d	39 7c 24 38	 cmp	 DWORD PTR _temp$[esp+100], edi
  00131	72 0d		 jb	 SHORT $LN105@validateTa
  00133	8b 44 24 24	 mov	 eax, DWORD PTR _temp$[esp+80]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013d	83 c4 04	 add	 esp, 4
$LN105@validateTa:
  00140	89 74 24 38	 mov	 DWORD PTR _temp$[esp+100], esi
  00144	89 5c 24 34	 mov	 DWORD PTR _temp$[esp+96], ebx
  00148	88 5c 24 24	 mov	 BYTE PTR _temp$[esp+80], bl
  0014c	88 5c 24 48	 mov	 BYTE PTR __$EHRec$[esp+84], bl
  00150	39 7c 24 6c	 cmp	 DWORD PTR _sTmp$[esp+96], edi
  00154	72 0d		 jb	 SHORT $LN131@validateTa
  00156	8b 4c 24 58	 mov	 ecx, DWORD PTR _sTmp$[esp+76]
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00160	83 c4 04	 add	 esp, 4
$LN131@validateTa:
  00163	89 74 24 6c	 mov	 DWORD PTR _sTmp$[esp+96], esi
  00167	89 5c 24 68	 mov	 DWORD PTR _sTmp$[esp+92], ebx
  0016b	88 5c 24 58	 mov	 BYTE PTR _sTmp$[esp+76], bl
  0016f	8b c5		 mov	 eax, ebp

; 147  : }

  00171	8b 4c 24 40	 mov	 ecx, DWORD PTR __$EHRec$[esp+76]
  00175	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017c	59		 pop	 ecx
  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi
  0017f	5d		 pop	 ebp
  00180	5b		 pop	 ebx
  00181	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+56]
  00185	33 cc		 xor	 ecx, esp
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	83 c4 38	 add	 esp, 56			; 00000038H
  0018f	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _sTmp$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _temp$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$2:
  00010	8b 4d d0	 mov	 ecx, DWORD PTR $T194895[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z$3:
  00018	8b 45 c8	 mov	 eax, DWORD PTR $T194900[ebp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	0f 84 0c 00 00
	00		 je	 $LN12@validateTa
  00024	83 65 c8 fe	 and	 DWORD PTR $T194900[ebp], -2 ; fffffffeH
  00028	8b 4d cc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@validateTa:
  00030	c3		 ret	 0
__ehhandler$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 c4	 lea	 eax, DWORD PTR [edx-60]
  00038	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	83 c0 10	 add	 eax, 16			; 00000010H
  00045	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00048	33 c8		 xor	 ecx, eax
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z
  00054	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ENDP ; xmlwriter::validateTagName
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ PROC ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	c7 44 24 0c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+24], -1
  00028	8b 44 24 14	 mov	 eax, DWORD PTR _this$[esp+12]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00032	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00036	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003d	59		 pop	 ecx
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00009	c3		 ret	 0
__ehhandler$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 02		 lea	 eax, DWORD PTR [edx]
  00010	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ ENDP ; std::stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~stack<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; xmlwriter::CreateChild
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$6
__ehfuncinfo$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_this$GSCopy$ = -124					; size = 4
__Tmp$203673 = -120					; size = 8
$T203121 = -120						; size = 4
$T203120 = -120						; size = 4
$T205372 = -112						; size = 8
__Tmp$204592 = -112					; size = 8
_sTmp$103343 = -104					; size = 28
_tag$ = -76						; size = 28
_value$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_sTag$ = 12						; size = 28
_sValue$ = 40						; size = 28
?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; xmlwriter::CreateChild, COMDAT

; 87   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 70	 sub	 esp, 112		; 00000070H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+124], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 84 24 84 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+144]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	8b ac 24 94 00
	00 00		 mov	 ebp, DWORD PTR _this$[esp+140]

; 106  : 	vectAttrData.clear();

  0003c	89 6c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+144], ebp
  00040	bb 01 00 00 00	 mov	 ebx, 1
  00045	89 9c 24 8c 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+152], ebx
  0004c	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0004f	8b cc		 mov	 ecx, esp
  00051	89 64 24 34	 mov	 DWORD PTR $T203120[esp+172], esp
  00055	6a ff		 push	 -1
  00057	33 ff		 xor	 edi, edi
  00059	57		 push	 edi
  0005a	8d 84 24 bc 00
	00 00		 lea	 eax, DWORD PTR _sTag$[esp+176]
  00061	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00066	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  00069	89 79 14	 mov	 DWORD PTR [ecx+20], edi
  0006c	50		 push	 eax
  0006d	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00071	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00076	c6 84 24 a8 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+180], 2
  0007e	8d 4c 24 60	 lea	 ecx, DWORD PTR _tag$[esp+172]
  00082	51		 push	 ecx
  00083	88 9c 24 ac 00
	00 00		 mov	 BYTE PTR __$EHRec$[esp+184], bl
  0008a	e8 00 00 00 00	 call	 ?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; xmlwriter::validateTagName
  0008f	c6 84 24 8c 00
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+152], 3
  00097	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0009a	8b cc		 mov	 ecx, esp
  0009c	89 64 24 34	 mov	 DWORD PTR $T203121[esp+172], esp
  000a0	6a ff		 push	 -1
  000a2	57		 push	 edi
  000a3	8d 94 24 d8 00
	00 00		 lea	 edx, DWORD PTR _sValue$[esp+176]
  000aa	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  000ad	89 79 14	 mov	 DWORD PTR [ecx+20], edi
  000b0	52		 push	 edx
  000b1	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  000b5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000ba	c6 84 24 a8 00
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+180], 4
  000c2	8d 44 24 7c	 lea	 eax, DWORD PTR _value$[esp+172]
  000c6	50		 push	 eax
  000c7	c6 84 24 ac 00
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+184], 3
  000cf	e8 00 00 00 00	 call	 ?validateValue@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; xmlwriter::validateValue
  000d4	c6 84 24 8c 00
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+152], 5
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  000e1	6a 5b		 push	 91			; 0000005bH
  000e3	8b f5		 mov	 esi, ebp
  000e5	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  000ea	83 c4 08	 add	 esp, 8
  000ed	39 7d 38	 cmp	 DWORD PTR [ebp+56], edi
  000f0	7e 18		 jle	 SHORT $LN3@CreateChil
$LL5@CreateChil:

; 88   :     string tag = validateTagName(sTag);
; 89   :     string value = validateValue(sValue);
; 90   : 
; 91   : 	Write(__LINE__,"\n");
; 92   : 	//Indent properly
; 93   : 	for(int iTmp =0;iTmp<iLevel;iTmp++)
; 94   : 		Write(__LINE__,"\t");

  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  000f7	6a 5e		 push	 94			; 0000005eH
  000f9	8b f5		 mov	 esi, ebp
  000fb	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00100	03 fb		 add	 edi, ebx
  00102	83 c4 08	 add	 esp, 8
  00105	3b 7d 38	 cmp	 edi, DWORD PTR [ebp+56]
  00108	7c e8		 jl	 SHORT $LL5@CreateChil
$LN3@CreateChil:

; 95   : 	Write(__LINE__,"<%s",tag.c_str());

  0010a	83 7c 24 5c 10	 cmp	 DWORD PTR _tag$[esp+168], 16 ; 00000010H
  0010f	8b 44 24 48	 mov	 eax, DWORD PTR _tag$[esp+148]
  00113	73 04		 jae	 SHORT $LN72@CreateChil
  00115	8d 44 24 48	 lea	 eax, DWORD PTR _tag$[esp+148]
$LN72@CreateChil:
  00119	50		 push	 eax
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_03FONCMJME@?$DM?$CFs?$AA@
  0011f	6a 5f		 push	 95			; 0000005fH
  00121	8b f5		 mov	 esi, ebp
  00123	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 96   : 	//Add Attributes
; 97   : 	while(0 < vectAttrData.size()/2)

  00128	8b 4d 2c	 mov	 ecx, DWORD PTR [ebp+44]
  0012b	2b 4d 28	 sub	 ecx, DWORD PTR [ebp+40]
  0012e	8d 7d 1c	 lea	 edi, DWORD PTR [ebp+28]
  00131	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00136	f7 e9		 imul	 ecx
  00138	03 d1		 add	 edx, ecx
  0013a	c1 fa 04	 sar	 edx, 4
  0013d	8b ca		 mov	 ecx, edx
  0013f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00142	03 ca		 add	 ecx, edx
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH
  00147	f7 c1 fe ff ff
	ff		 test	 ecx, -2			; fffffffeH
  0014d	0f 86 50 02 00
	00		 jbe	 $LN1@CreateChil
  00153	eb 04		 jmp	 SHORT $LN2@CreateChil
$LL557@CreateChil:
  00155	8b 6c 24 14	 mov	 ebp, DWORD PTR _this$GSCopy$[esp+144]
$LN2@CreateChil:

; 98   : 	{
; 99   : 		string sTmp = vectAttrData.back();

  00159	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0015c	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0015f	76 05		 jbe	 SHORT $LN83@CreateChil
  00161	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN83@CreateChil:
  00166	8b 37		 mov	 esi, DWORD PTR [edi]
  00168	89 74 24 18	 mov	 DWORD PTR __Tmp$203673[esp+144], esi
  0016c	89 5c 24 1c	 mov	 DWORD PTR __Tmp$203673[esp+148], ebx
  00170	85 f6		 test	 esi, esi
  00172	75 17		 jne	 SHORT $LN556@CreateChil
  00174	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00179	33 c0		 xor	 eax, eax
$LN118@CreateChil:
  0017b	8d 4b e4	 lea	 ecx, DWORD PTR [ebx-28]
  0017e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00181	77 13		 ja	 SHORT $LN105@CreateChil
  00183	85 f6		 test	 esi, esi
  00185	74 08		 je	 SHORT $LN123@CreateChil
  00187	8b 36		 mov	 esi, DWORD PTR [esi]
  00189	eb 06		 jmp	 SHORT $LN124@CreateChil
$LN556@CreateChil:
  0018b	8b 06		 mov	 eax, DWORD PTR [esi]
  0018d	eb ec		 jmp	 SHORT $LN118@CreateChil
$LN123@CreateChil:
  0018f	33 f6		 xor	 esi, esi
$LN124@CreateChil:
  00191	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00194	73 05		 jae	 SHORT $LN104@CreateChil
$LN105@CreateChil:
  00196	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN104@CreateChil:
  0019b	8b 44 24 18	 mov	 eax, DWORD PTR __Tmp$203673[esp+144]
  0019f	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  001a2	85 c0		 test	 eax, eax
  001a4	0f 85 e6 00 00
	00		 jne	 $LN555@CreateChil
  001aa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  001af	33 c0		 xor	 eax, eax
$LN144@CreateChil:
  001b1	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  001b4	72 05		 jb	 SHORT $LN131@CreateChil
  001b6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN131@CreateChil:
  001bb	6a ff		 push	 -1
  001bd	6a 00		 push	 0
  001bf	56		 push	 esi
  001c0	8d 4c 24 34	 lea	 ecx, DWORD PTR _sTmp$103343[esp+156]
  001c4	c7 44 24 4c 0f
	00 00 00	 mov	 DWORD PTR _sTmp$103343[esp+180], 15 ; 0000000fH
  001cc	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR _sTmp$103343[esp+176], 0
  001d4	c6 44 24 38 00	 mov	 BYTE PTR _sTmp$103343[esp+160], 0
  001d9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001de	c6 84 24 8c 00
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+152], 6

; 100  : 		Write(__LINE__," %s=", sTmp.c_str());

  001e6	83 7c 24 40 10	 cmp	 DWORD PTR _sTmp$103343[esp+168], 16 ; 00000010H
  001eb	8b 44 24 2c	 mov	 eax, DWORD PTR _sTmp$103343[esp+148]
  001ef	73 04		 jae	 SHORT $LN178@CreateChil
  001f1	8d 44 24 2c	 lea	 eax, DWORD PTR _sTmp$103343[esp+148]
$LN178@CreateChil:
  001f5	50		 push	 eax
  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_04FDKPOGFN@?5?$CFs?$DN?$AA@
  001fb	6a 64		 push	 100			; 00000064H
  001fd	8b f5		 mov	 esi, ebp
  001ff	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 101  : 		vectAttrData.pop_back();

  00204	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00207	8b cb		 mov	 ecx, ebx
  00209	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0020c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00211	f7 e9		 imul	 ecx
  00213	03 d1		 add	 edx, ecx
  00215	c1 fa 04	 sar	 edx, 4
  00218	8b c2		 mov	 eax, edx
  0021a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0021d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00220	03 c2		 add	 eax, edx
  00222	74 3c		 je	 SHORT $LN179@CreateChil
  00224	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  00227	3b f3		 cmp	 esi, ebx
  00229	74 31		 je	 SHORT $LN192@CreateChil
  0022b	83 c6 18	 add	 esi, 24			; 00000018H
  0022e	8b ff		 npad	 2
$LL194@CreateChil:
  00230	83 3e 10	 cmp	 DWORD PTR [esi], 16	; 00000010H
  00233	72 0c		 jb	 SHORT $LN220@CreateChil
  00235	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0023e	83 c4 04	 add	 esp, 4
$LN220@CreateChil:
  00241	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH
  00247	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  0024e	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
  00252	83 c6 1c	 add	 esi, 28			; 0000001cH
  00255	8d 4e e8	 lea	 ecx, DWORD PTR [esi-24]
  00258	3b cb		 cmp	 ecx, ebx
  0025a	75 d4		 jne	 SHORT $LL194@CreateChil
$LN192@CreateChil:
  0025c	83 47 10 e4	 add	 DWORD PTR [edi+16], -28	; ffffffe4H
$LN179@CreateChil:

; 102  : 		sTmp = vectAttrData.back();

  00260	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00263	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  00266	76 05		 jbe	 SHORT $LN238@CreateChil
  00268	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN238@CreateChil:
  0026d	8b 37		 mov	 esi, DWORD PTR [edi]
  0026f	8b ee		 mov	 ebp, esi
  00271	89 5c 24 24	 mov	 DWORD PTR __Tmp$204592[esp+148], ebx
  00275	85 f6		 test	 esi, esi
  00277	75 1e		 jne	 SHORT $LN554@CreateChil
  00279	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0027e	33 c0		 xor	 eax, eax
$LN273@CreateChil:
  00280	8d 4b e4	 lea	 ecx, DWORD PTR [ebx-28]
  00283	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00286	77 1a		 ja	 SHORT $LN260@CreateChil
  00288	85 f6		 test	 esi, esi
  0028a	74 0f		 je	 SHORT $LN278@CreateChil
  0028c	8b 36		 mov	 esi, DWORD PTR [esi]
  0028e	eb 0d		 jmp	 SHORT $LN279@CreateChil
$LN555@CreateChil:

; 98   : 	{
; 99   : 		string sTmp = vectAttrData.back();

  00290	8b 00		 mov	 eax, DWORD PTR [eax]
  00292	e9 1a ff ff ff	 jmp	 $LN144@CreateChil
$LN554@CreateChil:

; 102  : 		sTmp = vectAttrData.back();

  00297	8b 06		 mov	 eax, DWORD PTR [esi]
  00299	eb e5		 jmp	 SHORT $LN273@CreateChil
$LN278@CreateChil:
  0029b	33 f6		 xor	 esi, esi
$LN279@CreateChil:
  0029d	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  002a0	73 05		 jae	 SHORT $LN259@CreateChil
$LN260@CreateChil:
  002a2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN259@CreateChil:
  002a7	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  002aa	85 ed		 test	 ebp, ebp
  002ac	0f 85 3b 02 00
	00		 jne	 $LN553@CreateChil
  002b2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  002b7	33 c0		 xor	 eax, eax
$LN299@CreateChil:
  002b9	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  002bc	72 05		 jb	 SHORT $LN286@CreateChil
  002be	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN286@CreateChil:
  002c3	6a ff		 push	 -1
  002c5	6a 00		 push	 0
  002c7	56		 push	 esi
  002c8	8d 4c 24 34	 lea	 ecx, DWORD PTR _sTmp$103343[esp+156]
  002cc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 103  : 		Write(__LINE__,"\"%s\"", sTmp.c_str());

  002d1	8b 44 24 2c	 mov	 eax, DWORD PTR _sTmp$103343[esp+148]
  002d5	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  002da	39 6c 24 40	 cmp	 DWORD PTR _sTmp$103343[esp+168], ebp
  002de	73 04		 jae	 SHORT $LN311@CreateChil
  002e0	8d 44 24 2c	 lea	 eax, DWORD PTR _sTmp$103343[esp+148]
$LN311@CreateChil:
  002e4	8b 74 24 14	 mov	 esi, DWORD PTR _this$GSCopy$[esp+144]
  002e8	50		 push	 eax
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
  002ee	6a 67		 push	 103			; 00000067H
  002f0	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 104  : 		vectAttrData.pop_back();

  002f5	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  002f8	8b cb		 mov	 ecx, ebx
  002fa	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  002fd	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00302	f7 e9		 imul	 ecx
  00304	03 d1		 add	 edx, ecx
  00306	c1 fa 04	 sar	 edx, 4
  00309	8b c2		 mov	 eax, edx
  0030b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0030e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00311	03 c2		 add	 eax, edx
  00313	74 3a		 je	 SHORT $LN312@CreateChil
  00315	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  00318	3b f3		 cmp	 esi, ebx
  0031a	74 2f		 je	 SHORT $LN325@CreateChil
  0031c	83 c6 18	 add	 esi, 24			; 00000018H
  0031f	90		 npad	 1
$LL327@CreateChil:
  00320	39 2e		 cmp	 DWORD PTR [esi], ebp
  00322	72 0c		 jb	 SHORT $LN353@CreateChil
  00324	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0032d	83 c4 04	 add	 esp, 4
$LN353@CreateChil:
  00330	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH
  00336	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  0033d	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
  00341	83 c6 1c	 add	 esi, 28			; 0000001cH
  00344	8d 4e e8	 lea	 ecx, DWORD PTR [esi-24]
  00347	3b cb		 cmp	 ecx, ebx
  00349	75 d5		 jne	 SHORT $LL327@CreateChil
$LN325@CreateChil:
  0034b	83 47 10 e4	 add	 DWORD PTR [edi+16], -28	; ffffffe4H
$LN312@CreateChil:

; 105  : 	}

  0034f	c6 84 24 8c 00
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+152], 5
  00357	39 6c 24 40	 cmp	 DWORD PTR _sTmp$103343[esp+168], ebp
  0035b	72 0d		 jb	 SHORT $LN379@CreateChil
  0035d	8b 54 24 2c	 mov	 edx, DWORD PTR _sTmp$103343[esp+148]
  00361	52		 push	 edx
  00362	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00367	83 c4 04	 add	 esp, 4
$LN379@CreateChil:
  0036a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0036d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00370	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00375	f7 e9		 imul	 ecx
  00377	03 d1		 add	 edx, ecx
  00379	c1 fa 04	 sar	 edx, 4
  0037c	8b c2		 mov	 eax, edx
  0037e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00381	03 c2		 add	 eax, edx
  00383	c7 44 24 40 0f
	00 00 00	 mov	 DWORD PTR _sTmp$103343[esp+168], 15 ; 0000000fH
  0038b	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR _sTmp$103343[esp+164], 0
  00393	c6 44 24 2c 00	 mov	 BYTE PTR _sTmp$103343[esp+148], 0
  00398	a9 fe ff ff ff	 test	 eax, -2			; fffffffeH
  0039d	0f 87 b2 fd ff
	ff		 ja	 $LL557@CreateChil
$LN1@CreateChil:

; 106  : 	vectAttrData.clear();

  003a3	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  003a6	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  003a9	76 05		 jbe	 SHORT $LN397@CreateChil
  003ab	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN397@CreateChil:
  003b0	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  003b3	8b 1f		 mov	 ebx, DWORD PTR [edi]
  003b5	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  003b8	76 05		 jbe	 SHORT $LN416@CreateChil
  003ba	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN416@CreateChil:
  003bf	8b 07		 mov	 eax, DWORD PTR [edi]
  003c1	55		 push	 ebp
  003c2	53		 push	 ebx
  003c3	56		 push	 esi
  003c4	50		 push	 eax
  003c5	8d 5c 24 30	 lea	 ebx, DWORD PTR $T205372[esp+160]
  003c9	8b f7		 mov	 esi, edi
  003cb	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 107  : 	//add value and close tag
; 108  : 	Write(__LINE__,">%s</%s>",value.c_str(),tag.c_str());

  003d0	8b 4c 24 48	 mov	 ecx, DWORD PTR _tag$[esp+148]
  003d4	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  003d9	39 7c 24 5c	 cmp	 DWORD PTR _tag$[esp+168], edi
  003dd	73 04		 jae	 SHORT $LN434@CreateChil
  003df	8d 4c 24 48	 lea	 ecx, DWORD PTR _tag$[esp+148]
$LN434@CreateChil:
  003e3	8b 44 24 64	 mov	 eax, DWORD PTR _value$[esp+148]
  003e7	39 7c 24 78	 cmp	 DWORD PTR _value$[esp+168], edi
  003eb	73 04		 jae	 SHORT $LN440@CreateChil
  003ed	8d 44 24 64	 lea	 eax, DWORD PTR _value$[esp+148]
$LN440@CreateChil:
  003f1	8b 74 24 14	 mov	 esi, DWORD PTR _this$GSCopy$[esp+144]
  003f5	51		 push	 ecx
  003f6	50		 push	 eax
  003f7	68 00 00 00 00	 push	 OFFSET ??_C@_08CDKELLOO@?$DO?$CFs?$DM?1?$CFs?$DO?$AA@
  003fc	6a 6c		 push	 108			; 0000006cH
  003fe	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00403	83 c4 10	 add	 esp, 16			; 00000010H

; 109  : }

  00406	c6 84 24 8c 00
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+152], 3
  0040e	39 7c 24 78	 cmp	 DWORD PTR _value$[esp+168], edi
  00412	72 0d		 jb	 SHORT $LN457@CreateChil
  00414	8b 4c 24 64	 mov	 ecx, DWORD PTR _value$[esp+148]
  00418	51		 push	 ecx
  00419	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0041e	83 c4 04	 add	 esp, 4
$LN457@CreateChil:
  00421	33 db		 xor	 ebx, ebx
  00423	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00428	89 74 24 78	 mov	 DWORD PTR _value$[esp+168], esi
  0042c	89 5c 24 74	 mov	 DWORD PTR _value$[esp+164], ebx
  00430	88 5c 24 64	 mov	 BYTE PTR _value$[esp+148], bl
  00434	c6 84 24 8c 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+152], 1
  0043c	39 7c 24 5c	 cmp	 DWORD PTR _tag$[esp+168], edi
  00440	72 0d		 jb	 SHORT $LN483@CreateChil
  00442	8b 54 24 48	 mov	 edx, DWORD PTR _tag$[esp+148]
  00446	52		 push	 edx
  00447	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0044c	83 c4 04	 add	 esp, 4
$LN483@CreateChil:
  0044f	89 74 24 5c	 mov	 DWORD PTR _tag$[esp+168], esi
  00453	89 5c 24 58	 mov	 DWORD PTR _tag$[esp+164], ebx
  00457	88 5c 24 48	 mov	 BYTE PTR _tag$[esp+148], bl
  0045b	88 9c 24 8c 00
	00 00		 mov	 BYTE PTR __$EHRec$[esp+152], bl
  00462	39 bc 24 b0 00
	00 00		 cmp	 DWORD PTR _sTag$[esp+164], edi
  00469	72 10		 jb	 SHORT $LN509@CreateChil
  0046b	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR _sTag$[esp+144]
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00478	83 c4 04	 add	 esp, 4
$LN509@CreateChil:
  0047b	89 b4 24 b0 00
	00 00		 mov	 DWORD PTR _sTag$[esp+164], esi
  00482	89 9c 24 ac 00
	00 00		 mov	 DWORD PTR _sTag$[esp+160], ebx
  00489	88 9c 24 9c 00
	00 00		 mov	 BYTE PTR _sTag$[esp+144], bl
  00490	c7 84 24 8c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+152], -1
  0049b	39 bc 24 cc 00
	00 00		 cmp	 DWORD PTR _sValue$[esp+164], edi
  004a2	72 10		 jb	 SHORT $LN535@CreateChil
  004a4	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR _sValue$[esp+144]
  004ab	51		 push	 ecx
  004ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004b1	83 c4 04	 add	 esp, 4
$LN535@CreateChil:
  004b4	89 b4 24 cc 00
	00 00		 mov	 DWORD PTR _sValue$[esp+164], esi
  004bb	89 9c 24 c8 00
	00 00		 mov	 DWORD PTR _sValue$[esp+160], ebx
  004c2	88 9c 24 b8 00
	00 00		 mov	 BYTE PTR _sValue$[esp+144], bl
  004c9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+144]
  004d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004d7	59		 pop	 ecx
  004d8	5f		 pop	 edi
  004d9	5e		 pop	 esi
  004da	5d		 pop	 ebp
  004db	5b		 pop	 ebx
  004dc	8b 4c 24 68	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+124]
  004e0	33 cc		 xor	 ecx, esp
  004e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e7	83 c4 7c	 add	 esp, 124		; 0000007cH
  004ea	c2 3c 00	 ret	 60			; 0000003cH
$LN553@CreateChil:

; 102  : 		sTmp = vectAttrData.back();

  004ed	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  004f0	e9 c4 fd ff ff	 jmp	 $LN299@CreateChil
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 24	 lea	 ecx, DWORD PTR _sValue$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR _sTag$[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00010	8b 4d 88	 mov	 ecx, DWORD PTR $T203120[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$3:
  00018	8d 4d b4	 lea	 ecx, DWORD PTR _tag$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$4:
  00020	8b 4d 88	 mov	 ecx, DWORD PTR $T203121[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$5:
  00028	8d 4d d0	 lea	 ecx, DWORD PTR _value$[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$6:
  00030	8d 4d 98	 lea	 ecx, DWORD PTR _sTmp$103343[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 80	 lea	 eax, DWORD PTR [edx-128]
  0003f	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	83 c0 10	 add	 eax, 16			; 00000010H
  0004f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00052	33 c8		 xor	 ecx, eax
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0005e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateChild@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; xmlwriter::CreateChild
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; xmlwriter::Createtag
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
__ehfuncinfo$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -88					; size = 4
$T208042 = -84						; size = 8
__Tmp$207261 = -84					; size = 8
__Tmp$206342 = -84					; size = 8
$T205905 = -84						; size = 4
_sTmp$103303 = -76					; size = 28
_tag$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_sTag$ = 8						; size = 28
?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; xmlwriter::Createtag, COMDAT
; _this$ = ecx

; 34   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f1		 mov	 esi, ecx

; 52   : 	vectAttrData.clear();

  00034	89 74 24 18	 mov	 DWORD PTR _this$GSCopy$[esp+112], esi
  00038	33 ff		 xor	 edi, edi
  0003a	89 7c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], edi
  0003e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00041	8b cc		 mov	 ecx, esp
  00043	89 64 24 38	 mov	 DWORD PTR $T205905[esp+140], esp
  00047	6a ff		 push	 -1
  00049	57		 push	 edi
  0004a	8d 84 24 98 00
	00 00		 lea	 eax, DWORD PTR _sTag$[esp+144]
  00051	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00058	89 79 14	 mov	 DWORD PTR [ecx+20], edi
  0005b	50		 push	 eax
  0005c	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00060	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00065	c6 84 24 88 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+148], 1
  0006d	8d 4c 24 5c	 lea	 ecx, DWORD PTR _tag$[esp+140]
  00071	51		 push	 ecx
  00072	c6 84 24 8c 00
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+152], 0
  0007a	e8 00 00 00 00	 call	 ?validateTagName@xmlwriter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V23@@Z ; xmlwriter::validateTagName
  0007f	c6 44 24 6c 02	 mov	 BYTE PTR __$EHRec$[esp+120], 2
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00089	6a 25		 push	 37			; 00000025H
  0008b	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  00090	83 c4 08	 add	 esp, 8
  00093	39 7e 38	 cmp	 DWORD PTR [esi+56], edi
  00096	7e 1d		 jle	 SHORT $LN3@Createtag
  00098	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL5@Createtag:

; 35   :     string tag = validateTagName(sTag);
; 36   : 
; 37   : 	Write(__LINE__,"\n");
; 38   : 	//Indent properly
; 39   : 	for(int iTmp =0;iTmp<iLevel;iTmp++)
; 40   : 		Write(__LINE__,"\t");

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  000a5	6a 28		 push	 40			; 00000028H
  000a7	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  000ac	47		 inc	 edi
  000ad	83 c4 08	 add	 esp, 8
  000b0	3b 7e 38	 cmp	 edi, DWORD PTR [esi+56]
  000b3	7c eb		 jl	 SHORT $LL5@Createtag
$LN3@Createtag:

; 41   : 	Write(__LINE__,"<%s",tag.c_str());

  000b5	83 7c 24 58 10	 cmp	 DWORD PTR _tag$[esp+136], 16 ; 00000010H
  000ba	8b 44 24 44	 mov	 eax, DWORD PTR _tag$[esp+116]
  000be	73 04		 jae	 SHORT $LN43@Createtag
  000c0	8d 44 24 44	 lea	 eax, DWORD PTR _tag$[esp+116]
$LN43@Createtag:
  000c4	50		 push	 eax
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_03FONCMJME@?$DM?$CFs?$AA@
  000ca	6a 29		 push	 41			; 00000029H
  000cc	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 42   : 	//Add Attributes
; 43   : 	while(0 < vectAttrData.size()/2)

  000d1	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  000d4	2b 4e 28	 sub	 ecx, DWORD PTR [esi+40]
  000d7	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
  000da	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000df	f7 e9		 imul	 ecx
  000e1	03 d1		 add	 edx, ecx
  000e3	c1 fa 04	 sar	 edx, 4
  000e6	8b c2		 mov	 eax, edx
  000e8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000eb	03 c2		 add	 eax, edx
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	a9 fe ff ff ff	 test	 eax, -2			; fffffffeH
  000f5	0f 86 45 02 00
	00		 jbe	 $LN1@Createtag
$LN2@Createtag:

; 44   : 	{
; 45   : 		string sTmp = vectAttrData.back();

  000fb	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  000fe	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  00101	76 05		 jbe	 SHORT $LN54@Createtag
  00103	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN54@Createtag:
  00108	8b 37		 mov	 esi, DWORD PTR [edi]
  0010a	8b ee		 mov	 ebp, esi
  0010c	89 5c 24 20	 mov	 DWORD PTR __Tmp$206342[esp+116], ebx
  00110	85 f6		 test	 esi, esi
  00112	75 17		 jne	 SHORT $LN516@Createtag
  00114	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00119	33 c0		 xor	 eax, eax
$LN89@Createtag:
  0011b	8d 4b e4	 lea	 ecx, DWORD PTR [ebx-28]
  0011e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00121	77 13		 ja	 SHORT $LN76@Createtag
  00123	85 f6		 test	 esi, esi
  00125	74 08		 je	 SHORT $LN94@Createtag
  00127	8b 36		 mov	 esi, DWORD PTR [esi]
  00129	eb 06		 jmp	 SHORT $LN95@Createtag
$LN516@Createtag:
  0012b	8b 06		 mov	 eax, DWORD PTR [esi]
  0012d	eb ec		 jmp	 SHORT $LN89@Createtag
$LN94@Createtag:
  0012f	33 f6		 xor	 esi, esi
$LN95@Createtag:
  00131	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00134	73 05		 jae	 SHORT $LN75@Createtag
$LN76@Createtag:
  00136	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN75@Createtag:
  0013b	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  0013e	85 ed		 test	 ebp, ebp
  00140	0f 85 ea 00 00
	00		 jne	 $LN515@Createtag
  00146	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0014b	33 c0		 xor	 eax, eax
$LN115@Createtag:
  0014d	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00150	72 05		 jb	 SHORT $LN102@Createtag
  00152	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN102@Createtag:
  00157	6a ff		 push	 -1
  00159	6a 00		 push	 0
  0015b	56		 push	 esi
  0015c	8d 4c 24 30	 lea	 ecx, DWORD PTR _sTmp$103303[esp+124]
  00160	c7 44 24 48 0f
	00 00 00	 mov	 DWORD PTR _sTmp$103303[esp+148], 15 ; 0000000fH
  00168	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR _sTmp$103303[esp+144], 0
  00170	c6 44 24 34 00	 mov	 BYTE PTR _sTmp$103303[esp+128], 0
  00175	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0017a	c6 44 24 6c 03	 mov	 BYTE PTR __$EHRec$[esp+120], 3

; 46   : 		Write(__LINE__," %s=", sTmp.c_str());

  0017f	83 7c 24 3c 10	 cmp	 DWORD PTR _sTmp$103303[esp+136], 16 ; 00000010H
  00184	8b 44 24 28	 mov	 eax, DWORD PTR _sTmp$103303[esp+116]
  00188	73 04		 jae	 SHORT $LN149@Createtag
  0018a	8d 44 24 28	 lea	 eax, DWORD PTR _sTmp$103303[esp+116]
$LN149@Createtag:
  0018e	8b 74 24 18	 mov	 esi, DWORD PTR _this$GSCopy$[esp+112]
  00192	50		 push	 eax
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_04FDKPOGFN@?5?$CFs?$DN?$AA@
  00198	6a 2e		 push	 46			; 0000002eH
  0019a	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 47   : 		vectAttrData.pop_back();

  0019f	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  001a2	8b cb		 mov	 ecx, ebx
  001a4	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  001a7	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001ac	f7 e9		 imul	 ecx
  001ae	03 d1		 add	 edx, ecx
  001b0	c1 fa 04	 sar	 edx, 4
  001b3	8b ca		 mov	 ecx, edx
  001b5	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bb	03 ca		 add	 ecx, edx
  001bd	74 41		 je	 SHORT $LN150@Createtag
  001bf	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  001c2	3b f3		 cmp	 esi, ebx
  001c4	74 36		 je	 SHORT $LN163@Createtag
  001c6	83 c6 18	 add	 esi, 24			; 00000018H
  001c9	8d a4 24 00 00
	00 00		 npad	 7
$LL165@Createtag:
  001d0	83 3e 10	 cmp	 DWORD PTR [esi], 16	; 00000010H
  001d3	72 0c		 jb	 SHORT $LN191@Createtag
  001d5	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001de	83 c4 04	 add	 esp, 4
$LN191@Createtag:
  001e1	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH
  001e7	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  001ee	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
  001f2	83 c6 1c	 add	 esi, 28			; 0000001cH
  001f5	8d 56 e8	 lea	 edx, DWORD PTR [esi-24]
  001f8	3b d3		 cmp	 edx, ebx
  001fa	75 d4		 jne	 SHORT $LL165@Createtag
$LN163@Createtag:
  001fc	83 47 10 e4	 add	 DWORD PTR [edi+16], -28	; ffffffe4H
$LN150@Createtag:

; 48   : 		sTmp = vectAttrData.back();

  00200	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00203	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  00206	76 05		 jbe	 SHORT $LN209@Createtag
  00208	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN209@Createtag:
  0020d	8b 37		 mov	 esi, DWORD PTR [edi]
  0020f	8b ee		 mov	 ebp, esi
  00211	89 5c 24 20	 mov	 DWORD PTR __Tmp$207261[esp+116], ebx
  00215	85 f6		 test	 esi, esi
  00217	75 1f		 jne	 SHORT $LN514@Createtag
  00219	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0021e	33 c0		 xor	 eax, eax
$LN244@Createtag:
  00220	8d 4b e4	 lea	 ecx, DWORD PTR [ebx-28]
  00223	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00226	77 1b		 ja	 SHORT $LN231@Createtag
  00228	85 f6		 test	 esi, esi
  0022a	74 10		 je	 SHORT $LN249@Createtag
  0022c	8b 36		 mov	 esi, DWORD PTR [esi]
  0022e	eb 0e		 jmp	 SHORT $LN250@Createtag
$LN515@Createtag:

; 44   : 	{
; 45   : 		string sTmp = vectAttrData.back();

  00230	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00233	e9 15 ff ff ff	 jmp	 $LN115@Createtag
$LN514@Createtag:

; 48   : 		sTmp = vectAttrData.back();

  00238	8b 06		 mov	 eax, DWORD PTR [esi]
  0023a	eb e4		 jmp	 SHORT $LN244@Createtag
$LN249@Createtag:
  0023c	33 f6		 xor	 esi, esi
$LN250@Createtag:
  0023e	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00241	73 05		 jae	 SHORT $LN230@Createtag
$LN231@Createtag:
  00243	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN230@Createtag:
  00248	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  0024b	85 ed		 test	 ebp, ebp
  0024d	0f 85 1e 02 00
	00		 jne	 $LN513@Createtag
  00253	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00258	33 c0		 xor	 eax, eax
$LN270@Createtag:
  0025a	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  0025d	72 05		 jb	 SHORT $LN257@Createtag
  0025f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN257@Createtag:
  00264	6a ff		 push	 -1
  00266	6a 00		 push	 0
  00268	56		 push	 esi
  00269	8d 4c 24 30	 lea	 ecx, DWORD PTR _sTmp$103303[esp+124]
  0026d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 49   : 		Write(__LINE__,"\"%s\"", sTmp.c_str());

  00272	8b 44 24 28	 mov	 eax, DWORD PTR _sTmp$103303[esp+116]
  00276	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0027b	39 6c 24 3c	 cmp	 DWORD PTR _sTmp$103303[esp+136], ebp
  0027f	73 04		 jae	 SHORT $LN282@Createtag
  00281	8d 44 24 28	 lea	 eax, DWORD PTR _sTmp$103303[esp+116]
$LN282@Createtag:
  00285	8b 74 24 18	 mov	 esi, DWORD PTR _this$GSCopy$[esp+112]
  00289	50		 push	 eax
  0028a	68 00 00 00 00	 push	 OFFSET ??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
  0028f	6a 31		 push	 49			; 00000031H
  00291	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 50   : 		vectAttrData.pop_back();

  00296	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00299	8b cb		 mov	 ecx, ebx
  0029b	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0029e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  002a3	f7 e9		 imul	 ecx
  002a5	03 d1		 add	 edx, ecx
  002a7	c1 fa 04	 sar	 edx, 4
  002aa	8b c2		 mov	 eax, edx
  002ac	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	03 c2		 add	 eax, edx
  002b4	74 39		 je	 SHORT $LN283@Createtag
  002b6	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]
  002b9	3b f3		 cmp	 esi, ebx
  002bb	74 2e		 je	 SHORT $LN296@Createtag
  002bd	83 c6 18	 add	 esi, 24			; 00000018H
$LL298@Createtag:
  002c0	39 2e		 cmp	 DWORD PTR [esi], ebp
  002c2	72 0c		 jb	 SHORT $LN324@Createtag
  002c4	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002cd	83 c4 04	 add	 esp, 4
$LN324@Createtag:
  002d0	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH
  002d6	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  002dd	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
  002e1	83 c6 1c	 add	 esi, 28			; 0000001cH
  002e4	8d 4e e8	 lea	 ecx, DWORD PTR [esi-24]
  002e7	3b cb		 cmp	 ecx, ebx
  002e9	75 d5		 jne	 SHORT $LL298@Createtag
$LN296@Createtag:
  002eb	83 47 10 e4	 add	 DWORD PTR [edi+16], -28	; ffffffe4H
$LN283@Createtag:

; 51   : 	}

  002ef	c6 44 24 6c 02	 mov	 BYTE PTR __$EHRec$[esp+120], 2
  002f4	39 6c 24 3c	 cmp	 DWORD PTR _sTmp$103303[esp+136], ebp
  002f8	72 0d		 jb	 SHORT $LN350@Createtag
  002fa	8b 54 24 28	 mov	 edx, DWORD PTR _sTmp$103303[esp+116]
  002fe	52		 push	 edx
  002ff	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00304	83 c4 04	 add	 esp, 4
$LN350@Createtag:
  00307	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0030a	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0030d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00312	f7 e9		 imul	 ecx
  00314	03 d1		 add	 edx, ecx
  00316	c1 fa 04	 sar	 edx, 4
  00319	8b c2		 mov	 eax, edx
  0031b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0031e	03 c2		 add	 eax, edx
  00320	c7 44 24 3c 0f
	00 00 00	 mov	 DWORD PTR _sTmp$103303[esp+136], 15 ; 0000000fH
  00328	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR _sTmp$103303[esp+132], 0
  00330	c6 44 24 28 00	 mov	 BYTE PTR _sTmp$103303[esp+116], 0
  00335	a9 fe ff ff ff	 test	 eax, -2			; fffffffeH
  0033a	0f 87 bb fd ff
	ff		 ja	 $LN2@Createtag
$LN1@Createtag:

; 52   : 	vectAttrData.clear();

  00340	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00343	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00346	76 05		 jbe	 SHORT $LN368@Createtag
  00348	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN368@Createtag:
  0034d	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00350	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00352	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  00355	76 05		 jbe	 SHORT $LN387@Createtag
  00357	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN387@Createtag:
  0035c	8b 07		 mov	 eax, DWORD PTR [edi]
  0035e	55		 push	 ebp
  0035f	53		 push	 ebx
  00360	56		 push	 esi
  00361	50		 push	 eax
  00362	8d 5c 24 2c	 lea	 ebx, DWORD PTR $T208042[esp+128]
  00366	8b f7		 mov	 esi, edi
  00368	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 53   : 	Write(__LINE__,">");

  0036d	8b 6c 24 18	 mov	 ebp, DWORD PTR _this$GSCopy$[esp+112]
  00371	68 00 00 00 00	 push	 OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
  00376	6a 35		 push	 53			; 00000035H
  00378	8b f5		 mov	 esi, ebp
  0037a	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write

; 54   : 	sTagStack.push(tag);

  0037f	8b 4d 58	 mov	 ecx, DWORD PTR [ebp+88]
  00382	8d 75 3c	 lea	 esi, DWORD PTR [ebp+60]
  00385	41		 inc	 ecx
  00386	83 c4 08	 add	 esp, 8
  00389	39 4e 14	 cmp	 DWORD PTR [esi+20], ecx
  0038c	77 07		 ja	 SHORT $LN404@Createtag
  0038e	8b de		 mov	 ebx, esi
  00390	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
$LN404@Createtag:
  00395	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00398	03 7e 1c	 add	 edi, DWORD PTR [esi+28]
  0039b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0039e	3b c7		 cmp	 eax, edi
  003a0	77 02		 ja	 SHORT $LN403@Createtag
  003a2	2b f8		 sub	 edi, eax
$LN403@Createtag:
  003a4	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  003a7	33 db		 xor	 ebx, ebx
  003a9	39 1c ba	 cmp	 DWORD PTR [edx+edi*4], ebx
  003ac	75 10		 jne	 SHORT $LN402@Createtag
  003ae	6a 1c		 push	 28			; 0000001cH
  003b0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003b5	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  003b8	83 c4 04	 add	 esp, 4
  003bb	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax
$LN402@Createtag:
  003be	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  003c1	8b 0c ba	 mov	 ecx, DWORD PTR [edx+edi*4]
  003c4	c6 44 24 6c 04	 mov	 BYTE PTR __$EHRec$[esp+120], 4
  003c9	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  003ce	3b cb		 cmp	 ecx, ebx
  003d0	74 16		 je	 SHORT $LN420@Createtag
  003d2	6a ff		 push	 -1
  003d4	53		 push	 ebx
  003d5	8d 44 24 48	 lea	 eax, DWORD PTR _tag$[esp+120]
  003d9	89 79 18	 mov	 DWORD PTR [ecx+24], edi
  003dc	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  003df	50		 push	 eax
  003e0	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  003e3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN420@Createtag:
  003e8	c6 44 24 6c 02	 mov	 BYTE PTR __$EHRec$[esp+120], 2
  003ed	b8 01 00 00 00	 mov	 eax, 1
  003f2	01 46 1c	 add	 DWORD PTR [esi+28], eax

; 55   : 	iLevel++;

  003f5	01 45 38	 add	 DWORD PTR [ebp+56], eax

; 56   : 
; 57   : }

  003f8	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  003fc	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00401	39 74 24 58	 cmp	 DWORD PTR _tag$[esp+136], esi
  00405	72 0d		 jb	 SHORT $LN469@Createtag
  00407	8b 4c 24 44	 mov	 ecx, DWORD PTR _tag$[esp+116]
  0040b	51		 push	 ecx
  0040c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00411	83 c4 04	 add	 esp, 4
$LN469@Createtag:
  00414	89 7c 24 58	 mov	 DWORD PTR _tag$[esp+136], edi
  00418	89 5c 24 54	 mov	 DWORD PTR _tag$[esp+132], ebx
  0041c	88 5c 24 44	 mov	 BYTE PTR _tag$[esp+116], bl
  00420	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+120], -1
  00428	39 b4 24 8c 00
	00 00		 cmp	 DWORD PTR _sTag$[esp+132], esi
  0042f	72 0d		 jb	 SHORT $LN495@Createtag
  00431	8b 54 24 78	 mov	 edx, DWORD PTR _sTag$[esp+112]
  00435	52		 push	 edx
  00436	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0043b	83 c4 04	 add	 esp, 4
$LN495@Createtag:
  0043e	89 bc 24 8c 00
	00 00		 mov	 DWORD PTR _sTag$[esp+132], edi
  00445	89 9c 24 88 00
	00 00		 mov	 DWORD PTR _sTag$[esp+128], ebx
  0044c	88 5c 24 78	 mov	 BYTE PTR _sTag$[esp+112], bl
  00450	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  00454	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0045b	59		 pop	 ecx
  0045c	5f		 pop	 edi
  0045d	5e		 pop	 esi
  0045e	5d		 pop	 ebp
  0045f	5b		 pop	 ebx
  00460	8b 4c 24 48	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00464	33 cc		 xor	 ecx, esp
  00466	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0046b	83 c4 5c	 add	 esp, 92			; 0000005cH
  0046e	c2 1c 00	 ret	 28			; 0000001cH
$LN513@Createtag:

; 48   : 		sTmp = vectAttrData.back();

  00471	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00474	e9 e1 fd ff ff	 jmp	 $LN270@Createtag
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _sTag$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8b 4d ac	 mov	 ecx, DWORD PTR $T205905[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d d0	 lea	 ecx, DWORD PTR _tag$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00018	8d 4d b4	 lea	 ecx, DWORD PTR _sTmp$103303[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00020	e9 00 00 00 00	 jmp	 ??3@YAXPAX0@Z		; operator delete
__ehhandler$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  0002c	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	83 c0 10	 add	 eax, 16			; 00000010H
  00039	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Createtag@xmlwriter@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; xmlwriter::Createtag
PUBLIC	??1xmlwriter@@QAE@XZ				; xmlwriter::~xmlwriter
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1xmlwriter@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$??1xmlwriter@@QAE@XZ$3
__ehfuncinfo$??1xmlwriter@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1xmlwriter@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ??1xmlwriter@@QAE@XZ
_TEXT	SEGMENT
$T208874 = -24						; size = 4
$T208830 = -24						; size = 8
$T208827 = -24						; size = 8
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1xmlwriter@@QAE@XZ PROC				; xmlwriter::~xmlwriter, COMDAT

; 27   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1xmlwriter@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 10	 sub	 esp, 16			; 00000010H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 24	 lea	 eax, DWORD PTR __$EHRec$[esp+48]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b 7c 24 34	 mov	 edi, DWORD PTR _this$[esp+44]
  0002b	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+56], 2

; 28   :     if(fp != NULL)

  00033	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00036	85 c0		 test	 eax, eax
  00038	74 09		 je	 SHORT $LN1@xmlwriter

; 29   :         fclose(fp);

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _fclose
  00040	83 c4 04	 add	 esp, 4
$LN1@xmlwriter:

; 30   :     vectAttrData.clear();

  00043	8b 6f 2c	 mov	 ebp, DWORD PTR [edi+44]
  00046	39 6f 28	 cmp	 DWORD PTR [edi+40], ebp
  00049	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  0004c	76 05		 jbe	 SHORT $LN15@xmlwriter
  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN15@xmlwriter:
  00053	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	89 44 24 18	 mov	 DWORD PTR $T208827[esp+48], eax
  0005c	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  0005f	76 05		 jbe	 SHORT $LN34@xmlwriter
  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN34@xmlwriter:
  00066	8b 4c 24 18	 mov	 ecx, DWORD PTR $T208827[esp+48]
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	55		 push	 ebp
  0006d	51		 push	 ecx
  0006e	53		 push	 ebx
  0006f	50		 push	 eax
  00070	8d 5c 24 28	 lea	 ebx, DWORD PTR $T208830[esp+64]
  00074	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 31   : }

  00079	b1 01		 mov	 cl, 1
  0007b	88 4c 24 2c	 mov	 BYTE PTR __$EHRec$[esp+56], cl
  0007f	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  00082	89 44 24 18	 mov	 DWORD PTR $T208874[esp+48], eax
  00086	88 4c 24 2c	 mov	 BYTE PTR __$EHRec$[esp+56], cl
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00090	33 db		 xor	 ebx, ebx
  00092	88 5c 24 2c	 mov	 BYTE PTR __$EHRec$[esp+56], bl
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0009c	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+56], -1
  000a4	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000a8	72 0c		 jb	 SHORT $LN66@xmlwriter
  000aa	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b3	83 c4 04	 add	 esp, 4
$LN66@xmlwriter:
  000b6	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  000bd	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000c0	88 5f 04	 mov	 BYTE PTR [edi+4], bl
  000c3	8b 4c 24 24	 mov	 ecx, DWORD PTR __$EHRec$[esp+48]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5d		 pop	 ebp
  000d2	5b		 pop	 ebx
  000d3	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1xmlwriter@@QAE@XZ$0:
  00000	8b 4d 04	 mov	 ecx, DWORD PTR _this$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1xmlwriter@@QAE@XZ$1:
  00008	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  0000b	83 c0 1c	 add	 eax, 28			; 0000001cH
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00014	c3		 ret	 0
__unwindfunclet$??1xmlwriter@@QAE@XZ$2:
  00015	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp-4]
  00018	83 c0 3c	 add	 eax, 60			; 0000003cH
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00021	c3		 ret	 0
__unwindfunclet$??1xmlwriter@@QAE@XZ$3:
  00022	8b 45 e8	 mov	 eax, DWORD PTR $T208874[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0002b	c3		 ret	 0
__ehhandler$??1xmlwriter@@QAE@XZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 e0	 lea	 eax, DWORD PTR [edx-32]
  00033	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1xmlwriter@@QAE@XZ
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1xmlwriter@@QAE@XZ ENDP				; xmlwriter::~xmlwriter
PUBLIC	_this$GSCopy$
PUBLIC	??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z ; xmlwriter::xmlwriter
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$3
__ehfuncinfo$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtpy
; File e:\tools\sysstatus\xmlwriter.cpp
xdata$x	ENDS
;	COMDAT ??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
$T221829 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sTmp$ = 8						; size = 28
_dbg$ = 36						; size = 4
??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z PROC ; xmlwriter::xmlwriter, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 74 24 10	 mov	 DWORD PTR _this$GSCopy$[esp+36], esi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00032	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00035	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0003c	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0003f	88 1f		 mov	 BYTE PTR [edi], bl
  00041	c6 44 24 20 01	 mov	 BYTE PTR __$EHRec$[esp+44], 1
  00046	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0004f	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  00054	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  00057	50		 push	 eax
  00058	89 44 24 18	 mov	 DWORD PTR $T221829[esp+40], eax
  0005c	e8 00 00 00 00	 call	 ??0?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00061	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4

; 9    :     pDebug = dbg;

  00066	8b 4c 24 44	 mov	 ecx, DWORD PTR _dbg$[esp+32]

; 10   : 
; 11   :     sXmlFile = sTmp;

  0006a	6a ff		 push	 -1
  0006c	53		 push	 ebx
  0006d	8d 54 24 30	 lea	 edx, DWORD PTR _sTmp$[esp+40]
  00071	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00074	52		 push	 edx
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 12   :     fp = NULL;
; 13   :     iLevel = 0;
; 14   :     fp = fopen(sXmlFile.c_str(),"w");

  0007c	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00080	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00083	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00086	72 02		 jb	 SHORT $LN52@xmlwriter@2
  00088	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN52@xmlwriter@2:
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 _fopen
  00095	83 c4 08	 add	 esp, 8
  00098	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 15   :     if(fp == NULL)

  0009b	3b c3		 cmp	 eax, ebx
  0009d	75 09		 jne	 SHORT $LN2@xmlwriter@2

; 16   :     {
; 17   : 		Write(__LINE__,"Unable to open output file");

  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DCOMEIOP@Unable?5to?5open?5output?5file?$AA@
  000a4	6a 11		 push	 17			; 00000011H

; 18   : 		return;

  000a6	eb 07		 jmp	 SHORT $LN81@xmlwriter@2
$LN2@xmlwriter@2:

; 19   :   	}
; 20   : 	else
; 21   : 	{
; 22   : 		Write(__LINE__,"<?xml version=\"1.0\" encoding=\"UTF-8\"\?>");

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MHPNFOKF@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@
  000ad	6a 16		 push	 22			; 00000016H
$LN81@xmlwriter@2:
  000af	e8 00 00 00 00	 call	 ?Write@xmlwriter@@AAAXHPBDZZ ; xmlwriter::Write
  000b4	83 c4 08	 add	 esp, 8

; 23   : 	}
; 24   : }

  000b7	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000bf	83 7c 24 40 10	 cmp	 DWORD PTR _sTmp$[esp+56], 16 ; 00000010H
  000c4	72 0d		 jb	 SHORT $LN70@xmlwriter@2
  000c6	8b 44 24 2c	 mov	 eax, DWORD PTR _sTmp$[esp+36]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d0	83 c4 04	 add	 esp, 4
$LN70@xmlwriter@2:
  000d3	c7 44 24 40 0f
	00 00 00	 mov	 DWORD PTR _sTmp$[esp+56], 15 ; 0000000fH
  000db	89 5c 24 3c	 mov	 DWORD PTR _sTmp$[esp+52], ebx
  000df	88 5c 24 2c	 mov	 BYTE PTR _sTmp$[esp+36], bl
  000e3	8b c6		 mov	 eax, esi
  000e5	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	83 c4 14	 add	 esp, 20			; 00000014H
  000f7	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _sTmp$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$2:
  00010	8b 45 ec	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00013	83 c0 1c	 add	 eax, 28			; 0000001cH
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0001c	c3		 ret	 0
__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$4:
  0001d	8b 45 f0	 mov	 eax, DWORD PTR $T221829[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??1?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00026	c3		 ret	 0
__unwindfunclet$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z$3:
  00027	8b 45 ec	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0002a	83 c0 3c	 add	 eax, 60			; 0000003cH
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??1?$stack@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@QAE@XZ
  00033	c3		 ret	 0
__ehhandler$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0xmlwriter@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AXPADH@Z@Z ENDP ; xmlwriter::xmlwriter
END
