; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

	TITLE	c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BI@GFKFEIAL@?9?9?5USB?4PushBackDets?0?5?$CFs@ ; `string'
PUBLIC	??_C@_0BC@CFJFKPGC@NoDeviceConnected@		; `string'
PUBLIC	??_C@_0BA@LIPCCNEI@DeviceConnected@		; `string'
PUBLIC	??_C@_0BI@LKBNFKJE@DeviceFailedEnumeration@	; `string'
PUBLIC	??_C@_0BF@FIJIOADB@DeviceGeneralFailure@	; `string'
PUBLIC	??_C@_0BI@FHCONGJI@DeviceCausedOvercurrent@	; `string'
PUBLIC	??_C@_0BF@KCIAFGBC@DeviceNotEnoughPower@	; `string'
PUBLIC	??_C@_0BJ@DBBHPJJC@DeviceNotEnoughBandwidth@	; `string'
PUBLIC	??_C@_0BJ@CHELPMAC@DeviceHubNestedTooDeeply@	; `string'
PUBLIC	??_C@_0BC@BOFHLGPH@DeviceInLegacyHub@		; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5@				; `string'
PUBLIC	??_C@_04PFOHOKJK@?5?5?5?5@			; `string'
PUBLIC	??_C@_06GGLIPOFD@?5?5?5?5?5?5@			; `string'
PUBLIC	??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5@		; `string'
PUBLIC	??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5@		; `string'
PUBLIC	??_C@_0P@JPOMJBKJ@?$DO?$DO?5USB?4EnumUSB@	; `string'
PUBLIC	??_C@_0N@JNFFEOEJ@cfgmgr32?4dll@		; `string'
PUBLIC	??_C@_0CI@JNDPNFBI@?$DM?$DM?5USB?4EnumUSB?0?5LoadLib?5cfgmgr3@ ; `string'
PUBLIC	??_C@_0O@CIKLALFP@CM_Get_Parent@		; `string'
PUBLIC	??_C@_0CM@FCKDJEIO@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ ; `string'
PUBLIC	??_C@_0P@OOIACNHP@CM_Get_Sibling@		; `string'
PUBLIC	??_C@_0CN@OFCMGBDD@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ ; `string'
PUBLIC	??_C@_0N@EKPGFMC@CM_Get_Child@			; `string'
PUBLIC	??_C@_0CL@COFLNMDL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ ; `string'
PUBLIC	??_C@_0CC@NHFCMMFN@CM_Get_DevNode_Registry_Propert@ ; `string'
PUBLIC	??_C@_0DP@DGDMCDGA@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ ; `string'
PUBLIC	??_C@_0BD@FFDOPOAJ@CM_Locate_DevNodeA@		; `string'
PUBLIC	??_C@_0DA@PBHEEKCL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_L@ ; `string'
PUBLIC	??_C@_0O@BMIBGHPI@Enumerate?5USB@		; `string'
PUBLIC	??_C@_09PEILPPNA@?2?2?4?2HCD?$CFd@		; `string'
PUBLIC	??_C@_0N@BEFNEIBE@RootHub?5?3?5?$CFs@		; `string'
PUBLIC	??_C@_07FOIBMAON@RootHub@			; `string'
PUBLIC	??_C@_0BL@FOIGIFIJ@Total?5Devices?5Connected?5?$CFu@ ; `string'
PUBLIC	??_C@_0P@NGAEOEJF@?$DM?$DM?5USB?4EnumUSB@	; `string'
PUBLIC	??_C@_0BA@EBIECMOG@?$DO?$DO?5USB?4DevsDets@	; `string'
PUBLIC	??_C@_0BD@HNIJLKOP@USB?5Device?5Details@	; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BA@GOKCLIBE@?$DM?$DM?5USB?4DevsDets@	; `string'
PUBLIC	??_C@_0BC@OBKJMAF@?$DO?$DO?5USB?4GetStrDesc@	; `string'
PUBLIC	??_C@_0CJ@MLNPNNOJ@?$DM?$DM?5USB?4GetStrDesc?0?5DeviceIoCont@ ; `string'
PUBLIC	??_C@_0CA@JKPBCDKN@?$DM?$DM?5USB?4GetStrDesc?0?5Bytes?5Ret?5?$CFu@ ; `string'
PUBLIC	??_C@_0CH@ELGGMNKC@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Descript@ ; `string'
PUBLIC	??_C@_0CD@CHKNKAPD@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Sz?5?$CFd?5?$DM?$DO@ ; `string'
PUBLIC	??_C@_0BN@ILBIFDNN@?$DM?$DM?5USB?4GetStrDesc?0?5Odd?5Sz?5?$CFd@ ; `string'
PUBLIC	??_C@_0CF@BKJLPKEL@?$DM?$DM?5USB?4GetStrDesc?0?5new?5DescNode@ ; `string'
PUBLIC	??_C@_0CK@NJJDPDGO@?9?9?5USB?4GetStrDesc?0?5WideCharToMu@ ; `string'
PUBLIC	??_C@_0CB@LADAJLND@?$DM?$DM?5USB?4GetStrDesc?0?5DescNode?50x?$CF@ ; `string'
PUBLIC	??_C@_0BF@IPAKKGGO@?$DO?$DO?5USB?4AreThrStrDesc@ ; `string'
PUBLIC	??_C@_0DC@KIEGOLFL@?$DM?$DM?5USB?4AreThrStrDesc?0?5Manufact?5@ ; `string'
PUBLIC	??_C@_0BN@DEJJKGAD@?$DM?$DM?5USB?4AreThrStrDesc?0?5Cfg?5?$CFd@ ; `string'
PUBLIC	??_C@_0CD@NAENOJMA@?$DM?$DM?5USB?4AreThrStrDesc?0?5Interface@ ; `string'
PUBLIC	??_C@_0CA@JFAJNON@?$DM?$DM?5USB?4AreThrStrDesc?0?5Ret?5False@ ; `string'
PUBLIC	??_C@_0BG@PLIGAJPI@?$DO?$DO?5USB?4GetAllStrDescs@ ; `string'
PUBLIC	??_C@_0CJ@HBMGBPGH@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@ ; `string'
PUBLIC	??_C@_0CJ@JNLDFNAC@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@ ; `string'
PUBLIC	??_C@_0BF@GLJHIDAC@?$DO?$DO?5USB?4GetDrvKeyName@ ; `string'
PUBLIC	??_C@_0DA@OGKODAJE@?9?9?5USB?4GetDriverKeyName?0?5new?5Ke@ ; `string'
PUBLIC	??_C@_0BP@PGCNCFEB@?$DM?$DM?5USB?4GetDrvKeyName?0?5AName?5?$CFs@ ; `string'
PUBLIC	??_C@_0BE@BDIOPGJF@?$DO?$DO?5USB?4GetExternHub@	; `string'
PUBLIC	??_C@_0DA@HJNGPFIB@?9?9?5USB?4GetExtHubName?0?5new?5extHu@ ; `string'
PUBLIC	??_C@_0CA@IMMCIHAH@?$DM?$DM?5USB?4GetExternHub?0?5HubName?5?$CFs@ ; `string'
PUBLIC	??_C@_0BE@CPBFJJJ@?$DO?$DO?5USB?4EnumHubPorts@	; `string'
PUBLIC	??_C@_0DE@EKAJALEI@?9?9?5USB?4EnumHubPorts?0?5new?5Port?5?$CF@ ; `string'
PUBLIC	??_C@_0N@DMKPCFDB@?$CFs?$FLPort?$CFlu?$FN?5@	; `string'
PUBLIC	??_C@_03MCPBMLDJ@?5?3?5@			; `string'
PUBLIC	??_C@_0L@KFNJHJLN@?$FLPort?$CFlu?$FN?5@		; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_04DHPBCODG@FULL@				; `string'
PUBLIC	??_C@_0CF@LGIDNAEF@?$CFs?5?$FLVID?3?$CF?44X?5PID?3?$CF?44X?5SN?3?$CFs?5Spd@ ; `string'
PUBLIC	??_C@_0BA@CGBIAJFO@Not?5Initialized@		; `string'
PUBLIC	??_C@_09CFCBFJND@Not?5Found@			; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs@		; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs@			; `string'
PUBLIC	??_C@_0BE@LMILCJOE@?$DM?$DM?5USB?4EnumHubPorts@	; `string'
PUBLIC	??_C@_0BP@KMJAGKHH@?$DO?$DO?5USB?4DrvName2DevDesc?0?5Drv?5?$CFs@ ; `string'
PUBLIC	??_C@_0CJ@PHHANNLH@?$DM?$DM?5USB?4DrvName2DevDesc?0?5LocateD@ ; `string'
PUBLIC	??_C@_0BP@GGDOIMOO@?$DM?$DM?5USB?4DrvName2DevDesc?0?5ret?5?$CFs@ ; `string'
PUBLIC	??_C@_0CO@BAPAALJK@?$DM?$DM?5USB?4DrvName2DevDesc?0?5GetDevN@ ; `string'
PUBLIC	??_C@_0CB@OFAOPKJL@?$DM?$DM?5USB?4DrvName2DevDesc?0?5Ret?5Nul@ ; `string'
PUBLIC	??_C@_0P@JENLAABL@?$DO?$DO?5USB?4EnumHub@	; `string'
PUBLIC	??_C@_04GBDIODIA@?2?2?4?2@			; `string'
PUBLIC	??_C@_04MKEDFNGB@?5?3?5?5@			; `string'
PUBLIC	??_C@_0CG@FMONKKAG@?9?9?5USB?4EnumHub?0?5new?5HubInfo?5?$CI?$CFu@ ; `string'
PUBLIC	??_C@_0CD@EDMNKMD@?9?9?5USB?4EnumHub?0?5new?5Info?5?$CI?$CFu?$CJ?5n@ ; `string'
PUBLIC	??_C@_0P@NNDDHFCH@?$DM?$DM?5USB?4EnumHub@	; `string'
PUBLIC	??_C@_0BC@PGMOMHHM@?$DO?$DO?5USB?4GetRootHub@	; `string'
PUBLIC	??_C@_0BO@MFMFEBEJ@?$DM?$DM?5USB?4GetRootHub?0?5HubName?5?$CFs@ ; `string'
PUBLIC	??_C@_0BI@LFJMJGOI@?$DO?$DO?5USB?4GetHCDDrvKeyName@ ; `string'
PUBLIC	??_C@_0CH@GAKGEKMO@?$DM?$DM?5USB?4GetHCDDrvKeyName?0?5DrvKey@ ; `string'
PUBLIC	??_C@_0BD@HEHGMECG@?$DO?$DO?5USB?4GetStrDescs@	; `string'
PUBLIC	??_C@_0CJ@OCOKNHIB@?$DM?$DM?5USB?4GetStrDescs?0?5StrDescNode@ ; `string'
PUBLIC	??_C@_0BC@NBPLLDOB@?$DO?$DO?5USB?4GetCfgDesc@	; `string'
PUBLIC	??_C@_0CJ@JPCNJMBL@?$DM?$DM?5USB?4GetCfgDesc?0?5DeviceIoCont@ ; `string'
PUBLIC	??_C@_0CL@CHLLBENA@?$DM?$DM?5USB?4GetCfgDesc?0?5Bytes?5?$CFu?5?$DM?$DO?5@ ; `string'
PUBLIC	??_C@_0CL@LLJEBADN@?$DM?$DM?5USB?4GetCfgDesc?0?5Total?5?$CFd?5?$DM?5S@ ; `string'
PUBLIC	??_C@_0CN@FDNPACDH@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5DeviceIo@ ; `string'
PUBLIC	??_C@_0CP@JDNANMP@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Bytes?5?$CFu@ ; `string'
PUBLIC	??_C@_0CI@LMLHDIHD@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Total?5?$CFd@ ; `string'
PUBLIC	??_C@_0CL@LPDCGPEM@?9?9?5USB?4GetCfgDescriptor?0?5new?5Bu@ ; `string'
PUBLIC	??_C@_0BI@HCFMPAHC@?$DM?$DM?5USB?4GetCfgDesc?0?50x?$CFp@ ; `string'
PUBLIC	??_C@_0P@GOACPFJP@?$DO?$DO?5USB?4HubInfo@	; `string'
PUBLIC	??_C@_09GDHNALJA@Bus?5Power@			; `string'
PUBLIC	??_C@_0L@JDJFLKOD@Self?5Power@			; `string'
PUBLIC	??_C@_0BA@KPNNFMHH@?$DO?5Hub?5Power?3?5?$CFs@	; `string'
PUBLIC	??_C@_0BG@IOHBDCFM@?$DO?5Number?5of?5Ports?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BK@CEEHKAND@?$DO?5Power?5switching?3?5Ganged@ ; `string'
PUBLIC	??_C@_0BO@BHNNAPDB@?$DO?5Power?5switching?3?5Individual@ ; `string'
PUBLIC	??_C@_0BI@FICFFJGB@?$DO?5Power?5switching?3?5None@ ; `string'
PUBLIC	??_C@_0BG@FBGEODEL@?$DO?5Compound?5device?3?5No@ ; `string'
PUBLIC	??_C@_0BH@CFBEDMDO@?$DO?5Compound?5device?3?5Yes@ ; `string'
PUBLIC	??_C@_0CC@ELIAJJDL@?$DO?5Over?9current?5Protection?3?5Glob@ ; `string'
PUBLIC	??_C@_0CG@MEGDLCFA@?$DO?5Over?9current?5Protection?3?5Indi@ ; `string'
PUBLIC	??_C@_0CO@FGJIHOLC@?$DO?5No?5Over?9current?5Protection?5?$CIB@ ; `string'
PUBLIC	??_C@_0P@CHOKIAKD@?$DM?$DM?5USB?4HubInfo@	; `string'
PUBLIC	??_C@_0P@ICANHPPH@?$DO?$DO?5USB?4HubCaps@	; `string'
PUBLIC	??_C@_0CI@KPNJBEAB@?$DO?5Extended?5Hub?5Capability?5Flags@ ; `string'
PUBLIC	??_C@_0BL@GGCJII@?$DO?5?5?5High?5speed?5Capable?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BD@FCCHMOKD@?$DO?5?5?5High?5speed?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CC@CJLCKEMN@?$DO?5?5?5Mulit?9transaction?5Capable?3?5@ ; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_0BK@JNPMKCLE@?$DO?5?5?5Mulit?9transaction?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BB@BIGCJPGA@?$DO?5?5?5Root?5hub?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CC@EBPNDPBD@?$DO?5?5?5Armed?5for?5wake?5on?5connect?3?5@ ; `string'
PUBLIC	??_C@_0BP@LBBGDALG@?$DO?5?5?5Reserved?5?$CI26?5bits?$CJ?3?5?$CF0?$CD6lx@ ; `string'
PUBLIC	??_C@_0CG@OCCHEKHL@Extended?5Hub?5Capabilities?5UNAVA@ ; `string'
PUBLIC	??_C@_0L@BGKBMIAF@High?5speed@			; `string'
PUBLIC	??_C@_0P@LDNEGAOE@Not?5high?5speed@		; `string'
PUBLIC	??_C@_0CA@BJAEENFA@?$DO?5Hub?5Capabilities?3?5?$CF0?$CD8lx?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BN@HMIILDFE@Hub?5Capabilities?5UNAVAILABLE@ ; `string'
PUBLIC	??_C@_0P@MLOFAKML@?$DM?$DM?5USB?4HubCaps@	; `string'
PUBLIC	??_C@_0BA@IJBIPHPI@?$DO?$DO?5USB?4ConnInfo@	; `string'
PUBLIC	??_C@_0BM@GIKFEJKI@?$DM?$DM?5USB?4ConnInfo?0?5Input?5null@ ; `string'
PUBLIC	??_C@_0CG@KIPJNEMD@?$DO?5ConnectionStatus?3?5NoDeviceCon@ ; `string'
PUBLIC	??_C@_0BF@EPIIACIH@?$DO?5Device?5Descriptor?3@	; `string'
PUBLIC	??_C@_0BD@EBICGGCH@?$DO?5bcdUSB?3?50x?5?$CF?504X@ ; `string'
PUBLIC	??_C@_0BJ@BBNICMHO@?$DO?5?5?5bDeviceClass?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BM@IBBMEPAK@?$DO?5?5?5bDeviceSubClass?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BM@DONCAOLL@?$DO?5?5?5bDeviceProtocol?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0CB@KJHHAJF@?$DO?5?5?5bMaxPacketSize0?3?50x?$CF02X?5?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0BK@FCNKAGPN@?$DO?5?5?5idVendor?3?50x?$CF04X?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BG@FEBFICPG@?$DO?5?5?5idProduct?3?50x?$CF04X@ ; `string'
PUBLIC	??_C@_0BG@IFDGHCDF@?$DO?5?5?5bcdDevice?3?50x?$CF04X@ ; `string'
PUBLIC	??_C@_0BK@IFOFIIGL@?$DO?5?5?5iManufacturer?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BF@JLHEPLOO@?$DO?5?5?5iProduct?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BK@LAPCHIKM@?$DO?5?5?5iSerialNumber?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BP@EFEAMJPP@?$DO?5?5?5bNumConfigurations?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BJ@POKCFGAN@?$DO?5?5?5ConnectionStatus?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CB@CNIJGGK@?$DO?5?5?5Current?5Config?5Value?3?50x?$CF02@ ; `string'
PUBLIC	??_C@_0BK@CLDGMCFC@?$DO?5?5?5Device?5Bus?5Speed?3?5Low@ ; `string'
PUBLIC	??_C@_0BL@CJGBMBHK@?$DO?5?5?5Device?5Bus?5Speed?3?5Full@ ; `string'
PUBLIC	??_C@_0BL@OEKHLNNJ@?$DO?5?5?5Device?5Bus?5Speed?3?5High@ ; `string'
PUBLIC	??_C@_0BO@IIJPBIOD@?$DO?5?5?5Device?5Bus?5Speed?3?5Unknown@ ; `string'
PUBLIC	??_C@_0BL@DEBOODEI@?$DO?5?5?5Device?5Address?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BG@MHCPFALG@?$DO?5?5?5Open?5Pipes?3?5?$CF02lu@ ; `string'
PUBLIC	??_C@_0BA@KGDOGDAK@?$DM?$DM?5USB?4ConnInfo@	; `string'
PUBLIC	??_C@_0BE@MPHLOHIN@?$DO?$DO?5USB?4PipeInfo?0?5?$CFu@ ; `string'
PUBLIC	??_C@_0BA@KIDKADGJ@?$DM?$DM?5USB?4PipeInfo@	; `string'
PUBLIC	??_C@_0BA@BANBJKNP@?$DO?$DO?5USB?4ConnDesc@	; `string'
PUBLIC	??_C@_0BM@HNNAHBOO@?$DM?$DM?5USB?4ConnDesc?0?5Input?5null@ ; `string'
PUBLIC	??_C@_0BA@DPPHAOCN@?$DM?$DM?5USB?4ConnDesc@	; `string'
PUBLIC	??_C@_0P@KMFKJDAO@?$DO?$DO?5USB?4CfgDesc@	; `string'
PUBLIC	??_C@_0BM@PCIMCBFD@?$DO?5Configuration?5Descriptor?3@ ; `string'
PUBLIC	??_C@_0BJ@JBGKFDNL@?$DO?5?5?5wTotalLength?3?50x?$CF04X@ ; `string'
PUBLIC	??_C@_0BL@JNHEPBEN@?$DO?5?5?5bNumInterfaces?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0CA@KHMLNGHE@?$DO?5?5?5bConfigurationValue?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BL@MGNBONG@?$DO?5?5?5iConfiguration?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0M@KJBOJHIH@Bus?5Powered@			; `string'
PUBLIC	??_C@_0N@BBGKMOEA@Self?5Powered@		; `string'
PUBLIC	??_C@_0O@CEMJPFOE@Remote?5Wakeup@		; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP@				; `string'
PUBLIC	??_C@_0BO@GBBHCHCO@?$DO?5?5?5bmAttributes?3?50x?$CF02X?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BN@BADCCJC@?$DO?5?5?5MaxPower?3?50x?$CF02X?5?$CI?$CFd?5mA?$CJ@ ; `string'
PUBLIC	??_C@_0P@OFLCOGDC@?$DM?$DM?5USB?4CfgDesc@	; `string'
PUBLIC	??_C@_0BF@FGFFFEAJ@?$DO?$DO?5USB?4InterfaceDesc@ ; `string'
PUBLIC	??_C@_0BI@FGHPJGGP@?$DO?5Interface?5Descriptor?3@ ; `string'
PUBLIC	??_C@_0BN@ONGOLDBE@?$DO?5?5?5bInterfaceNumber?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BO@JANOLKEO@?$DO?5?5?5bAlternateSetting?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BK@EHJBAMGD@?$DO?5?5?5bNumEndpoints?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_05KKCMAPLJ@Audio@				; `string'
PUBLIC	??_C@_03GLEFGMHP@HID@				; `string'
PUBLIC	??_C@_03IFOKPDKP@Hub@				; `string'
PUBLIC	??_C@_0CB@KPEKNPLO@?$DO?5?5?5bInterfaceClass?3?50x?$CF02X?5?$CI?$CFs@ ; `string'
PUBLIC	??_C@_0O@FIEMGMDK@Audio?5Control@		; `string'
PUBLIC	??_C@_0BA@CCICINDB@Audio?5Streaming@		; `string'
PUBLIC	??_C@_0P@ODBCJCKO@MIDI?5Streaming@		; `string'
PUBLIC	??_C@_0CE@PEKAFJHJ@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X?5@ ; `string'
PUBLIC	??_C@_0BP@MCCALMMN@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BP@HNOOPNHM@?$DO?5?5?5bInterfaceProtocol?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BH@JAJKJCLD@?$DO?5?5?5iInterface?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BI@MFPCCAIN@?$DO?5?5?5wNumClasses?3?50x?$CF04X@ ; `string'
PUBLIC	??_C@_0BF@HIFPCDPI@?$DM?$DM?5USB?4InterfaceDesc@ ; `string'
PUBLIC	??_C@_0BE@BNJCNLHH@?$DO?$DO?5USB?4EndpointDesc@	; `string'
PUBLIC	??_C@_0BH@NNPPCJHP@?$DO?5Endpoint?5Descriptor?3@ ; `string'
PUBLIC	??_C@_0CA@IMJGHBI@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5IN@ ; `string'
PUBLIC	??_C@_0CB@PIKLNKCM@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5OU@ ; `string'
PUBLIC	??_C@_0BL@ICIOMPJC@?$DO?5?5?5Transfer?5Type?3?5Control@ ; `string'
PUBLIC	??_C@_0BP@DMDNFJME@?$DO?5?5?5Transfer?5Type?3?5Isochronous@ ; `string'
PUBLIC	??_C@_0BI@ELEHNLID@?$DO?5?5?5Transfer?5Type?3?5Bulk@ ; `string'
PUBLIC	??_C@_0BN@MOOEBEKA@?$DO?5?5?5Transfer?5Type?3?5Interrupt@ ; `string'
PUBLIC	??_C@_0CA@OFHICAPC@?$DO?5?5?5wMaxPacketSize?3?50x?$CF04X?5?$CI?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0BG@LPGMHCMJ@?$DO?5?5?5bInterval?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BG@HBLIDDIE@?$DO?5?5?5wInterval?3?50x?$CF04X@ ; `string'
PUBLIC	??_C@_0BJ@CECFOBBD@?$DO?5?5?5bSyncAddress?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BE@KDOIKLAK@?$DM?$DM?5USB?4EndpointDesc@	; `string'
PUBLIC	??_C@_0P@IBOMINBP@?$DO?$DO?5USB?4HidDesc@	; `string'
PUBLIC	??_C@_0BC@FKMEKGFJ@?$DO?5HID?5Descriptor?3@	; `string'
PUBLIC	??_C@_0BD@JNJCPDHI@?$DO?5?5?5bcdHID?3?50x?$CF04X@ ; `string'
PUBLIC	??_C@_0BJ@CKIDJFBI@?$DO?5?5?5bCountryCode?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BM@MKJBFMNP@?$DO?5?5?5bNumDescriptors?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0DN@JAEDHMBE@?$DO?5?5?5?$CF?43i?0?5bDescriptorType?3?50x?$CF0@ ; `string'
PUBLIC	??_C@_0P@MIAEPICD@?$DM?$DM?5USB?4HidDesc@	; `string'
PUBLIC	??_C@_0BH@LCHICFEL@?$DO?$DO?5USB?4StrDesc?0?5Idx?5?$CFd@ ; `string'
PUBLIC	??_C@_0P@CCEKBNHE@?$DO?5?5?50x?$CF04X?3?5?$CFs@	; `string'
PUBLIC	??_C@_0P@DKFDMJNG@?$DM?$DM?5USB?4StrDesc@	; `string'
PUBLIC	??_C@_0BD@LEEGFGLN@?$DO?$DO?5USB?4UnknownDesc@	; `string'
PUBLIC	??_C@_0BG@FBFGEGLK@?$DO?5Unknown?5Descriptor?3@	; `string'
PUBLIC	??_C@_0BM@HOMJLHIG@?$DO?5?5?5bDescriptorType?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_0BE@PKPADJND@?$DO?5?5?5bLength?3?50x?$CF02X@ ; `string'
PUBLIC	??_C@_07GHOKFMCD@?$CFs?4?$CF02X@		; `string'
PUBLIC	??_C@_04CKDHMDHJ@?$DO?5?5?5@			; `string'
PUBLIC	??_C@_0BD@MFCGDLMP@?$DM?$DM?5USB?4UnknownDesc@	; `string'
PUBLIC	?UsbViewIndent@@3PAPADA				; UsbViewIndent
PUBLIC	?ConnectionStatuses@@3PAPADA			; ConnectionStatuses
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
;	COMDAT ??_C@_0BD@MFCGDLMP@?$DM?$DM?5USB?4UnknownDesc@
CONST	SEGMENT
??_C@_0BD@MFCGDLMP@?$DM?$DM?5USB?4UnknownDesc@ DB '<< USB.UnknownDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKDHMDHJ@?$DO?5?5?5@
CONST	SEGMENT
??_C@_04CKDHMDHJ@?$DO?5?5?5@ DB '>   ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GHOKFMCD@?$CFs?4?$CF02X@
CONST	SEGMENT
??_C@_07GHOKFMCD@?$CFs?4?$CF02X@ DB '%s.%02X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PKPADJND@?$DO?5?5?5bLength?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BE@PKPADJND@?$DO?5?5?5bLength?3?50x?$CF02X@ DB '>   bLength: 0x%02'
	DB	'X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HOMJLHIG@?$DO?5?5?5bDescriptorType?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BM@HOMJLHIG@?$DO?5?5?5bDescriptorType?3?50x?$CF02X@ DB '>   bDescr'
	DB	'iptorType: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FBFGEGLK@?$DO?5Unknown?5Descriptor?3@
CONST	SEGMENT
??_C@_0BG@FBFGEGLK@?$DO?5Unknown?5Descriptor?3@ DB '> Unknown Descriptor:'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LEEGFGLN@?$DO?$DO?5USB?4UnknownDesc@
CONST	SEGMENT
??_C@_0BD@LEEGFGLN@?$DO?$DO?5USB?4UnknownDesc@ DB '>> USB.UnknownDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DKFDMJNG@?$DM?$DM?5USB?4StrDesc@
CONST	SEGMENT
??_C@_0P@DKFDMJNG@?$DM?$DM?5USB?4StrDesc@ DB '<< USB.StrDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CCEKBNHE@?$DO?5?5?50x?$CF04X?3?5?$CFs@
CONST	SEGMENT
??_C@_0P@CCEKBNHE@?$DO?5?5?50x?$CF04X?3?5?$CFs@ DB '>   0x%04X: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCHICFEL@?$DO?$DO?5USB?4StrDesc?0?5Idx?5?$CFd@
CONST	SEGMENT
??_C@_0BH@LCHICFEL@?$DO?$DO?5USB?4StrDesc?0?5Idx?5?$CFd@ DB '>> USB.StrDe'
	DB	'sc, Idx %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MIAEPICD@?$DM?$DM?5USB?4HidDesc@
CONST	SEGMENT
??_C@_0P@MIAEPICD@?$DM?$DM?5USB?4HidDesc@ DB '<< USB.HidDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@JAEDHMBE@?$DO?5?5?5?$CF?43i?0?5bDescriptorType?3?50x?$CF0@
CONST	SEGMENT
??_C@_0DN@JAEDHMBE@?$DO?5?5?5?$CF?43i?0?5bDescriptorType?3?50x?$CF0@ DB '>'
	DB	'   %.3i, bDescriptorType: 0x%02X, wDescriptorLength: 0x%04X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MKJBFMNP@?$DO?5?5?5bNumDescriptors?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BM@MKJBFMNP@?$DO?5?5?5bNumDescriptors?3?50x?$CF02X@ DB '>   bNumDe'
	DB	'scriptors: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CKIDJFBI@?$DO?5?5?5bCountryCode?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BJ@CKIDJFBI@?$DO?5?5?5bCountryCode?3?50x?$CF02X@ DB '>   bCountryC'
	DB	'ode: 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JNJCPDHI@?$DO?5?5?5bcdHID?3?50x?$CF04X@
CONST	SEGMENT
??_C@_0BD@JNJCPDHI@?$DO?5?5?5bcdHID?3?50x?$CF04X@ DB '>   bcdHID: 0x%04X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FKMEKGFJ@?$DO?5HID?5Descriptor?3@
CONST	SEGMENT
??_C@_0BC@FKMEKGFJ@?$DO?5HID?5Descriptor?3@ DB '> HID Descriptor:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IBOMINBP@?$DO?$DO?5USB?4HidDesc@
CONST	SEGMENT
??_C@_0P@IBOMINBP@?$DO?$DO?5USB?4HidDesc@ DB '>> USB.HidDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KDOIKLAK@?$DM?$DM?5USB?4EndpointDesc@
CONST	SEGMENT
??_C@_0BE@KDOIKLAK@?$DM?$DM?5USB?4EndpointDesc@ DB '<< USB.EndpointDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CECFOBBD@?$DO?5?5?5bSyncAddress?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BJ@CECFOBBD@?$DO?5?5?5bSyncAddress?3?50x?$CF02X@ DB '>   bSyncAddr'
	DB	'ess: 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HBLIDDIE@?$DO?5?5?5wInterval?3?50x?$CF04X@
CONST	SEGMENT
??_C@_0BG@HBLIDDIE@?$DO?5?5?5wInterval?3?50x?$CF04X@ DB '>   wInterval: 0'
	DB	'x%04X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LPGMHCMJ@?$DO?5?5?5bInterval?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BG@LPGMHCMJ@?$DO?5?5?5bInterval?3?50x?$CF02X@ DB '>   bInterval: 0'
	DB	'x%02X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OFHICAPC@?$DO?5?5?5wMaxPacketSize?3?50x?$CF04X?5?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0CA@OFHICAPC@?$DO?5?5?5wMaxPacketSize?3?50x?$CF04X?5?$CI?$CFd?$CJ@ DB '>'
	DB	'   wMaxPacketSize: 0x%04X (%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MOOEBEKA@?$DO?5?5?5Transfer?5Type?3?5Interrupt@
CONST	SEGMENT
??_C@_0BN@MOOEBEKA@?$DO?5?5?5Transfer?5Type?3?5Interrupt@ DB '>   Transfe'
	DB	'r Type: Interrupt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ELEHNLID@?$DO?5?5?5Transfer?5Type?3?5Bulk@
CONST	SEGMENT
??_C@_0BI@ELEHNLID@?$DO?5?5?5Transfer?5Type?3?5Bulk@ DB '>   Transfer Typ'
	DB	'e: Bulk', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DMDNFJME@?$DO?5?5?5Transfer?5Type?3?5Isochronous@
CONST	SEGMENT
??_C@_0BP@DMDNFJME@?$DO?5?5?5Transfer?5Type?3?5Isochronous@ DB '>   Trans'
	DB	'fer Type: Isochronous', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ICIOMPJC@?$DO?5?5?5Transfer?5Type?3?5Control@
CONST	SEGMENT
??_C@_0BL@ICIOMPJC@?$DO?5?5?5Transfer?5Type?3?5Control@ DB '>   Transfer '
	DB	'Type: Control', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PIKLNKCM@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5OU@
CONST	SEGMENT
??_C@_0CB@PIKLNKCM@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5OU@ DB '>   b'
	DB	'EndpointAddress: 0x%02X OUT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMJGHBI@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5IN@
CONST	SEGMENT
??_C@_0CA@IMJGHBI@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5IN@ DB '>   bE'
	DB	'ndpointAddress: 0x%02X IN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NNPPCJHP@?$DO?5Endpoint?5Descriptor?3@
CONST	SEGMENT
??_C@_0BH@NNPPCJHP@?$DO?5Endpoint?5Descriptor?3@ DB '> Endpoint Descripto'
	DB	'r:', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BNJCNLHH@?$DO?$DO?5USB?4EndpointDesc@
CONST	SEGMENT
??_C@_0BE@BNJCNLHH@?$DO?$DO?5USB?4EndpointDesc@ DB '>> USB.EndpointDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HIFPCDPI@?$DM?$DM?5USB?4InterfaceDesc@
CONST	SEGMENT
??_C@_0BF@HIFPCDPI@?$DM?$DM?5USB?4InterfaceDesc@ DB '<< USB.InterfaceDesc'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MFPCCAIN@?$DO?5?5?5wNumClasses?3?50x?$CF04X@
CONST	SEGMENT
??_C@_0BI@MFPCCAIN@?$DO?5?5?5wNumClasses?3?50x?$CF04X@ DB '>   wNumClasse'
	DB	's: 0x%04X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JAJKJCLD@?$DO?5?5?5iInterface?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BH@JAJKJCLD@?$DO?5?5?5iInterface?3?50x?$CF02X@ DB '>   iInterface:'
	DB	' 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HNOOPNHM@?$DO?5?5?5bInterfaceProtocol?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BP@HNOOPNHM@?$DO?5?5?5bInterfaceProtocol?3?50x?$CF02X@ DB '>   bIn'
	DB	'terfaceProtocol: 0x%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MCCALMMN@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BP@MCCALMMN@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X@ DB '>   bIn'
	DB	'terfaceSubClass: 0x%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PEKAFJHJ@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X?5@
CONST	SEGMENT
??_C@_0CE@PEKAFJHJ@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X?5@ DB '>   b'
	DB	'InterfaceSubClass: 0x%02X (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ODBCJCKO@MIDI?5Streaming@
CONST	SEGMENT
??_C@_0P@ODBCJCKO@MIDI?5Streaming@ DB 'MIDI Streaming', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CCICINDB@Audio?5Streaming@
CONST	SEGMENT
??_C@_0BA@CCICINDB@Audio?5Streaming@ DB 'Audio Streaming', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FIEMGMDK@Audio?5Control@
CONST	SEGMENT
??_C@_0O@FIEMGMDK@Audio?5Control@ DB 'Audio Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KPEKNPLO@?$DO?5?5?5bInterfaceClass?3?50x?$CF02X?5?$CI?$CFs@
CONST	SEGMENT
??_C@_0CB@KPEKNPLO@?$DO?5?5?5bInterfaceClass?3?50x?$CF02X?5?$CI?$CFs@ DB '>'
	DB	'   bInterfaceClass: 0x%02X (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03IFOKPDKP@Hub@
CONST	SEGMENT
??_C@_03IFOKPDKP@Hub@ DB 'Hub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLEFGMHP@HID@
CONST	SEGMENT
??_C@_03GLEFGMHP@HID@ DB 'HID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCMAPLJ@Audio@
CONST	SEGMENT
??_C@_05KKCMAPLJ@Audio@ DB 'Audio', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHJBAMGD@?$DO?5?5?5bNumEndpoints?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BK@EHJBAMGD@?$DO?5?5?5bNumEndpoints?3?50x?$CF02X@ DB '>   bNumEndp'
	DB	'oints: 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JANOLKEO@?$DO?5?5?5bAlternateSetting?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BO@JANOLKEO@?$DO?5?5?5bAlternateSetting?3?50x?$CF02X@ DB '>   bAlt'
	DB	'ernateSetting: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ONGOLDBE@?$DO?5?5?5bInterfaceNumber?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BN@ONGOLDBE@?$DO?5?5?5bInterfaceNumber?3?50x?$CF02X@ DB '>   bInte'
	DB	'rfaceNumber: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FGHPJGGP@?$DO?5Interface?5Descriptor?3@
CONST	SEGMENT
??_C@_0BI@FGHPJGGP@?$DO?5Interface?5Descriptor?3@ DB '> Interface Descrip'
	DB	'tor:', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FGFFFEAJ@?$DO?$DO?5USB?4InterfaceDesc@
CONST	SEGMENT
??_C@_0BF@FGFFFEAJ@?$DO?$DO?5USB?4InterfaceDesc@ DB '>> USB.InterfaceDesc'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OFLCOGDC@?$DM?$DM?5USB?4CfgDesc@
CONST	SEGMENT
??_C@_0P@OFLCOGDC@?$DM?$DM?5USB?4CfgDesc@ DB '<< USB.CfgDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BADCCJC@?$DO?5?5?5MaxPower?3?50x?$CF02X?5?$CI?$CFd?5mA?$CJ@
CONST	SEGMENT
??_C@_0BN@BADCCJC@?$DO?5?5?5MaxPower?3?50x?$CF02X?5?$CI?$CFd?5mA?$CJ@ DB '>'
	DB	'   MaxPower: 0x%02X (%d mA)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GBBHCHCO@?$DO?5?5?5bmAttributes?3?50x?$CF02X?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BO@GBBHCHCO@?$DO?5?5?5bmAttributes?3?50x?$CF02X?5?$CI?$CFs?$CJ@ DB '>'
	DB	'   bmAttributes: 0x%02X (%s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEMJPFOE@Remote?5Wakeup@
CONST	SEGMENT
??_C@_0O@CEMJPFOE@Remote?5Wakeup@ DB 'Remote Wakeup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBGKMOEA@Self?5Powered@
CONST	SEGMENT
??_C@_0N@BBGKMOEA@Self?5Powered@ DB 'Self Powered', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KJBOJHIH@Bus?5Powered@
CONST	SEGMENT
??_C@_0M@KJBOJHIH@Bus?5Powered@ DB 'Bus Powered', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MGNBONG@?$DO?5?5?5iConfiguration?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BL@MGNBONG@?$DO?5?5?5iConfiguration?3?50x?$CF02X@ DB '>   iConfigu'
	DB	'ration: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KHMLNGHE@?$DO?5?5?5bConfigurationValue?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0CA@KHMLNGHE@?$DO?5?5?5bConfigurationValue?3?50x?$CF02X@ DB '>   bC'
	DB	'onfigurationValue: 0x%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNHEPBEN@?$DO?5?5?5bNumInterfaces?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BL@JNHEPBEN@?$DO?5?5?5bNumInterfaces?3?50x?$CF02X@ DB '>   bNumInt'
	DB	'erfaces: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JBGKFDNL@?$DO?5?5?5wTotalLength?3?50x?$CF04X@
CONST	SEGMENT
??_C@_0BJ@JBGKFDNL@?$DO?5?5?5wTotalLength?3?50x?$CF04X@ DB '>   wTotalLen'
	DB	'gth: 0x%04X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PCIMCBFD@?$DO?5Configuration?5Descriptor?3@
CONST	SEGMENT
??_C@_0BM@PCIMCBFD@?$DO?5Configuration?5Descriptor?3@ DB '> Configuration'
	DB	' Descriptor:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KMFKJDAO@?$DO?$DO?5USB?4CfgDesc@
CONST	SEGMENT
??_C@_0P@KMFKJDAO@?$DO?$DO?5USB?4CfgDesc@ DB '>> USB.CfgDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPPHAOCN@?$DM?$DM?5USB?4ConnDesc@
CONST	SEGMENT
??_C@_0BA@DPPHAOCN@?$DM?$DM?5USB?4ConnDesc@ DB '<< USB.ConnDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HNNAHBOO@?$DM?$DM?5USB?4ConnDesc?0?5Input?5null@
CONST	SEGMENT
??_C@_0BM@HNNAHBOO@?$DM?$DM?5USB?4ConnDesc?0?5Input?5null@ DB '<< USB.Con'
	DB	'nDesc, Input null', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BANBJKNP@?$DO?$DO?5USB?4ConnDesc@
CONST	SEGMENT
??_C@_0BA@BANBJKNP@?$DO?$DO?5USB?4ConnDesc@ DB '>> USB.ConnDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIDKADGJ@?$DM?$DM?5USB?4PipeInfo@
CONST	SEGMENT
??_C@_0BA@KIDKADGJ@?$DM?$DM?5USB?4PipeInfo@ DB '<< USB.PipeInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MPHLOHIN@?$DO?$DO?5USB?4PipeInfo?0?5?$CFu@
CONST	SEGMENT
??_C@_0BE@MPHLOHIN@?$DO?$DO?5USB?4PipeInfo?0?5?$CFu@ DB '>> USB.PipeInfo,'
	DB	' %u', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGDOGDAK@?$DM?$DM?5USB?4ConnInfo@
CONST	SEGMENT
??_C@_0BA@KGDOGDAK@?$DM?$DM?5USB?4ConnInfo@ DB '<< USB.ConnInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MHCPFALG@?$DO?5?5?5Open?5Pipes?3?5?$CF02lu@
CONST	SEGMENT
??_C@_0BG@MHCPFALG@?$DO?5?5?5Open?5Pipes?3?5?$CF02lu@ DB '>   Open Pipes:'
	DB	' %02lu', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DEBOODEI@?$DO?5?5?5Device?5Address?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BL@DEBOODEI@?$DO?5?5?5Device?5Address?3?50x?$CF02X@ DB '>   Device'
	DB	' Address: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IIJPBIOD@?$DO?5?5?5Device?5Bus?5Speed?3?5Unknown@
CONST	SEGMENT
??_C@_0BO@IIJPBIOD@?$DO?5?5?5Device?5Bus?5Speed?3?5Unknown@ DB '>   Devic'
	DB	'e Bus Speed: Unknown', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OEKHLNNJ@?$DO?5?5?5Device?5Bus?5Speed?3?5High@
CONST	SEGMENT
??_C@_0BL@OEKHLNNJ@?$DO?5?5?5Device?5Bus?5Speed?3?5High@ DB '>   Device B'
	DB	'us Speed: High', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CJGBMBHK@?$DO?5?5?5Device?5Bus?5Speed?3?5Full@
CONST	SEGMENT
??_C@_0BL@CJGBMBHK@?$DO?5?5?5Device?5Bus?5Speed?3?5Full@ DB '>   Device B'
	DB	'us Speed: Full', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CLDGMCFC@?$DO?5?5?5Device?5Bus?5Speed?3?5Low@
CONST	SEGMENT
??_C@_0BK@CLDGMCFC@?$DO?5?5?5Device?5Bus?5Speed?3?5Low@ DB '>   Device Bu'
	DB	's Speed: Low', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CNIJGGK@?$DO?5?5?5Current?5Config?5Value?3?50x?$CF02@
CONST	SEGMENT
??_C@_0CB@CNIJGGK@?$DO?5?5?5Current?5Config?5Value?3?50x?$CF02@ DB '>   C'
	DB	'urrent Config Value: 0x%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POKCFGAN@?$DO?5?5?5ConnectionStatus?3?5?$CFs@
CONST	SEGMENT
??_C@_0BJ@POKCFGAN@?$DO?5?5?5ConnectionStatus?3?5?$CFs@ DB '>   Connectio'
	DB	'nStatus: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EFEAMJPP@?$DO?5?5?5bNumConfigurations?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BP@EFEAMJPP@?$DO?5?5?5bNumConfigurations?3?50x?$CF02X@ DB '>   bNu'
	DB	'mConfigurations: 0x%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LAPCHIKM@?$DO?5?5?5iSerialNumber?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BK@LAPCHIKM@?$DO?5?5?5iSerialNumber?3?50x?$CF02X@ DB '>   iSerialN'
	DB	'umber: 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JLHEPLOO@?$DO?5?5?5iProduct?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BF@JLHEPLOO@?$DO?5?5?5iProduct?3?50x?$CF02X@ DB '>   iProduct: 0x%'
	DB	'02X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IFOFIIGL@?$DO?5?5?5iManufacturer?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BK@IFOFIIGL@?$DO?5?5?5iManufacturer?3?50x?$CF02X@ DB '>   iManufac'
	DB	'turer: 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFDGHCDF@?$DO?5?5?5bcdDevice?3?50x?$CF04X@
CONST	SEGMENT
??_C@_0BG@IFDGHCDF@?$DO?5?5?5bcdDevice?3?50x?$CF04X@ DB '>   bcdDevice: 0'
	DB	'x%04X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FEBFICPG@?$DO?5?5?5idProduct?3?50x?$CF04X@
CONST	SEGMENT
??_C@_0BG@FEBFICPG@?$DO?5?5?5idProduct?3?50x?$CF04X@ DB '>   idProduct: 0'
	DB	'x%04X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FCNKAGPN@?$DO?5?5?5idVendor?3?50x?$CF04X?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BK@FCNKAGPN@?$DO?5?5?5idVendor?3?50x?$CF04X?5?$CI?$CFs?$CJ@ DB '> '
	DB	'  idVendor: 0x%04X (%s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KJHHAJF@?$DO?5?5?5bMaxPacketSize0?3?50x?$CF02X?5?$CI?$CFd@
CONST	SEGMENT
??_C@_0CB@KJHHAJF@?$DO?5?5?5bMaxPacketSize0?3?50x?$CF02X?5?$CI?$CFd@ DB '>'
	DB	'   bMaxPacketSize0: 0x%02X (%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DONCAOLL@?$DO?5?5?5bDeviceProtocol?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BM@DONCAOLL@?$DO?5?5?5bDeviceProtocol?3?50x?$CF02X@ DB '>   bDevic'
	DB	'eProtocol: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IBBMEPAK@?$DO?5?5?5bDeviceSubClass?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BM@IBBMEPAK@?$DO?5?5?5bDeviceSubClass?3?50x?$CF02X@ DB '>   bDevic'
	DB	'eSubClass: 0x%02X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BBNICMHO@?$DO?5?5?5bDeviceClass?3?50x?$CF02X@
CONST	SEGMENT
??_C@_0BJ@BBNICMHO@?$DO?5?5?5bDeviceClass?3?50x?$CF02X@ DB '>   bDeviceCl'
	DB	'ass: 0x%02X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EBICGGCH@?$DO?5bcdUSB?3?50x?5?$CF?504X@
CONST	SEGMENT
??_C@_0BD@EBICGGCH@?$DO?5bcdUSB?3?50x?5?$CF?504X@ DB '> bcdUSB: 0x % 04X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EPIIACIH@?$DO?5Device?5Descriptor?3@
CONST	SEGMENT
??_C@_0BF@EPIIACIH@?$DO?5Device?5Descriptor?3@ DB '> Device Descriptor:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KIPJNEMD@?$DO?5ConnectionStatus?3?5NoDeviceCon@
CONST	SEGMENT
??_C@_0CG@KIPJNEMD@?$DO?5ConnectionStatus?3?5NoDeviceCon@ DB '> Connectio'
	DB	'nStatus: NoDeviceConnected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GIKFEJKI@?$DM?$DM?5USB?4ConnInfo?0?5Input?5null@
CONST	SEGMENT
??_C@_0BM@GIKFEJKI@?$DM?$DM?5USB?4ConnInfo?0?5Input?5null@ DB '<< USB.Con'
	DB	'nInfo, Input null', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJBIPHPI@?$DO?$DO?5USB?4ConnInfo@
CONST	SEGMENT
??_C@_0BA@IJBIPHPI@?$DO?$DO?5USB?4ConnInfo@ DB '>> USB.ConnInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLOFAKML@?$DM?$DM?5USB?4HubCaps@
CONST	SEGMENT
??_C@_0P@MLOFAKML@?$DM?$DM?5USB?4HubCaps@ DB '<< USB.HubCaps', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HMIILDFE@Hub?5Capabilities?5UNAVAILABLE@
CONST	SEGMENT
??_C@_0BN@HMIILDFE@Hub?5Capabilities?5UNAVAILABLE@ DB 'Hub Capabilities U'
	DB	'NAVAILABLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BJAEENFA@?$DO?5Hub?5Capabilities?3?5?$CF0?$CD8lx?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0CA@BJAEENFA@?$DO?5Hub?5Capabilities?3?5?$CF0?$CD8lx?5?$CI?$CFs?$CJ@ DB '>'
	DB	' Hub Capabilities: %0#8lx (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LDNEGAOE@Not?5high?5speed@
CONST	SEGMENT
??_C@_0P@LDNEGAOE@Not?5high?5speed@ DB 'Not high speed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BGKBMIAF@High?5speed@
CONST	SEGMENT
??_C@_0L@BGKBMIAF@High?5speed@ DB 'High speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OCCHEKHL@Extended?5Hub?5Capabilities?5UNAVA@
CONST	SEGMENT
??_C@_0CG@OCCHEKHL@Extended?5Hub?5Capabilities?5UNAVA@ DB 'Extended Hub C'
	DB	'apabilities UNAVAILABLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LBBGDALG@?$DO?5?5?5Reserved?5?$CI26?5bits?$CJ?3?5?$CF0?$CD6lx@
CONST	SEGMENT
??_C@_0BP@LBBGDALG@?$DO?5?5?5Reserved?5?$CI26?5bits?$CJ?3?5?$CF0?$CD6lx@ DB '>'
	DB	'   Reserved (26 bits): %0#6lx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EBPNDPBD@?$DO?5?5?5Armed?5for?5wake?5on?5connect?3?5@
CONST	SEGMENT
??_C@_0CC@EBPNDPBD@?$DO?5?5?5Armed?5for?5wake?5on?5connect?3?5@ DB '>   A'
	DB	'rmed for wake on connect: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BIGCJPGA@?$DO?5?5?5Root?5hub?3?5?$CFs@
CONST	SEGMENT
??_C@_0BB@BIGCJPGA@?$DO?5?5?5Root?5hub?3?5?$CFs@ DB '>   Root hub: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JNPMKCLE@?$DO?5?5?5Mulit?9transaction?3?5?$CFs@
CONST	SEGMENT
??_C@_0BK@JNPMKCLE@?$DO?5?5?5Mulit?9transaction?3?5?$CFs@ DB '>   Mulit-t'
	DB	'ransaction: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CJLCKEMN@?$DO?5?5?5Mulit?9transaction?5Capable?3?5@
CONST	SEGMENT
??_C@_0CC@CJLCKEMN@?$DO?5?5?5Mulit?9transaction?5Capable?3?5@ DB '>   Mul'
	DB	'it-transaction Capable: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCCHMOKD@?$DO?5?5?5High?5speed?3?5?$CFs@
CONST	SEGMENT
??_C@_0BD@FCCHMOKD@?$DO?5?5?5High?5speed?3?5?$CFs@ DB '>   High speed: %s'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GGCJII@?$DO?5?5?5High?5speed?5Capable?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@GGCJII@?$DO?5?5?5High?5speed?5Capable?3?5?$CFs@ DB '>   High sp'
	DB	'eed Capable: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KPNJBEAB@?$DO?5Extended?5Hub?5Capability?5Flags@
CONST	SEGMENT
??_C@_0CI@KPNJBEAB@?$DO?5Extended?5Hub?5Capability?5Flags@ DB '> Extended'
	DB	' Hub Capability Flags: %0#8lx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ICANHPPH@?$DO?$DO?5USB?4HubCaps@
CONST	SEGMENT
??_C@_0P@ICANHPPH@?$DO?$DO?5USB?4HubCaps@ DB '>> USB.HubCaps', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHOKIAKD@?$DM?$DM?5USB?4HubInfo@
CONST	SEGMENT
??_C@_0P@CHOKIAKD@?$DM?$DM?5USB?4HubInfo@ DB '<< USB.HubInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGJIHOLC@?$DO?5No?5Over?9current?5Protection?5?$CIB@
CONST	SEGMENT
??_C@_0CO@FGJIHOLC@?$DO?5No?5Over?9current?5Protection?5?$CIB@ DB '> No O'
	DB	'ver-current Protection (Bus Power Only)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MEGDLCFA@?$DO?5Over?9current?5Protection?3?5Indi@
CONST	SEGMENT
??_C@_0CG@MEGDLCFA@?$DO?5Over?9current?5Protection?3?5Indi@ DB '> Over-cu'
	DB	'rrent Protection: Individual', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ELIAJJDL@?$DO?5Over?9current?5Protection?3?5Glob@
CONST	SEGMENT
??_C@_0CC@ELIAJJDL@?$DO?5Over?9current?5Protection?3?5Glob@ DB '> Over-cu'
	DB	'rrent Protection: Global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFBEDMDO@?$DO?5Compound?5device?3?5Yes@
CONST	SEGMENT
??_C@_0BH@CFBEDMDO@?$DO?5Compound?5device?3?5Yes@ DB '> Compound device: '
	DB	'Yes', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FBGEODEL@?$DO?5Compound?5device?3?5No@
CONST	SEGMENT
??_C@_0BG@FBGEODEL@?$DO?5Compound?5device?3?5No@ DB '> Compound device: N'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FICFFJGB@?$DO?5Power?5switching?3?5None@
CONST	SEGMENT
??_C@_0BI@FICFFJGB@?$DO?5Power?5switching?3?5None@ DB '> Power switching:'
	DB	' None', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BHNNAPDB@?$DO?5Power?5switching?3?5Individual@
CONST	SEGMENT
??_C@_0BO@BHNNAPDB@?$DO?5Power?5switching?3?5Individual@ DB '> Power swit'
	DB	'ching: Individual', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CEEHKAND@?$DO?5Power?5switching?3?5Ganged@
CONST	SEGMENT
??_C@_0BK@CEEHKAND@?$DO?5Power?5switching?3?5Ganged@ DB '> Power switchin'
	DB	'g: Ganged', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IOHBDCFM@?$DO?5Number?5of?5Ports?3?5?$CFd@
CONST	SEGMENT
??_C@_0BG@IOHBDCFM@?$DO?5Number?5of?5Ports?3?5?$CFd@ DB '> Number of Port'
	DB	's: %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KPNNFMHH@?$DO?5Hub?5Power?3?5?$CFs@
CONST	SEGMENT
??_C@_0BA@KPNNFMHH@?$DO?5Hub?5Power?3?5?$CFs@ DB '> Hub Power: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDJFLKOD@Self?5Power@
CONST	SEGMENT
??_C@_0L@JDJFLKOD@Self?5Power@ DB 'Self Power', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDHNALJA@Bus?5Power@
CONST	SEGMENT
??_C@_09GDHNALJA@Bus?5Power@ DB 'Bus Power', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GOACPFJP@?$DO?$DO?5USB?4HubInfo@
CONST	SEGMENT
??_C@_0P@GOACPFJP@?$DO?$DO?5USB?4HubInfo@ DB '>> USB.HubInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HCFMPAHC@?$DM?$DM?5USB?4GetCfgDesc?0?50x?$CFp@
CONST	SEGMENT
??_C@_0BI@HCFMPAHC@?$DM?$DM?5USB?4GetCfgDesc?0?50x?$CFp@ DB '<< USB.GetCf'
	DB	'gDesc, 0x%p', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LPDCGPEM@?9?9?5USB?4GetCfgDescriptor?0?5new?5Bu@
CONST	SEGMENT
??_C@_0CL@LPDCGPEM@?9?9?5USB?4GetCfgDescriptor?0?5new?5Bu@ DB '-- USB.Get'
	DB	'CfgDescriptor, new Buf (%u) null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LMLHDIHD@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Total?5?$CFd@
CONST	SEGMENT
??_C@_0CI@LMLHDIHD@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Total?5?$CFd@ DB '<<'
	DB	' USB.GetCfgDesc, Req Total %d < Sz %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JDNANMP@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Bytes?5?$CFu@
CONST	SEGMENT
??_C@_0CP@JDNANMP@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Bytes?5?$CFu@ DB '<< '
	DB	'USB.GetCfgDesc, Req Bytes %u <> BytesRet %u', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@FDNPACDH@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5DeviceIo@
CONST	SEGMENT
??_C@_0CN@FDNPACDH@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5DeviceIo@ DB '<< USB'
	DB	'.GetCfgDesc, Req DeviceIoControl False', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LLJEBADN@?$DM?$DM?5USB?4GetCfgDesc?0?5Total?5?$CFd?5?$DM?5S@
CONST	SEGMENT
??_C@_0CL@LLJEBADN@?$DM?$DM?5USB?4GetCfgDesc?0?5Total?5?$CFd?5?$DM?5S@ DB '<'
	DB	'< USB.GetCfgDesc, Total %d < Sz struct %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CHLLBENA@?$DM?$DM?5USB?4GetCfgDesc?0?5Bytes?5?$CFu?5?$DM?$DO?5@
CONST	SEGMENT
??_C@_0CL@CHLLBENA@?$DM?$DM?5USB?4GetCfgDesc?0?5Bytes?5?$CFu?5?$DM?$DO?5@ DB '<'
	DB	'< USB.GetCfgDesc, Bytes %u <> BytesRet %u', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JPCNJMBL@?$DM?$DM?5USB?4GetCfgDesc?0?5DeviceIoCont@
CONST	SEGMENT
??_C@_0CJ@JPCNJMBL@?$DM?$DM?5USB?4GetCfgDesc?0?5DeviceIoCont@ DB '<< USB.'
	DB	'GetCfgDesc, DeviceIoControl False', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NBPLLDOB@?$DO?$DO?5USB?4GetCfgDesc@
CONST	SEGMENT
??_C@_0BC@NBPLLDOB@?$DO?$DO?5USB?4GetCfgDesc@ DB '>> USB.GetCfgDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OCOKNHIB@?$DM?$DM?5USB?4GetStrDescs?0?5StrDescNode@
CONST	SEGMENT
??_C@_0CJ@OCOKNHIB@?$DM?$DM?5USB?4GetStrDescs?0?5StrDescNode@ DB '<< USB.'
	DB	'GetStrDescs, StrDescNodeTail 0x%p', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HEHGMECG@?$DO?$DO?5USB?4GetStrDescs@
CONST	SEGMENT
??_C@_0BD@HEHGMECG@?$DO?$DO?5USB?4GetStrDescs@ DB '>> USB.GetStrDescs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GAKGEKMO@?$DM?$DM?5USB?4GetHCDDrvKeyName?0?5DrvKey@
CONST	SEGMENT
??_C@_0CH@GAKGEKMO@?$DM?$DM?5USB?4GetHCDDrvKeyName?0?5DrvKey@ DB '<< USB.'
	DB	'GetHCDDrvKeyName, DrvKeyName %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFJMJGOI@?$DO?$DO?5USB?4GetHCDDrvKeyName@
CONST	SEGMENT
??_C@_0BI@LFJMJGOI@?$DO?$DO?5USB?4GetHCDDrvKeyName@ DB '>> USB.GetHCDDrvK'
	DB	'eyName', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MFMFEBEJ@?$DM?$DM?5USB?4GetRootHub?0?5HubName?5?$CFs@
CONST	SEGMENT
??_C@_0BO@MFMFEBEJ@?$DM?$DM?5USB?4GetRootHub?0?5HubName?5?$CFs@ DB '<< US'
	DB	'B.GetRootHub, HubName %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGMOMHHM@?$DO?$DO?5USB?4GetRootHub@
CONST	SEGMENT
??_C@_0BC@PGMOMHHM@?$DO?$DO?5USB?4GetRootHub@ DB '>> USB.GetRootHub', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NNDDHFCH@?$DM?$DM?5USB?4EnumHub@
CONST	SEGMENT
??_C@_0P@NNDDHFCH@?$DM?$DM?5USB?4EnumHub@ DB '<< USB.EnumHub', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EDMNKMD@?9?9?5USB?4EnumHub?0?5new?5Info?5?$CI?$CFu?$CJ?5n@
CONST	SEGMENT
??_C@_0CD@EDMNKMD@?9?9?5USB?4EnumHub?0?5new?5Info?5?$CI?$CFu?$CJ?5n@ DB '-'
	DB	'- USB.EnumHub, new Info (%u) null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FMONKKAG@?9?9?5USB?4EnumHub?0?5new?5HubInfo?5?$CI?$CFu@
CONST	SEGMENT
??_C@_0CG@FMONKKAG@?9?9?5USB?4EnumHub?0?5new?5HubInfo?5?$CI?$CFu@ DB '-- '
	DB	'USB.EnumHub, new HubInfo (%u) null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKEDFNGB@?5?3?5?5@
CONST	SEGMENT
??_C@_04MKEDFNGB@?5?3?5?5@ DB ' :  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDIODIA@?2?2?4?2@
CONST	SEGMENT
??_C@_04GBDIODIA@?2?2?4?2@ DB '\\.\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JENLAABL@?$DO?$DO?5USB?4EnumHub@
CONST	SEGMENT
??_C@_0P@JENLAABL@?$DO?$DO?5USB?4EnumHub@ DB '>> USB.EnumHub', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OFAOPKJL@?$DM?$DM?5USB?4DrvName2DevDesc?0?5Ret?5Nul@
CONST	SEGMENT
??_C@_0CB@OFAOPKJL@?$DM?$DM?5USB?4DrvName2DevDesc?0?5Ret?5Nul@ DB '<< USB'
	DB	'.DrvName2DevDesc, Ret Null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BAPAALJK@?$DM?$DM?5USB?4DrvName2DevDesc?0?5GetDevN@
CONST	SEGMENT
??_C@_0CO@BAPAALJK@?$DM?$DM?5USB?4DrvName2DevDesc?0?5GetDevN@ DB '<< USB.'
	DB	'DrvName2DevDesc, GetDevNodeRegProps %u', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GGDOIMOO@?$DM?$DM?5USB?4DrvName2DevDesc?0?5ret?5?$CFs@
CONST	SEGMENT
??_C@_0BP@GGDOIMOO@?$DM?$DM?5USB?4DrvName2DevDesc?0?5ret?5?$CFs@ DB '<< U'
	DB	'SB.DrvName2DevDesc, ret %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PHHANNLH@?$DM?$DM?5USB?4DrvName2DevDesc?0?5LocateD@
CONST	SEGMENT
??_C@_0CJ@PHHANNLH@?$DM?$DM?5USB?4DrvName2DevDesc?0?5LocateD@ DB '<< USB.'
	DB	'DrvName2DevDesc, LocateDevNote %u', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KMJAGKHH@?$DO?$DO?5USB?4DrvName2DevDesc?0?5Drv?5?$CFs@
CONST	SEGMENT
??_C@_0BP@KMJAGKHH@?$DO?$DO?5USB?4DrvName2DevDesc?0?5Drv?5?$CFs@ DB '>> U'
	DB	'SB.DrvName2DevDesc, Drv %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMILCJOE@?$DM?$DM?5USB?4EnumHubPorts@
CONST	SEGMENT
??_C@_0BE@LMILCJOE@?$DM?$DM?5USB?4EnumHubPorts@ DB '<< USB.EnumHubPorts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CFCBFJND@Not?5Found@
CONST	SEGMENT
??_C@_09CFCBFJND@Not?5Found@ DB 'Not Found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CGBIAJFO@Not?5Initialized@
CONST	SEGMENT
??_C@_0BA@CGBIAJFO@Not?5Initialized@ DB 'Not Initialized', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LGIDNAEF@?$CFs?5?$FLVID?3?$CF?44X?5PID?3?$CF?44X?5SN?3?$CFs?5Spd@
CONST	SEGMENT
??_C@_0CF@LGIDNAEF@?$CFs?5?$FLVID?3?$CF?44X?5PID?3?$CF?44X?5SN?3?$CFs?5Spd@ DB '%'
	DB	's [VID:%.4X PID:%.4X SN:%s Spd: %s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHPBCODG@FULL@
CONST	SEGMENT
??_C@_04DHPBCODG@FULL@ DB 'FULL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFNJHJLN@?$FLPort?$CFlu?$FN?5@
CONST	SEGMENT
??_C@_0L@KFNJHJLN@?$FLPort?$CFlu?$FN?5@ DB '[Port%lu] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCPBMLDJ@?5?3?5@
CONST	SEGMENT
??_C@_03MCPBMLDJ@?5?3?5@ DB ' : ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DMKPCFDB@?$CFs?$FLPort?$CFlu?$FN?5@
CONST	SEGMENT
??_C@_0N@DMKPCFDB@?$CFs?$FLPort?$CFlu?$FN?5@ DB '%s[Port%lu] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@EKAJALEI@?9?9?5USB?4EnumHubPorts?0?5new?5Port?5?$CF@
CONST	SEGMENT
??_C@_0DE@EKAJALEI@?9?9?5USB?4EnumHubPorts?0?5new?5Port?5?$CF@ DB '-- USB'
	DB	'.EnumHubPorts, new Port %d ConnInfo (%u) null', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPBFJJJ@?$DO?$DO?5USB?4EnumHubPorts@
CONST	SEGMENT
??_C@_0BE@CPBFJJJ@?$DO?$DO?5USB?4EnumHubPorts@ DB '>> USB.EnumHubPorts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMMCIHAH@?$DM?$DM?5USB?4GetExternHub?0?5HubName?5?$CFs@
CONST	SEGMENT
??_C@_0CA@IMMCIHAH@?$DM?$DM?5USB?4GetExternHub?0?5HubName?5?$CFs@ DB '<< '
	DB	'USB.GetExternHub, HubName %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HJNGPFIB@?9?9?5USB?4GetExtHubName?0?5new?5extHu@
CONST	SEGMENT
??_C@_0DA@HJNGPFIB@?9?9?5USB?4GetExtHubName?0?5new?5extHu@ DB '-- USB.Get'
	DB	'ExtHubName, new extHubNameW (%u) null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BDIOPGJF@?$DO?$DO?5USB?4GetExternHub@
CONST	SEGMENT
??_C@_0BE@BDIOPGJF@?$DO?$DO?5USB?4GetExternHub@ DB '>> USB.GetExternHub', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PGCNCFEB@?$DM?$DM?5USB?4GetDrvKeyName?0?5AName?5?$CFs@
CONST	SEGMENT
??_C@_0BP@PGCNCFEB@?$DM?$DM?5USB?4GetDrvKeyName?0?5AName?5?$CFs@ DB '<< U'
	DB	'SB.GetDrvKeyName, AName %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OGKODAJE@?9?9?5USB?4GetDriverKeyName?0?5new?5Ke@
CONST	SEGMENT
??_C@_0DA@OGKODAJE@?9?9?5USB?4GetDriverKeyName?0?5new?5Ke@ DB '-- USB.Get'
	DB	'DriverKeyName, new KeyNameW (%u) null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GLJHIDAC@?$DO?$DO?5USB?4GetDrvKeyName@
CONST	SEGMENT
??_C@_0BF@GLJHIDAC@?$DO?$DO?5USB?4GetDrvKeyName@ DB '>> USB.GetDrvKeyName'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JNLDFNAC@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@
CONST	SEGMENT
??_C@_0CJ@JNLDFNAC@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@ DB '<< USB.'
	DB	'GetAllStrDescs, SuppLangsStr 0x%p', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HBMGBPGH@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@
CONST	SEGMENT
??_C@_0CJ@HBMGBPGH@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@ DB '<< USB.'
	DB	'GetAllStrDescs, SuppLangsStr null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PLIGAJPI@?$DO?$DO?5USB?4GetAllStrDescs@
CONST	SEGMENT
??_C@_0BG@PLIGAJPI@?$DO?$DO?5USB?4GetAllStrDescs@ DB '>> USB.GetAllStrDes'
	DB	'cs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JFAJNON@?$DM?$DM?5USB?4AreThrStrDesc?0?5Ret?5False@
CONST	SEGMENT
??_C@_0CA@JFAJNON@?$DM?$DM?5USB?4AreThrStrDesc?0?5Ret?5False@ DB '<< USB.'
	DB	'AreThrStrDesc, Ret False', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NAENOJMA@?$DM?$DM?5USB?4AreThrStrDesc?0?5Interface@
CONST	SEGMENT
??_C@_0CD@NAENOJMA@?$DM?$DM?5USB?4AreThrStrDesc?0?5Interface@ DB '<< USB.'
	DB	'AreThrStrDesc, Interface %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DEJJKGAD@?$DM?$DM?5USB?4AreThrStrDesc?0?5Cfg?5?$CFd@
CONST	SEGMENT
??_C@_0BN@DEJJKGAD@?$DM?$DM?5USB?4AreThrStrDesc?0?5Cfg?5?$CFd@ DB '<< USB'
	DB	'.AreThrStrDesc, Cfg %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KIEGOLFL@?$DM?$DM?5USB?4AreThrStrDesc?0?5Manufact?5@
CONST	SEGMENT
??_C@_0DC@KIEGOLFL@?$DM?$DM?5USB?4AreThrStrDesc?0?5Manufact?5@ DB '<< USB'
	DB	'.AreThrStrDesc, Manufact %d, Prod %d, SN %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPAKKGGO@?$DO?$DO?5USB?4AreThrStrDesc@
CONST	SEGMENT
??_C@_0BF@IPAKKGGO@?$DO?$DO?5USB?4AreThrStrDesc@ DB '>> USB.AreThrStrDesc'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LADAJLND@?$DM?$DM?5USB?4GetStrDesc?0?5DescNode?50x?$CF@
CONST	SEGMENT
??_C@_0CB@LADAJLND@?$DM?$DM?5USB?4GetStrDesc?0?5DescNode?50x?$CF@ DB '<< '
	DB	'USB.GetStrDesc, DescNode 0x%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NJJDPDGO@?9?9?5USB?4GetStrDesc?0?5WideCharToMu@
CONST	SEGMENT
??_C@_0CK@NJJDPDGO@?9?9?5USB?4GetStrDesc?0?5WideCharToMu@ DB '-- USB.GetS'
	DB	'trDesc, WideCharToMultiByte %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BKJLPKEL@?$DM?$DM?5USB?4GetStrDesc?0?5new?5DescNode@
CONST	SEGMENT
??_C@_0CF@BKJLPKEL@?$DM?$DM?5USB?4GetStrDesc?0?5new?5DescNode@ DB '<< USB'
	DB	'.GetStrDesc, new DescNode null', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ILBIFDNN@?$DM?$DM?5USB?4GetStrDesc?0?5Odd?5Sz?5?$CFd@
CONST	SEGMENT
??_C@_0BN@ILBIFDNN@?$DM?$DM?5USB?4GetStrDesc?0?5Odd?5Sz?5?$CFd@ DB '<< US'
	DB	'B.GetStrDesc, Odd Sz %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CHKNKAPD@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Sz?5?$CFd?5?$DM?$DO@
CONST	SEGMENT
??_C@_0CD@CHKNKAPD@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Sz?5?$CFd?5?$DM?$DO@ DB '<'
	DB	'< USB.GetStrDesc, Inv Sz %d <> %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ELGGMNKC@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Descript@
CONST	SEGMENT
??_C@_0CH@ELGGMNKC@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Descript@ DB '<< USB'
	DB	'.GetStrDesc, Inv DescriptorTp %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKPBCDKN@?$DM?$DM?5USB?4GetStrDesc?0?5Bytes?5Ret?5?$CFu@
CONST	SEGMENT
??_C@_0CA@JKPBCDKN@?$DM?$DM?5USB?4GetStrDesc?0?5Bytes?5Ret?5?$CFu@ DB '<<'
	DB	' USB.GetStrDesc, Bytes Ret %u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MLNPNNOJ@?$DM?$DM?5USB?4GetStrDesc?0?5DeviceIoCont@
CONST	SEGMENT
??_C@_0CJ@MLNPNNOJ@?$DM?$DM?5USB?4GetStrDesc?0?5DeviceIoCont@ DB '<< USB.'
	DB	'GetStrDesc, DeviceIoControl False', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OBKJMAF@?$DO?$DO?5USB?4GetStrDesc@
CONST	SEGMENT
??_C@_0BC@OBKJMAF@?$DO?$DO?5USB?4GetStrDesc@ DB '>> USB.GetStrDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOKCLIBE@?$DM?$DM?5USB?4DevsDets@
CONST	SEGMENT
??_C@_0BA@GOKCLIBE@?$DM?$DM?5USB?4DevsDets@ DB '<< USB.DevsDets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HNIJLKOP@USB?5Device?5Details@
CONST	SEGMENT
??_C@_0BD@HNIJLKOP@USB?5Device?5Details@ DB 'USB Device Details', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EBIECMOG@?$DO?$DO?5USB?4DevsDets@
CONST	SEGMENT
??_C@_0BA@EBIECMOG@?$DO?$DO?5USB?4DevsDets@ DB '>> USB.DevsDets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NGAEOEJF@?$DM?$DM?5USB?4EnumUSB@
CONST	SEGMENT
??_C@_0P@NGAEOEJF@?$DM?$DM?5USB?4EnumUSB@ DB '<< USB.EnumUSB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FOIGIFIJ@Total?5Devices?5Connected?5?$CFu@
CONST	SEGMENT
??_C@_0BL@FOIGIFIJ@Total?5Devices?5Connected?5?$CFu@ DB 'Total Devices Co'
	DB	'nnected %u', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOIBMAON@RootHub@
CONST	SEGMENT
??_C@_07FOIBMAON@RootHub@ DB 'RootHub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BEFNEIBE@RootHub?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0N@BEFNEIBE@RootHub?5?3?5?$CFs@ DB 'RootHub : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEILPPNA@?2?2?4?2HCD?$CFd@
CONST	SEGMENT
??_C@_09PEILPPNA@?2?2?4?2HCD?$CFd@ DB '\\.\HCD%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMIBGHPI@Enumerate?5USB@
CONST	SEGMENT
??_C@_0O@BMIBGHPI@Enumerate?5USB@ DB 'Enumerate USB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PBHEEKCL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_L@
CONST	SEGMENT
??_C@_0DA@PBHEEKCL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_L@ DB '<< USB'
	DB	'.EnumUSB, GetProcAdr CM_Locate_DevNode %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FFDOPOAJ@CM_Locate_DevNodeA@
CONST	SEGMENT
??_C@_0BD@FFDOPOAJ@CM_Locate_DevNodeA@ DB 'CM_Locate_DevNodeA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DGDMCDGA@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
CONST	SEGMENT
??_C@_0DP@DGDMCDGA@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ DB '<< USB'
	DB	'.EnumUSB, GetProcAdr CM_Get_DevNode_Registry_Property %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NHFCMMFN@CM_Get_DevNode_Registry_Propert@
CONST	SEGMENT
??_C@_0CC@NHFCMMFN@CM_Get_DevNode_Registry_Propert@ DB 'CM_Get_DevNode_Re'
	DB	'gistry_PropertyA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@COFLNMDL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
CONST	SEGMENT
??_C@_0CL@COFLNMDL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ DB '<< USB'
	DB	'.EnumUSB, GetProcAdr CM_Get_Child %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKPGFMC@CM_Get_Child@
CONST	SEGMENT
??_C@_0N@EKPGFMC@CM_Get_Child@ DB 'CM_Get_Child', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OFCMGBDD@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
CONST	SEGMENT
??_C@_0CN@OFCMGBDD@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ DB '<< USB'
	DB	'.EnumUSB, GetProcAdr CM_Get_Sibling %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OOIACNHP@CM_Get_Sibling@
CONST	SEGMENT
??_C@_0P@OOIACNHP@CM_Get_Sibling@ DB 'CM_Get_Sibling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FCKDJEIO@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
CONST	SEGMENT
??_C@_0CM@FCKDJEIO@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@ DB '<< USB'
	DB	'.EnumUSB, GetProcAdr CM_Get_Parent %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CIKLALFP@CM_Get_Parent@
CONST	SEGMENT
??_C@_0O@CIKLALFP@CM_Get_Parent@ DB 'CM_Get_Parent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JNDPNFBI@?$DM?$DM?5USB?4EnumUSB?0?5LoadLib?5cfgmgr3@
CONST	SEGMENT
??_C@_0CI@JNDPNFBI@?$DM?$DM?5USB?4EnumUSB?0?5LoadLib?5cfgmgr3@ DB '<< USB'
	DB	'.EnumUSB, LoadLib cfgmgr32.dll %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JNFFEOEJ@cfgmgr32?4dll@
CONST	SEGMENT
??_C@_0N@JNFFEOEJ@cfgmgr32?4dll@ DB 'cfgmgr32.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPOMJBKJ@?$DO?$DO?5USB?4EnumUSB@
CONST	SEGMENT
??_C@_0P@JPOMJBKJ@?$DO?$DO?5USB?4EnumUSB@ DB '>> USB.EnumUSB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5@ DB '          ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5@ DB '        ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGLIPOFD@?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_06GGLIPOFD@?5?5?5?5?5?5@ DB '      ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFOHOKJK@?5?5?5?5@
CONST	SEGMENT
??_C@_04PFOHOKJK@?5?5?5?5@ DB '    ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BOFHLGPH@DeviceInLegacyHub@
CONST	SEGMENT
??_C@_0BC@BOFHLGPH@DeviceInLegacyHub@ DB 'DeviceInLegacyHub', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CHELPMAC@DeviceHubNestedTooDeeply@
CONST	SEGMENT
??_C@_0BJ@CHELPMAC@DeviceHubNestedTooDeeply@ DB 'DeviceHubNestedTooDeeply'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DBBHPJJC@DeviceNotEnoughBandwidth@
CONST	SEGMENT
??_C@_0BJ@DBBHPJJC@DeviceNotEnoughBandwidth@ DB 'DeviceNotEnoughBandwidth'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KCIAFGBC@DeviceNotEnoughPower@
CONST	SEGMENT
??_C@_0BF@KCIAFGBC@DeviceNotEnoughPower@ DB 'DeviceNotEnoughPower', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FHCONGJI@DeviceCausedOvercurrent@
CONST	SEGMENT
??_C@_0BI@FHCONGJI@DeviceCausedOvercurrent@ DB 'DeviceCausedOvercurrent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FIJIOADB@DeviceGeneralFailure@
CONST	SEGMENT
??_C@_0BF@FIJIOADB@DeviceGeneralFailure@ DB 'DeviceGeneralFailure', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LKBNFKJE@DeviceFailedEnumeration@
CONST	SEGMENT
??_C@_0BI@LKBNFKJE@DeviceFailedEnumeration@ DB 'DeviceFailedEnumeration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIPCCNEI@DeviceConnected@
CONST	SEGMENT
??_C@_0BA@LIPCCNEI@DeviceConnected@ DB 'DeviceConnected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFJFKPGC@NoDeviceConnected@
CONST	SEGMENT
??_C@_0BC@CFJFKPGC@NoDeviceConnected@ DB 'NoDeviceConnected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GFKFEIAL@?9?9?5USB?4PushBackDets?0?5?$CFs@
CONST	SEGMENT
??_C@_0BI@GFKFEIAL@?9?9?5USB?4PushBackDets?0?5?$CFs@ DB '-- USB.PushBackD'
	DB	'ets, %s', 00H				; `string'
?UsbViewIndent@@3PAPADA DD FLAT:??_C@_00CNPNBAHC@@	; UsbViewIndent
	DD	FLAT:??_C@_02KNHHEEKP@?5?5@
	DD	FLAT:??_C@_04PFOHOKJK@?5?5?5?5@
	DD	FLAT:??_C@_06GGLIPOFD@?5?5?5?5?5?5@
	DD	FLAT:??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5@
	ORG $+8
?ConnectionStatuses@@3PAPADA DD FLAT:??_C@_0BC@CFJFKPGC@NoDeviceConnected@ ; ConnectionStatuses
	DD	FLAT:??_C@_0BA@LIPCCNEI@DeviceConnected@
	DD	FLAT:??_C@_0BI@LKBNFKJE@DeviceFailedEnumeration@
	DD	FLAT:??_C@_0BF@FIJIOADB@DeviceGeneralFailure@
	DD	FLAT:??_C@_0BI@FHCONGJI@DeviceCausedOvercurrent@
	DD	FLAT:??_C@_0BF@KCIAFGBC@DeviceNotEnoughPower@
	DD	FLAT:??_C@_0BJ@DBBHPJJC@DeviceNotEnoughBandwidth@
	DD	FLAT:??_C@_0BJ@CHELPMAC@DeviceHubNestedTooDeeply@
	DD	FLAT:??_C@_0BC@BOFHLGPH@DeviceInLegacyHub@
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
PUBLIC	?UnknownDescriptor@USB@@IAEXPAU_USB_COMMON_DESCRIPTOR@@@Z ; USB::UnknownDescriptor
PUBLIC	?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
PUBLIC	?HidDescriptor@USB@@IAEXPAU_USB_HID_DESCRIPTOR@@@Z ; USB::HidDescriptor
PUBLIC	?EndpointDescriptor@USB@@IAEXPAU_USB_ENDPOINT_DESCRIPTOR@@@Z ; USB::EndpointDescriptor
PUBLIC	?InterfaceDescriptor@USB@@IAEXPAU_USB_INTERFACE_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::InterfaceDescriptor
PUBLIC	?ConfigurationDescriptor@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::ConfigurationDescriptor
PUBLIC	?ConfigDesc@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::ConfigDesc
PUBLIC	?PipeInfo@USB@@IAEXKPAU_USB_PIPE_INFO@@@Z	; USB::PipeInfo
PUBLIC	?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::ConnectionInfo
PUBLIC	?HubInfo@USB@@IAEXPAU_USB_HUB_INFORMATION@@@Z	; USB::HubInfo
PUBLIC	?GetConfigDescriptor@USB@@IAEPAU_USB_DESCRIPTOR_REQUEST@@PAXKE@Z ; USB::GetConfigDescriptor
PUBLIC	?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z ; USB::GetStringDescriptors
PUBLIC	?GetHCDDriverKeyName@USB@@IAEPADPAX@Z		; USB::GetHCDDriverKeyName
PUBLIC	?GetRootHubName@USB@@IAEPADPAX@Z		; USB::GetRootHubName
PUBLIC	?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z ; USB::EnumerateHub
PUBLIC	?DriverNameToDeviceDesc@USB@@IAEPADPAD@Z	; USB::DriverNameToDeviceDesc
PUBLIC	?EnumerateHubPorts@USB@@IAEXPAXK@Z		; USB::EnumerateHubPorts
PUBLIC	?GetExternalHubName@USB@@IAEPADPAXK@Z		; USB::GetExternalHubName
PUBLIC	?GetDriverKeyName@USB@@IAEPADPAXK@Z		; USB::GetDriverKeyName
PUBLIC	?GetAllStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z ; USB::GetAllStringDescriptors
PUBLIC	?AreThereStringDescriptors@USB@@IAEHPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z ; USB::AreThereStringDescriptors
PUBLIC	?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z ; USB::GetStringDescriptor
PUBLIC	?PushBackDetails@USB@@IAAXPBDZZ			; USB::PushBackDetails
PUBLIC	_sprintf
PUBLIC	__vsprintf_l
PUBLIC	?USBDevicesDetails@USB@@QAEXXZ			; USB::USBDevicesDetails
PUBLIC	?EnumerateUSB@USB@@QAEXXZ			; USB::EnumerateUSB
	ALIGN	8

?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B DQ 01H DUP (?) ; usbNames
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__EusbNames@@YAXXZ DD 019930522H
	DD	0431H
	DD	FLAT:__unwindtable$??__EusbNames@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??__EusbNames@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1015
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1016
	DD	01H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1
	DD	03H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1017
	DD	03H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$2
	DD	05H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1018
	DD	05H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$3
	DD	07H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1019
	DD	07H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$4
	DD	09H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1020
	DD	09H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$5
	DD	0bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1021
	DD	0bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$6
	DD	0dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1022
	DD	0dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$7
	DD	0fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1023
	DD	0fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$8
	DD	011H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1024
	DD	011H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$9
	DD	013H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1025
	DD	013H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$10
	DD	015H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1026
	DD	015H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$11
	DD	017H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1027
	DD	017H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$12
	DD	019H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1028
	DD	019H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$13
	DD	01bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1029
	DD	01bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$14
	DD	01dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1030
	DD	01dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$15
	DD	01fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1031
	DD	01fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$16
	DD	021H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1032
	DD	021H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$17
	DD	023H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1033
	DD	023H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$18
	DD	025H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1034
	DD	025H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$19
	DD	027H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1035
	DD	027H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$20
	DD	029H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1036
	DD	029H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$21
	DD	02bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1037
	DD	02bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$22
	DD	02dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1038
	DD	02dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$23
	DD	02fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1039
	DD	02fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$24
	DD	031H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1040
	DD	031H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$25
	DD	033H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1041
	DD	033H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$26
	DD	035H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1042
	DD	035H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$27
	DD	037H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1043
	DD	037H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$28
	DD	039H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1044
	DD	039H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$29
	DD	03bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1045
	DD	03bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$30
	DD	03dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1046
	DD	03dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$31
	DD	03fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1047
	DD	03fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$32
	DD	041H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1048
	DD	041H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$33
	DD	043H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1049
	DD	043H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$34
	DD	045H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1050
	DD	045H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$35
	DD	047H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1051
	DD	047H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$36
	DD	049H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1052
	DD	049H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$37
	DD	04bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1053
	DD	04bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$38
	DD	04dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1054
	DD	04dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$39
	DD	04fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1055
	DD	04fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$40
	DD	051H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1056
	DD	051H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$41
	DD	053H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1057
	DD	053H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$42
	DD	055H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1058
	DD	055H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$43
	DD	057H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1059
	DD	057H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$44
	DD	059H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1060
	DD	059H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$45
	DD	05bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1061
	DD	05bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$46
	DD	05dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1062
	DD	05dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$47
	DD	05fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1063
	DD	05fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$48
	DD	061H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1064
	DD	061H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$49
	DD	063H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1065
	DD	063H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$50
	DD	065H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1066
	DD	065H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$51
	DD	067H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1067
	DD	067H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$52
	DD	069H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1068
	DD	069H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$53
	DD	06bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1069
	DD	06bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$54
	DD	06dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1070
	DD	06dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$55
	DD	06fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1071
	DD	06fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$56
	DD	071H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1072
	DD	071H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$57
	DD	073H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1073
	DD	073H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$58
	DD	075H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$59
	DD	076H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$60
	DD	077H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$61
	DD	078H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$62
	DD	079H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$63
	DD	07aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$64
	DD	07bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$65
	DD	07cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$66
	DD	07dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$67
	DD	07eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$68
	DD	07fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$69
	DD	080H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$70
	DD	081H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$71
	DD	082H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$72
	DD	083H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$73
	DD	084H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$74
	DD	085H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$75
	DD	086H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$76
	DD	087H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$77
	DD	088H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$78
	DD	089H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$79
	DD	08aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$80
	DD	08bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$81
	DD	08cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$82
	DD	08dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$83
	DD	08eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$84
	DD	08fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$85
	DD	090H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$86
	DD	091H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$87
	DD	092H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$88
	DD	093H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$89
	DD	094H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$90
	DD	095H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$91
	DD	096H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$92
	DD	097H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$93
	DD	098H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$94
	DD	099H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$95
	DD	09aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$96
	DD	09bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$97
	DD	09cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$98
	DD	09dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$99
	DD	09eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$100
	DD	09fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$101
	DD	0a0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$102
	DD	0a1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$103
	DD	0a2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$104
	DD	0a3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$105
	DD	0a4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$106
	DD	0a5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$107
	DD	0a6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$108
	DD	0a7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$109
	DD	0a8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$110
	DD	0a9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$111
	DD	0aaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$112
	DD	0abH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$113
	DD	0acH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$114
	DD	0adH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$115
	DD	0aeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$116
	DD	0afH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$117
	DD	0b0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$118
	DD	0b1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$119
	DD	0b2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$120
	DD	0b3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$121
	DD	0b4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$122
	DD	0b5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$123
	DD	0b6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$124
	DD	0b7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$125
	DD	0b8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$126
	DD	0b9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$127
	DD	0baH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$128
	DD	0bbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$129
	DD	0bcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$130
	DD	0bdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$131
	DD	0beH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$132
	DD	0bfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$133
	DD	0c0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$134
	DD	0c1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$135
	DD	0c2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$136
	DD	0c3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$137
	DD	0c4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$138
	DD	0c5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$139
	DD	0c6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$140
	DD	0c7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$141
	DD	0c8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$142
	DD	0c9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$143
	DD	0caH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$144
	DD	0cbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$145
	DD	0ccH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$146
	DD	0cdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$147
	DD	0ceH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$148
	DD	0cfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$149
	DD	0d0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$150
	DD	0d1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$151
	DD	0d2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$152
	DD	0d3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$153
	DD	0d4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$154
	DD	0d5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$155
	DD	0d6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$156
	DD	0d7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$157
	DD	0d8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$158
	DD	0d9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$159
	DD	0daH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$160
	DD	0dbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$161
	DD	0dcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$162
	DD	0ddH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$163
	DD	0deH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$164
	DD	0dfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$165
	DD	0e0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$166
	DD	0e1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$167
	DD	0e2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$168
	DD	0e3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$169
	DD	0e4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$170
	DD	0e5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$171
	DD	0e6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$172
	DD	0e7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$173
	DD	0e8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$174
	DD	0e9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$175
	DD	0eaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$176
	DD	0ebH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$177
	DD	0ecH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$178
	DD	0edH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$179
	DD	0eeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$180
	DD	0efH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$181
	DD	0f0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$182
	DD	0f1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$183
	DD	0f2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$184
	DD	0f3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$185
	DD	0f4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$186
	DD	0f5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$187
	DD	0f6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$188
	DD	0f7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$189
	DD	0f8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$190
	DD	0f9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$191
	DD	0faH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$192
	DD	0fbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$193
	DD	0fcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$194
	DD	0fdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$195
	DD	0feH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$196
	DD	0ffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$197
	DD	0100H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$198
	DD	0101H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$199
	DD	0102H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$200
	DD	0103H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$201
	DD	0104H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$202
	DD	0105H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$203
	DD	0106H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$204
	DD	0107H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$205
	DD	0108H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$206
	DD	0109H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$207
	DD	010aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$208
	DD	010bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$209
	DD	010cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$210
	DD	010dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$211
	DD	010eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$212
	DD	010fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$213
	DD	0110H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$214
	DD	0111H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$215
	DD	0112H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$216
	DD	0113H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$217
	DD	0114H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$218
	DD	0115H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$219
	DD	0116H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$220
	DD	0117H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$221
	DD	0118H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$222
	DD	0119H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$223
	DD	011aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$224
	DD	011bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$225
	DD	011cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$226
	DD	011dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$227
	DD	011eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$228
	DD	011fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$229
	DD	0120H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$230
	DD	0121H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$231
	DD	0122H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$232
	DD	0123H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$233
	DD	0124H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$234
	DD	0125H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$235
	DD	0126H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$236
	DD	0127H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$237
	DD	0128H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$238
	DD	0129H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$239
	DD	012aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$240
	DD	012bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$241
	DD	012cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$242
	DD	012dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$243
	DD	012eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$244
	DD	012fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$245
	DD	0130H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$246
	DD	0131H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$247
	DD	0132H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$248
	DD	0133H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$249
	DD	0134H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$250
	DD	0135H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$251
	DD	0136H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$252
	DD	0137H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$253
	DD	0138H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$254
	DD	0139H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$255
	DD	013aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$256
	DD	013bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$257
	DD	013cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$258
	DD	013dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$259
	DD	013eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$260
	DD	013fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$261
	DD	0140H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$262
	DD	0141H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$263
	DD	0142H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$264
	DD	0143H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$265
	DD	0144H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$266
	DD	0145H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$267
	DD	0146H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$268
	DD	0147H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$269
	DD	0148H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$270
	DD	0149H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$271
	DD	014aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$272
	DD	014bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$273
	DD	014cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$274
	DD	014dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$275
	DD	014eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$276
	DD	014fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$277
	DD	0150H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$278
	DD	0151H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$279
	DD	0152H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$280
	DD	0153H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$281
	DD	0154H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$282
	DD	0155H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$283
	DD	0156H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$284
	DD	0157H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$285
	DD	0158H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$286
	DD	0159H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$287
	DD	015aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$288
	DD	015bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$289
	DD	015cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$290
	DD	015dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$291
	DD	015eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$292
	DD	015fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$293
	DD	0160H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$294
	DD	0161H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$295
	DD	0162H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$296
	DD	0163H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$297
	DD	0164H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$298
	DD	0165H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$299
	DD	0166H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$300
	DD	0167H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$301
	DD	0168H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$302
	DD	0169H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$303
	DD	016aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$304
	DD	016bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$305
	DD	016cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$306
	DD	016dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$307
	DD	016eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$308
	DD	016fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$309
	DD	0170H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$310
	DD	0171H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$311
	DD	0172H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$312
	DD	0173H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$313
	DD	0174H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$314
	DD	0175H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$315
	DD	0176H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$316
	DD	0177H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$317
	DD	0178H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$318
	DD	0179H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$319
	DD	017aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$320
	DD	017bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$321
	DD	017cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$322
	DD	017dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$323
	DD	017eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$324
	DD	017fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$325
	DD	0180H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$326
	DD	0181H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$327
	DD	0182H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$328
	DD	0183H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$329
	DD	0184H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$330
	DD	0185H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$331
	DD	0186H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$332
	DD	0187H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$333
	DD	0188H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$334
	DD	0189H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$335
	DD	018aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$336
	DD	018bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$337
	DD	018cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$338
	DD	018dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$339
	DD	018eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$340
	DD	018fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$341
	DD	0190H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$342
	DD	0191H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$343
	DD	0192H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$344
	DD	0193H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$345
	DD	0194H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$346
	DD	0195H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$347
	DD	0196H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$348
	DD	0197H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$349
	DD	0198H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$350
	DD	0199H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$351
	DD	019aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$352
	DD	019bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$353
	DD	019cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$354
	DD	019dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$355
	DD	019eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$356
	DD	019fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$357
	DD	01a0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$358
	DD	01a1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$359
	DD	01a2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$360
	DD	01a3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$361
	DD	01a4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$362
	DD	01a5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$363
	DD	01a6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$364
	DD	01a7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$365
	DD	01a8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$366
	DD	01a9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$367
	DD	01aaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$368
	DD	01abH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$369
	DD	01acH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$370
	DD	01adH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$371
	DD	01aeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$372
	DD	01afH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$373
	DD	01b0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$374
	DD	01b1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$375
	DD	01b2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$376
	DD	01b3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$377
	DD	01b4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$378
	DD	01b5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$379
	DD	01b6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$380
	DD	01b7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$381
	DD	01b8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$382
	DD	01b9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$383
	DD	01baH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$384
	DD	01bbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$385
	DD	01bcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$386
	DD	01bdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$387
	DD	01beH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$388
	DD	01bfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$389
	DD	01c0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$390
	DD	01c1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$391
	DD	01c2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$392
	DD	01c3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$393
	DD	01c4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$394
	DD	01c5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$395
	DD	01c6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$396
	DD	01c7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$397
	DD	01c8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$398
	DD	01c9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$399
	DD	01caH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$400
	DD	01cbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$401
	DD	01ccH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$402
	DD	01cdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$403
	DD	01ceH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$404
	DD	01cfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$405
	DD	01d0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$406
	DD	01d1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$407
	DD	01d2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$408
	DD	01d3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$409
	DD	01d4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$410
	DD	01d5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$411
	DD	01d6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$412
	DD	01d7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$413
	DD	01d8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$414
	DD	01d9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$415
	DD	01daH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$416
	DD	01dbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$417
	DD	01dcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$418
	DD	01ddH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$419
	DD	01deH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$420
	DD	01dfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$421
	DD	01e0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$422
	DD	01e1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$423
	DD	01e2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$424
	DD	01e3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$425
	DD	01e4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$426
	DD	01e5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$427
	DD	01e6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$428
	DD	01e7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$429
	DD	01e8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$430
	DD	01e9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$431
	DD	01eaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$432
	DD	01ebH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$433
	DD	01ecH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$434
	DD	01edH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$435
	DD	01eeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$436
	DD	01efH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$437
	DD	01f0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$438
	DD	01f1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$439
	DD	01f2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$440
	DD	01f3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$441
	DD	01f4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$442
	DD	01f5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$443
	DD	01f6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$444
	DD	01f7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$445
	DD	01f8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$446
	DD	01f9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$447
	DD	01faH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$448
	DD	01fbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$449
	DD	01fcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$450
	DD	01fdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$451
	DD	01feH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$452
	DD	01ffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$453
	DD	0200H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$454
	DD	0201H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$455
	DD	0202H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$456
	DD	0203H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$457
	DD	0204H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$458
	DD	0205H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$459
	DD	0206H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$460
	DD	0207H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$461
	DD	0208H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$462
	DD	0209H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$463
	DD	020aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$464
	DD	020bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$465
	DD	020cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$466
	DD	020dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$467
	DD	020eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$468
	DD	020fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$469
	DD	0210H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$470
	DD	0211H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$471
	DD	0212H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$472
	DD	0213H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$473
	DD	0214H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$474
	DD	0215H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$475
	DD	0216H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$476
	DD	0217H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$477
	DD	0218H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$478
	DD	0219H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$479
	DD	021aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$480
	DD	021bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$481
	DD	021cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$482
	DD	021dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$483
	DD	021eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$484
	DD	021fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$485
	DD	0220H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$486
	DD	0221H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$487
	DD	0222H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$488
	DD	0223H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$489
	DD	0224H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$490
	DD	0225H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$491
	DD	0226H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$492
	DD	0227H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$493
	DD	0228H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$494
	DD	0229H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$495
	DD	022aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$496
	DD	022bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$497
	DD	022cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$498
	DD	022dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$499
	DD	022eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$500
	DD	022fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$501
	DD	0230H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$502
	DD	0231H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$503
	DD	0232H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$504
	DD	0233H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$505
	DD	0234H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$506
	DD	0235H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$507
	DD	0236H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$508
	DD	0237H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$509
	DD	0238H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$510
	DD	0239H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$511
	DD	023aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$512
	DD	023bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$513
	DD	023cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$514
	DD	023dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$515
	DD	023eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$516
	DD	023fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$517
	DD	0240H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$518
	DD	0241H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$519
	DD	0242H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$520
	DD	0243H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$521
	DD	0244H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$522
	DD	0245H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$523
	DD	0246H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$524
	DD	0247H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$525
	DD	0248H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$526
	DD	0249H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$527
	DD	024aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$528
	DD	024bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$529
	DD	024cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$530
	DD	024dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$531
	DD	024eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$532
	DD	024fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$533
	DD	0250H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$534
	DD	0251H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$535
	DD	0252H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$536
	DD	0253H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$537
	DD	0254H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$538
	DD	0255H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$539
	DD	0256H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$540
	DD	0257H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$541
	DD	0258H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$542
	DD	0259H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$543
	DD	025aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$544
	DD	025bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$545
	DD	025cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$546
	DD	025dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$547
	DD	025eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$548
	DD	025fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$549
	DD	0260H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$550
	DD	0261H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$551
	DD	0262H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$552
	DD	0263H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$553
	DD	0264H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$554
	DD	0265H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$555
	DD	0266H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$556
	DD	0267H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$557
	DD	0268H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$558
	DD	0269H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$559
	DD	026aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$560
	DD	026bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$561
	DD	026cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$562
	DD	026dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$563
	DD	026eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$564
	DD	026fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$565
	DD	0270H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$566
	DD	0271H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$567
	DD	0272H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$568
	DD	0273H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$569
	DD	0274H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$570
	DD	0275H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$571
	DD	0276H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$572
	DD	0277H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$573
	DD	0278H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$574
	DD	0279H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$575
	DD	027aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$576
	DD	027bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$577
	DD	027cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$578
	DD	027dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$579
	DD	027eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$580
	DD	027fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$581
	DD	0280H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$582
	DD	0281H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$583
	DD	0282H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$584
	DD	0283H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$585
	DD	0284H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$586
	DD	0285H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$587
	DD	0286H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$588
	DD	0287H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$589
	DD	0288H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$590
	DD	0289H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$591
	DD	028aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$592
	DD	028bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$593
	DD	028cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$594
	DD	028dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$595
	DD	028eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$596
	DD	028fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$597
	DD	0290H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$598
	DD	0291H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$599
	DD	0292H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$600
	DD	0293H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$601
	DD	0294H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$602
	DD	0295H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$603
	DD	0296H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$604
	DD	0297H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$605
	DD	0298H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$606
	DD	0299H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$607
	DD	029aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$608
	DD	029bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$609
	DD	029cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$610
	DD	029dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$611
	DD	029eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$612
	DD	029fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$613
	DD	02a0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$614
	DD	02a1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$615
	DD	02a2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$616
	DD	02a3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$617
	DD	02a4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$618
	DD	02a5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$619
	DD	02a6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$620
	DD	02a7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$621
	DD	02a8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$622
	DD	02a9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$623
	DD	02aaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$624
	DD	02abH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$625
	DD	02acH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$626
	DD	02adH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$627
	DD	02aeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$628
	DD	02afH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$629
	DD	02b0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$630
	DD	02b1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$631
	DD	02b2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$632
	DD	02b3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$633
	DD	02b4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$634
	DD	02b5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$635
	DD	02b6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$636
	DD	02b7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$637
	DD	02b8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$638
	DD	02b9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$639
	DD	02baH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$640
	DD	02bbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$641
	DD	02bcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$642
	DD	02bdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$643
	DD	02beH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$644
	DD	02bfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$645
	DD	02c0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$646
	DD	02c1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$647
	DD	02c2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$648
	DD	02c3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$649
	DD	02c4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$650
	DD	02c5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$651
	DD	02c6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$652
	DD	02c7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$653
	DD	02c8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$654
	DD	02c9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$655
	DD	02caH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$656
	DD	02cbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$657
	DD	02ccH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$658
	DD	02cdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$659
	DD	02ceH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$660
	DD	02cfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$661
	DD	02d0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$662
	DD	02d1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$663
	DD	02d2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$664
	DD	02d3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$665
	DD	02d4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$666
	DD	02d5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$667
	DD	02d6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$668
	DD	02d7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$669
	DD	02d8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$670
	DD	02d9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$671
	DD	02daH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$672
	DD	02dbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$673
	DD	02dcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$674
	DD	02ddH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$675
	DD	02deH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$676
	DD	02dfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$677
	DD	02e0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$678
	DD	02e1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$679
	DD	02e2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$680
	DD	02e3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$681
	DD	02e4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$682
	DD	02e5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$683
	DD	02e6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$684
	DD	02e7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$685
	DD	02e8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$686
	DD	02e9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$687
	DD	02eaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$688
	DD	02ebH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$689
	DD	02ecH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$690
	DD	02edH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$691
	DD	02eeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$692
	DD	02efH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$693
	DD	02f0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$694
	DD	02f1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$695
	DD	02f2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$696
	DD	02f3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$697
	DD	02f4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$698
	DD	02f5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$699
	DD	02f6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$700
	DD	02f7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$701
	DD	02f8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$702
	DD	02f9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$703
	DD	02faH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$704
	DD	02fbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$705
	DD	02fcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$706
	DD	02fdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$707
	DD	02feH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$708
	DD	02ffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$709
	DD	0300H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$710
	DD	0301H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$711
	DD	0302H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$712
	DD	0303H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$713
	DD	0304H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$714
	DD	0305H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$715
	DD	0306H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$716
	DD	0307H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$717
	DD	0308H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$718
	DD	0309H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$719
	DD	030aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$720
	DD	030bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$721
	DD	030cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$722
	DD	030dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$723
	DD	030eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$724
	DD	030fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$725
	DD	0310H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$726
	DD	0311H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$727
	DD	0312H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$728
	DD	0313H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$729
	DD	0314H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$730
	DD	0315H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$731
	DD	0316H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$732
	DD	0317H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$733
	DD	0318H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$734
	DD	0319H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$735
	DD	031aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$736
	DD	031bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$737
	DD	031cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$738
	DD	031dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$739
	DD	031eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$740
	DD	031fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$741
	DD	0320H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$742
	DD	0321H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$743
	DD	0322H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$744
	DD	0323H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$745
	DD	0324H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$746
	DD	0325H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$747
	DD	0326H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$748
	DD	0327H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$749
	DD	0328H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$750
	DD	0329H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$751
	DD	032aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$752
	DD	032bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$753
	DD	032cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$754
	DD	032dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$755
	DD	032eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$756
	DD	032fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$757
	DD	0330H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$758
	DD	0331H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$759
	DD	0332H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$760
	DD	0333H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$761
	DD	0334H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$762
	DD	0335H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$763
	DD	0336H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$764
	DD	0337H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$765
	DD	0338H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$766
	DD	0339H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$767
	DD	033aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$768
	DD	033bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$769
	DD	033cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$770
	DD	033dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$771
	DD	033eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$772
	DD	033fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$773
	DD	0340H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$774
	DD	0341H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$775
	DD	0342H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$776
	DD	0343H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$777
	DD	0344H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$778
	DD	0345H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$779
	DD	0346H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$780
	DD	0347H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$781
	DD	0348H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$782
	DD	0349H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$783
	DD	034aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$784
	DD	034bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$785
	DD	034cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$786
	DD	034dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$787
	DD	034eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$788
	DD	034fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$789
	DD	0350H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$790
	DD	0351H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$791
	DD	0352H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$792
	DD	0353H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$793
	DD	0354H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$794
	DD	0355H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$795
	DD	0356H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$796
	DD	0357H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$797
	DD	0358H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$798
	DD	0359H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$799
	DD	035aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$800
	DD	035bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$801
	DD	035cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$802
	DD	035dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$803
	DD	035eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$804
	DD	035fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$805
	DD	0360H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$806
	DD	0361H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$807
	DD	0362H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$808
	DD	0363H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$809
	DD	0364H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$810
	DD	0365H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$811
	DD	0366H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$812
	DD	0367H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$813
	DD	0368H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$814
	DD	0369H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$815
	DD	036aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$816
	DD	036bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$817
	DD	036cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$818
	DD	036dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$819
	DD	036eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$820
	DD	036fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$821
	DD	0370H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$822
	DD	0371H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$823
	DD	0372H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$824
	DD	0373H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$825
	DD	0374H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$826
	DD	0375H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$827
	DD	0376H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$828
	DD	0377H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$829
	DD	0378H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$830
	DD	0379H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$831
	DD	037aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$832
	DD	037bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$833
	DD	037cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$834
	DD	037dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$835
	DD	037eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$836
	DD	037fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$837
	DD	0380H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$838
	DD	0381H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$839
	DD	0382H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$840
	DD	0383H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$841
	DD	0384H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$842
	DD	0385H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$843
	DD	0386H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$844
	DD	0387H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$845
	DD	0388H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$846
	DD	0389H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$847
	DD	038aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$848
	DD	038bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$849
	DD	038cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$850
	DD	038dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$851
	DD	038eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$852
	DD	038fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$853
	DD	0390H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$854
	DD	0391H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$855
	DD	0392H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$856
	DD	0393H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$857
	DD	0394H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$858
	DD	0395H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$859
	DD	0396H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$860
	DD	0397H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$861
	DD	0398H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$862
	DD	0399H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$863
	DD	039aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$864
	DD	039bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$865
	DD	039cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$866
	DD	039dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$867
	DD	039eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$868
	DD	039fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$869
	DD	03a0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$870
	DD	03a1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$871
	DD	03a2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$872
	DD	03a3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$873
	DD	03a4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$874
	DD	03a5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$875
	DD	03a6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$876
	DD	03a7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$877
	DD	03a8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$878
	DD	03a9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$879
	DD	03aaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$880
	DD	03abH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$881
	DD	03acH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$882
	DD	03adH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$883
	DD	03aeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$884
	DD	03afH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$885
	DD	03b0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$886
	DD	03b1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$887
	DD	03b2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$888
	DD	03b3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$889
	DD	03b4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$890
	DD	03b5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$891
	DD	03b6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$892
	DD	03b7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$893
	DD	03b8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$894
	DD	03b9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$895
	DD	03baH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$896
	DD	03bbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$897
	DD	03bcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$898
	DD	03bdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$899
	DD	03beH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$900
	DD	03bfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$901
	DD	03c0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$902
	DD	03c1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$903
	DD	03c2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$904
	DD	03c3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$905
	DD	03c4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$906
	DD	03c5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$907
	DD	03c6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$908
	DD	03c7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$909
	DD	03c8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$910
	DD	03c9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$911
	DD	03caH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$912
	DD	03cbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$913
	DD	03ccH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$914
	DD	03cdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$915
	DD	03ceH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$916
	DD	03cfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$917
	DD	03d0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$918
	DD	03d1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$919
	DD	03d2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$920
	DD	03d3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$921
	DD	03d4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$922
	DD	03d5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$923
	DD	03d6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$924
	DD	03d7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$925
	DD	03d8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$926
	DD	03d9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$927
	DD	03daH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$928
	DD	03dbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$929
	DD	03dcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$930
	DD	03ddH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$931
	DD	03deH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$932
	DD	03dfH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$933
	DD	03e0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$934
	DD	03e1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$935
	DD	03e2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$936
	DD	03e3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$937
	DD	03e4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$938
	DD	03e5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$939
	DD	03e6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$940
	DD	03e7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$941
	DD	03e8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$942
	DD	03e9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$943
	DD	03eaH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$944
	DD	03ebH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$945
	DD	03ecH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$946
	DD	03edH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$947
	DD	03eeH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$948
	DD	03efH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$949
	DD	03f0H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$950
	DD	03f1H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$951
	DD	03f2H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$952
	DD	03f3H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$953
	DD	03f4H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$954
	DD	03f5H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$955
	DD	03f6H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$956
	DD	03f7H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$957
	DD	03f8H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$958
	DD	03f9H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$959
	DD	03faH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$960
	DD	03fbH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$961
	DD	03fcH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$962
	DD	03fdH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$963
	DD	03feH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$964
	DD	03ffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$965
	DD	0400H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$966
	DD	0401H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$967
	DD	0402H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$968
	DD	0403H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$969
	DD	0404H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$970
	DD	0405H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$971
	DD	0406H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$972
	DD	0407H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$973
	DD	0408H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$974
	DD	0409H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$975
	DD	040aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$976
	DD	040bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$977
	DD	040cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$978
	DD	040dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$979
	DD	040eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$980
	DD	040fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$981
	DD	0410H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$982
	DD	0411H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$983
	DD	0412H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$984
	DD	0413H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$985
	DD	0414H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$986
	DD	0415H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$987
	DD	0416H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$988
	DD	0417H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$989
	DD	0418H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$990
	DD	0419H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$991
	DD	041aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$992
	DD	041bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$993
	DD	041cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$994
	DD	041dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$995
	DD	041eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$996
	DD	041fH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$997
	DD	0420H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$998
	DD	0421H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$999
	DD	0422H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1000
	DD	0423H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1001
	DD	0424H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1002
	DD	0425H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1003
	DD	0426H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1004
	DD	0427H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1005
	DD	0428H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1006
	DD	0429H
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1007
	DD	042aH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1008
	DD	042bH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1009
	DD	042cH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1010
	DD	042dH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1011
	DD	042eH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1012
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??__EusbNames@@YAXXZ$1014
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__FusbNames@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??__FusbNames@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??__FusbNames@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__FusbNames@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??__FusbNames@@YAXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?PushBackDetails@USB@@IAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PushBackDetails@USB@@IAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?PushBackDetails@USB@@IAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PushBackDetails@USB@@IAAXPBDZZ$0
__ehfuncinfo$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z$0
__ehfuncinfo$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z$0
__ehfuncinfo$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z$0
__ehfuncinfo$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z$0
__ehfuncinfo$?EnumerateUSB@USB@@QAEXXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?EnumerateUSB@USB@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?EnumerateUSB@USB@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$5
?usbNames$initializer$@@3P6AXXZA DD FLAT:??__EusbNames@@YAXXZ ; usbNames$initializer$
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_tickStart$2$ = -76					; size = 4
_tickStart$1$ = -72					; size = 4
_hPnpDll$1$ = -68					; size = 4
_driverKeyName$1$ = -64					; size = 4
_this$GSCopy$1$ = -60					; size = 4
$T2 = -56						; size = 24
$T3 = -56						; size = 24
$T4 = -56						; size = 24
$T5 = -56						; size = 24
$T6 = -56						; size = 24
$T7 = -56						; size = 24
_HCName$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?EnumerateUSB@USB@@QAEXXZ PROC				; USB::EnumerateUSB
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?EnumerateUSB@USB@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 60   :     char        HCName[16];
; 61   :     int         HCNum = 0;
; 62   :     PCHAR       rootHubName = NULL;
; 63   :     PCHAR       leafName = NULL;
; 64   : 
; 65   :     uint64_t tickStart = SysTick();

  00030	e8 00 00 00 00	 call	 ?SysTick@@YA_KXZ	; SysTick

; 66   : 
; 67   :     Log(LOG_DEBUG, __LINE__, ">> USB.EnumUSB");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPOMJBKJ@?$DO?$DO?5USB?4EnumUSB@
  0003a	6a 43		 push	 67			; 00000043H
  0003c	6a 10		 push	 16			; 00000010H
  0003e	89 45 b4	 mov	 DWORD PTR _tickStart$2$[ebp], eax
  00041	89 55 b8	 mov	 DWORD PTR _tickStart$1$[ebp], edx
  00044	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 68   : 
; 69   :     ulTotalDevicesConnected = 0;
; 70   :     wPortsNumber = 0;

  00049	33 c0		 xor	 eax, eax
  0004b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 71   :     NestedLevel = 0;
; 72   :     memset(buf, 0x00, sizeof(buf));

  00052	68 00 02 00 00	 push	 512			; 00000200H
  00057	50		 push	 eax
  00058	66 89 06	 mov	 WORD PTR [esi], ax
  0005b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0005e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00067	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	8b 8e 0c 02 00
	00		 mov	 ecx, DWORD PTR [esi+524]
  00076	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1592 : 		this->_Mylast() = this->_Myfirst();

  0007b	8b 86 0c 02 00
	00		 mov	 eax, DWORD PTR [esi+524]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00081	83 c4 04	 add	 esp, 4

; 1592 : 		this->_Mylast() = this->_Myfirst();

  00084	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 76   :     lpfnCM_Get_Parent = NULL;

  0008a	c7 86 18 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+536], 0

; 77   :     lpfnCM_Get_Sibling = NULL;

  00094	c7 86 1c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+540], 0

; 78   :     lpfnCM_Get_Child = NULL;
; 79   :     lpfnCM_Get_DevNode_Registry_PropertyA = NULL;
; 80   :     lpfnCM_Locate_DevNodeA = NULL;
; 81   : 
; 82   :     HMODULE hPnpDll = LoadLibrary("cfgmgr32.dll");

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JNFFEOEJ@cfgmgr32?4dll@
  000a3	c7 86 20 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+544], 0
  000ad	c7 86 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+548], 0
  000b7	c7 86 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+552], 0
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  000c7	8b d8		 mov	 ebx, eax
  000c9	89 5d bc	 mov	 DWORD PTR _hPnpDll$1$[ebp], ebx

; 83   :     if (hPnpDll == NULL)

  000cc	85 db		 test	 ebx, ebx
  000ce	75 7f		 jne	 SHORT $LN5@EnumerateU

; 85   :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, LoadLib cfgmgr32.dll %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000d6	8b d0		 mov	 edx, eax
  000d8	8d 4d c8	 lea	 ecx, DWORD PTR $T7[ebp]
  000db	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  000e0	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000e3	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  000e7	72 02		 jb	 SHORT $LN75@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000e9	8b 00		 mov	 eax, DWORD PTR [eax]
$LN75@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 85   :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, LoadLib cfgmgr32.dll %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JNDPNFBI@?$DM?$DM?5USB?4EnumUSB?0?5LoadLib?5cfgmgr3@
  000f1	6a 55		 push	 85			; 00000055H
  000f3	6a 10		 push	 16			; 00000010H
  000f5	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00104	8b 55 dc	 mov	 edx, DWORD PTR $T7[ebp+20]
  00107	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0010a	72 2c		 jb	 SHORT $LN123@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8b 4d c8	 mov	 ecx, DWORD PTR $T7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0010f	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00110	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00112	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00118	72 14		 jb	 SHORT $LN122@EnumerateU

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0011a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0011d	83 c2 23	 add	 edx, 35			; 00000023H
  00120	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00122	83 c0 fc	 add	 eax, -4			; fffffffcH
  00125	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00128	0f 87 e5 03 00
	00		 ja	 $LN502@EnumerateU
$LN122@EnumerateU:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0012e	52		 push	 edx
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00135	83 c4 08	 add	 esp, 8
$LN123@EnumerateU:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00138	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0013f	c7 45 dc 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00146	c6 45 c8 00	 mov	 BYTE PTR $T7[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 86   :         return;

  0014a	e9 a8 03 00 00	 jmp	 $LN1@EnumerateU
$LN5@EnumerateU:

; 87   :     }
; 88   : 
; 89   :     if ((lpfnCM_Get_Parent = (CMGETPARENT)GetProcAddress(hPnpDll, "CM_Get_Parent")) == NULL)

  0014f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetProcAddress@8
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CIKLALFP@CM_Get_Parent@
  0015a	53		 push	 ebx
  0015b	ff d7		 call	 edi
  0015d	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  00163	85 c0		 test	 eax, eax
  00165	0f 85 8a 00 00
	00		 jne	 $LN6@EnumerateU

; 91   :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_Parent %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00171	8b d0		 mov	 edx, eax
  00173	8d 4d c8	 lea	 ecx, DWORD PTR $T6[ebp]
  00176	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  0017b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00182	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00186	72 02		 jb	 SHORT $LN145@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00188	8b 00		 mov	 eax, DWORD PTR [eax]
$LN145@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 91   :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_Parent %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  0018a	50		 push	 eax
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FCKDJEIO@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
  00190	6a 5b		 push	 91			; 0000005bH
  00192	6a 10		 push	 16			; 00000010H
  00194	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00199	83 c4 10	 add	 esp, 16			; 00000010H
  0019c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001a3	8b 55 dc	 mov	 edx, DWORD PTR $T6[ebp+20]
  001a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001a9	72 2c		 jb	 SHORT $LN193@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ab	8b 4d c8	 mov	 ecx, DWORD PTR $T6[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001ae	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001af	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001b7	72 14		 jb	 SHORT $LN192@EnumerateU

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  001b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001bc	83 c2 23	 add	 edx, 35			; 00000023H
  001bf	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001c7	0f 87 4b 03 00
	00		 ja	 $LN503@EnumerateU
$LN192@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 185  : }

  001cd	52		 push	 edx
  001ce	51		 push	 ecx
  001cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d4	83 c4 08	 add	 esp, 8
$LN193@EnumerateU:
  001d7	53		 push	 ebx
  001d8	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  001df	c7 45 dc 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH
  001e6	c6 45 c8 00	 mov	 BYTE PTR $T6[ebp], 0
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  001f0	e9 02 03 00 00	 jmp	 $LN1@EnumerateU
$LN6@EnumerateU:

; 92   :         FreeLibrary(hPnpDll);
; 93   :         return;
; 94   :     }
; 95   : 
; 96   :     if ((lpfnCM_Get_Sibling = (CMGETSIBLING)GetProcAddress(hPnpDll, "CM_Get_Sibling")) == NULL)

  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OOIACNHP@CM_Get_Sibling@
  001fa	53		 push	 ebx
  001fb	ff d7		 call	 edi
  001fd	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  00203	85 c0		 test	 eax, eax
  00205	75 6b		 jne	 SHORT $LN7@EnumerateU

; 98   :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_Sibling %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0020d	8b d0		 mov	 edx, eax
  0020f	8d 4d c8	 lea	 ecx, DWORD PTR $T5[ebp]
  00212	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  00217	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0021e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00222	72 02		 jb	 SHORT $LN214@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00224	8b 00		 mov	 eax, DWORD PTR [eax]
$LN214@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 98   :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_Sibling %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@OFCMGBDD@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
  0022c	6a 62		 push	 98			; 00000062H
  0022e	6a 10		 push	 16			; 00000010H
  00230	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00235	83 c4 10	 add	 esp, 16			; 00000010H
  00238	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0023f	8b 55 dc	 mov	 edx, DWORD PTR $T5[ebp+20]
  00242	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00245	72 90		 jb	 SHORT $LN193@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00247	8b 4d c8	 mov	 ecx, DWORD PTR $T5[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0024a	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0024b	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0024d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00253	0f 82 74 ff ff
	ff		 jb	 $LN192@EnumerateU

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00259	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0025c	83 c2 23	 add	 edx, 35			; 00000023H
  0025f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00261	83 c0 fc	 add	 eax, -4			; fffffffcH
  00264	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00267	0f 87 b0 02 00
	00		 ja	 $LN504@EnumerateU
  0026d	e9 5b ff ff ff	 jmp	 $LN192@EnumerateU
$LN7@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 103  :     if ((lpfnCM_Get_Child = (CMGETCHILD)GetProcAddress(hPnpDll, "CM_Get_Child")) == NULL)

  00272	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EKPGFMC@CM_Get_Child@
  00277	53		 push	 ebx
  00278	ff d7		 call	 edi
  0027a	89 86 20 02 00
	00		 mov	 DWORD PTR [esi+544], eax
  00280	85 c0		 test	 eax, eax
  00282	75 6f		 jne	 SHORT $LN8@EnumerateU

; 105  :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_Child %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0028a	8b d0		 mov	 edx, eax
  0028c	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  0028f	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  00294	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0029b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  0029f	72 02		 jb	 SHORT $LN283@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  002a1	8b 00		 mov	 eax, DWORD PTR [eax]
$LN283@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 105  :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_Child %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  002a3	50		 push	 eax
  002a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@COFLNMDL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
  002a9	6a 69		 push	 105			; 00000069H
  002ab	6a 10		 push	 16			; 00000010H
  002ad	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  002b2	83 c4 10	 add	 esp, 16			; 00000010H
  002b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002bc	8b 55 dc	 mov	 edx, DWORD PTR $T4[ebp+20]
  002bf	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  002c2	0f 82 0f ff ff
	ff		 jb	 $LN193@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002c8	8b 4d c8	 mov	 ecx, DWORD PTR $T4[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  002cb	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002cc	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  002ce	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002d4	0f 82 f3 fe ff
	ff		 jb	 $LN192@EnumerateU

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  002da	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002dd	83 c2 23	 add	 edx, 35			; 00000023H
  002e0	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002e2	83 c0 fc	 add	 eax, -4			; fffffffcH
  002e5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002e8	0f 87 34 02 00
	00		 ja	 $LN505@EnumerateU
  002ee	e9 da fe ff ff	 jmp	 $LN192@EnumerateU
$LN8@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 110  :     if ((lpfnCM_Get_DevNode_Registry_PropertyA = (CMGETDEVNODEREGISTRYPROPERTYA)GetProcAddress(hPnpDll, "CM_Get_DevNode_Registry_PropertyA")) == NULL)

  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NHFCMMFN@CM_Get_DevNode_Registry_Propert@
  002f8	53		 push	 ebx
  002f9	ff d7		 call	 edi
  002fb	89 86 24 02 00
	00		 mov	 DWORD PTR [esi+548], eax
  00301	85 c0		 test	 eax, eax
  00303	75 6f		 jne	 SHORT $LN9@EnumerateU

; 112  :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_DevNode_Registry_Property %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0030b	8b d0		 mov	 edx, eax
  0030d	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  00310	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  00315	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0031c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00320	72 02		 jb	 SHORT $LN352@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00322	8b 00		 mov	 eax, DWORD PTR [eax]
$LN352@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 112  :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Get_DevNode_Registry_Property %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00324	50		 push	 eax
  00325	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@DGDMCDGA@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_G@
  0032a	6a 70		 push	 112			; 00000070H
  0032c	6a 10		 push	 16			; 00000010H
  0032e	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00333	83 c4 10	 add	 esp, 16			; 00000010H
  00336	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0033d	8b 55 dc	 mov	 edx, DWORD PTR $T3[ebp+20]
  00340	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00343	0f 82 8e fe ff
	ff		 jb	 $LN193@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00349	8b 4d c8	 mov	 ecx, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0034c	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0034d	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0034f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00355	0f 82 72 fe ff
	ff		 jb	 $LN192@EnumerateU

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0035b	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0035e	83 c2 23	 add	 edx, 35			; 00000023H
  00361	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00363	83 c0 fc	 add	 eax, -4			; fffffffcH
  00366	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00369	0f 87 b8 01 00
	00		 ja	 $LN506@EnumerateU
  0036f	e9 59 fe ff ff	 jmp	 $LN192@EnumerateU
$LN9@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 117  :     if ((lpfnCM_Locate_DevNodeA = (CMLOCATEDEVNODEA)GetProcAddress(hPnpDll, "CM_Locate_DevNodeA")) == NULL)

  00374	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FFDOPOAJ@CM_Locate_DevNodeA@
  00379	53		 push	 ebx
  0037a	ff d7		 call	 edi
  0037c	89 86 28 02 00
	00		 mov	 DWORD PTR [esi+552], eax
  00382	85 c0		 test	 eax, eax
  00384	75 6f		 jne	 SHORT $LN10@EnumerateU

; 119  :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Locate_DevNode %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00386	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0038c	8b d0		 mov	 edx, eax
  0038e	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00391	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  00396	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0039d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  003a1	72 02		 jb	 SHORT $LN421@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  003a3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN421@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 119  :         Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB, GetProcAdr CM_Locate_DevNode %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  003a5	50		 push	 eax
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PBHEEKCL@?$DM?$DM?5USB?4EnumUSB?0?5GetProcAdr?5CM_L@
  003ab	6a 77		 push	 119			; 00000077H
  003ad	6a 10		 push	 16			; 00000010H
  003af	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  003b4	83 c4 10	 add	 esp, 16			; 00000010H
  003b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003be	8b 55 dc	 mov	 edx, DWORD PTR $T2[ebp+20]
  003c1	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  003c4	0f 82 0d fe ff
	ff		 jb	 $LN193@EnumerateU
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003ca	8b 4d c8	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  003cd	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003ce	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  003d0	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  003d6	0f 82 f1 fd ff
	ff		 jb	 $LN192@EnumerateU

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  003dc	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  003df	83 c2 23	 add	 edx, 35			; 00000023H
  003e2	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003e4	83 c0 fc	 add	 eax, -4			; fffffffcH
  003e7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003ea	0f 87 3c 01 00
	00		 ja	 $LN507@EnumerateU
  003f0	e9 d8 fd ff ff	 jmp	 $LN192@EnumerateU
$LN10@EnumerateU:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 124  :     Log(LOG_HEADER, __LINE__, "Enumerate USB");

  003f5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BMIBGHPI@Enumerate?5USB@
  003fa	6a 7c		 push	 124			; 0000007cH
  003fc	6a 02		 push	 2
  003fe	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00403	83 c4 0c	 add	 esp, 12			; 0000000cH
  00406	33 db		 xor	 ebx, ebx
  00408	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@EnumerateU:

; 129  :     {
; 130  :         sprintf(HCName, "\\\\.\\HCD%d", HCNum);

  00410	53		 push	 ebx
  00411	8d 45 e0	 lea	 eax, DWORD PTR _HCName$[ebp]
  00414	68 00 00 00 00	 push	 OFFSET ??_C@_09PEILPPNA@?2?2?4?2HCD?$CFd@
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 _sprintf
  0041f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  :         HANDLE hHCDev = CreateFile(HCName,

  00422	8d 45 e0	 lea	 eax, DWORD PTR _HCName$[ebp]
  00425	6a 00		 push	 0
  00427	6a 00		 push	 0
  00429	6a 03		 push	 3
  0042b	6a 00		 push	 0
  0042d	6a 02		 push	 2
  0042f	68 00 00 00 40	 push	 1073741824		; 40000000H
  00434	50		 push	 eax
  00435	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0043b	8b f8		 mov	 edi, eax

; 133  :             GENERIC_WRITE,
; 134  :             FILE_SHARE_WRITE,
; 135  :             NULL,
; 136  :             OPEN_EXISTING,
; 137  :             0,
; 138  :             NULL);
; 139  : 
; 140  :         // If the handle is valid, then we've successfully opened a Host
; 141  :         // Controller.  Display some info about the Host Controller itself,
; 142  :         // then enumerate the Root Hub attached to the Host Controller.
; 143  :         //
; 144  :         if (hHCDev != INVALID_HANDLE_VALUE)

  0043d	83 ff ff	 cmp	 edi, -1
  00440	74 65		 je	 SHORT $LN2@EnumerateU

; 145  :         {
; 146  :             PCHAR driverKeyName = GetHCDDriverKeyName(hHCDev);

  00442	57		 push	 edi
  00443	e8 00 00 00 00	 call	 ?GetHCDDriverKeyName@USB@@IAEPADPAX@Z ; USB::GetHCDDriverKeyName
  00448	89 45 c0	 mov	 DWORD PTR _driverKeyName$1$[ebp], eax

; 147  : 
; 148  :             leafName = HCName + sizeof("\\\\.\\") - sizeof("");

  0044b	8d 75 e4	 lea	 esi, DWORD PTR _HCName$[ebp+4]

; 149  : 
; 150  :             if (driverKeyName)

  0044e	85 c0		 test	 eax, eax
  00450	74 19		 je	 SHORT $LN12@EnumerateU

; 151  :             {
; 152  :                 PCHAR deviceDesc = DriverNameToDeviceDesc(driverKeyName);

  00452	8b 4d c4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?DriverNameToDeviceDesc@USB@@IAEPADPAD@Z ; USB::DriverNameToDeviceDesc

; 153  : 
; 154  :                 if (deviceDesc)
; 155  :                 {
; 156  :                     leafName = deviceDesc;
; 157  :                 }
; 158  : 
; 159  :                 free(driverKeyName);

  0045b	ff 75 c0	 push	 DWORD PTR _driverKeyName$1$[ebp]
  0045e	85 c0		 test	 eax, eax
  00460	0f 45 f0	 cmovne	 esi, eax
  00463	e8 00 00 00 00	 call	 _free
  00468	83 c4 04	 add	 esp, 4
$LN12@EnumerateU:

; 160  :             }
; 161  : 
; 162  :             Log(LOG_MESSAGE, __LINE__, "RootHub : %s", leafName);

  0046b	56		 push	 esi
  0046c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BEFNEIBE@RootHub?5?3?5?$CFs@
  00471	68 a2 00 00 00	 push	 162			; 000000a2H
  00476	6a 01		 push	 1
  00478	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0047d	83 c4 10	 add	 esp, 16			; 00000010H

; 163  : 
; 164  :             rootHubName = GetRootHubName(hHCDev);

  00480	57		 push	 edi
  00481	e8 00 00 00 00	 call	 ?GetRootHubName@USB@@IAEPADPAX@Z ; USB::GetRootHubName

; 165  : 
; 166  :             if (rootHubName != NULL)

  00486	8b 75 c4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00489	85 c0		 test	 eax, eax
  0048b	74 13		 je	 SHORT $LN14@EnumerateU

; 167  :             {
; 168  :                 EnumerateHub(rootHubName,

  0048d	68 00 00 00 00	 push	 OFFSET ??_C@_07FOIBMAON@RootHub@
  00492	6a 00		 push	 0
  00494	6a 00		 push	 0
  00496	6a 00		 push	 0
  00498	50		 push	 eax
  00499	8b ce		 mov	 ecx, esi
  0049b	e8 00 00 00 00	 call	 ?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z ; USB::EnumerateHub
$LN14@EnumerateU:

; 169  :                     NULL,      // ConnectionInfo
; 170  :                     NULL,      // ConfigDesc
; 171  :                     NULL,      // StringDescs
; 172  :                     "RootHub"  // DeviceDesc
; 173  :                 );
; 174  :             }
; 175  : 
; 176  :             CloseHandle(hHCDev);

  004a0	57		 push	 edi
  004a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@EnumerateU:

; 125  : 
; 126  :     // Iterate over some Host Controller names and try to open them.
; 127  :     //
; 128  :     for (HCNum = 0; HCNum < NUM_HCS_TO_CHECK; HCNum++)

  004a7	43		 inc	 ebx
  004a8	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  004ab	0f 8c 5f ff ff
	ff		 jl	 $LL4@EnumerateU

; 177  :             hHCDev = 0;
; 178  :         }
; 179  :     }
; 180  : 
; 181  :     Log(LOG_MESSAGE, __LINE__, "Total Devices Connected %u", ulTotalDevicesConnected);

  004b1	ff 76 04	 push	 DWORD PTR [esi+4]
  004b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FOIGIFIJ@Total?5Devices?5Connected?5?$CFu@
  004b9	68 b5 00 00 00	 push	 181			; 000000b5H
  004be	6a 01		 push	 1
  004c0	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  004c5	83 c4 10	 add	 esp, 16			; 00000010H

; 182  :     FreeLibrary(hPnpDll);

  004c8	ff 75 bc	 push	 DWORD PTR _hPnpDll$1$[ebp]
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4

; 183  :     LogElapsedTime(__LINE__, tickStart);

  004d1	ff 75 b8	 push	 DWORD PTR _tickStart$1$[ebp]
  004d4	33 d2		 xor	 edx, edx
  004d6	b9 b7 00 00 00	 mov	 ecx, 183		; 000000b7H
  004db	ff 75 b4	 push	 DWORD PTR _tickStart$2$[ebp]
  004de	e8 00 00 00 00	 call	 ?LogElapsedTime@@YAXK_KPBD@Z ; LogElapsedTime

; 184  :     Log(LOG_DEBUG, __LINE__, "<< USB.EnumUSB");

  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NGAEOEJF@?$DM?$DM?5USB?4EnumUSB@
  004e8	68 b8 00 00 00	 push	 184			; 000000b8H
  004ed	6a 10		 push	 16			; 00000010H
  004ef	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  004f4	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@EnumerateU:

; 185  : }

  004f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00501	59		 pop	 ecx
  00502	5f		 pop	 edi
  00503	5e		 pop	 esi
  00504	5b		 pop	 ebx
  00505	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00508	33 cd		 xor	 ecx, ebp
  0050a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0050f	8b e5		 mov	 esp, ebp
  00511	5d		 pop	 ebp
  00512	c3		 ret	 0
$LN502@EnumerateU:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00513	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN503@EnumerateU:
  00518	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN504@EnumerateU:
  0051d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN505@EnumerateU:
  00522	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN506@EnumerateU:
  00527	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN507@EnumerateU:
  0052c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN500@EnumerateU:
  00531	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$1:
  00008	8d 4d c8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$2:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$3:
  00018	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$4:
  00020	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EnumerateUSB@USB@@QAEXXZ$5:
  00028	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?EnumerateUSB@USB@@QAEXXZ:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EnumerateUSB@USB@@QAEXXZ
  00050	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EnumerateUSB@USB@@QAEXXZ ENDP				; USB::EnumerateUSB
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\users\giulif\downloads\study\git\sysstatus\sysstatus.cpp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\users\giulif\downloads\study\git\sysstatus\sysstatus.cpp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_seconds$1$ = -20					; size = 4
_this$1$ = -20						; size = 4
tv142 = -16						; size = 4
_tickStart$1$ = -16					; size = 4
_seconds$2$ = -12					; size = 4
_tickStart$2$ = -12					; size = 4
_timeElapsed$1$ = -8					; size = 8
$T1 = -8						; size = 8
?USBDevicesDetails@USB@@QAEXXZ PROC			; USB::USBDevicesDetails
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 34	 sub	 esp, 52			; 00000034H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 192  : 	Log(LOG_DEBUG,__LINE__,">> USB.DevsDets");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EBIECMOG@?$DO?$DO?5USB?4DevsDets@
  00011	8b f9		 mov	 edi, ecx
  00013	68 c0 00 00 00	 push	 192			; 000000c0H
  00018	6a 10		 push	 16			; 00000010H
  0001a	89 7c 24 38	 mov	 DWORD PTR _this$1$[esp+76], edi
  0001e	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\giulif\downloads\study\git\sysstatus\sysstatus.cpp

; 630  :     auto const nanosecs = std::chrono::steady_clock::now().time_since_epoch().count();

  00026	8d 4c 24 38	 lea	 ecx, DWORD PTR $T1[esp+64]
  0002a	e8 00 00 00 00	 call	 ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now

; 631  :     return static_cast<uint64_t>((static_cast<double>(nanosecs) / 1'000'000) + 0.5);

  0002f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	e8 00 00 00 00	 call	 __ltod3
  00039	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@412e848000000000
  00041	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00049	e8 00 00 00 00	 call	 __dtoul3
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 196  :     Log(LOG_HEADER,__LINE__,"USB Device Details");

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HNIJLKOP@USB?5Device?5Details@
  00053	68 c4 00 00 00	 push	 196			; 000000c4H
  00058	6a 02		 push	 2
  0005a	89 44 24 3c	 mov	 DWORD PTR _tickStart$1$[esp+76], eax
  0005e	89 54 24 40	 mov	 DWORD PTR _tickStart$2$[esp+76], edx
  00062	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00067	8b 8f 10 02 00
	00		 mov	 ecx, DWORD PTR [edi+528]
  0006d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00072	8b b7 0c 02 00
	00		 mov	 esi, DWORD PTR [edi+524]
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 196  :     Log(LOG_HEADER,__LINE__,"USB Device Details");

  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0007b	2b ce		 sub	 ecx, esi
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 198  :     for(unsigned int x=0;x<usbDevDetails.size();x++)

  0007d	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0007f	f7 e9		 imul	 ecx
  00081	c1 fa 02	 sar	 edx, 2
  00084	8b c2		 mov	 eax, edx
  00086	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00089	03 c2		 add	 eax, edx
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 198  :     for(unsigned int x=0;x<usbDevDetails.size();x++)

  0008b	74 4f		 je	 SHORT $LN3@USBDevices
  0008d	33 ff		 xor	 edi, edi
  0008f	90		 npad	 1
$LL4@USBDevices:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00090	83 7c 37 14 10	 cmp	 DWORD PTR [edi+esi+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 307  : 		return (_Myval2);

  00095	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  00098	72 02		 jb	 SHORT $LN41@USBDevices
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0009a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN41@USBDevices:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 200  :         Log(LOG_MESSAGE,__LINE__,"%s",usbDevDetails[x].c_str());

  0009c	50		 push	 eax
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a2	68 c8 00 00 00	 push	 200			; 000000c8H
  000a7	6a 01		 push	 1
  000a9	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  000ae	8b 44 24 3c	 mov	 eax, DWORD PTR _this$1$[esp+80]
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 198  :     for(unsigned int x=0;x<usbDevDetails.size();x++)

  000b2	43		 inc	 ebx

; 200  :         Log(LOG_MESSAGE,__LINE__,"%s",usbDevDetails[x].c_str());

  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	83 c7 18	 add	 edi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  000b9	8b 88 10 02 00
	00		 mov	 ecx, DWORD PTR [eax+528]
  000bf	8b b0 0c 02 00
	00		 mov	 esi, DWORD PTR [eax+524]
  000c5	2b ce		 sub	 ecx, esi
  000c7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cc	f7 e9		 imul	 ecx
  000ce	c1 fa 02	 sar	 edx, 2
  000d1	8b c2		 mov	 eax, edx
  000d3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d6	03 c2		 add	 eax, edx
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 198  :     for(unsigned int x=0;x<usbDevDetails.size();x++)

  000d8	3b d8		 cmp	 ebx, eax
  000da	72 b4		 jb	 SHORT $LL4@USBDevices
$LN3@USBDevices:
; File c:\users\giulif\downloads\study\git\sysstatus\sysstatus.cpp

; 639  :     tickEnd = SysTick();

  000dc	e8 00 00 00 00	 call	 ?SysTick@@YA_KXZ	; SysTick

; 640  :     timeElapsed = (static_cast<double>(tickEnd - tickStart) / static_cast<double>(SECOND));

  000e1	2b 44 24 30	 sub	 eax, DWORD PTR _tickStart$1$[esp+64]
  000e5	8b c8		 mov	 ecx, eax
  000e7	1b 54 24 34	 sbb	 edx, DWORD PTR _tickStart$2$[esp+64]
  000eb	e8 00 00 00 00	 call	 __ultod3
  000f0	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  000f8	f2 0f 11 44 24
	38		 movsd	 QWORD PTR _timeElapsed$1$[esp+64], xmm0

; 641  :     seconds = static_cast<uint64_t>(timeElapsed + 0.5);

  000fe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00106	e8 00 00 00 00	 call	 __dtoul3

; 659  :         Log(LOG_MESSAGE, line, "%02llu:%02llu:%02llu, %.3f s", seconds / 3600, (seconds % 3600) / 60, seconds % 60, timeElapsed);

  0010b	6a 00		 push	 0

; 641  :     seconds = static_cast<uint64_t>(timeElapsed + 0.5);

  0010d	8b f2		 mov	 esi, edx
  0010f	8b f8		 mov	 edi, eax

; 659  :         Log(LOG_MESSAGE, line, "%02llu:%02llu:%02llu, %.3f s", seconds / 3600, (seconds % 3600) / 60, seconds % 60, timeElapsed);

  00111	68 10 0e 00 00	 push	 3600			; 00000e10H
  00116	56		 push	 esi
  00117	57		 push	 edi

; 641  :     seconds = static_cast<uint64_t>(timeElapsed + 0.5);

  00118	89 7c 24 3c	 mov	 DWORD PTR _seconds$1$[esp+80], edi
  0011c	89 74 24 44	 mov	 DWORD PTR _seconds$2$[esp+80], esi

; 659  :         Log(LOG_MESSAGE, line, "%02llu:%02llu:%02llu, %.3f s", seconds / 3600, (seconds % 3600) / 60, seconds % 60, timeElapsed);

  00120	e8 00 00 00 00	 call	 __aulldiv
  00125	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR _timeElapsed$1$[esp+64]
  0012b	83 ec 08	 sub	 esp, 8
  0012e	89 44 24 38	 mov	 DWORD PTR tv142[esp+72], eax
  00132	8b da		 mov	 ebx, edx
  00134	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00139	6a 00		 push	 0
  0013b	6a 3c		 push	 60			; 0000003cH
  0013d	56		 push	 esi
  0013e	57		 push	 edi
  0013f	e8 00 00 00 00	 call	 __aulldiv
  00144	8b 4c 24 34	 mov	 ecx, DWORD PTR _seconds$1$[esp+72]
  00148	8b f0		 mov	 esi, eax
  0014a	8b fa		 mov	 edi, edx
  0014c	0f a4 f7 04	 shld	 edi, esi, 4
  00150	c1 e6 04	 shl	 esi, 4
  00153	2b f0		 sub	 esi, eax
  00155	1b fa		 sbb	 edi, edx
  00157	0f a4 f7 02	 shld	 edi, esi, 2
  0015b	c1 e6 02	 shl	 esi, 2
  0015e	2b ce		 sub	 ecx, esi
  00160	8b 74 24 3c	 mov	 esi, DWORD PTR _seconds$2$[esp+72]
  00164	8b c6		 mov	 eax, esi
  00166	1b c7		 sbb	 eax, edi
  00168	8b 7c 24 38	 mov	 edi, DWORD PTR tv142[esp+72]
  0016c	50		 push	 eax
  0016d	51		 push	 ecx
  0016e	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00173	8b c3		 mov	 eax, ebx
  00175	f7 e1		 mul	 ecx
  00177	ba 10 0e 00 00	 mov	 edx, 3600		; 00000e10H
  0017c	8b c8		 mov	 ecx, eax
  0017e	8b c7		 mov	 eax, edi
  00180	f7 e2		 mul	 edx
  00182	6a 00		 push	 0
  00184	03 ca		 add	 ecx, edx
  00186	8b 54 24 40	 mov	 edx, DWORD PTR _seconds$1$[esp+84]
  0018a	2b d0		 sub	 edx, eax
  0018c	6a 3c		 push	 60			; 0000003cH
  0018e	1b f1		 sbb	 esi, ecx
  00190	56		 push	 esi
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 __aulldiv
  00197	52		 push	 edx
  00198	50		 push	 eax
  00199	53		 push	 ebx
  0019a	57		 push	 edi
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GOPGHHGJ@?$CF02llu?3?$CF02llu?3?$CF02llu?0?5?$CF?43f?5s@
  001a0	68 cb 00 00 00	 push	 203			; 000000cbH
  001a5	6a 01		 push	 1
  001a7	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 205  : 	Log(LOG_DEBUG,__LINE__,"<< USB.DevsDets");

  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GOKCLIBE@?$DM?$DM?5USB?4DevsDets@
  001b1	68 cd 00 00 00	 push	 205			; 000000cdH
  001b6	6a 10		 push	 16			; 00000010H
  001b8	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001bd	83 c4 38	 add	 esp, 56			; 00000038H

; 206  : }

  001c0	5f		 pop	 edi
  001c1	5e		 pop	 esi
  001c2	5b		 pop	 ebx
  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c3		 ret	 0
?USBDevicesDetails@USB@@QAEXXZ ENDP			; USB::USBDevicesDetails
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Locale$dead$ = 8					; size = 4
__ArgList$ = 12						; size = 4
__vsprintf_l PROC					; COMDAT
; __Buffer$ = ecx
; __Format$ = edx

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00006	51		 push	 ecx
  00007	52		 push	 edx
  00008	83 ca ff	 or	 edx, -1
  0000b	e8 00 00 00 00	 call	 __vsnprintf_l
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	83 ca ff	 or	 edx, -1
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 __vsnprintf_l
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\initializer_list
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if
;	COMDAT ??__EusbNames@@YAXXZ
text$di	SEGMENT
$T2 = -40104						; size = 8
$T3 = -40096						; size = 8
$T4 = -40088						; size = 8
$T5 = -40080						; size = 8
$T6 = -40072						; size = 8
$T7 = -40064						; size = 8
$T8 = -40056						; size = 8
$T9 = -40048						; size = 8
$T10 = -40040						; size = 8
$T11 = -40032						; size = 8
$T12 = -40024						; size = 8
$T13 = -40016						; size = 8
$T14 = -40008						; size = 8
$T15 = -40000						; size = 8
$T16 = -39992						; size = 8
$T17 = -39984						; size = 8
$T18 = -39976						; size = 8
$T19 = -39968						; size = 8
$T20 = -39960						; size = 8
$T21 = -39952						; size = 8
$T22 = -39944						; size = 8
$T23 = -39936						; size = 8
$T24 = -39928						; size = 8
$T25 = -39920						; size = 8
$T26 = -39912						; size = 8
$T27 = -39904						; size = 8
$T28 = -39896						; size = 8
$T29 = -39888						; size = 8
$T30 = -39880						; size = 8
$T31 = -39872						; size = 8
$T32 = -39864						; size = 8
$T33 = -39856						; size = 8
$T34 = -39848						; size = 8
$T35 = -39840						; size = 8
$T36 = -39832						; size = 8
$T37 = -39824						; size = 8
$T38 = -39816						; size = 8
$T39 = -39808						; size = 8
$T40 = -39800						; size = 8
$T41 = -39792						; size = 8
$T42 = -39784						; size = 8
$T43 = -39776						; size = 8
$T44 = -39768						; size = 8
$T45 = -39760						; size = 8
$T46 = -39752						; size = 8
$T47 = -39744						; size = 8
$T48 = -39736						; size = 8
$T49 = -39728						; size = 8
$T50 = -39720						; size = 8
$T51 = -39712						; size = 8
$T52 = -39704						; size = 8
$T53 = -39696						; size = 8
$T54 = -39688						; size = 8
$T55 = -39680						; size = 8
$T56 = -39672						; size = 8
$T57 = -39664						; size = 8
$T58 = -39656						; size = 8
$T59 = -39648						; size = 8
$T60 = -39640						; size = 8
$T61 = -39632						; size = 8
$T62 = -39624						; size = 8
$T63 = -39616						; size = 8
$T64 = -39608						; size = 8
$T65 = -39600						; size = 8
$T66 = -39592						; size = 8
$T67 = -39584						; size = 8
$T68 = -39576						; size = 8
$T69 = -39568						; size = 8
$T70 = -39560						; size = 8
$T71 = -39552						; size = 8
$T72 = -39544						; size = 8
$T73 = -39536						; size = 8
$T74 = -39528						; size = 8
$T75 = -39520						; size = 8
$T76 = -39512						; size = 8
$T77 = -39504						; size = 8
$T78 = -39496						; size = 8
$T79 = -39488						; size = 8
$T80 = -39480						; size = 8
$T81 = -39472						; size = 8
$T82 = -39464						; size = 8
$T83 = -39456						; size = 8
$T84 = -39448						; size = 8
$T85 = -39440						; size = 8
$T86 = -39432						; size = 8
$T87 = -39424						; size = 8
$T88 = -39416						; size = 8
$T89 = -39408						; size = 8
$T90 = -39400						; size = 8
$T91 = -39392						; size = 8
$T92 = -39384						; size = 8
$T93 = -39376						; size = 8
$T94 = -39368						; size = 8
$T95 = -39360						; size = 8
$T96 = -39352						; size = 8
$T97 = -39344						; size = 8
$T98 = -39336						; size = 8
$T99 = -39328						; size = 8
$T100 = -39320						; size = 8
$T101 = -39312						; size = 8
$T102 = -39304						; size = 8
$T103 = -39296						; size = 8
$T104 = -39288						; size = 8
$T105 = -39280						; size = 8
$T106 = -39272						; size = 8
$T107 = -39264						; size = 8
$T108 = -39256						; size = 8
$T109 = -39248						; size = 8
$T110 = -39240						; size = 8
$T111 = -39232						; size = 8
$T112 = -39224						; size = 8
$T113 = -39216						; size = 8
$T114 = -39208						; size = 8
$T115 = -39200						; size = 8
$T116 = -39192						; size = 8
$T117 = -39184						; size = 8
$T118 = -39176						; size = 8
$T119 = -39168						; size = 8
$T120 = -39160						; size = 8
$T121 = -39152						; size = 8
$T122 = -39144						; size = 8
$T123 = -39136						; size = 8
$T124 = -39128						; size = 8
$T125 = -39120						; size = 8
$T126 = -39112						; size = 8
$T127 = -39104						; size = 8
$T128 = -39096						; size = 8
$T129 = -39088						; size = 8
$T130 = -39080						; size = 8
$T131 = -39072						; size = 8
$T132 = -39064						; size = 8
$T133 = -39056						; size = 8
$T134 = -39048						; size = 8
$T135 = -39040						; size = 8
$T136 = -39032						; size = 8
$T137 = -39024						; size = 8
$T138 = -39016						; size = 8
$T139 = -39008						; size = 8
$T140 = -39000						; size = 8
$T141 = -38992						; size = 8
$T142 = -38984						; size = 8
$T143 = -38976						; size = 8
$T144 = -38968						; size = 8
$T145 = -38960						; size = 8
$T146 = -38952						; size = 8
$T147 = -38944						; size = 8
$T148 = -38936						; size = 8
$T149 = -38928						; size = 8
$T150 = -38920						; size = 8
$T151 = -38912						; size = 8
$T152 = -38904						; size = 8
$T153 = -38896						; size = 8
$T154 = -38888						; size = 8
$T155 = -38880						; size = 8
$T156 = -38872						; size = 8
$T157 = -38864						; size = 8
$T158 = -38856						; size = 8
$T159 = -38848						; size = 8
$T160 = -38840						; size = 8
$T161 = -38832						; size = 8
$T162 = -38824						; size = 8
$T163 = -38816						; size = 8
$T164 = -38808						; size = 8
$T165 = -38800						; size = 8
$T166 = -38792						; size = 8
$T167 = -38784						; size = 8
$T168 = -38776						; size = 8
$T169 = -38768						; size = 8
$T170 = -38760						; size = 8
$T171 = -38752						; size = 8
$T172 = -38744						; size = 8
$T173 = -38736						; size = 8
$T174 = -38728						; size = 8
$T175 = -38720						; size = 8
$T176 = -38712						; size = 8
$T177 = -38704						; size = 8
$T178 = -38696						; size = 8
$T179 = -38688						; size = 8
$T180 = -38680						; size = 8
$T181 = -38672						; size = 8
$T182 = -38664						; size = 8
$T183 = -38656						; size = 8
$T184 = -38648						; size = 8
$T185 = -38640						; size = 8
$T186 = -38632						; size = 8
$T187 = -38624						; size = 8
$T188 = -38616						; size = 8
$T189 = -38608						; size = 8
$T190 = -38600						; size = 8
$T191 = -38592						; size = 8
$T192 = -38584						; size = 8
$T193 = -38576						; size = 8
$T194 = -38568						; size = 8
$T195 = -38560						; size = 8
$T196 = -38552						; size = 8
$T197 = -38544						; size = 8
$T198 = -38536						; size = 8
$T199 = -38528						; size = 8
$T200 = -38520						; size = 8
$T201 = -38512						; size = 8
$T202 = -38504						; size = 8
$T203 = -38496						; size = 8
$T204 = -38488						; size = 8
$T205 = -38480						; size = 8
$T206 = -38472						; size = 8
$T207 = -38464						; size = 8
$T208 = -38456						; size = 8
$T209 = -38448						; size = 8
$T210 = -38440						; size = 8
$T211 = -38432						; size = 8
$T212 = -38424						; size = 8
$T213 = -38416						; size = 8
$T214 = -38408						; size = 8
$T215 = -38400						; size = 8
$T216 = -38392						; size = 8
$T217 = -38384						; size = 8
$T218 = -38376						; size = 8
$T219 = -38368						; size = 8
$T220 = -38360						; size = 8
$T221 = -38352						; size = 8
$T222 = -38344						; size = 8
$T223 = -38336						; size = 8
$T224 = -38328						; size = 8
$T225 = -38320						; size = 8
$T226 = -38312						; size = 8
$T227 = -38304						; size = 8
$T228 = -38296						; size = 8
$T229 = -38288						; size = 8
$T230 = -38280						; size = 8
$T231 = -38272						; size = 8
$T232 = -38264						; size = 8
$T233 = -38256						; size = 8
$T234 = -38248						; size = 8
$T235 = -38240						; size = 8
$T236 = -38232						; size = 8
$T237 = -38224						; size = 8
$T238 = -38216						; size = 8
$T239 = -38208						; size = 8
$T240 = -38200						; size = 8
$T241 = -38192						; size = 8
$T242 = -38184						; size = 8
$T243 = -38176						; size = 8
$T244 = -38168						; size = 8
$T245 = -38160						; size = 8
$T246 = -38152						; size = 8
$T247 = -38144						; size = 8
$T248 = -38136						; size = 8
$T249 = -38128						; size = 8
$T250 = -38120						; size = 8
$T251 = -38112						; size = 8
$T252 = -38104						; size = 8
$T253 = -38096						; size = 8
$T254 = -38088						; size = 8
$T255 = -38080						; size = 8
$T256 = -38072						; size = 8
$T257 = -38064						; size = 8
$T258 = -38056						; size = 8
$T259 = -38048						; size = 8
$T260 = -38040						; size = 8
$T261 = -38032						; size = 8
$T262 = -38024						; size = 8
$T263 = -38016						; size = 8
$T264 = -38008						; size = 8
$T265 = -38000						; size = 8
$T266 = -37992						; size = 8
$T267 = -37984						; size = 8
$T268 = -37976						; size = 8
$T269 = -37968						; size = 8
$T270 = -37960						; size = 8
$T271 = -37952						; size = 8
$T272 = -37944						; size = 8
$T273 = -37936						; size = 8
$T274 = -37928						; size = 8
$T275 = -37920						; size = 8
$T276 = -37912						; size = 8
$T277 = -37904						; size = 8
$T278 = -37896						; size = 8
$T279 = -37888						; size = 8
$T280 = -37880						; size = 8
$T281 = -37872						; size = 8
$T282 = -37864						; size = 8
$T283 = -37856						; size = 8
$T284 = -37848						; size = 8
$T285 = -37840						; size = 8
$T286 = -37832						; size = 8
$T287 = -37824						; size = 8
$T288 = -37816						; size = 8
$T289 = -37808						; size = 8
$T290 = -37800						; size = 8
$T291 = -37792						; size = 8
$T292 = -37784						; size = 8
$T293 = -37776						; size = 8
$T294 = -37768						; size = 8
$T295 = -37760						; size = 8
$T296 = -37752						; size = 8
$T297 = -37744						; size = 8
$T298 = -37736						; size = 8
$T299 = -37728						; size = 8
$T300 = -37720						; size = 8
$T301 = -37712						; size = 8
$T302 = -37704						; size = 8
$T303 = -37696						; size = 8
$T304 = -37688						; size = 8
$T305 = -37680						; size = 8
$T306 = -37672						; size = 8
$T307 = -37664						; size = 8
$T308 = -37656						; size = 8
$T309 = -37648						; size = 8
$T310 = -37640						; size = 8
$T311 = -37632						; size = 8
$T312 = -37624						; size = 8
$T313 = -37616						; size = 8
$T314 = -37608						; size = 8
$T315 = -37600						; size = 8
$T316 = -37592						; size = 8
$T317 = -37584						; size = 8
$T318 = -37576						; size = 8
$T319 = -37568						; size = 8
$T320 = -37560						; size = 8
$T321 = -37552						; size = 8
$T322 = -37544						; size = 8
$T323 = -37536						; size = 8
$T324 = -37528						; size = 8
$T325 = -37520						; size = 8
$T326 = -37512						; size = 8
$T327 = -37504						; size = 8
$T328 = -37496						; size = 8
$T329 = -37488						; size = 8
$T330 = -37480						; size = 8
$T331 = -37472						; size = 8
$T332 = -37464						; size = 8
$T333 = -37456						; size = 8
$T334 = -37448						; size = 8
$T335 = -37440						; size = 8
$T336 = -37432						; size = 8
$T337 = -37424						; size = 8
$T338 = -37416						; size = 8
$T339 = -37408						; size = 8
$T340 = -37400						; size = 8
$T341 = -37392						; size = 8
$T342 = -37384						; size = 8
$T343 = -37376						; size = 8
$T344 = -37368						; size = 8
$T345 = -37360						; size = 8
$T346 = -37352						; size = 8
$T347 = -37344						; size = 8
$T348 = -37336						; size = 8
$T349 = -37328						; size = 8
$T350 = -37320						; size = 8
$T351 = -37312						; size = 8
$T352 = -37304						; size = 8
$T353 = -37296						; size = 8
$T354 = -37288						; size = 8
$T355 = -37280						; size = 8
$T356 = -37272						; size = 8
$T357 = -37264						; size = 8
$T358 = -37256						; size = 8
$T359 = -37248						; size = 8
$T360 = -37240						; size = 8
$T361 = -37232						; size = 8
$T362 = -37224						; size = 8
$T363 = -37216						; size = 8
$T364 = -37208						; size = 8
$T365 = -37200						; size = 8
$T366 = -37192						; size = 8
$T367 = -37184						; size = 8
$T368 = -37176						; size = 8
$T369 = -37168						; size = 8
$T370 = -37160						; size = 8
$T371 = -37152						; size = 8
$T372 = -37144						; size = 8
$T373 = -37136						; size = 8
$T374 = -37128						; size = 8
$T375 = -37120						; size = 8
$T376 = -37112						; size = 8
$T377 = -37104						; size = 8
$T378 = -37096						; size = 8
$T379 = -37088						; size = 8
$T380 = -37080						; size = 8
$T381 = -37072						; size = 8
$T382 = -37064						; size = 8
$T383 = -37056						; size = 8
$T384 = -37048						; size = 8
$T385 = -37040						; size = 8
$T386 = -37032						; size = 8
$T387 = -37024						; size = 8
$T388 = -37016						; size = 8
$T389 = -37008						; size = 8
$T390 = -37000						; size = 8
$T391 = -36992						; size = 8
$T392 = -36984						; size = 8
$T393 = -36976						; size = 8
$T394 = -36968						; size = 8
$T395 = -36960						; size = 8
$T396 = -36952						; size = 8
$T397 = -36944						; size = 8
$T398 = -36936						; size = 8
$T399 = -36928						; size = 8
$T400 = -36920						; size = 8
$T401 = -36912						; size = 8
$T402 = -36904						; size = 8
$T403 = -36896						; size = 8
$T404 = -36888						; size = 8
$T405 = -36880						; size = 8
$T406 = -36872						; size = 8
$T407 = -36864						; size = 8
$T408 = -36856						; size = 8
$T409 = -36848						; size = 8
$T410 = -36840						; size = 8
$T411 = -36832						; size = 8
$T412 = -36824						; size = 8
$T413 = -36816						; size = 8
$T414 = -36808						; size = 8
$T415 = -36800						; size = 8
$T416 = -36792						; size = 8
$T417 = -36784						; size = 8
$T418 = -36776						; size = 8
$T419 = -36768						; size = 8
$T420 = -36760						; size = 8
$T421 = -36752						; size = 8
$T422 = -36744						; size = 8
$T423 = -36736						; size = 8
$T424 = -36728						; size = 8
$T425 = -36720						; size = 8
$T426 = -36712						; size = 8
$T427 = -36704						; size = 8
$T428 = -36696						; size = 8
$T429 = -36688						; size = 8
$T430 = -36680						; size = 8
$T431 = -36672						; size = 8
$T432 = -36664						; size = 8
$T433 = -36656						; size = 8
$T434 = -36648						; size = 8
$T435 = -36640						; size = 8
$T436 = -36632						; size = 8
$T437 = -36624						; size = 8
$T438 = -36616						; size = 8
$T439 = -36608						; size = 8
$T440 = -36600						; size = 8
$T441 = -36592						; size = 8
$T442 = -36584						; size = 8
$T443 = -36576						; size = 8
$T444 = -36568						; size = 8
$T445 = -36560						; size = 8
$T446 = -36552						; size = 8
$T447 = -36544						; size = 8
$T448 = -36536						; size = 8
$T449 = -36528						; size = 8
$T450 = -36520						; size = 8
$T451 = -36512						; size = 8
$T452 = -36504						; size = 8
$T453 = -36496						; size = 8
$T454 = -36488						; size = 8
$T455 = -36480						; size = 8
$T456 = -36472						; size = 8
$T457 = -36464						; size = 8
$T458 = -36456						; size = 8
$T459 = -36448						; size = 8
$T460 = -36440						; size = 8
$T461 = -36432						; size = 8
$T462 = -36424						; size = 8
$T463 = -36416						; size = 8
$T464 = -36408						; size = 8
$T465 = -36400						; size = 8
$T466 = -36392						; size = 8
$T467 = -36384						; size = 8
$T468 = -36376						; size = 8
$T469 = -36368						; size = 8
$T470 = -36360						; size = 8
$T471 = -36352						; size = 8
$T472 = -36344						; size = 8
$T473 = -36336						; size = 8
$T474 = -36328						; size = 8
$T475 = -36320						; size = 8
$T476 = -36312						; size = 8
$T477 = -36304						; size = 8
$T478 = -36296						; size = 8
$T479 = -36288						; size = 8
$T480 = -36280						; size = 8
$T481 = -36272						; size = 8
$T482 = -36264						; size = 8
$T483 = -36256						; size = 8
$T484 = -36248						; size = 8
$T485 = -36240						; size = 8
$T486 = -36232						; size = 8
$T487 = -36224						; size = 8
$T488 = -36216						; size = 8
$T489 = -36208						; size = 8
$T490 = -36200						; size = 8
$T491 = -36192						; size = 8
$T492 = -36184						; size = 8
$T493 = -36176						; size = 8
$T494 = -36168						; size = 8
$T495 = -36160						; size = 8
$T496 = -36152						; size = 8
$T497 = -36144						; size = 8
$T498 = -36136						; size = 8
$T499 = -36128						; size = 8
$T500 = -36120						; size = 8
$T501 = -36112						; size = 8
$T502 = -36104						; size = 8
$T503 = -36096						; size = 8
$T504 = -36088						; size = 8
$T505 = -36080						; size = 8
$T506 = -36072						; size = 8
$T507 = -36064						; size = 8
$T508 = -36056						; size = 8
$T509 = -36048						; size = 8
$T510 = -36040						; size = 8
$T511 = -36032						; size = 8
$T512 = -36024						; size = 8
$T513 = -36016						; size = 8
$T514 = -36008						; size = 8
$T515 = -36000						; size = 8
$T516 = -35992						; size = 8
$T517 = -35984						; size = 8
$T518 = -35976						; size = 8
$T519 = -35968						; size = 8
$T520 = -35960						; size = 8
$T521 = -35952						; size = 8
$T522 = -35944						; size = 8
$T523 = -35936						; size = 8
$T524 = -35928						; size = 8
$T525 = -35920						; size = 8
$T526 = -35912						; size = 8
$T527 = -35904						; size = 8
$T528 = -35896						; size = 8
$T529 = -35888						; size = 8
$T530 = -35880						; size = 8
$T531 = -35872						; size = 8
$T532 = -35864						; size = 8
$T533 = -35856						; size = 8
$T534 = -35848						; size = 8
$T535 = -35840						; size = 8
$T536 = -35832						; size = 8
$T537 = -35824						; size = 8
$T538 = -35816						; size = 8
$T539 = -35808						; size = 8
$T540 = -35800						; size = 8
$T541 = -35792						; size = 8
$T542 = -35784						; size = 8
$T543 = -35776						; size = 8
$T544 = -35768						; size = 8
$T545 = -35760						; size = 8
$T546 = -35752						; size = 8
$T547 = -35744						; size = 8
$T548 = -35736						; size = 8
$T549 = -35728						; size = 8
$T550 = -35720						; size = 8
$T551 = -35712						; size = 8
$T552 = -35704						; size = 8
$T553 = -35696						; size = 8
$T554 = -35688						; size = 8
$T555 = -35680						; size = 8
$T556 = -35672						; size = 8
$T557 = -35664						; size = 8
$T558 = -35656						; size = 8
$T559 = -35648						; size = 8
$T560 = -35640						; size = 8
$T561 = -35632						; size = 8
$T562 = -35624						; size = 8
$T563 = -35616						; size = 8
$T564 = -35608						; size = 8
$T565 = -35600						; size = 8
$T566 = -35592						; size = 8
$T567 = -35584						; size = 8
$T568 = -35576						; size = 8
$T569 = -35568						; size = 8
$T570 = -35560						; size = 8
$T571 = -35552						; size = 8
$T572 = -35544						; size = 8
$T573 = -35536						; size = 8
$T574 = -35528						; size = 8
$T575 = -35520						; size = 8
$T576 = -35512						; size = 8
$T577 = -35504						; size = 8
$T578 = -35496						; size = 8
$T579 = -35488						; size = 8
$T580 = -35480						; size = 8
$T581 = -35472						; size = 8
$T582 = -35464						; size = 8
$T583 = -35456						; size = 8
$T584 = -35448						; size = 8
$T585 = -35440						; size = 8
$T586 = -35432						; size = 8
$T587 = -35424						; size = 8
$T588 = -35416						; size = 8
$T589 = -35408						; size = 8
$T590 = -35400						; size = 8
$T591 = -35392						; size = 8
$T592 = -35384						; size = 8
$T593 = -35376						; size = 8
$T594 = -35368						; size = 8
$T595 = -35360						; size = 8
$T596 = -35352						; size = 8
$T597 = -35344						; size = 8
$T598 = -35336						; size = 8
$T599 = -35328						; size = 8
$T600 = -35320						; size = 8
$T601 = -35312						; size = 8
$T602 = -35304						; size = 8
$T603 = -35296						; size = 8
$T604 = -35288						; size = 8
$T605 = -35280						; size = 8
$T606 = -35272						; size = 8
$T607 = -35264						; size = 8
$T608 = -35256						; size = 8
$T609 = -35248						; size = 8
$T610 = -35240						; size = 8
$T611 = -35232						; size = 8
$T612 = -35224						; size = 8
$T613 = -35216						; size = 8
$T614 = -35208						; size = 8
$T615 = -35200						; size = 8
$T616 = -35192						; size = 8
$T617 = -35184						; size = 8
$T618 = -35176						; size = 8
$T619 = -35168						; size = 8
$T620 = -35160						; size = 8
$T621 = -35152						; size = 8
$T622 = -35144						; size = 8
$T623 = -35136						; size = 8
$T624 = -35128						; size = 8
$T625 = -35120						; size = 8
$T626 = -35112						; size = 8
$T627 = -35104						; size = 8
$T628 = -35096						; size = 8
$T629 = -35088						; size = 8
$T630 = -35080						; size = 8
$T631 = -35072						; size = 8
$T632 = -35064						; size = 8
$T633 = -35056						; size = 8
$T634 = -35048						; size = 8
$T635 = -35040						; size = 8
$T636 = -35032						; size = 8
$T637 = -35024						; size = 8
$T638 = -35016						; size = 8
$T639 = -35008						; size = 8
$T640 = -35000						; size = 8
$T641 = -34992						; size = 8
$T642 = -34984						; size = 8
$T643 = -34976						; size = 8
$T644 = -34968						; size = 8
$T645 = -34960						; size = 8
$T646 = -34952						; size = 8
$T647 = -34944						; size = 8
$T648 = -34936						; size = 8
$T649 = -34928						; size = 8
$T650 = -34920						; size = 8
$T651 = -34912						; size = 8
$T652 = -34904						; size = 8
$T653 = -34896						; size = 8
$T654 = -34888						; size = 8
$T655 = -34880						; size = 8
$T656 = -34872						; size = 8
$T657 = -34864						; size = 8
$T658 = -34856						; size = 8
$T659 = -34848						; size = 8
$T660 = -34840						; size = 8
$T661 = -34832						; size = 8
$T662 = -34824						; size = 8
$T663 = -34816						; size = 8
$T664 = -34808						; size = 8
$T665 = -34800						; size = 8
$T666 = -34792						; size = 8
$T667 = -34784						; size = 8
$T668 = -34776						; size = 8
$T669 = -34768						; size = 8
$T670 = -34760						; size = 8
$T671 = -34752						; size = 8
$T672 = -34744						; size = 8
$T673 = -34736						; size = 8
$T674 = -34728						; size = 8
$T675 = -34720						; size = 8
$T676 = -34712						; size = 8
$T677 = -34704						; size = 8
$T678 = -34696						; size = 8
$T679 = -34688						; size = 8
$T680 = -34680						; size = 8
$T681 = -34672						; size = 8
$T682 = -34664						; size = 8
$T683 = -34656						; size = 8
$T684 = -34648						; size = 8
$T685 = -34640						; size = 8
$T686 = -34632						; size = 8
$T687 = -34624						; size = 8
$T688 = -34616						; size = 8
$T689 = -34608						; size = 8
$T690 = -34600						; size = 8
$T691 = -34592						; size = 8
$T692 = -34584						; size = 8
$T693 = -34576						; size = 8
$T694 = -34568						; size = 8
$T695 = -34560						; size = 8
$T696 = -34552						; size = 8
$T697 = -34544						; size = 8
$T698 = -34536						; size = 8
$T699 = -34528						; size = 8
$T700 = -34520						; size = 8
$T701 = -34512						; size = 8
$T702 = -34504						; size = 8
$T703 = -34496						; size = 8
$T704 = -34488						; size = 8
$T705 = -34480						; size = 8
$T706 = -34472						; size = 8
$T707 = -34464						; size = 8
$T708 = -34456						; size = 8
$T709 = -34448						; size = 8
$T710 = -34440						; size = 8
$T711 = -34432						; size = 8
$T712 = -34424						; size = 8
$T713 = -34416						; size = 8
$T714 = -34408						; size = 8
$T715 = -34400						; size = 8
$T716 = -34392						; size = 8
$T717 = -34384						; size = 8
$T718 = -34376						; size = 8
$T719 = -34368						; size = 8
$T720 = -34360						; size = 8
$T721 = -34352						; size = 8
$T722 = -34344						; size = 8
$T723 = -34336						; size = 8
$T724 = -34328						; size = 8
$T725 = -34320						; size = 8
$T726 = -34312						; size = 8
$T727 = -34304						; size = 8
$T728 = -34296						; size = 8
$T729 = -34288						; size = 8
$T730 = -34280						; size = 8
$T731 = -34272						; size = 8
$T732 = -34264						; size = 8
$T733 = -34256						; size = 8
$T734 = -34248						; size = 8
$T735 = -34240						; size = 8
$T736 = -34232						; size = 8
$T737 = -34224						; size = 8
$T738 = -34216						; size = 8
$T739 = -34208						; size = 8
$T740 = -34200						; size = 8
$T741 = -34192						; size = 8
$T742 = -34184						; size = 8
$T743 = -34176						; size = 8
$T744 = -34168						; size = 8
$T745 = -34160						; size = 8
$T746 = -34152						; size = 8
$T747 = -34144						; size = 8
$T748 = -34136						; size = 8
$T749 = -34128						; size = 8
$T750 = -34120						; size = 8
$T751 = -34112						; size = 8
$T752 = -34104						; size = 8
$T753 = -34096						; size = 8
$T754 = -34088						; size = 8
$T755 = -34080						; size = 8
$T756 = -34072						; size = 8
$T757 = -34064						; size = 8
$T758 = -34056						; size = 8
$T759 = -34048						; size = 8
$T760 = -34040						; size = 8
$T761 = -34032						; size = 8
$T762 = -34024						; size = 8
$T763 = -34016						; size = 8
$T764 = -34008						; size = 8
$T765 = -34000						; size = 8
$T766 = -33992						; size = 8
$T767 = -33984						; size = 8
$T768 = -33976						; size = 8
$T769 = -33968						; size = 8
$T770 = -33960						; size = 8
$T771 = -33952						; size = 8
$T772 = -33944						; size = 8
$T773 = -33936						; size = 8
$T774 = -33928						; size = 8
$T775 = -33920						; size = 8
$T776 = -33912						; size = 8
$T777 = -33904						; size = 8
$T778 = -33896						; size = 8
$T779 = -33888						; size = 8
$T780 = -33880						; size = 8
$T781 = -33872						; size = 8
$T782 = -33864						; size = 8
$T783 = -33856						; size = 8
$T784 = -33848						; size = 8
$T785 = -33840						; size = 8
$T786 = -33832						; size = 8
$T787 = -33824						; size = 8
$T788 = -33816						; size = 8
$T789 = -33808						; size = 8
$T790 = -33800						; size = 8
$T791 = -33792						; size = 8
$T792 = -33784						; size = 8
$T793 = -33776						; size = 8
$T794 = -33768						; size = 8
$T795 = -33760						; size = 8
$T796 = -33752						; size = 8
$T797 = -33744						; size = 8
$T798 = -33736						; size = 8
$T799 = -33728						; size = 8
$T800 = -33720						; size = 8
$T801 = -33712						; size = 8
$T802 = -33704						; size = 8
$T803 = -33696						; size = 8
$T804 = -33688						; size = 8
$T805 = -33680						; size = 8
$T806 = -33672						; size = 8
$T807 = -33664						; size = 8
$T808 = -33656						; size = 8
$T809 = -33648						; size = 8
$T810 = -33640						; size = 8
$T811 = -33632						; size = 8
$T812 = -33624						; size = 8
$T813 = -33616						; size = 8
$T814 = -33608						; size = 8
$T815 = -33600						; size = 8
$T816 = -33592						; size = 8
$T817 = -33584						; size = 8
$T818 = -33576						; size = 8
$T819 = -33568						; size = 8
$T820 = -33560						; size = 8
$T821 = -33552						; size = 8
$T822 = -33544						; size = 8
$T823 = -33536						; size = 8
$T824 = -33528						; size = 8
$T825 = -33520						; size = 8
$T826 = -33512						; size = 8
$T827 = -33504						; size = 8
$T828 = -33496						; size = 8
$T829 = -33488						; size = 8
$T830 = -33480						; size = 8
$T831 = -33472						; size = 8
$T832 = -33464						; size = 8
$T833 = -33456						; size = 8
$T834 = -33448						; size = 8
$T835 = -33440						; size = 8
$T836 = -33432						; size = 8
$T837 = -33424						; size = 8
$T838 = -33416						; size = 8
$T839 = -33408						; size = 8
$T840 = -33400						; size = 8
$T841 = -33392						; size = 8
$T842 = -33384						; size = 8
$T843 = -33376						; size = 8
$T844 = -33368						; size = 8
$T845 = -33360						; size = 8
$T846 = -33352						; size = 8
$T847 = -33344						; size = 8
$T848 = -33336						; size = 8
$T849 = -33328						; size = 8
$T850 = -33320						; size = 8
$T851 = -33312						; size = 8
$T852 = -33304						; size = 8
$T853 = -33296						; size = 8
$T854 = -33288						; size = 8
$T855 = -33280						; size = 8
$T856 = -33272						; size = 8
$T857 = -33264						; size = 8
$T858 = -33256						; size = 8
$T859 = -33248						; size = 8
$T860 = -33240						; size = 8
$T861 = -33232						; size = 8
$T862 = -33224						; size = 8
$T863 = -33216						; size = 8
$T864 = -33208						; size = 8
$T865 = -33200						; size = 8
$T866 = -33192						; size = 8
$T867 = -33184						; size = 8
$T868 = -33176						; size = 8
$T869 = -33168						; size = 8
$T870 = -33160						; size = 8
$T871 = -33152						; size = 8
$T872 = -33144						; size = 8
$T873 = -33136						; size = 8
$T874 = -33128						; size = 8
$T875 = -33120						; size = 8
$T876 = -33112						; size = 8
$T877 = -33104						; size = 8
$T878 = -33096						; size = 8
$T879 = -33088						; size = 8
$T880 = -33080						; size = 8
$T881 = -33072						; size = 8
$T882 = -33064						; size = 8
$T883 = -33056						; size = 8
$T884 = -33048						; size = 8
$T885 = -33040						; size = 8
$T886 = -33032						; size = 8
$T887 = -33024						; size = 8
$T888 = -33016						; size = 8
$T889 = -33008						; size = 8
$T890 = -33000						; size = 8
$T891 = -32992						; size = 8
$T892 = -32984						; size = 8
$T893 = -32976						; size = 8
$T894 = -32968						; size = 8
$T895 = -32960						; size = 8
$T896 = -32952						; size = 8
$T897 = -32944						; size = 8
$T898 = -32936						; size = 8
$T899 = -32928						; size = 8
$T900 = -32920						; size = 8
$T901 = -32912						; size = 8
$T902 = -32904						; size = 8
$T903 = -32896						; size = 8
$T904 = -32888						; size = 8
$T905 = -32880						; size = 8
$T906 = -32872						; size = 8
$T907 = -32864						; size = 8
$T908 = -32856						; size = 8
$T909 = -32848						; size = 8
$T910 = -32840						; size = 8
$T911 = -32832						; size = 8
$T912 = -32824						; size = 8
$T913 = -32816						; size = 8
$T914 = -32808						; size = 8
$T915 = -32800						; size = 8
$T916 = -32792						; size = 8
$T917 = -32784						; size = 8
$T918 = -32776						; size = 8
$T919 = -32768						; size = 8
$T920 = -32760						; size = 8
$T921 = -32752						; size = 8
$T922 = -32744						; size = 8
$T923 = -32736						; size = 8
$T924 = -32728						; size = 8
$T925 = -32720						; size = 8
$T926 = -32712						; size = 8
$T927 = -32704						; size = 8
$T928 = -32696						; size = 8
$T929 = -32688						; size = 8
$T930 = -32680						; size = 8
$T931 = -32672						; size = 8
$T932 = -32664						; size = 8
$T933 = -32656						; size = 8
$T934 = -32648						; size = 8
$T935 = -32640						; size = 8
$T936 = -32632						; size = 8
$T937 = -32624						; size = 8
$T938 = -32616						; size = 8
$T939 = -32608						; size = 8
$T940 = -32600						; size = 8
$T941 = -32592						; size = 8
$T942 = -32584						; size = 8
$T943 = -32576						; size = 8
$T944 = -32568						; size = 8
$T945 = -32560						; size = 8
$T946 = -32552						; size = 8
$T947 = -32544						; size = 8
$T948 = -32536						; size = 8
$T949 = -32528						; size = 8
$T950 = -32520						; size = 8
$T951 = -32512						; size = 8
$T952 = -32504						; size = 8
$T953 = -32496						; size = 8
$T954 = -32488						; size = 8
$T955 = -32480						; size = 8
$T956 = -32472						; size = 8
$T957 = -32464						; size = 32448
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??__EusbNames@@YAXXZ PROC				; `dynamic initializer for 'usbNames'', COMDAT

; 1016 : };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__EusbNames@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 9c 9c 00 00	 mov	 eax, 40092		; 00009c9cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0002f	6a 23		 push	 35			; 00000023H

; 1784 : 		_Mysize(0),

  00031	c7 85 48 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+24], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0003b	8d 8d 38 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8]

; 1785 : 		_Myres(0)

  00041	c7 85 4c 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+28], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OFCPEEHM@YUEN?5DA?5ELECTRONIC?5PRODUCTS?5FAC@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00050	c7 85 30 81 ff
	ff 16 27 00 00	 mov	 DWORD PTR $T957[ebp], 10006 ; 00002716H
  0005a	c7 85 34 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00064	c7 85 48 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+24], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0006e	c7 85 4c 81 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+28], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00078	c6 85 38 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0007f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00084	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0008b	8d 8d 58 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+40]
  00091	6a 1f		 push	 31			; 0000001fH

; 1784 : 		_Mysize(0),

  00093	c7 85 68 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+56], 0

; 1785 : 		_Myres(0)

  0009d	c7 85 6c 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+60], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@ODKDPALJ@Xiaomi?5Communications?5Co?4?0?5Ltd?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  000ac	c7 85 50 81 ff
	ff 17 27 00 00	 mov	 DWORD PTR $T957[ebp+32], 10007 ; 00002717H
  000b6	c7 85 54 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  000c0	c7 85 68 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+56], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000ca	c7 85 6c 81 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+60], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000d4	c6 85 58 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000db	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  000e0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000e4	8d 8d 78 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+72]
  000ea	6a 31		 push	 49			; 00000031H

; 1784 : 		_Mysize(0),

  000ec	c7 85 88 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+88], 0

; 1785 : 		_Myres(0)

  000f6	c7 85 8c 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+92], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@JKOIBOJG@Gionee?5Communication?5Equipment?5@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00105	c7 85 70 81 ff
	ff 1d 27 00 00	 mov	 DWORD PTR $T957[ebp+64], 10013 ; 0000271dH
  0010f	c7 85 74 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+68], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00119	c7 85 88 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+88], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00123	c7 85 8c 81 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+92], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0012d	c6 85 78 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+72], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00134	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00139	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0013d	8d 8d 98 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+104]
  00143	6a 06		 push	 6

; 1784 : 		_Mysize(0),

  00145	c7 85 a8 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+120], 0

; 1785 : 		_Myres(0)

  0014f	c7 85 ac 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+124], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00159	68 00 00 00 00	 push	 OFFSET ??_C@_06ELILDEDB@TRANIT@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0015e	c7 85 90 81 ff
	ff 22 27 00 00	 mov	 DWORD PTR $T957[ebp+96], 10018 ; 00002722H
  00168	c7 85 94 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+100], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00172	c7 85 a8 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+120], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0017c	c7 85 ac 81 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+124], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00186	c6 85 98 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+104], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0018d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00192	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00196	8d 8d b8 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+136]
  0019c	6a 07		 push	 7

; 1784 : 		_Mysize(0),

  0019e	c7 85 c8 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+152], 0

; 1785 : 		_Myres(0)

  001a8	c7 85 cc 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+156], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_07LAHLPDGH@Mitsumi@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  001b7	c7 85 b0 81 ff
	ff ee 03 00 00	 mov	 DWORD PTR $T957[ebp+128], 1006 ; 000003eeH
  001c1	c7 85 b4 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+132], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  001cb	c7 85 c8 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+152], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  001d5	c7 85 cc 81 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+156], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001df	c6 85 b8 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+136], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  001e6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  001eb	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  001ef	8d 8d d8 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+168]
  001f5	6a 07		 push	 7

; 1784 : 		_Mysize(0),

  001f7	c7 85 e8 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+184], 0

; 1785 : 		_Myres(0)

  00201	c7 85 ec 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+188], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_07ILFANDBC@HP?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00210	c7 85 d0 81 ff
	ff f0 03 00 00	 mov	 DWORD PTR $T957[ebp+160], 1008 ; 000003f0H
  0021a	c7 85 d4 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+164], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00224	c7 85 e8 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+184], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0022e	c7 85 ec 81 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+188], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00238	c6 85 d8 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+168], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0023f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00244	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00248	8d 8d f8 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+200]
  0024e	6a 14		 push	 20			; 00000014H

; 1784 : 		_Mysize(0),

  00250	c7 85 08 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+216], 0

; 1785 : 		_Myres(0)

  0025a	c7 85 0c 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+220], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00264	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CMFLPPM@M31?5Technology?5Corp?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00269	c7 85 f0 81 ff
	ff 80 27 00 00	 mov	 DWORD PTR $T957[ebp+192], 10112 ; 00002780H
  00273	c7 85 f4 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+196], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0027d	c7 85 08 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+216], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00287	c7 85 0c 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+220], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00291	c6 85 f8 81 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+200], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00298	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0029d	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  002a1	8d 8d 18 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+232]
  002a7	6a 2b		 push	 43			; 0000002bH

; 1784 : 		_Mysize(0),

  002a9	c7 85 28 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+248], 0

; 1785 : 		_Myres(0)

  002b3	c7 85 2c 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+252], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FLONKIJ@Sanwin?5?$CIHK?$CJ?5Electronic?5Technolo@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  002c2	c7 85 10 82 ff
	ff 88 27 00 00	 mov	 DWORD PTR $T957[ebp+224], 10120 ; 00002788H
  002cc	c7 85 14 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+228], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  002d6	c7 85 28 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+248], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002e0	c7 85 2c 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+252], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002ea	c6 85 18 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+232], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  002f1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  002f6	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  002fa	8d 8d 38 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+264]
  00300	6a 2d		 push	 45			; 0000002dH

; 1784 : 		_Mysize(0),

  00302	c7 85 48 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+280], 0

; 1785 : 		_Myres(0)

  0030c	c7 85 4c 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+284], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FLHPAOCE@Suzhou?5WEIJU?5Electronics?5Techno@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0031b	c7 85 30 82 ff
	ff 89 27 00 00	 mov	 DWORD PTR $T957[ebp+256], 10121 ; 00002789H
  00325	c7 85 34 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+260], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0032f	c7 85 48 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+280], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00339	c7 85 4c 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+284], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00343	c6 85 38 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+264], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0034a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0034f	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00353	8d 8d 58 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+296]
  00359	6a 15		 push	 21			; 00000015H

; 1784 : 		_Mysize(0),

  0035b	c7 85 68 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+312], 0

; 1785 : 		_Myres(0)

  00365	c7 85 6c 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+316], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DEOCBHFP@Advantest?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00374	c7 85 50 82 ff
	ff a5 27 00 00	 mov	 DWORD PTR $T957[ebp+288], 10149 ; 000027a5H
  0037e	c7 85 54 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+292], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00388	c7 85 68 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+312], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00392	c7 85 6c 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+316], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0039c	c6 85 58 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+296], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  003a3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  003a8	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  003ac	8d 8d 78 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+328]
  003b2	6a 12		 push	 18			; 00000012H

; 1784 : 		_Mysize(0),

  003b4	c7 85 88 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+344], 0

; 1785 : 		_Myres(0)

  003be	c7 85 8c 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+348], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  003c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JJJMEBLG@iRobot?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  003cd	c7 85 70 82 ff
	ff a6 27 00 00	 mov	 DWORD PTR $T957[ebp+320], 10150 ; 000027a6H
  003d7	c7 85 74 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+324], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  003e1	c7 85 88 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+344], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  003eb	c7 85 8c 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+348], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  003f5	c6 85 78 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+328], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  003fc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00401	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00405	c7 85 a8 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+376], 0

; 1785 : 		_Myres(0)

  0040f	c7 85 ac 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+380], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00419	c7 85 90 82 ff
	ff aa 27 00 00	 mov	 DWORD PTR $T957[ebp+352], 10154 ; 000027aaH
  00423	c7 85 94 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+356], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0042d	c7 85 a8 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+376], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00437	c7 85 ac 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+380], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00441	c6 85 98 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+360], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00448	6a 20		 push	 32			; 00000020H
  0044a	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PAKBJBHB@Just?5Connector?5Kunshan?5Co?4?0?5Ltd@
  0044f	8d 8d 98 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+360]
  00455	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0045a	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0045e	8d 8d b8 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+392]
  00464	6a 24		 push	 36			; 00000024H

; 1784 : 		_Mysize(0),

  00466	c7 85 c8 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+408], 0

; 1785 : 		_Myres(0)

  00470	c7 85 cc 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+412], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0047a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LNNLJKDF@Shenzhen?5Huiding?5Technology?5Co?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0047f	c7 85 b0 82 ff
	ff c6 27 00 00	 mov	 DWORD PTR $T957[ebp+384], 10182 ; 000027c6H
  00489	c7 85 b4 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+388], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00493	c7 85 c8 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+408], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0049d	c7 85 cc 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+412], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  004a7	c6 85 b8 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+392], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  004ae	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  004b3	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  004b7	8d 8d d8 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+424]
  004bd	6a 1b		 push	 27			; 0000001bH

; 1784 : 		_Mysize(0),

  004bf	c7 85 e8 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+440], 0

; 1785 : 		_Myres(0)

  004c9	c7 85 ec 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+444], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MEJFLCNJ@Elitegroup?5Computer?5Systems@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  004d8	c7 85 d0 82 ff
	ff fc 03 00 00	 mov	 DWORD PTR $T957[ebp+416], 1020 ; 000003fcH
  004e2	c7 85 d4 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+420], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  004ec	c7 85 e8 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+440], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  004f6	c7 85 ec 82 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+444], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00500	c6 85 d8 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+424], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00507	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0050c	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00510	8d 8d f8 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+456]
  00516	6a 0b		 push	 11			; 0000000bH

; 1784 : 		_Mysize(0),

  00518	c7 85 08 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+472], 0

; 1785 : 		_Myres(0)

  00522	c7 85 0c 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+476], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0052c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HMBJIBHA@Xilinx?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00531	c7 85 f0 82 ff
	ff fd 03 00 00	 mov	 DWORD PTR $T957[ebp+448], 1021 ; 000003fdH
  0053b	c7 85 f4 82 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+452], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00545	c7 85 08 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+472], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0054f	c7 85 0c 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+476], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00559	c6 85 f8 82 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+456], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00560	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00565	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00569	8d 8d 18 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+488]
  0056f	6a 15		 push	 21			; 00000015H

; 1784 : 		_Mysize(0),

  00571	c7 85 28 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+504], 0

; 1785 : 		_Myres(0)

  0057b	c7 85 2c 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+508], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00585	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CHMOKOCH@Sibridge?5Technologies@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0058a	c7 85 10 83 ff
	ff f2 27 00 00	 mov	 DWORD PTR $T957[ebp+480], 10226 ; 000027f2H
  00594	c7 85 14 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+484], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0059e	c7 85 28 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+504], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  005a8	c7 85 2c 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+508], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  005b2	c6 85 18 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+488], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  005b9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  005be	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  005c2	8d 8d 38 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+520]
  005c8	6a 0f		 push	 15			; 0000000fH

; 1784 : 		_Mysize(0),

  005ca	c7 85 48 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+536], 0

; 1785 : 		_Myres(0)

  005d4	c7 85 4c 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+540], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  005de	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIHKDABC@ALi?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  005e3	c7 85 30 83 ff
	ff 02 04 00 00	 mov	 DWORD PTR $T957[ebp+512], 1026 ; 00000402H
  005ed	c7 85 34 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+516], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  005f7	c7 85 48 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+536], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00601	c7 85 4c 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+540], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0060b	c6 85 38 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+520], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00612	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00617	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0061b	c7 85 68 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+568], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00625	c7 85 50 83 ff
	ff 03 04 00 00	 mov	 DWORD PTR $T957[ebp+544], 1027 ; 00000403H
  0062f	c7 85 54 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+548], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00639	c7 85 6c 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+572], 0

; 3976 : 		_My_data._Mysize = 0;

  00643	c7 85 68 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+568], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0064d	6a 2f		 push	 47			; 0000002fH
  0064f	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@NLEDAFLA@Future?5Technology?5Devices?5Inter@
  00654	8d 8d 58 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+552]

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0065a	c7 85 6c 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+572], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00664	c6 85 58 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+552], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0066b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00670	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00674	8d 8d 78 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+584]
  0067a	6a 25		 push	 37			; 00000025H

; 1784 : 		_Mysize(0),

  0067c	c7 85 88 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+600], 0

; 1785 : 		_Myres(0)

  00686	c7 85 8c 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+604], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00690	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KFBEECHP@Dongguan?5Jiumutong?5Industry?5Co?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00695	c7 85 70 83 ff
	ff 23 28 00 00	 mov	 DWORD PTR $T957[ebp+576], 10275 ; 00002823H
  0069f	c7 85 74 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+580], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  006a9	c7 85 88 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+600], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  006b3	c7 85 8c 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+604], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  006bd	c6 85 78 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+584], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  006c4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  006c9	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  006cd	8d 8d 98 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+616]
  006d3	6a 0a		 push	 10			; 0000000aH

; 1784 : 		_Mysize(0),

  006d5	c7 85 a8 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+632], 0

; 1785 : 		_Myres(0)

  006df	c7 85 ac 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+636], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  006e9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CPKMOPGJ@Aevoe?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  006ee	c7 85 90 83 ff
	ff 2b 28 00 00	 mov	 DWORD PTR $T957[ebp+608], 10283 ; 0000282bH
  006f8	c7 85 94 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+612], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00702	c7 85 a8 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+632], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0070c	c7 85 ac 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+636], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00716	c6 85 98 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+616], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0071d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00722	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00726	8d 8d b8 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+648]
  0072c	6a 12		 push	 18			; 00000012H

; 1784 : 		_Mysize(0),

  0072e	c7 85 c8 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+664], 0

; 1785 : 		_Myres(0)

  00738	c7 85 cc 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+668], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00742	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FGPOPKKG@Power?5Integrations@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00747	c7 85 b0 83 ff
	ff 31 28 00 00	 mov	 DWORD PTR $T957[ebp+640], 10289 ; 00002831H
  00751	c7 85 b4 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+644], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0075b	c7 85 c8 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+664], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00765	c7 85 cc 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+668], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0076f	c6 85 b8 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+648], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00776	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0077b	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0077f	8d 8d d8 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+680]
  00785	6a 0d		 push	 13			; 0000000dH

; 1784 : 		_Mysize(0),

  00787	c7 85 e8 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+696], 0

; 1785 : 		_Myres(0)

  00791	c7 85 ec 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+700], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0079b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PPNLIHLM@Oculus?5VR?5LLC@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  007a0	c7 85 d0 83 ff
	ff 33 28 00 00	 mov	 DWORD PTR $T957[ebp+672], 10291 ; 00002833H
  007aa	c7 85 d4 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+676], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  007b4	c7 85 e8 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+696], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  007be	c7 85 ec 83 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+700], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  007c8	c6 85 d8 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+680], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  007cf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  007d4	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  007d8	8d 8d f8 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+712]
  007de	6a 25		 push	 37			; 00000025H

; 1784 : 		_Mysize(0),

  007e0	c7 85 08 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+728], 0

; 1785 : 		_Myres(0)

  007ea	c7 85 0c 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+732], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  007f4	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GMANIEBL@HIGH?5TEK?5HARNESS?5ENTERPRISE?5CO?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  007f9	c7 85 f0 83 ff
	ff 3c 28 00 00	 mov	 DWORD PTR $T957[ebp+704], 10300 ; 0000283cH
  00803	c7 85 f4 83 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+708], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0080d	c7 85 08 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+728], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00817	c7 85 0c 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+732], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00821	c6 85 f8 83 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+712], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00828	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0082d	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00831	c7 85 10 84 ff
	ff 4c 28 00 00	 mov	 DWORD PTR $T957[ebp+736], 10316 ; 0000284cH
  0083b	c7 85 14 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+740], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00845	6a 16		 push	 22			; 00000016H

; 1784 : 		_Mysize(0),

  00847	c7 85 28 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+760], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00851	8d 8d 18 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+744]

; 1785 : 		_Myres(0)

  00857	c7 85 2c 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+764], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00861	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KGNDOHL@Full?5in?5Hope?5Co?4?0?5Ltd?4@

; 3976 : 		_My_data._Mysize = 0;

  00866	c7 85 28 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+760], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00870	c7 85 2c 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+764], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0087a	c6 85 18 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+744], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00881	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00886	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0088a	8d 8d 38 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+776]
  00890	6a 14		 push	 20			; 00000014H

; 1784 : 		_Mysize(0),

  00892	c7 85 48 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+792], 0

; 1785 : 		_Myres(0)

  0089c	c7 85 4c 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+796], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  008a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PKMDPELO@Quanta?5Computer?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  008ab	c7 85 30 84 ff
	ff 08 04 00 00	 mov	 DWORD PTR $T957[ebp+768], 1032 ; 00000408H
  008b5	c7 85 34 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+772], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  008bf	c7 85 48 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+792], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  008c9	c7 85 4c 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+796], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  008d3	c6 85 38 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+776], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  008da	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  008df	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  008e3	8d 8d 58 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+808]
  008e9	6a 0f		 push	 15			; 0000000fH

; 1784 : 		_Mysize(0),

  008eb	c7 85 68 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+824], 0

; 1785 : 		_Myres(0)

  008f5	c7 85 6c 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+828], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  008ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KPLBOCAE@NEC?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00904	c7 85 50 84 ff
	ff 09 04 00 00	 mov	 DWORD PTR $T957[ebp+800], 1033 ; 00000409H
  0090e	c7 85 54 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+804], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00918	c7 85 68 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+824], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00922	c7 85 6c 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+828], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0092c	c6 85 58 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+808], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00933	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00938	c6 45 fc 33	 mov	 BYTE PTR __$EHRec$[ebp+8], 51 ; 00000033H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0093c	8d 8d 78 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+840]
  00942	6a 16		 push	 22			; 00000016H

; 1784 : 		_Mysize(0),

  00944	c7 85 88 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+856], 0

; 1785 : 		_Myres(0)

  0094e	c7 85 8c 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+860], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00958	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JCNGEJDK@Weltrend?5Semiconductor@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0095d	c7 85 70 84 ff
	ff 0b 04 00 00	 mov	 DWORD PTR $T957[ebp+832], 1035 ; 0000040bH
  00967	c7 85 74 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+836], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00971	c7 85 88 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+856], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0097b	c7 85 8c 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+860], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00985	c6 85 78 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+840], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0098c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00991	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+8], 53 ; 00000035H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00995	8d 8d 98 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+872]
  0099b	6a 16		 push	 22			; 00000016H

; 1784 : 		_Mysize(0),

  0099d	c7 85 a8 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+888], 0

; 1785 : 		_Myres(0)

  009a7	c7 85 ac 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+892], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  009b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LEHBDMGE@VIA?5Technologies?0?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  009b6	c7 85 90 84 ff
	ff 0d 04 00 00	 mov	 DWORD PTR $T957[ebp+864], 1037 ; 0000040dH
  009c0	c7 85 94 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+868], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  009ca	c7 85 a8 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+888], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  009d4	c7 85 ac 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+892], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  009de	c6 85 98 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+872], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  009e5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  009ea	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  009ee	8d 8d b8 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+904]
  009f4	6a 1a		 push	 26			; 0000001aH

; 1784 : 		_Mysize(0),

  009f6	c7 85 c8 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+920], 0

; 1785 : 		_Myres(0)

  00a00	c7 85 cc 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+924], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00a0a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GLAIPGJA@Seeed?5Technology?5Co?4?0?5Ltd?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00a0f	c7 85 b0 84 ff
	ff 86 28 00 00	 mov	 DWORD PTR $T957[ebp+896], 10374 ; 00002886H
  00a19	c7 85 b4 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+900], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00a23	c7 85 c8 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+920], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00a2d	c7 85 cc 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+924], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00a37	c6 85 b8 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+904], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00a3e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00a43	c6 45 fc 39	 mov	 BYTE PTR __$EHRec$[ebp+8], 57 ; 00000039H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00a47	8d 8d d8 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+936]
  00a4d	6a 09		 push	 9

; 1784 : 		_Mysize(0),

  00a4f	c7 85 e8 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+952], 0

; 1785 : 		_Myres(0)

  00a59	c7 85 ec 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+956], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00a63	68 00 00 00 00	 push	 OFFSET ??_C@_09ILDBIJFO@Specwerkz@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00a68	c7 85 d0 84 ff
	ff 87 28 00 00	 mov	 DWORD PTR $T957[ebp+928], 10375 ; 00002887H
  00a72	c7 85 d4 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+932], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00a7c	c7 85 e8 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+952], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00a86	c7 85 ec 84 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+956], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00a90	c6 85 d8 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+936], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00a97	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00a9c	c6 45 fc 3b	 mov	 BYTE PTR __$EHRec$[ebp+8], 59 ; 0000003bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00aa0	8d 8d f8 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+968]
  00aa6	6a 10		 push	 16			; 00000010H

; 1784 : 		_Mysize(0),

  00aa8	c7 85 08 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+984], 0

; 1785 : 		_Myres(0)

  00ab2	c7 85 0c 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+988], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00abc	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DMJKNCDK@MCCI?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00ac1	c7 85 f0 84 ff
	ff 0e 04 00 00	 mov	 DWORD PTR $T957[ebp+960], 1038 ; 0000040eH
  00acb	c7 85 f4 84 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+964], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00ad5	c7 85 08 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+984], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00adf	c7 85 0c 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+988], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00ae9	c6 85 f8 84 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+968], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00af0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00af5	c6 45 fc 3d	 mov	 BYTE PTR __$EHRec$[ebp+8], 61 ; 0000003dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00af9	8d 8d 18 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1000]
  00aff	6a 16		 push	 22			; 00000016H

; 1784 : 		_Mysize(0),

  00b01	c7 85 28 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1016], 0

; 1785 : 		_Myres(0)

  00b0b	c7 85 2c 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1020], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00b15	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CAOGFENG@Voxx?5Accessories?5Corp?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00b1a	c7 85 10 85 ff
	ff 8f 28 00 00	 mov	 DWORD PTR $T957[ebp+992], 10383 ; 0000288fH
  00b24	c7 85 14 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+996], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00b2e	c7 85 28 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1016], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00b38	c7 85 2c 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1020], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00b42	c6 85 18 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1000], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00b49	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00b4e	c6 45 fc 3f	 mov	 BYTE PTR __$EHRec$[ebp+8], 63 ; 0000003fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00b52	8d 8d 38 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1032]
  00b58	6a 0c		 push	 12			; 0000000cH

; 1784 : 		_Mysize(0),

  00b5a	c7 85 48 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1048], 0

; 1785 : 		_Myres(0)

  00b64	c7 85 4c 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1052], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00b6e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HBBMPLAJ@BUFFALO?5INC?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00b73	c7 85 30 85 ff
	ff 11 04 00 00	 mov	 DWORD PTR $T957[ebp+1024], 1041 ; 00000411H
  00b7d	c7 85 34 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1028], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00b87	c7 85 48 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1048], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00b91	c7 85 4c 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1052], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00b9b	c6 85 38 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1032], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00ba2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00ba7	c6 45 fc 41	 mov	 BYTE PTR __$EHRec$[ebp+8], 65 ; 00000041H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00bab	8d 8d 58 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1064]
  00bb1	6a 1e		 push	 30			; 0000001eH

; 1784 : 		_Mysize(0),

  00bb3	c7 85 68 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1080], 0

; 1785 : 		_Myres(0)

  00bbd	c7 85 6c 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1084], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00bc7	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EJPGPDCC@Giga?9Byte?5Technology?5Co?4?0?5Ltd?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00bcc	c7 85 50 85 ff
	ff 14 04 00 00	 mov	 DWORD PTR $T957[ebp+1056], 1044 ; 00000414H
  00bd6	c7 85 54 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1060], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00be0	c7 85 68 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1080], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00bea	c7 85 6c 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1084], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00bf4	c6 85 58 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1064], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00bfb	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00c00	c6 45 fc 43	 mov	 BYTE PTR __$EHRec$[ebp+8], 67 ; 00000043H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00c04	8d 8d 78 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1096]
  00c0a	6a 18		 push	 24			; 00000018H

; 1784 : 		_Mysize(0),

  00c0c	c7 85 88 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1112], 0

; 1785 : 		_Myres(0)

  00c16	c7 85 8c 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1116], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00c20	c7 85 70 85 ff
	ff 16 04 00 00	 mov	 DWORD PTR $T957[ebp+1088], 1046 ; 00000416H
  00c2a	c7 85 74 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1092], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00c34	c7 85 88 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1112], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00c3e	c7 85 8c 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1116], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00c48	c6 85 78 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1096], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00c4f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BBLEBCKI@Nuvoton?5Technology?5Corp?4@
  00c54	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00c59	c6 45 fc 45	 mov	 BYTE PTR __$EHRec$[ebp+8], 69 ; 00000045H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00c5d	8d 8d 98 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1128]
  00c63	6a 11		 push	 17			; 00000011H

; 1784 : 		_Mysize(0),

  00c65	c7 85 a8 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1144], 0

; 1785 : 		_Myres(0)

  00c6f	c7 85 ac 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1148], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00c79	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DCODMMHE@Valve?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00c7e	c7 85 90 85 ff
	ff de 28 00 00	 mov	 DWORD PTR $T957[ebp+1120], 10462 ; 000028deH
  00c88	c7 85 94 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1124], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00c92	c7 85 a8 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1144], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00c9c	c7 85 ac 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1148], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00ca6	c6 85 98 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1128], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00cad	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00cb2	c6 45 fc 47	 mov	 BYTE PTR __$EHRec$[ebp+8], 71 ; 00000047H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00cb6	8d 8d b8 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1160]
  00cbc	6a 27		 push	 39			; 00000027H

; 1784 : 		_Mysize(0),

  00cbe	c7 85 c8 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1176], 0

; 1785 : 		_Myres(0)

  00cc8	c7 85 cc 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1180], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00cd2	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@PBJBEILB@Surplus?5Electronic?5Technology?5C@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00cd7	c7 85 b0 85 ff
	ff e2 28 00 00	 mov	 DWORD PTR $T957[ebp+1152], 10466 ; 000028e2H
  00ce1	c7 85 b4 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1156], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00ceb	c7 85 c8 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1176], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00cf5	c7 85 cc 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1180], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00cff	c6 85 b8 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1160], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00d06	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00d0b	c6 45 fc 49	 mov	 BYTE PTR __$EHRec$[ebp+8], 73 ; 00000049H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00d0f	8d 8d d8 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1192]
  00d15	6a 0d		 push	 13			; 0000000dH

; 1784 : 		_Mysize(0),

  00d17	c7 85 e8 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1208], 0

; 1785 : 		_Myres(0)

  00d21	c7 85 ec 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1212], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00d2b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FGAHHGKD@BIAMP?5SYSTEMS@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00d30	c7 85 d0 85 ff
	ff e6 28 00 00	 mov	 DWORD PTR $T957[ebp+1184], 10470 ; 000028e6H
  00d3a	c7 85 d4 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1188], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00d44	c7 85 e8 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1208], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00d4e	c7 85 ec 85 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1212], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00d58	c6 85 d8 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1192], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00d5f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00d64	c6 45 fc 4b	 mov	 BYTE PTR __$EHRec$[ebp+8], 75 ; 0000004bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00d68	8d 8d f8 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1224]
  00d6e	6a 21		 push	 33			; 00000021H

; 1784 : 		_Mysize(0),

  00d70	c7 85 08 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1240], 0

; 1785 : 		_Myres(0)

  00d7a	c7 85 0c 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1244], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00d84	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@POBIGKND@Dongguan?5Vast?5Electronics?5Co?4?0L@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00d89	c7 85 f0 85 ff
	ff ea 28 00 00	 mov	 DWORD PTR $T957[ebp+1216], 10474 ; 000028eaH
  00d93	c7 85 f4 85 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1220], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00d9d	c7 85 08 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1240], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00da7	c7 85 0c 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1244], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00db1	c6 85 f8 85 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1224], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00db8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00dbd	c6 45 fc 4d	 mov	 BYTE PTR __$EHRec$[ebp+8], 77 ; 0000004dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00dc1	8d 8d 18 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1256]
  00dc7	6a 33		 push	 51			; 00000033H

; 1784 : 		_Mysize(0),

  00dc9	c7 85 28 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1272], 0

; 1785 : 		_Myres(0)

  00dd3	c7 85 2c 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1276], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00ddd	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@MBFKODKB@SHEN?5ZHEN?5SHI?5YUAN?5AI?5HARDWARE?5@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00de2	c7 85 10 86 ff
	ff eb 28 00 00	 mov	 DWORD PTR $T957[ebp+1248], 10475 ; 000028ebH
  00dec	c7 85 14 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1252], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00df6	c7 85 28 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1272], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00e00	c7 85 2c 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1276], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00e0a	c6 85 18 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1256], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00e11	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00e16	c6 45 fc 4f	 mov	 BYTE PTR __$EHRec$[ebp+8], 79 ; 0000004fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00e1a	c7 85 48 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1304], 0

; 1785 : 		_Myres(0)

  00e24	c7 85 4c 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1308], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00e2e	c7 85 30 86 ff
	ff 0d 29 00 00	 mov	 DWORD PTR $T957[ebp+1280], 10509 ; 0000290dH
  00e38	c7 85 34 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1284], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00e42	c7 85 48 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1304], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00e4c	c7 85 4c 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1308], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00e56	c6 85 38 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1288], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00e5d	6a 28		 push	 40			; 00000028H
  00e5f	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HIEOMNPE@IBCONN?5Technologies?5?$CIShenzhen?$CJ?5@
  00e64	8d 8d 38 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1288]
  00e6a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00e6f	c6 45 fc 51	 mov	 BYTE PTR __$EHRec$[ebp+8], 81 ; 00000051H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00e73	8d 8d 58 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1320]
  00e79	6a 27		 push	 39			; 00000027H

; 1784 : 		_Mysize(0),

  00e7b	c7 85 68 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1336], 0

; 1785 : 		_Myres(0)

  00e85	c7 85 6c 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1340], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00e8f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HPLDADLK@Pan?5Xin?5Precision?5Electronics?5C@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00e94	c7 85 50 86 ff
	ff 17 29 00 00	 mov	 DWORD PTR $T957[ebp+1312], 10519 ; 00002917H
  00e9e	c7 85 54 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1316], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00ea8	c7 85 68 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1336], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00eb2	c7 85 6c 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1340], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00ebc	c6 85 58 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1320], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00ec3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00ec8	c6 45 fc 53	 mov	 BYTE PTR __$EHRec$[ebp+8], 83 ; 00000053H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00ecc	8d 8d 78 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1352]
  00ed2	6a 19		 push	 25			; 00000019H

; 1784 : 		_Mysize(0),

  00ed4	c7 85 88 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1368], 0

; 1785 : 		_Myres(0)

  00ede	c7 85 8c 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1372], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00ee8	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PLGMBAEC@Anker?5Innovations?5Limited@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00eed	c7 85 70 86 ff
	ff 1a 29 00 00	 mov	 DWORD PTR $T957[ebp+1344], 10522 ; 0000291aH
  00ef7	c7 85 74 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1348], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00f01	c7 85 88 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1368], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00f0b	c7 85 8c 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1372], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00f15	c6 85 78 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1352], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00f1c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00f21	c6 45 fc 55	 mov	 BYTE PTR __$EHRec$[ebp+8], 85 ; 00000055H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00f25	8d 8d 98 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1384]
  00f2b	6a 0d		 push	 13			; 0000000dH

; 1784 : 		_Mysize(0),

  00f2d	c7 85 a8 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1400], 0

; 1785 : 		_Myres(0)

  00f37	c7 85 ac 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1404], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00f41	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CDIDDBG@Creative?5Labs@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00f46	c7 85 90 86 ff
	ff 1e 04 00 00	 mov	 DWORD PTR $T957[ebp+1376], 1054 ; 0000041eH
  00f50	c7 85 94 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1380], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00f5a	c7 85 a8 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1400], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00f64	c7 85 ac 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1404], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00f6e	c6 85 98 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1384], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00f75	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00f7a	c6 45 fc 57	 mov	 BYTE PTR __$EHRec$[ebp+8], 87 ; 00000057H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00f7e	8d 8d b8 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1416]
  00f84	6a 19		 push	 25			; 00000019H

; 1784 : 		_Mysize(0),

  00f86	c7 85 c8 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1432], 0

; 1785 : 		_Myres(0)

  00f90	c7 85 cc 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1436], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00f9a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KLIICOHE@Peraso?5Technologies?0?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00f9f	c7 85 b0 86 ff
	ff 32 29 00 00	 mov	 DWORD PTR $T957[ebp+1408], 10546 ; 00002932H
  00fa9	c7 85 b4 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1412], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00fb3	c7 85 c8 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1432], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00fbd	c7 85 cc 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1436], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00fc7	c6 85 b8 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1416], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00fce	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  00fd3	c6 45 fc 59	 mov	 BYTE PTR __$EHRec$[ebp+8], 89 ; 00000059H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00fd7	8d 8d d8 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1448]
  00fdd	6a 26		 push	 38			; 00000026H

; 1784 : 		_Mysize(0),

  00fdf	c7 85 e8 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1464], 0

; 1785 : 		_Myres(0)

  00fe9	c7 85 ec 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1468], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00ff3	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LCOLLFLN@Nanjing?5Magewell?5Electronics?5Co@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00ff8	c7 85 d0 86 ff
	ff 35 29 00 00	 mov	 DWORD PTR $T957[ebp+1440], 10549 ; 00002935H
  01002	c7 85 d4 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1444], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0100c	c7 85 e8 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1464], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01016	c7 85 ec 86 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1468], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  01020	c6 85 d8 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1448], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01027	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0102c	c6 45 fc 5b	 mov	 BYTE PTR __$EHRec$[ebp+8], 91 ; 0000005bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01030	c7 85 f0 86 ff
	ff 63 29 00 00	 mov	 DWORD PTR $T957[ebp+1472], 10595 ; 00002963H
  0103a	c7 85 f4 86 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1476], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  01044	c7 85 08 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1496], 0

; 1785 : 		_Myres(0)

  0104e	c7 85 0c 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1500], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01058	6a 1b		 push	 27			; 0000001bH
  0105a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NGDLAMGP@BIO?9key?5International?0?5Inc?4@
  0105f	8d 8d f8 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1480]

; 3976 : 		_My_data._Mysize = 0;

  01065	c7 85 08 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1496], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0106f	c7 85 0c 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1500], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  01079	c6 85 f8 86 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1480], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  01085	c6 45 fc 5d	 mov	 BYTE PTR __$EHRec$[ebp+8], 93 ; 0000005dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01089	8d 8d 18 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1512]
  0108f	6a 0e		 push	 14			; 0000000eH

; 1784 : 		_Mysize(0),

  01091	c7 85 28 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1528], 0

; 1785 : 		_Myres(0)

  0109b	c7 85 2c 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1532], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  010a5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GCMABGEN@Microchip?9SMSC@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  010aa	c7 85 10 87 ff
	ff 24 04 00 00	 mov	 DWORD PTR $T957[ebp+1504], 1060 ; 00000424H
  010b4	c7 85 14 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1508], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  010be	c7 85 28 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1528], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  010c8	c7 85 2c 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1532], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  010d2	c6 85 18 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1512], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  010d9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  010de	c6 45 fc 5f	 mov	 BYTE PTR __$EHRec$[ebp+8], 95 ; 0000005fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  010e2	8d 8d 38 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1544]
  010e8	6a 11		 push	 17			; 00000011H

; 1784 : 		_Mysize(0),

  010ea	c7 85 48 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1560], 0

; 1785 : 		_Myres(0)

  010f4	c7 85 4c 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1564], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  010fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CHFHJJHL@Xacti?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01103	c7 85 30 87 ff
	ff 6b 29 00 00	 mov	 DWORD PTR $T957[ebp+1536], 10603 ; 0000296bH
  0110d	c7 85 34 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1540], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  01117	c7 85 48 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1560], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01121	c7 85 4c 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1564], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0112b	c6 85 38 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1544], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01132	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  01137	c6 45 fc 61	 mov	 BYTE PTR __$EHRec$[ebp+8], 97 ; 00000061H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0113b	8d 8d 58 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1576]
  01141	6a 23		 push	 35			; 00000023H

; 1784 : 		_Mysize(0),

  01143	c7 85 68 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1592], 0

; 1785 : 		_Myres(0)

  0114d	c7 85 6c 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1596], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01157	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MAEFHCII@Shenzhen?5Zowee?5Technology?5Co?4?0?5@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0115c	c7 85 50 87 ff
	ff 77 29 00 00	 mov	 DWORD PTR $T957[ebp+1568], 10615 ; 00002977H
  01166	c7 85 54 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1572], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  01170	c7 85 68 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1592], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0117a	c7 85 6c 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1596], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  01184	c6 85 58 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1576], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0118b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  01190	c6 45 fc 63	 mov	 BYTE PTR __$EHRec$[ebp+8], 99 ; 00000063H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01194	8d 8d 78 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1608]
  0119a	6a 1c		 push	 28			; 0000001cH

; 1784 : 		_Mysize(0),

  0119c	c7 85 88 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1624], 0

; 1785 : 		_Myres(0)

  011a6	c7 85 8c 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1628], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  011b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MAFKEILE@Integrated?5Device?5Technology@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  011b5	c7 85 70 87 ff
	ff 26 04 00 00	 mov	 DWORD PTR $T957[ebp+1600], 1062 ; 00000426H
  011bf	c7 85 74 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1604], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  011c9	c7 85 88 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1624], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  011d3	c7 85 8c 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1628], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  011dd	c6 85 78 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1608], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  011e4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  011e9	c6 45 fc 65	 mov	 BYTE PTR __$EHRec$[ebp+8], 101 ; 00000065H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  011ed	8d 8d 98 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1640]
  011f3	6a 1a		 push	 26			; 0000001aH

; 1784 : 		_Mysize(0),

  011f5	c7 85 a8 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1656], 0

; 1785 : 		_Myres(0)

  011ff	c7 85 ac 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1660], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01209	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ENHANOON@ADPlaus?5Technology?5Limited@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0120e	c7 85 90 87 ff
	ff 93 29 00 00	 mov	 DWORD PTR $T957[ebp+1632], 10643 ; 00002993H
  01218	c7 85 94 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1636], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  01222	c7 85 a8 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1656], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0122c	c7 85 ac 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1660], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  01236	c6 85 98 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1640], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0123d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  01242	c6 45 fc 67	 mov	 BYTE PTR __$EHRec$[ebp+8], 103 ; 00000067H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01246	c7 85 b0 87 ff
	ff 29 04 00 00	 mov	 DWORD PTR $T957[ebp+1664], 1065 ; 00000429H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01250	6a 11		 push	 17			; 00000011H

; 1784 : 		_Mysize(0),

  01252	c7 85 c8 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1688], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0125c	8d 8d b8 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1672]

; 1785 : 		_Myres(0)

  01262	c7 85 cc 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1692], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0126c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEAFLDIF@Cirrus?5Logic?5Inc?4@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01271	c7 85 b4 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1668], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0127b	c7 85 c8 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1688], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01285	c7 85 cc 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1692], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0128f	c6 85 b8 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1672], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01296	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0129b	c6 45 fc 69	 mov	 BYTE PTR __$EHRec$[ebp+8], 105 ; 00000069H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0129f	8d 8d d8 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1704]
  012a5	6a 25		 push	 37			; 00000025H

; 1784 : 		_Mysize(0),

  012a7	c7 85 e8 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1720], 0

; 1785 : 		_Myres(0)

  012b1	c7 85 ec 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1724], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  012bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NHGMKJBI@Union?5Electric?5Plug?5?$CG?5Connector@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  012c0	c7 85 d0 87 ff
	ff a1 29 00 00	 mov	 DWORD PTR $T957[ebp+1696], 10657 ; 000029a1H
  012ca	c7 85 d4 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1700], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  012d4	c7 85 e8 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1720], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  012de	c7 85 ec 87 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1724], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  012e8	c6 85 d8 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1704], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  012ef	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  012f4	c6 45 fc 6b	 mov	 BYTE PTR __$EHRec$[ebp+8], 107 ; 0000006bH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  012f8	8d 8d f8 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1736]
  012fe	6a 0b		 push	 11			; 0000000bH

; 1784 : 		_Mysize(0),

  01300	c7 85 08 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1752], 0

; 1785 : 		_Myres(0)

  0130a	c7 85 0c 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1756], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01314	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HIPFEPEC@Canova?5Tech@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01319	c7 85 f0 87 ff
	ff b2 29 00 00	 mov	 DWORD PTR $T957[ebp+1728], 10674 ; 000029b2H
  01323	c7 85 f4 87 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1732], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0132d	c7 85 08 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1752], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01337	c7 85 0c 88 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1756], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  01341	c6 85 f8 87 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1736], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01348	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0134d	c6 45 fc 6d	 mov	 BYTE PTR __$EHRec$[ebp+8], 109 ; 0000006dH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01351	8d 8d 18 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1768]
  01357	6a 0d		 push	 13			; 0000000dH

; 1784 : 		_Mysize(0),

  01359	c7 85 28 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1784], 0

; 1785 : 		_Myres(0)

  01363	c7 85 2c 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1788], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0136d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MCBAPFNP@Silicon?5Works@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01372	c7 85 10 88 ff
	ff bd 29 00 00	 mov	 DWORD PTR $T957[ebp+1760], 10685 ; 000029bdH
  0137c	c7 85 14 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1764], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  01386	c7 85 28 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1784], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01390	c7 85 2c 88 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1788], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0139a	c6 85 18 88 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1768], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  013a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  013a6	c6 45 fc 6f	 mov	 BYTE PTR __$EHRec$[ebp+8], 111 ; 0000006fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  013aa	8d 8d 38 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1800]
  013b0	6a 22		 push	 34			; 00000022H

; 1784 : 		_Mysize(0),

  013b2	c7 85 48 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1816], 0

; 1785 : 		_Myres(0)

  013bc	c7 85 4c 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1820], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  013c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CCJOOIOC@HANRICO?5ANFU?5ELECTRONICS?5CO?4?0?5L@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  013cb	c7 85 30 88 ff
	ff c7 29 00 00	 mov	 DWORD PTR $T957[ebp+1792], 10695 ; 000029c7H
  013d5	c7 85 34 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1796], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  013df	c7 85 48 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1816], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  013e9	c7 85 4c 88 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1820], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  013f3	c6 85 38 88 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1800], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  013fa	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  013ff	c6 45 fc 71	 mov	 BYTE PTR __$EHRec$[ebp+8], 113 ; 00000071H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01403	8d 8d 58 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1832]
  01409	6a 0c		 push	 12			; 0000000cH

; 1784 : 		_Mysize(0),

  0140b	c7 85 68 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1848], 0

; 1785 : 		_Myres(0)

  01415	c7 85 6c 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1852], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0141f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LCFLMOEL@Kodak?5Alaris@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  01424	c7 85 50 88 ff
	ff cc 29 00 00	 mov	 DWORD PTR $T957[ebp+1824], 10700 ; 000029ccH
  0142e	c7 85 54 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1828], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  01438	c7 85 68 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1848], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01442	c7 85 6c 88 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1852], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0144c	c6 85 58 88 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1832], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  01453	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  01458	c6 45 fc 73	 mov	 BYTE PTR __$EHRec$[ebp+8], 115 ; 00000073H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2185 : 		assign(_Ptr);

  0145c	8d 8d 78 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1864]

; 1784 : 		_Mysize(0),

  01462	c7 85 88 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1880], 0

; 1785 : 		_Myres(0)

  0146c	c7 85 8c 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1884], 0

; 2185 : 		assign(_Ptr);

  01476	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HMEABDKN@Richtek?5Technology?5Corporation@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0147b	c7 85 70 88 ff
	ff cf 29 00 00	 mov	 DWORD PTR $T957[ebp+1856], 10703 ; 000029cfH
  01485	c7 85 74 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1860], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0148f	c7 85 88 88 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T957[ebp+1880], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  01499	c7 85 8c 88 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T957[ebp+1884], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  014a3	c6 85 78 88 ff
	ff 00		 mov	 BYTE PTR $T957[ebp+1864], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2185 : 		assign(_Ptr);

  014aa	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  014af	c6 45 fc 75	 mov	 BYTE PTR __$EHRec$[ebp+8], 117 ; 00000075H
  014b3	8d 85 c8 6a ff
	ff		 lea	 eax, DWORD PTR $T240[ebp]
  014b9	68 00 00 00 00	 push	 OFFSET ??_C@_09PPIHKMBF@Molex?5LLC@
  014be	50		 push	 eax
  014bf	8d 8d 90 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1888]
  014c5	c7 85 c8 6a ff
	ff 2f 04 00 00	 mov	 DWORD PTR $T240[ebp], 1071 ; 0000042fH
  014cf	c7 85 cc 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T240[ebp+4], 0
  014d9	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  014de	c6 45 fc 76	 mov	 BYTE PTR __$EHRec$[ebp+8], 118 ; 00000076H
  014e2	8d 85 28 81 ff
	ff		 lea	 eax, DWORD PTR $T956[ebp]
  014e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FNPHKDLG@Shenzhen?5iBoard?5Technology?5Co?4?0@
  014ed	50		 push	 eax
  014ee	8d 8d b0 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1920]
  014f4	c7 85 28 81 ff
	ff db 29 00 00	 mov	 DWORD PTR $T956[ebp], 10715 ; 000029dbH
  014fe	c7 85 2c 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T956[ebp+4], 0
  01508	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0150d	c6 45 fc 77	 mov	 BYTE PTR __$EHRec$[ebp+8], 119 ; 00000077H
  01511	8d 85 20 81 ff
	ff		 lea	 eax, DWORD PTR $T955[ebp]
  01517	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HKMBBPHD@SMIT?$CIHK?$CJ?5Limited@
  0151c	50		 push	 eax
  0151d	8d 8d d0 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1952]
  01523	c7 85 20 81 ff
	ff df 29 00 00	 mov	 DWORD PTR $T955[ebp], 10719 ; 000029dfH
  0152d	c7 85 24 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T955[ebp+4], 0
  01537	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0153c	c6 45 fc 78	 mov	 BYTE PTR __$EHRec$[ebp+8], 120 ; 00000078H
  01540	8d 85 18 81 ff
	ff		 lea	 eax, DWORD PTR $T954[ebp]
  01546	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BGJHIBOH@Fujitsu?5Component?5Limited@
  0154b	50		 push	 eax
  0154c	8d 8d f0 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1984]
  01552	c7 85 18 81 ff
	ff 30 04 00 00	 mov	 DWORD PTR $T954[ebp], 1072 ; 00000430H
  0155c	c7 85 1c 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T954[ebp+4], 0
  01566	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0156b	c6 45 fc 79	 mov	 BYTE PTR __$EHRec$[ebp+8], 121 ; 00000079H
  0156f	8d 85 10 81 ff
	ff		 lea	 eax, DWORD PTR $T953[ebp]
  01575	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GPCAKLAL@Dongguan?5Kechenda?5Electronic?5Te@
  0157a	50		 push	 eax
  0157b	8d 8d 10 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2016]
  01581	c7 85 10 81 ff
	ff e5 29 00 00	 mov	 DWORD PTR $T953[ebp], 10725 ; 000029e5H
  0158b	c7 85 14 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T953[ebp+4], 0
  01595	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  0159a	c6 45 fc 7a	 mov	 BYTE PTR __$EHRec$[ebp+8], 122 ; 0000007aH
  0159e	8d 85 08 81 ff
	ff		 lea	 eax, DWORD PTR $T952[ebp]
  015a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LNNAFMPA@Fengshun?5Peiying?5Electro?9Acoust@
  015a9	50		 push	 eax
  015aa	8d 8d 30 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2048]
  015b0	c7 85 08 81 ff
	ff e6 29 00 00	 mov	 DWORD PTR $T952[ebp], 10726 ; 000029e6H
  015ba	c7 85 0c 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T952[ebp+4], 0
  015c4	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  015c9	c6 45 fc 7b	 mov	 BYTE PTR __$EHRec$[ebp+8], 123 ; 0000007bH
  015cd	8d 85 00 81 ff
	ff		 lea	 eax, DWORD PTR $T951[ebp]
  015d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MFHFJMGD@MD?5ELEKTRONIK?5GmbH@
  015d8	50		 push	 eax
  015d9	8d 8d 50 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2080]
  015df	c7 85 00 81 ff
	ff f8 29 00 00	 mov	 DWORD PTR $T951[ebp], 10744 ; 000029f8H
  015e9	c7 85 04 81 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T951[ebp+4], 0
  015f3	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  015f8	c6 45 fc 7c	 mov	 BYTE PTR __$EHRec$[ebp+8], 124 ; 0000007cH
  015fc	c7 85 f8 80 ff
	ff fc 29 00 00	 mov	 DWORD PTR $T950[ebp], 10748 ; 000029fcH
  01606	c7 85 fc 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T950[ebp+4], 0
  01610	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NGMFFAHI@Namsung?5Corporation@
  01615	8d 85 f8 80 ff
	ff		 lea	 eax, DWORD PTR $T950[ebp]
  0161b	50		 push	 eax
  0161c	8d 8d 70 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2112]
  01622	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  01627	c6 45 fc 7d	 mov	 BYTE PTR __$EHRec$[ebp+8], 125 ; 0000007dH
  0162b	8d 85 f0 80 ff
	ff		 lea	 eax, DWORD PTR $T949[ebp]
  01631	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IGDLEFN@Bad?5Elf?0?5LLC@
  01636	50		 push	 eax
  01637	8d 8d 90 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2144]
  0163d	c7 85 f0 80 ff
	ff fd 29 00 00	 mov	 DWORD PTR $T949[ebp], 10749 ; 000029fdH
  01647	c7 85 f4 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T949[ebp+4], 0
  01651	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  01656	c6 45 fc 7e	 mov	 BYTE PTR __$EHRec$[ebp+8], 126 ; 0000007eH
  0165a	8d 85 e8 80 ff
	ff		 lea	 eax, DWORD PTR $T948[ebp]
  01660	68 00 00 00 00	 push	 OFFSET ??_C@_05PNPDIAAL@Kanex@
  01665	50		 push	 eax
  01666	8d 8d b0 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2176]
  0166c	c7 85 e8 80 ff
	ff 14 2a 00 00	 mov	 DWORD PTR $T948[ebp], 10772 ; 00002a14H
  01676	c7 85 ec 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T948[ebp+4], 0
  01680	e8 00 00 00 00	 call	 ??$?0_KAAY05$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY05$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[6],0>
  01685	c6 45 fc 7f	 mov	 BYTE PTR __$EHRec$[ebp+8], 127 ; 0000007fH
  01689	8d 85 e0 80 ff
	ff		 lea	 eax, DWORD PTR $T947[ebp]
  0168f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IBCBCBNB@Oxford?5Nanopore?5Technologies@
  01694	50		 push	 eax
  01695	8d 8d d0 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2208]
  0169b	c7 85 e0 80 ff
	ff 1d 2a 00 00	 mov	 DWORD PTR $T947[ebp], 10781 ; 00002a1dH
  016a5	c7 85 e4 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T947[ebp+4], 0
  016af	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  016b4	c6 45 fc 80	 mov	 BYTE PTR __$EHRec$[ebp+8], 128 ; 00000080H
  016b8	8d 85 d8 80 ff
	ff		 lea	 eax, DWORD PTR $T946[ebp]
  016be	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CLOPGLKP@Lucent?5Trans?5Electronics?5Co?4?0?5L@
  016c3	50		 push	 eax
  016c4	8d 8d f0 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2240]
  016ca	c7 85 d8 80 ff
	ff 1f 2a 00 00	 mov	 DWORD PTR $T946[ebp], 10783 ; 00002a1fH
  016d4	c7 85 dc 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T946[ebp+4], 0
  016de	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  016e3	c6 45 fc 81	 mov	 BYTE PTR __$EHRec$[ebp+8], 129 ; 00000081H
  016e7	8d 85 d0 80 ff
	ff		 lea	 eax, DWORD PTR $T945[ebp]
  016ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LOKMNIBG@GUOGUANG?5GROUP?5CO?4?0?5LTD?4@
  016f2	50		 push	 eax
  016f3	8d 8d 10 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2272]
  016f9	c7 85 d0 80 ff
	ff 20 2a 00 00	 mov	 DWORD PTR $T945[ebp], 10784 ; 00002a20H
  01703	c7 85 d4 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T945[ebp+4], 0
  0170d	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  01712	c6 45 fc 82	 mov	 BYTE PTR __$EHRec$[ebp+8], 130 ; 00000082H
  01716	8d 85 c8 80 ff
	ff		 lea	 eax, DWORD PTR $T944[ebp]
  0171c	68 00 00 00 00	 push	 OFFSET ??_C@_06DABCOOPL@CNPLUS@
  01721	50		 push	 eax
  01722	8d 8d 30 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2304]
  01728	c7 85 c8 80 ff
	ff 24 2a 00 00	 mov	 DWORD PTR $T944[ebp], 10788 ; 00002a24H
  01732	c7 85 cc 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T944[ebp+4], 0
  0173c	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  01741	c6 45 fc 83	 mov	 BYTE PTR __$EHRec$[ebp+8], 131 ; 00000083H
  01745	8d 85 c0 80 ff
	ff		 lea	 eax, DWORD PTR $T943[ebp]
  0174b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IHDCOFB@Fourstar?5Group@
  01750	50		 push	 eax
  01751	8d 8d 50 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2336]
  01757	c7 85 c0 80 ff
	ff 25 2a 00 00	 mov	 DWORD PTR $T943[ebp], 10789 ; 00002a25H
  01761	c7 85 c4 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T943[ebp+4], 0
  0176b	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  01770	c6 45 fc 84	 mov	 BYTE PTR __$EHRec$[ebp+8], 132 ; 00000084H
  01774	8d 85 b8 80 ff
	ff		 lea	 eax, DWORD PTR $T942[ebp]
  0177a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BECABIBB@Tragant?5International?5Co?4?0?5Ltd?4@
  0177f	50		 push	 eax
  01780	8d 8d 70 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2368]
  01786	c7 85 b8 80 ff
	ff 26 2a 00 00	 mov	 DWORD PTR $T942[ebp], 10790 ; 00002a26H
  01790	c7 85 bc 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T942[ebp+4], 0
  0179a	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0179f	c6 45 fc 85	 mov	 BYTE PTR __$EHRec$[ebp+8], 133 ; 00000085H
  017a3	c7 85 b0 80 ff
	ff 27 2a 00 00	 mov	 DWORD PTR $T941[ebp], 10791 ; 00002a27H
  017ad	c7 85 b4 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T941[ebp+4], 0
  017b7	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@JLJLPMN@DongGuan?5LianGang?5Optoelectroni@
  017bc	8d 85 b0 80 ff
	ff		 lea	 eax, DWORD PTR $T941[ebp]
  017c2	50		 push	 eax
  017c3	8d 8d 90 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2400]
  017c9	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  017ce	c6 45 fc 86	 mov	 BYTE PTR __$EHRec$[ebp+8], 134 ; 00000086H
  017d2	8d 85 a8 80 ff
	ff		 lea	 eax, DWORD PTR $T940[ebp]
  017d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PHHOJNEG@Atrust?5Computer?5Corp?4@
  017dd	50		 push	 eax
  017de	8d 8d b0 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2432]
  017e4	c7 85 a8 80 ff
	ff 2d 2a 00 00	 mov	 DWORD PTR $T940[ebp], 10797 ; 00002a2dH
  017ee	c7 85 ac 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T940[ebp+4], 0
  017f8	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  017fd	c6 45 fc 87	 mov	 BYTE PTR __$EHRec$[ebp+8], 135 ; 00000087H
  01801	8d 85 a0 80 ff
	ff		 lea	 eax, DWORD PTR $T939[ebp]
  01807	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LPEJEGHN@Shanghai?5Zhaoxin?5Semiconductor?5@
  0180c	50		 push	 eax
  0180d	8d 8d d0 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2464]
  01813	c7 85 a0 80 ff
	ff 2e 2a 00 00	 mov	 DWORD PTR $T939[ebp], 10798 ; 00002a2eH
  0181d	c7 85 a4 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T939[ebp+4], 0
  01827	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0182c	c6 45 fc 88	 mov	 BYTE PTR __$EHRec$[ebp+8], 136 ; 00000088H
  01830	8d 85 98 80 ff
	ff		 lea	 eax, DWORD PTR $T938[ebp]
  01836	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PDGAJDKJ@Advanced?5Micro?5Devices@
  0183b	50		 push	 eax
  0183c	8d 8d f0 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2496]
  01842	c7 85 98 80 ff
	ff 38 04 00 00	 mov	 DWORD PTR $T938[ebp], 1080 ; 00000438H
  0184c	c7 85 9c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T938[ebp+4], 0
  01856	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0185b	c6 45 fc 89	 mov	 BYTE PTR __$EHRec$[ebp+8], 137 ; 00000089H
  0185f	8d 85 90 80 ff
	ff		 lea	 eax, DWORD PTR $T937[ebp]
  01865	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PAIKCFMH@RTD?5Embedded?5Technologies?0?5Inc?4@
  0186a	50		 push	 eax
  0186b	8d 8d 10 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2528]
  01871	c7 85 90 80 ff
	ff 37 2a 00 00	 mov	 DWORD PTR $T937[ebp], 10807 ; 00002a37H
  0187b	c7 85 94 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T937[ebp+4], 0
  01885	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0188a	c6 45 fc 8a	 mov	 BYTE PTR __$EHRec$[ebp+8], 138 ; 0000008aH
  0188e	8d 85 88 80 ff
	ff		 lea	 eax, DWORD PTR $T936[ebp]
  01894	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FFEEONBI@Shenzhen?5Choseal?5Industrial?5Co?4@
  01899	50		 push	 eax
  0189a	8d 8d 30 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2560]
  018a0	c7 85 88 80 ff
	ff 40 2a 00 00	 mov	 DWORD PTR $T936[ebp], 10816 ; 00002a40H
  018aa	c7 85 8c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T936[ebp+4], 0
  018b4	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  018b9	c6 45 fc 8b	 mov	 BYTE PTR __$EHRec$[ebp+8], 139 ; 0000008bH
  018bd	8d 85 80 80 ff
	ff		 lea	 eax, DWORD PTR $T935[ebp]
  018c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HIHOEHDP@Canyon?5Semiconductor@
  018c8	50		 push	 eax
  018c9	8d 8d 50 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2592]
  018cf	c7 85 80 80 ff
	ff 41 2a 00 00	 mov	 DWORD PTR $T935[ebp], 10817 ; 00002a41H
  018d9	c7 85 84 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T935[ebp+4], 0
  018e3	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  018e8	c6 45 fc 8c	 mov	 BYTE PTR __$EHRec$[ebp+8], 140 ; 0000008cH
  018ec	8d 85 78 80 ff
	ff		 lea	 eax, DWORD PTR $T934[ebp]
  018f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OKAPOPFL@Spectra7?5Microsystems?5Corp?4@
  018f7	50		 push	 eax
  018f8	8d 8d 70 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2624]
  018fe	c7 85 78 80 ff
	ff 42 2a 00 00	 mov	 DWORD PTR $T934[ebp], 10818 ; 00002a42H
  01908	c7 85 7c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T934[ebp+4], 0
  01912	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  01917	c6 45 fc 8d	 mov	 BYTE PTR __$EHRec$[ebp+8], 141 ; 0000008dH
  0191b	8d 85 70 80 ff
	ff		 lea	 eax, DWORD PTR $T933[ebp]
  01921	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JKGOBHKI@Meizu?5Technology?5Co?4?0?5Ltd?4@
  01926	50		 push	 eax
  01927	8d 8d 90 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2656]
  0192d	c7 85 70 80 ff
	ff 45 2a 00 00	 mov	 DWORD PTR $T933[ebp], 10821 ; 00002a45H
  01937	c7 85 74 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T933[ebp+4], 0
  01941	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  01946	c6 45 fc 8e	 mov	 BYTE PTR __$EHRec$[ebp+8], 142 ; 0000008eH
  0194a	c7 85 68 80 ff
	ff 4d 2a 00 00	 mov	 DWORD PTR $T932[ebp], 10829 ; 00002a4dH
  01954	c7 85 6c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T932[ebp+4], 0
  0195e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NHMOPNIL@Wilder?5Technologies@
  01963	8d 85 68 80 ff
	ff		 lea	 eax, DWORD PTR $T932[ebp]
  01969	50		 push	 eax
  0196a	8d 8d b0 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2688]
  01970	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  01975	c6 45 fc 8f	 mov	 BYTE PTR __$EHRec$[ebp+8], 143 ; 0000008fH
  01979	8d 85 60 80 ff
	ff		 lea	 eax, DWORD PTR $T931[ebp]
  0197f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KDFJNPFG@The?5Chemours?5Company@
  01984	50		 push	 eax
  01985	8d 8d d0 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2720]
  0198b	c7 85 60 80 ff
	ff 5e 2a 00 00	 mov	 DWORD PTR $T931[ebp], 10846 ; 00002a5eH
  01995	c7 85 64 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T931[ebp+4], 0
  0199f	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  019a4	c6 45 fc 90	 mov	 BYTE PTR __$EHRec$[ebp+8], 144 ; 00000090H
  019a8	8d 85 58 80 ff
	ff		 lea	 eax, DWORD PTR $T930[ebp]
  019ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KCFEHCNK@Lexmark?5International?5Inc?4@
  019b3	50		 push	 eax
  019b4	8d 8d f0 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2752]
  019ba	c7 85 58 80 ff
	ff 3d 04 00 00	 mov	 DWORD PTR $T930[ebp], 1085 ; 0000043dH
  019c4	c7 85 5c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T930[ebp+4], 0
  019ce	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  019d3	c6 45 fc 91	 mov	 BYTE PTR __$EHRec$[ebp+8], 145 ; 00000091H
  019d7	8d 85 50 80 ff
	ff		 lea	 eax, DWORD PTR $T929[ebp]
  019dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CDELBNCM@Bellwether?5Electronic?5Corp?4@
  019e2	50		 push	 eax
  019e3	8d 8d 10 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2784]
  019e9	c7 85 50 80 ff
	ff 7b 2a 00 00	 mov	 DWORD PTR $T929[ebp], 10875 ; 00002a7bH
  019f3	c7 85 54 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T929[ebp+4], 0
  019fd	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  01a02	c6 45 fc 92	 mov	 BYTE PTR __$EHRec$[ebp+8], 146 ; 00000092H
  01a06	8d 85 48 80 ff
	ff		 lea	 eax, DWORD PTR $T928[ebp]
  01a0c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGCMEMJO@VAIO?5Corporation@
  01a11	50		 push	 eax
  01a12	8d 8d 30 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2816]
  01a18	c7 85 48 80 ff
	ff 7e 2a 00 00	 mov	 DWORD PTR $T928[ebp], 10878 ; 00002a7eH
  01a22	c7 85 4c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T928[ebp+4], 0
  01a2c	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  01a31	c6 45 fc 93	 mov	 BYTE PTR __$EHRec$[ebp+8], 147 ; 00000093H
  01a35	8d 85 40 80 ff
	ff		 lea	 eax, DWORD PTR $T927[ebp]
  01a3b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OFEBIEEK@Perixx?5Computer?5GmbH@
  01a40	50		 push	 eax
  01a41	8d 8d 50 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2848]
  01a47	c7 85 40 80 ff
	ff 7f 2a 00 00	 mov	 DWORD PTR $T927[ebp], 10879 ; 00002a7fH
  01a51	c7 85 44 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T927[ebp+4], 0
  01a5b	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  01a60	c6 45 fc 94	 mov	 BYTE PTR __$EHRec$[ebp+8], 148 ; 00000094H
  01a64	8d 85 38 80 ff
	ff		 lea	 eax, DWORD PTR $T926[ebp]
  01a6a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HKJIDICK@HANK?5ELECTRONICS?5CO?4?0?5LTD@
  01a6f	50		 push	 eax
  01a70	8d 8d 70 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2880]
  01a76	c7 85 38 80 ff
	ff 85 2a 00 00	 mov	 DWORD PTR $T926[ebp], 10885 ; 00002a85H
  01a80	c7 85 3c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T926[ebp+4], 0
  01a8a	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  01a8f	c6 45 fc 95	 mov	 BYTE PTR __$EHRec$[ebp+8], 149 ; 00000095H
  01a93	8d 85 30 80 ff
	ff		 lea	 eax, DWORD PTR $T925[ebp]
  01a99	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IENCEEHL@Keysight?5Technologies?5Inc?4@
  01a9e	50		 push	 eax
  01a9f	8d 8d 90 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2912]
  01aa5	c7 85 30 80 ff
	ff 8d 2a 00 00	 mov	 DWORD PTR $T925[ebp], 10893 ; 00002a8dH
  01aaf	c7 85 34 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T925[ebp+4], 0
  01ab9	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  01abe	c6 45 fc 96	 mov	 BYTE PTR __$EHRec$[ebp+8], 150 ; 00000096H
  01ac2	8d 85 28 80 ff
	ff		 lea	 eax, DWORD PTR $T924[ebp]
  01ac8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CNCHCMJJ@G2?5Touch?5Co?4?0?5Ltd?4@
  01acd	50		 push	 eax
  01ace	8d 8d b0 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2944]
  01ad4	c7 85 28 80 ff
	ff 94 2a 00 00	 mov	 DWORD PTR $T924[ebp], 10900 ; 00002a94H
  01ade	c7 85 2c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T924[ebp+4], 0
  01ae8	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  01aed	c6 45 fc 97	 mov	 BYTE PTR __$EHRec$[ebp+8], 151 ; 00000097H
  01af1	c7 85 20 80 ff
	ff 9e 2a 00 00	 mov	 DWORD PTR $T923[ebp], 10910 ; 00002a9eH
  01afb	c7 85 24 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T923[ebp+4], 0
  01b05	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HKLHKOKA@SEIKO?5SOLUTIONS?5Inc?4@
  01b0a	8d 85 20 80 ff
	ff		 lea	 eax, DWORD PTR $T923[ebp]
  01b10	50		 push	 eax
  01b11	8d 8d d0 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2976]
  01b17	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  01b1c	c6 45 fc 98	 mov	 BYTE PTR __$EHRec$[ebp+8], 152 ; 00000098H
  01b20	8d 85 18 80 ff
	ff		 lea	 eax, DWORD PTR $T922[ebp]
  01b26	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HMAGDCBI@Virtium?5Technology?0?5Inc?4@
  01b2b	50		 push	 eax
  01b2c	8d 8d f0 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3008]
  01b32	c7 85 18 80 ff
	ff aa 2a 00 00	 mov	 DWORD PTR $T922[ebp], 10922 ; 00002aaaH
  01b3c	c7 85 1c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T922[ebp+4], 0
  01b46	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  01b4b	c6 45 fc 99	 mov	 BYTE PTR __$EHRec$[ebp+8], 153 ; 00000099H
  01b4f	8d 85 10 80 ff
	ff		 lea	 eax, DWORD PTR $T921[ebp]
  01b55	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@IBJFENFI@GM?5Global?5Technology?5Operations@
  01b5a	50		 push	 eax
  01b5b	8d 8d 10 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3040]
  01b61	c7 85 10 80 ff
	ff b0 2a 00 00	 mov	 DWORD PTR $T921[ebp], 10928 ; 00002ab0H
  01b6b	c7 85 14 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T921[ebp+4], 0
  01b75	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  01b7a	c6 45 fc 9a	 mov	 BYTE PTR __$EHRec$[ebp+8], 154 ; 0000009aH
  01b7e	8d 85 08 80 ff
	ff		 lea	 eax, DWORD PTR $T920[ebp]
  01b84	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LCAGNMLM@Revolabs?0?5Inc?4@
  01b89	50		 push	 eax
  01b8a	8d 8d 30 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3072]
  01b90	c7 85 08 80 ff
	ff bf 2a 00 00	 mov	 DWORD PTR $T920[ebp], 10943 ; 00002abfH
  01b9a	c7 85 0c 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T920[ebp+4], 0
  01ba4	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  01ba9	c6 45 fc 9b	 mov	 BYTE PTR __$EHRec$[ebp+8], 155 ; 0000009bH
  01bad	8d 85 00 80 ff
	ff		 lea	 eax, DWORD PTR $T919[ebp]
  01bb3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EKOBDIOB@Silergy?5Corp?4@
  01bb8	50		 push	 eax
  01bb9	8d 8d 50 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3104]
  01bbf	c7 85 00 80 ff
	ff cd 2a 00 00	 mov	 DWORD PTR $T919[ebp], 10957 ; 00002acdH
  01bc9	c7 85 04 80 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T919[ebp+4], 0
  01bd3	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  01bd8	c6 45 fc 9c	 mov	 BYTE PTR __$EHRec$[ebp+8], 156 ; 0000009cH
  01bdc	8d 85 f8 7f ff
	ff		 lea	 eax, DWORD PTR $T918[ebp]
  01be2	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FPLHNLIP@I?9PEX?5?$CIDai?9ichi?5Seiko?$CJ@
  01be7	50		 push	 eax
  01be8	8d 8d 70 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3136]
  01bee	c7 85 f8 7f ff
	ff db 2a 00 00	 mov	 DWORD PTR $T918[ebp], 10971 ; 00002adbH
  01bf8	c7 85 fc 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T918[ebp+4], 0
  01c02	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  01c07	c6 45 fc 9d	 mov	 BYTE PTR __$EHRec$[ebp+8], 157 ; 0000009dH
  01c0b	8d 85 f0 7f ff
	ff		 lea	 eax, DWORD PTR $T917[ebp]
  01c11	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JDAPMLIH@SEE?9PLUS?5INDUSTRIAL?5LTD?4@
  01c16	50		 push	 eax
  01c17	8d 8d 90 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3168]
  01c1d	c7 85 f0 7f ff
	ff dd 2a 00 00	 mov	 DWORD PTR $T917[ebp], 10973 ; 00002addH
  01c27	c7 85 f4 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T917[ebp+4], 0
  01c31	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  01c36	c6 45 fc 9e	 mov	 BYTE PTR __$EHRec$[ebp+8], 158 ; 0000009eH
  01c3a	8d 85 e8 7f ff
	ff		 lea	 eax, DWORD PTR $T916[ebp]
  01c40	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HINGIDLP@Zhejiang?5Yuesui?5Electron?5Stock?5@
  01c45	50		 push	 eax
  01c46	8d 8d b0 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3200]
  01c4c	c7 85 e8 7f ff
	ff f0 2a 00 00	 mov	 DWORD PTR $T916[ebp], 10992 ; 00002af0H
  01c56	c7 85 ec 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T916[ebp+4], 0
  01c60	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  01c65	c6 45 fc 9f	 mov	 BYTE PTR __$EHRec$[ebp+8], 159 ; 0000009fH
  01c69	8d 85 e0 7f ff
	ff		 lea	 eax, DWORD PTR $T915[ebp]
  01c6f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PHLGNADA@Libratone?5A?1S@
  01c74	50		 push	 eax
  01c75	8d 8d d0 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3232]
  01c7b	c7 85 e0 7f ff
	ff f5 2a 00 00	 mov	 DWORD PTR $T915[ebp], 10997 ; 00002af5H
  01c85	c7 85 e4 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T915[ebp+4], 0
  01c8f	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  01c94	c6 45 fc a0	 mov	 BYTE PTR __$EHRec$[ebp+8], 160 ; 000000a0H
  01c98	c7 85 d8 7f ff
	ff f7 2a 00 00	 mov	 DWORD PTR $T914[ebp], 10999 ; 00002af7H
  01ca2	c7 85 dc 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T914[ebp+4], 0
  01cac	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NAKOHCKK@Shenzhen?5Hazens?5Automotive?5Elec@
  01cb1	8d 85 d8 7f ff
	ff		 lea	 eax, DWORD PTR $T914[ebp]
  01cb7	50		 push	 eax
  01cb8	8d 8d f0 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3264]
  01cbe	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  01cc3	c6 45 fc a1	 mov	 BYTE PTR __$EHRec$[ebp+8], 161 ; 000000a1H
  01cc7	8d 85 d0 7f ff
	ff		 lea	 eax, DWORD PTR $T913[ebp]
  01ccd	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PBFFOKHI@Jiangsu?5Toppower?5Automotive?5Ele@
  01cd2	50		 push	 eax
  01cd3	8d 8d 10 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3296]
  01cd9	c7 85 d0 7f ff
	ff f8 2a 00 00	 mov	 DWORD PTR $T913[ebp], 11000 ; 00002af8H
  01ce3	c7 85 d4 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T913[ebp+4], 0
  01ced	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  01cf2	c6 45 fc a2	 mov	 BYTE PTR __$EHRec$[ebp+8], 162 ; 000000a2H
  01cf6	8d 85 c8 7f ff
	ff		 lea	 eax, DWORD PTR $T912[ebp]
  01cfc	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPECBEIL@Drapho?5Electronics?5Technology?5C@
  01d01	50		 push	 eax
  01d02	8d 8d 30 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3328]
  01d08	c7 85 c8 7f ff
	ff f9 2a 00 00	 mov	 DWORD PTR $T912[ebp], 11001 ; 00002af9H
  01d12	c7 85 cc 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T912[ebp+4], 0
  01d1c	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  01d21	c6 45 fc a3	 mov	 BYTE PTR __$EHRec$[ebp+8], 163 ; 000000a3H
  01d25	8d 85 c0 7f ff
	ff		 lea	 eax, DWORD PTR $T911[ebp]
  01d2b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LOPMEJIG@Alps?5Electric?5Co?4?0?5Ltd?4@
  01d30	50		 push	 eax
  01d31	8d 8d 50 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3360]
  01d37	c7 85 c0 7f ff
	ff 4e 04 00 00	 mov	 DWORD PTR $T911[ebp], 1102 ; 0000044eH
  01d41	c7 85 c4 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T911[ebp+4], 0
  01d4b	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  01d50	c6 45 fc a4	 mov	 BYTE PTR __$EHRec$[ebp+8], 164 ; 000000a4H
  01d54	8d 85 b8 7f ff
	ff		 lea	 eax, DWORD PTR $T910[ebp]
  01d5a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OJMFGLA@Le?5Shi?5Zhi?5Xin?5Electronic?5Techn@
  01d5f	50		 push	 eax
  01d60	8d 8d 70 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3392]
  01d66	c7 85 b8 7f ff
	ff 0e 2b 00 00	 mov	 DWORD PTR $T910[ebp], 11022 ; 00002b0eH
  01d70	c7 85 bc 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T910[ebp+4], 0
  01d7a	e8 00 00 00 00	 call	 ??$?0_KAAY0DI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[56],0>
  01d7f	c6 45 fc a5	 mov	 BYTE PTR __$EHRec$[ebp+8], 165 ; 000000a5H
  01d83	8d 85 b0 7f ff
	ff		 lea	 eax, DWORD PTR $T909[ebp]
  01d89	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HOOMBHPA@EverPro?5Technologies?5Company?0?5L@
  01d8e	50		 push	 eax
  01d8f	8d 8d 90 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3424]
  01d95	c7 85 b0 7f ff
	ff 14 2b 00 00	 mov	 DWORD PTR $T909[ebp], 11028 ; 00002b14H
  01d9f	c7 85 b4 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T909[ebp+4], 0
  01da9	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  01dae	c6 45 fc a6	 mov	 BYTE PTR __$EHRec$[ebp+8], 166 ; 000000a6H
  01db2	8d 85 a8 7f ff
	ff		 lea	 eax, DWORD PTR $T908[ebp]
  01db8	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CLCHGIO@Rosenberger?5Hochfrequenztechnik@
  01dbd	50		 push	 eax
  01dbe	8d 8d b0 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3456]
  01dc4	c7 85 a8 7f ff
	ff 15 2b 00 00	 mov	 DWORD PTR $T908[ebp], 11029 ; 00002b15H
  01dce	c7 85 ac 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T908[ebp+4], 0
  01dd8	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  01ddd	c6 45 fc a7	 mov	 BYTE PTR __$EHRec$[ebp+8], 167 ; 000000a7H
  01de1	8d 85 a0 7f ff
	ff		 lea	 eax, DWORD PTR $T907[ebp]
  01de7	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@FKHGJPDB@Dongguan?5City?5Sanji?5Electronics@
  01dec	50		 push	 eax
  01ded	8d 8d d0 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3488]
  01df3	c7 85 a0 7f ff
	ff 1b 2b 00 00	 mov	 DWORD PTR $T907[ebp], 11035 ; 00002b1bH
  01dfd	c7 85 a4 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T907[ebp+4], 0
  01e07	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  01e0c	c6 45 fc a8	 mov	 BYTE PTR __$EHRec$[ebp+8], 168 ; 000000a8H
  01e10	8d 85 98 7f ff
	ff		 lea	 eax, DWORD PTR $T906[ebp]
  01e16	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EHCLPMCH@Lintes?5Technology?5Co?4?0?5Ltd?4@
  01e1b	50		 push	 eax
  01e1c	8d 8d f0 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3520]
  01e22	c7 85 98 7f ff
	ff 1d 2b 00 00	 mov	 DWORD PTR $T906[ebp], 11037 ; 00002b1dH
  01e2c	c7 85 9c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T906[ebp+4], 0
  01e36	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  01e3b	c6 45 fc a9	 mov	 BYTE PTR __$EHRec$[ebp+8], 169 ; 000000a9H
  01e3f	c7 85 90 7f ff
	ff 1f 2b 00 00	 mov	 DWORD PTR $T905[ebp], 11039 ; 00002b1fH
  01e49	c7 85 94 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T905[ebp+4], 0
  01e53	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DDNNGELD@KinnexA?0?5Inc?4@
  01e58	8d 85 90 7f ff
	ff		 lea	 eax, DWORD PTR $T905[ebp]
  01e5e	50		 push	 eax
  01e5f	8d 8d 10 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3552]
  01e65	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  01e6a	c6 45 fc aa	 mov	 BYTE PTR __$EHRec$[ebp+8], 170 ; 000000aaH
  01e6e	8d 85 88 7f ff
	ff		 lea	 eax, DWORD PTR $T904[ebp]
  01e74	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LLGLLOPF@Metra?5Electronics?5Corp?4@
  01e79	50		 push	 eax
  01e7a	8d 8d 30 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3584]
  01e80	c7 85 88 7f ff
	ff 22 2b 00 00	 mov	 DWORD PTR $T904[ebp], 11042 ; 00002b22H
  01e8a	c7 85 8c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T904[ebp+4], 0
  01e94	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  01e99	c6 45 fc ab	 mov	 BYTE PTR __$EHRec$[ebp+8], 171 ; 000000abH
  01e9d	8d 85 80 7f ff
	ff		 lea	 eax, DWORD PTR $T903[ebp]
  01ea3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HIGHOFLP@Red?5Hat?0?5Inc?4@
  01ea8	50		 push	 eax
  01ea9	8d 8d 50 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3616]
  01eaf	c7 85 80 7f ff
	ff 23 2b 00 00	 mov	 DWORD PTR $T903[ebp], 11043 ; 00002b23H
  01eb9	c7 85 84 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T903[ebp+4], 0
  01ec3	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  01ec8	c6 45 fc ac	 mov	 BYTE PTR __$EHRec$[ebp+8], 172 ; 000000acH
  01ecc	8d 85 78 7f ff
	ff		 lea	 eax, DWORD PTR $T902[ebp]
  01ed2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CMOOIIE@FluxData?5Incorporated@
  01ed7	50		 push	 eax
  01ed8	8d 8d 70 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3648]
  01ede	c7 85 78 7f ff
	ff 27 2b 00 00	 mov	 DWORD PTR $T902[ebp], 11047 ; 00002b27H
  01ee8	c7 85 7c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T902[ebp+4], 0
  01ef2	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  01ef7	c6 45 fc ad	 mov	 BYTE PTR __$EHRec$[ebp+8], 173 ; 000000adH
  01efb	8d 85 70 7f ff
	ff		 lea	 eax, DWORD PTR $T901[ebp]
  01f01	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NEDOGEDE@Texas?5Instruments@
  01f06	50		 push	 eax
  01f07	8d 8d 90 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3680]
  01f0d	c7 85 70 7f ff
	ff 51 04 00 00	 mov	 DWORD PTR $T901[ebp], 1105 ; 00000451H
  01f17	c7 85 74 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T901[ebp+4], 0
  01f21	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  01f26	c6 45 fc ae	 mov	 BYTE PTR __$EHRec$[ebp+8], 174 ; 000000aeH
  01f2a	8d 85 68 7f ff
	ff		 lea	 eax, DWORD PTR $T900[ebp]
  01f30	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NFOOAPLE@Assem?5Technology?5Co?4?0?5Ltd?4@
  01f35	50		 push	 eax
  01f36	8d 8d b0 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3712]
  01f3c	c7 85 68 7f ff
	ff 35 2b 00 00	 mov	 DWORD PTR $T900[ebp], 11061 ; 00002b35H
  01f46	c7 85 6c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T900[ebp+4], 0
  01f50	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  01f55	c6 45 fc af	 mov	 BYTE PTR __$EHRec$[ebp+8], 175 ; 000000afH
  01f59	8d 85 60 7f ff
	ff		 lea	 eax, DWORD PTR $T899[ebp]
  01f5f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PLDHBNLC@Dongguan?5City?5Jianghan?5Electron@
  01f64	50		 push	 eax
  01f65	8d 8d d0 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3744]
  01f6b	c7 85 60 7f ff
	ff 36 2b 00 00	 mov	 DWORD PTR $T899[ebp], 11062 ; 00002b36H
  01f75	c7 85 64 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T899[ebp+4], 0
  01f7f	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  01f84	c6 45 fc b0	 mov	 BYTE PTR __$EHRec$[ebp+8], 176 ; 000000b0H
  01f88	8d 85 58 7f ff
	ff		 lea	 eax, DWORD PTR $T898[ebp]
  01f8e	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BILDCLBK@Huizhou?5Desay?5SV?5Automotive?5Co?4@
  01f93	50		 push	 eax
  01f94	8d 8d f0 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3776]
  01f9a	c7 85 58 7f ff
	ff 37 2b 00 00	 mov	 DWORD PTR $T898[ebp], 11063 ; 00002b37H
  01fa4	c7 85 5c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T898[ebp+4], 0
  01fae	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  01fb3	c6 45 fc b1	 mov	 BYTE PTR __$EHRec$[ebp+8], 177 ; 000000b1H
  01fb7	8d 85 50 7f ff
	ff		 lea	 eax, DWORD PTR $T897[ebp]
  01fbd	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MCPGLJIM@Ningbo?5Rixing?5Electronics?5Co?4?0?5@
  01fc2	50		 push	 eax
  01fc3	8d 8d 10 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3808]
  01fc9	c7 85 50 7f ff
	ff 38 2b 00 00	 mov	 DWORD PTR $T897[ebp], 11064 ; 00002b38H
  01fd3	c7 85 54 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T897[ebp+4], 0
  01fdd	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  01fe2	c6 45 fc b2	 mov	 BYTE PTR __$EHRec$[ebp+8], 178 ; 000000b2H
  01fe6	c7 85 48 7f ff
	ff 3d 2b 00 00	 mov	 DWORD PTR $T896[ebp], 11069 ; 00002b3dH
  01ff0	c7 85 4c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T896[ebp+4], 0
  01ffa	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EBFCNIP@GuangDong?5YuanFeng?5Automotive?5E@
  01fff	8d 85 48 7f ff
	ff		 lea	 eax, DWORD PTR $T896[ebp]
  02005	50		 push	 eax
  02006	8d 8d 30 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3840]
  0200c	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  02011	c6 45 fc b3	 mov	 BYTE PTR __$EHRec$[ebp+8], 179 ; 000000b3H
  02015	8d 85 40 7f ff
	ff		 lea	 eax, DWORD PTR $T895[ebp]
  0201b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@CDGODHFO@Huizhou?5Aorora?5Science?5?$CG?5Techno@
  02020	50		 push	 eax
  02021	8d 8d 50 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3872]
  02027	c7 85 40 7f ff
	ff 47 2b 00 00	 mov	 DWORD PTR $T895[ebp], 11079 ; 00002b47H
  02031	c7 85 44 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T895[ebp+4], 0
  0203b	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  02040	c6 45 fc b4	 mov	 BYTE PTR __$EHRec$[ebp+8], 180 ; 000000b4H
  02044	8d 85 38 7f ff
	ff		 lea	 eax, DWORD PTR $T894[ebp]
  0204a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DEAMOIDP@Sounding?5Audio?5Industrial?5Limit@
  0204f	50		 push	 eax
  02050	8d 8d 70 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3904]
  02056	c7 85 38 7f ff
	ff 48 2b 00 00	 mov	 DWORD PTR $T894[ebp], 11080 ; 00002b48H
  02060	c7 85 3c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T894[ebp+4], 0
  0206a	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0206f	c6 45 fc b5	 mov	 BYTE PTR __$EHRec$[ebp+8], 181 ; 000000b5H
  02073	8d 85 30 7f ff
	ff		 lea	 eax, DWORD PTR $T893[ebp]
  02079	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NMOOHFGL@Yueqing?5Huaxin?5Electronic?5Co?4?0?5@
  0207e	50		 push	 eax
  0207f	8d 8d 90 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3936]
  02085	c7 85 30 7f ff
	ff 4a 2b 00 00	 mov	 DWORD PTR $T893[ebp], 11082 ; 00002b4aH
  0208f	c7 85 34 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T893[ebp+4], 0
  02099	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  0209e	c6 45 fc b6	 mov	 BYTE PTR __$EHRec$[ebp+8], 182 ; 000000b6H
  020a2	8d 85 28 7f ff
	ff		 lea	 eax, DWORD PTR $T892[ebp]
  020a8	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@DNALOLCI@Dongguan?5Evermax?5Electronics?5Te@
  020ad	50		 push	 eax
  020ae	8d 8d b0 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3968]
  020b4	c7 85 28 7f ff
	ff 52 2b 00 00	 mov	 DWORD PTR $T892[ebp], 11090 ; 00002b52H
  020be	c7 85 2c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T892[ebp+4], 0
  020c8	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  020cd	c6 45 fc b7	 mov	 BYTE PTR __$EHRec$[ebp+8], 183 ; 000000b7H
  020d1	8d 85 20 7f ff
	ff		 lea	 eax, DWORD PTR $T891[ebp]
  020d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JDKHIMFB@Universal?5Audio?0?5Inc?4@
  020dc	50		 push	 eax
  020dd	8d 8d d0 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4000]
  020e3	c7 85 20 7f ff
	ff 5a 2b 00 00	 mov	 DWORD PTR $T891[ebp], 11098 ; 00002b5aH
  020ed	c7 85 24 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T891[ebp+4], 0
  020f7	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  020fc	c6 45 fc b8	 mov	 BYTE PTR __$EHRec$[ebp+8], 184 ; 000000b8H
  02100	8d 85 18 7f ff
	ff		 lea	 eax, DWORD PTR $T890[ebp]
  02106	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HEMBIMPE@Humax?5Automotive?5Co?4?0?5Ltd?4@
  0210b	50		 push	 eax
  0210c	8d 8d f0 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4032]
  02112	c7 85 18 7f ff
	ff 69 2b 00 00	 mov	 DWORD PTR $T890[ebp], 11113 ; 00002b69H
  0211c	c7 85 1c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T890[ebp+4], 0
  02126	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0212b	c6 45 fc b9	 mov	 BYTE PTR __$EHRec$[ebp+8], 185 ; 000000b9H
  0212f	8d 85 10 7f ff
	ff		 lea	 eax, DWORD PTR $T889[ebp]
  02135	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CILJACNB@Pioneer?5DJ?5Corporation@
  0213a	50		 push	 eax
  0213b	8d 8d 10 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4064]
  02141	c7 85 10 7f ff
	ff 73 2b 00 00	 mov	 DWORD PTR $T889[ebp], 11123 ; 00002b73H
  0214b	c7 85 14 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T889[ebp+4], 0
  02155	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0215a	c6 45 fc ba	 mov	 BYTE PTR __$EHRec$[ebp+8], 186 ; 000000baH
  0215e	8d 85 08 7f ff
	ff		 lea	 eax, DWORD PTR $T888[ebp]
  02164	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BBFDGEKF@Ever?5Win?5International?5Corp?4@
  02169	50		 push	 eax
  0216a	8d 8d 30 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4096]
  02170	c7 85 08 7f ff
	ff 84 2b 00 00	 mov	 DWORD PTR $T888[ebp], 11140 ; 00002b84H
  0217a	c7 85 0c 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T888[ebp+4], 0
  02184	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  02189	c6 45 fc bb	 mov	 BYTE PTR __$EHRec$[ebp+8], 187 ; 000000bbH
  0218d	c7 85 00 7f ff
	ff 88 2b 00 00	 mov	 DWORD PTR $T887[ebp], 11144 ; 00002b88H
  02197	c7 85 04 7f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T887[ebp+4], 0
  021a1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NOAHIGCF@Socionext?5Inc?4@
  021a6	8d 85 00 7f ff
	ff		 lea	 eax, DWORD PTR $T887[ebp]
  021ac	50		 push	 eax
  021ad	8d 8d 50 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4128]
  021b3	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  021b8	c6 45 fc bc	 mov	 BYTE PTR __$EHRec$[ebp+8], 188 ; 000000bcH
  021bc	8d 85 f8 7e ff
	ff		 lea	 eax, DWORD PTR $T886[ebp]
  021c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OPMIJNAA@Ugreen?5Group?5Limited@
  021c7	50		 push	 eax
  021c8	8d 8d 70 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4160]
  021ce	c7 85 f8 7e ff
	ff 89 2b 00 00	 mov	 DWORD PTR $T886[ebp], 11145 ; 00002b89H
  021d8	c7 85 fc 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T886[ebp+4], 0
  021e2	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  021e7	c6 45 fc bd	 mov	 BYTE PTR __$EHRec$[ebp+8], 189 ; 000000bdH
  021eb	8d 85 f0 7e ff
	ff		 lea	 eax, DWORD PTR $T885[ebp]
  021f1	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@CCDMAGFE@Shanghai?5Pateo?5Electronic?5Equip@
  021f6	50		 push	 eax
  021f7	8d 8d 90 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4192]
  021fd	c7 85 f0 7e ff
	ff 8a 2b 00 00	 mov	 DWORD PTR $T885[ebp], 11146 ; 00002b8aH
  02207	c7 85 f4 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T885[ebp+4], 0
  02211	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  02216	c6 45 fc be	 mov	 BYTE PTR __$EHRec$[ebp+8], 190 ; 000000beH
  0221a	8d 85 e8 7e ff
	ff		 lea	 eax, DWORD PTR $T884[ebp]
  02220	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EAFCJGLH@Renesas?5Electronics?5Corp?4@
  02225	50		 push	 eax
  02226	8d 8d b0 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4224]
  0222c	c7 85 e8 7e ff
	ff 5b 04 00 00	 mov	 DWORD PTR $T884[ebp], 1115 ; 0000045bH
  02236	c7 85 ec 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T884[ebp+4], 0
  02240	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  02245	c6 45 fc bf	 mov	 BYTE PTR __$EHRec$[ebp+8], 191 ; 000000bfH
  02249	8d 85 e0 7e ff
	ff		 lea	 eax, DWORD PTR $T883[ebp]
  0224f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IBEADLJN@i?9BLADES?0?5Inc?4@
  02254	50		 push	 eax
  02255	8d 8d d0 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4256]
  0225b	c7 85 e0 7e ff
	ff 92 2b 00 00	 mov	 DWORD PTR $T883[ebp], 11154 ; 00002b92H
  02265	c7 85 e4 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T883[ebp+4], 0
  0226f	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  02274	c6 45 fc c0	 mov	 BYTE PTR __$EHRec$[ebp+8], 192 ; 000000c0H
  02278	8d 85 d8 7e ff
	ff		 lea	 eax, DWORD PTR $T882[ebp]
  0227e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CCCCMKOD@ShenZhen?5Baoyuanda?5Electronics?5@
  02283	50		 push	 eax
  02284	8d 8d f0 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4288]
  0228a	c7 85 d8 7e ff
	ff 94 2b 00 00	 mov	 DWORD PTR $T882[ebp], 11156 ; 00002b94H
  02294	c7 85 dc 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T882[ebp+4], 0
  0229e	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  022a3	c6 45 fc c1	 mov	 BYTE PTR __$EHRec$[ebp+8], 193 ; 000000c1H
  022a7	8d 85 d0 7e ff
	ff		 lea	 eax, DWORD PTR $T881[ebp]
  022ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NDDDNPM@iST?5?9?5Integrated?5Service?5Techno@
  022b2	50		 push	 eax
  022b3	8d 8d 10 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4320]
  022b9	c7 85 d0 7e ff
	ff 95 2b 00 00	 mov	 DWORD PTR $T881[ebp], 11157 ; 00002b95H
  022c3	c7 85 d4 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T881[ebp+4], 0
  022cd	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  022d2	c6 45 fc c2	 mov	 BYTE PTR __$EHRec$[ebp+8], 194 ; 000000c2H
  022d6	8d 85 c8 7e ff
	ff		 lea	 eax, DWORD PTR $T880[ebp]
  022dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HDDNPIFN@HYUNDAI?5MOBIS?5Co?4?0?5Ltd?4@
  022e1	50		 push	 eax
  022e2	8d 8d 30 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4352]
  022e8	c7 85 c8 7e ff
	ff 96 2b 00 00	 mov	 DWORD PTR $T880[ebp], 11158 ; 00002b96H
  022f2	c7 85 cc 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T880[ebp+4], 0
  022fc	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  02301	c6 45 fc c3	 mov	 BYTE PTR __$EHRec$[ebp+8], 195 ; 000000c3H
  02305	8d 85 c0 7e ff
	ff		 lea	 eax, DWORD PTR $T879[ebp]
  0230b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LJDNKLEF@YUDU?5EASON?5ELECTRONIC?5CO?4?0?5LTD?4@
  02310	50		 push	 eax
  02311	8d 8d 50 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4384]
  02317	c7 85 c0 7e ff
	ff a8 2b 00 00	 mov	 DWORD PTR $T879[ebp], 11176 ; 00002ba8H
  02321	c7 85 c4 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T879[ebp+4], 0
  0232b	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  02330	c6 45 fc c4	 mov	 BYTE PTR __$EHRec$[ebp+8], 196 ; 000000c4H
  02334	c7 85 b8 7e ff
	ff 5e 04 00 00	 mov	 DWORD PTR $T878[ebp], 1118 ; 0000045eH
  0233e	c7 85 bc 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T878[ebp+4], 0
  02348	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EOBPLLNH@Microsoft?5Corporation@
  0234d	8d 85 b8 7e ff
	ff		 lea	 eax, DWORD PTR $T878[ebp]
  02353	50		 push	 eax
  02354	8d 8d 70 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4416]
  0235a	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0235f	c6 45 fc c5	 mov	 BYTE PTR __$EHRec$[ebp+8], 197 ; 000000c5H
  02363	8d 85 b0 7e ff
	ff		 lea	 eax, DWORD PTR $T877[ebp]
  02369	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LPPABEJC@XinJi?5Technologies?5Ltd?4@
  0236e	50		 push	 eax
  0236f	8d 8d 90 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4448]
  02375	c7 85 b0 7e ff
	ff ad 2b 00 00	 mov	 DWORD PTR $T877[ebp], 11181 ; 00002badH
  0237f	c7 85 b4 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T877[ebp+4], 0
  02389	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0238e	c6 45 fc c6	 mov	 BYTE PTR __$EHRec$[ebp+8], 198 ; 000000c6H
  02392	8d 85 a8 7e ff
	ff		 lea	 eax, DWORD PTR $T876[ebp]
  02398	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NAKLHHAP@OCC?5?$CIZhuhai?$CJ?5Electronic?5Co?4?0?5Lt@
  0239d	50		 push	 eax
  0239e	8d 8d b0 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4480]
  023a4	c7 85 a8 7e ff
	ff b8 2b 00 00	 mov	 DWORD PTR $T876[ebp], 11192 ; 00002bb8H
  023ae	c7 85 ac 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T876[ebp+4], 0
  023b8	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  023bd	c6 45 fc c7	 mov	 BYTE PTR __$EHRec$[ebp+8], 199 ; 000000c7H
  023c1	8d 85 a0 7e ff
	ff		 lea	 eax, DWORD PTR $T875[ebp]
  023c7	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@OAMAINPM@Zhongshan?5Sinseader?5Electronic?5@
  023cc	50		 push	 eax
  023cd	8d 8d d0 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4512]
  023d3	c7 85 a0 7e ff
	ff ba 2b 00 00	 mov	 DWORD PTR $T875[ebp], 11194 ; 00002bbaH
  023dd	c7 85 a4 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T875[ebp+4], 0
  023e7	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  023ec	c6 45 fc c8	 mov	 BYTE PTR __$EHRec$[ebp+8], 200 ; 000000c8H
  023f0	8d 85 98 7e ff
	ff		 lea	 eax, DWORD PTR $T874[ebp]
  023f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MFONLGJD@DONGGUAN?5YELLOW?5KNIFE?5Industria@
  023fb	50		 push	 eax
  023fc	8d 8d f0 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4544]
  02402	c7 85 98 7e ff
	ff bb 2b 00 00	 mov	 DWORD PTR $T874[ebp], 11195 ; 00002bbbH
  0240c	c7 85 9c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T874[ebp+4], 0
  02416	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  0241b	c6 45 fc c9	 mov	 BYTE PTR __$EHRec$[ebp+8], 201 ; 000000c9H
  0241f	8d 85 90 7e ff
	ff		 lea	 eax, DWORD PTR $T873[ebp]
  02425	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGOGCEOK@RF?5Creations?5Ltd?4@
  0242a	50		 push	 eax
  0242b	8d 8d 10 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4576]
  02431	c7 85 90 7e ff
	ff bd 2b 00 00	 mov	 DWORD PTR $T873[ebp], 11197 ; 00002bbdH
  0243b	c7 85 94 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T873[ebp+4], 0
  02445	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0244a	c6 45 fc ca	 mov	 BYTE PTR __$EHRec$[ebp+8], 202 ; 000000caH
  0244e	8d 85 88 7e ff
	ff		 lea	 eax, DWORD PTR $T872[ebp]
  02454	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@KCEDMKPN@Chengyi?5Semiconductors?5?$CIShangha@
  02459	50		 push	 eax
  0245a	8d 8d 30 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4608]
  02460	c7 85 88 7e ff
	ff be 2b 00 00	 mov	 DWORD PTR $T872[ebp], 11198 ; 00002bbeH
  0246a	c7 85 8c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T872[ebp+4], 0
  02474	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  02479	c6 45 fc cb	 mov	 BYTE PTR __$EHRec$[ebp+8], 203 ; 000000cbH
  0247d	8d 85 80 7e ff
	ff		 lea	 eax, DWORD PTR $T871[ebp]
  02483	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GHDIKEJJ@Shenzhen?5Shinning?5Electronic?5Co@
  02488	50		 push	 eax
  02489	8d 8d 50 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4640]
  0248f	c7 85 80 7e ff
	ff bf 2b 00 00	 mov	 DWORD PTR $T871[ebp], 11199 ; 00002bbfH
  02499	c7 85 84 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T871[ebp+4], 0
  024a3	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  024a8	c6 45 fc cc	 mov	 BYTE PTR __$EHRec$[ebp+8], 204 ; 000000ccH
  024ac	8d 85 78 7e ff
	ff		 lea	 eax, DWORD PTR $T870[ebp]
  024b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JMDAOEAA@Dongguan?5Sino?5Syncs?5Industrial?5@
  024b7	50		 push	 eax
  024b8	8d 8d 70 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4672]
  024be	c7 85 78 7e ff
	ff c1 2b 00 00	 mov	 DWORD PTR $T870[ebp], 11201 ; 00002bc1H
  024c8	c7 85 7c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T870[ebp+4], 0
  024d2	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  024d7	c6 45 fc cd	 mov	 BYTE PTR __$EHRec$[ebp+8], 205 ; 000000cdH
  024db	c7 85 70 7e ff
	ff c2 2b 00 00	 mov	 DWORD PTR $T869[ebp], 11202 ; 00002bc2H
  024e5	c7 85 74 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T869[ebp+4], 0
  024ef	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CPDFNDAN@JNTC?5Co?4?0?5Ltd?4@
  024f4	8d 85 70 7e ff
	ff		 lea	 eax, DWORD PTR $T869[ebp]
  024fa	50		 push	 eax
  024fb	8d 8d 90 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4704]
  02501	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  02506	c6 45 fc ce	 mov	 BYTE PTR __$EHRec$[ebp+8], 206 ; 000000ceH
  0250a	8d 85 68 7e ff
	ff		 lea	 eax, DWORD PTR $T868[ebp]
  02510	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CENEEEJH@Tama?5Electric?5?$CISuzhou?$CJ?5Co?4?0?5Ltd@
  02515	50		 push	 eax
  02516	8d 8d b0 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4736]
  0251c	c7 85 68 7e ff
	ff c9 2b 00 00	 mov	 DWORD PTR $T868[ebp], 11209 ; 00002bc9H
  02526	c7 85 6c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T868[ebp+4], 0
  02530	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  02535	c6 45 fc cf	 mov	 BYTE PTR __$EHRec$[ebp+8], 207 ; 000000cfH
  02539	8d 85 60 7e ff
	ff		 lea	 eax, DWORD PTR $T867[ebp]
  0253f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CABKABLN@Primax?5Electronics@
  02544	50		 push	 eax
  02545	8d 8d d0 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4768]
  0254b	c7 85 60 7e ff
	ff 61 04 00 00	 mov	 DWORD PTR $T867[ebp], 1121 ; 00000461H
  02555	c7 85 64 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T867[ebp+4], 0
  0255f	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  02564	c6 45 fc d0	 mov	 BYTE PTR __$EHRec$[ebp+8], 208 ; 000000d0H
  02568	8d 85 58 7e ff
	ff		 lea	 eax, DWORD PTR $T866[ebp]
  0256e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GLDIBGGK@Exvision?0?5Inc?4@
  02573	50		 push	 eax
  02574	8d 8d f0 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4800]
  0257a	c7 85 58 7e ff
	ff ca 2b 00 00	 mov	 DWORD PTR $T866[ebp], 11210 ; 00002bcaH
  02584	c7 85 5c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T866[ebp+4], 0
  0258e	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  02593	c6 45 fc d1	 mov	 BYTE PTR __$EHRec$[ebp+8], 209 ; 000000d1H
  02597	8d 85 50 7e ff
	ff		 lea	 eax, DWORD PTR $T865[ebp]
  0259d	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@JNPCOKEE@Dongguan?5ULT?9unite?5electronic?5t@
  025a2	50		 push	 eax
  025a3	8d 8d 10 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4832]
  025a9	c7 85 50 7e ff
	ff d3 2b 00 00	 mov	 DWORD PTR $T865[ebp], 11219 ; 00002bd3H
  025b3	c7 85 54 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T865[ebp+4], 0
  025bd	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  025c2	c6 45 fc d2	 mov	 BYTE PTR __$EHRec$[ebp+8], 210 ; 000000d2H
  025c6	8d 85 48 7e ff
	ff		 lea	 eax, DWORD PTR $T864[ebp]
  025cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FDHJLGGM@Cable?5Matters?5Inc?4@
  025d1	50		 push	 eax
  025d2	8d 8d 30 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4864]
  025d8	c7 85 48 7e ff
	ff d5 2b 00 00	 mov	 DWORD PTR $T864[ebp], 11221 ; 00002bd5H
  025e2	c7 85 4c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T864[ebp+4], 0
  025ec	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  025f1	c6 45 fc d3	 mov	 BYTE PTR __$EHRec$[ebp+8], 211 ; 000000d3H
  025f5	8d 85 40 7e ff
	ff		 lea	 eax, DWORD PTR $T863[ebp]
  025fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FDMJMFMH@Charm?5Sciences?5Inc?4@
  02600	50		 push	 eax
  02601	8d 8d 50 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4896]
  02607	c7 85 40 7e ff
	ff dd 2b 00 00	 mov	 DWORD PTR $T863[ebp], 11229 ; 00002bddH
  02611	c7 85 44 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T863[ebp+4], 0
  0261b	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  02620	c6 45 fc d4	 mov	 BYTE PTR __$EHRec$[ebp+8], 212 ; 000000d4H
  02624	8d 85 38 7e ff
	ff		 lea	 eax, DWORD PTR $T862[ebp]
  0262a	68 00 00 00 00	 push	 OFFSET ??_C@_05CFGIIEPJ@EATON@
  0262f	50		 push	 eax
  02630	8d 8d 70 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4928]
  02636	c7 85 38 7e ff
	ff 63 04 00 00	 mov	 DWORD PTR $T862[ebp], 1123 ; 00000463H
  02640	c7 85 3c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T862[ebp+4], 0
  0264a	e8 00 00 00 00	 call	 ??$?0_KAAY05$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY05$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[6],0>
  0264f	c6 45 fc d5	 mov	 BYTE PTR __$EHRec$[ebp+8], 213 ; 000000d5H
  02653	8d 85 30 7e ff
	ff		 lea	 eax, DWORD PTR $T861[ebp]
  02659	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GJBAJHA@Pickering?5Interfaces?5Limited@
  0265e	50		 push	 eax
  0265f	8d 8d 90 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4960]
  02665	c7 85 30 7e ff
	ff de 2b 00 00	 mov	 DWORD PTR $T861[ebp], 11230 ; 00002bdeH
  0266f	c7 85 34 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T861[ebp+4], 0
  02679	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0267e	c6 45 fc d6	 mov	 BYTE PTR __$EHRec$[ebp+8], 214 ; 000000d6H
  02682	c7 85 28 7e ff
	ff df 2b 00 00	 mov	 DWORD PTR $T860[ebp], 11231 ; 00002bdfH
  0268c	c7 85 2c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T860[ebp+4], 0
  02696	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@NDBGMAEL@Hangzhou?5Hikvision?5Digital?5Tech@
  0269b	8d 85 28 7e ff
	ff		 lea	 eax, DWORD PTR $T860[ebp]
  026a1	50		 push	 eax
  026a2	8d 8d b0 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4992]
  026a8	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  026ad	c6 45 fc d7	 mov	 BYTE PTR __$EHRec$[ebp+8], 215 ; 000000d7H
  026b1	8d 85 20 7e ff
	ff		 lea	 eax, DWORD PTR $T859[ebp]
  026b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHPNLBPE@Fullink?5Technology?5Co?4?0?5Ltd@
  026bc	50		 push	 eax
  026bd	8d 8d d0 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5024]
  026c3	c7 85 20 7e ff
	ff e0 2b 00 00	 mov	 DWORD PTR $T859[ebp], 11232 ; 00002be0H
  026cd	c7 85 24 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T859[ebp+4], 0
  026d7	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  026dc	c6 45 fc d8	 mov	 BYTE PTR __$EHRec$[ebp+8], 216 ; 000000d8H
  026e0	8d 85 18 7e ff
	ff		 lea	 eax, DWORD PTR $T858[ebp]
  026e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EBLMKLMO@Electric?5Connector?5Technology?5C@
  026eb	50		 push	 eax
  026ec	8d 8d f0 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5056]
  026f2	c7 85 18 7e ff
	ff e2 2b 00 00	 mov	 DWORD PTR $T858[ebp], 11234 ; 00002be2H
  026fc	c7 85 1c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T858[ebp+4], 0
  02706	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0270b	c6 45 fc d9	 mov	 BYTE PTR __$EHRec$[ebp+8], 217 ; 000000d9H
  0270f	8d 85 10 7e ff
	ff		 lea	 eax, DWORD PTR $T857[ebp]
  02715	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LMCHNBEA@Dongguan?5KaiWin?5Electronics?5Co?4@
  0271a	50		 push	 eax
  0271b	8d 8d 10 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5088]
  02721	c7 85 10 7e ff
	ff e6 2b 00 00	 mov	 DWORD PTR $T857[ebp], 11238 ; 00002be6H
  0272b	c7 85 14 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T857[ebp+4], 0
  02735	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0273a	c6 45 fc da	 mov	 BYTE PTR __$EHRec$[ebp+8], 218 ; 000000daH
  0273e	8d 85 08 7e ff
	ff		 lea	 eax, DWORD PTR $T856[ebp]
  02744	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JDHEPKGJ@Archisite?0?5Inc?4@
  02749	50		 push	 eax
  0274a	8d 8d 30 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5120]
  02750	c7 85 08 7e ff
	ff e8 2b 00 00	 mov	 DWORD PTR $T856[ebp], 11240 ; 00002be8H
  0275a	c7 85 0c 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T856[ebp+4], 0
  02764	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  02769	c6 45 fc db	 mov	 BYTE PTR __$EHRec$[ebp+8], 219 ; 000000dbH
  0276d	8d 85 00 7e ff
	ff		 lea	 eax, DWORD PTR $T855[ebp]
  02773	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CNHODA@Ventev?5Mobile@
  02778	50		 push	 eax
  02779	8d 8d 50 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5152]
  0277f	c7 85 00 7e ff
	ff ee 2b 00 00	 mov	 DWORD PTR $T855[ebp], 11246 ; 00002beeH
  02789	c7 85 04 7e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T855[ebp+4], 0
  02793	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  02798	c6 45 fc dc	 mov	 BYTE PTR __$EHRec$[ebp+8], 220 ; 000000dcH
  0279c	8d 85 f8 7d ff
	ff		 lea	 eax, DWORD PTR $T854[ebp]
  027a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CDJNPKOM@Quanta?5Storage?5Inc?4@
  027a7	50		 push	 eax
  027a8	8d 8d 70 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5184]
  027ae	c7 85 f8 7d ff
	ff ef 2b 00 00	 mov	 DWORD PTR $T854[ebp], 11247 ; 00002befH
  027b8	c7 85 fc 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T854[ebp+4], 0
  027c2	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  027c7	c6 45 fc dd	 mov	 BYTE PTR __$EHRec$[ebp+8], 221 ; 000000ddH
  027cb	8d 85 f0 7d ff
	ff		 lea	 eax, DWORD PTR $T853[ebp]
  027d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BBJGGOEE@Shenzhen?5Sinotek?5Technology?5Co?4@
  027d6	50		 push	 eax
  027d7	8d 8d 90 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5216]
  027dd	c7 85 f0 7d ff
	ff f6 2b 00 00	 mov	 DWORD PTR $T853[ebp], 11254 ; 00002bf6H
  027e7	c7 85 f4 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T853[ebp+4], 0
  027f1	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  027f6	c6 45 fc de	 mov	 BYTE PTR __$EHRec$[ebp+8], 222 ; 000000deH
  027fa	8d 85 e8 7d ff
	ff		 lea	 eax, DWORD PTR $T852[ebp]
  02800	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HPBKMFEJ@Dongguan?5Arin?5Electronics?5Techn@
  02805	50		 push	 eax
  02806	8d 8d b0 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5248]
  0280c	c7 85 e8 7d ff
	ff 01 2c 00 00	 mov	 DWORD PTR $T852[ebp], 11265 ; 00002c01H
  02816	c7 85 ec 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T852[ebp+4], 0
  02820	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  02825	c6 45 fc df	 mov	 BYTE PTR __$EHRec$[ebp+8], 223 ; 000000dfH
  02829	c7 85 e0 7d ff
	ff 02 2c 00 00	 mov	 DWORD PTR $T851[ebp], 11266 ; 00002c02H
  02833	c7 85 e4 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T851[ebp+4], 0
  0283d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@HJMJIIHG@DongGuan?5City?5JianNuo?5Electroni@
  02842	8d 85 e0 7d ff
	ff		 lea	 eax, DWORD PTR $T851[ebp]
  02848	50		 push	 eax
  02849	8d 8d d0 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5280]
  0284f	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  02854	c6 45 fc e0	 mov	 BYTE PTR __$EHRec$[ebp+8], 224 ; 000000e0H
  02858	8d 85 d8 7d ff
	ff		 lea	 eax, DWORD PTR $T850[ebp]
  0285e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IHHLLIMO@Shenzhen?5XOX?5Electronics?5Co?4?0?5L@
  02863	50		 push	 eax
  02864	8d 8d f0 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5312]
  0286a	c7 85 d8 7d ff
	ff 04 2c 00 00	 mov	 DWORD PTR $T850[ebp], 11268 ; 00002c04H
  02874	c7 85 dc 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T850[ebp+4], 0
  0287e	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  02883	c6 45 fc e1	 mov	 BYTE PTR __$EHRec$[ebp+8], 225 ; 000000e1H
  02887	8d 85 d0 7d ff
	ff		 lea	 eax, DWORD PTR $T849[ebp]
  0288d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EPJCOFBH@Protop?5International?5Inc?4@
  02892	50		 push	 eax
  02893	8d 8d 10 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5344]
  02899	c7 85 d0 7d ff
	ff 05 2c 00 00	 mov	 DWORD PTR $T849[ebp], 11269 ; 00002c05H
  028a3	c7 85 d4 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T849[ebp+4], 0
  028ad	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  028b2	c6 45 fc e2	 mov	 BYTE PTR __$EHRec$[ebp+8], 226 ; 000000e2H
  028b6	8d 85 c8 7d ff
	ff		 lea	 eax, DWORD PTR $T848[ebp]
  028bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@CDDHDHPA@Microsemi?5Semiconductor?5?$CIUS?$CJ?5In@
  028c1	50		 push	 eax
  028c2	8d 8d 30 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5376]
  028c8	c7 85 c8 7d ff
	ff 06 2c 00 00	 mov	 DWORD PTR $T848[ebp], 11270 ; 00002c06H
  028d2	c7 85 cc 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T848[ebp+4], 0
  028dc	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  028e1	c6 45 fc e3	 mov	 BYTE PTR __$EHRec$[ebp+8], 227 ; 000000e3H
  028e5	8d 85 c0 7d ff
	ff		 lea	 eax, DWORD PTR $T847[ebp]
  028eb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LLBDLJHN@INVECAS?5INC?4@
  028f0	50		 push	 eax
  028f1	8d 8d 50 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5408]
  028f7	c7 85 c0 7d ff
	ff 08 2c 00 00	 mov	 DWORD PTR $T847[ebp], 11272 ; 00002c08H
  02901	c7 85 c4 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T847[ebp+4], 0
  0290b	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  02910	c6 45 fc e4	 mov	 BYTE PTR __$EHRec$[ebp+8], 228 ; 000000e4H
  02914	8d 85 b8 7d ff
	ff		 lea	 eax, DWORD PTR $T846[ebp]
  0291a	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@JLMCPDDE@Triple?5Win?5Precision?5Technology@
  0291f	50		 push	 eax
  02920	8d 8d 70 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5440]
  02926	c7 85 b8 7d ff
	ff 0b 2c 00 00	 mov	 DWORD PTR $T846[ebp], 11275 ; 00002c0bH
  02930	c7 85 bc 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T846[ebp+4], 0
  0293a	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  0293f	c6 45 fc e5	 mov	 BYTE PTR __$EHRec$[ebp+8], 229 ; 000000e5H
  02943	8d 85 b0 7d ff
	ff		 lea	 eax, DWORD PTR $T845[ebp]
  02949	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JJGMGNMK@Wieson?5Technologies?5Co?4?0?5Ltd?4@
  0294e	50		 push	 eax
  0294f	8d 8d 90 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5472]
  02955	c7 85 b0 7d ff
	ff 68 04 00 00	 mov	 DWORD PTR $T845[ebp], 1128 ; 00000468H
  0295f	c7 85 b4 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T845[ebp+4], 0
  02969	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0296e	c6 45 fc e6	 mov	 BYTE PTR __$EHRec$[ebp+8], 230 ; 000000e6H
  02972	8d 85 a8 7d ff
	ff		 lea	 eax, DWORD PTR $T844[ebp]
  02978	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OMJOIMCB@ALLBEST?5ELECTRONICS?5TECHNOLOGY?5@
  0297d	50		 push	 eax
  0297e	8d 8d b0 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5504]
  02984	c7 85 a8 7d ff
	ff 11 2c 00 00	 mov	 DWORD PTR $T844[ebp], 11281 ; 00002c11H
  0298e	c7 85 ac 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T844[ebp+4], 0
  02998	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0299d	c6 45 fc e7	 mov	 BYTE PTR __$EHRec$[ebp+8], 231 ; 000000e7H
  029a1	8d 85 a0 7d ff
	ff		 lea	 eax, DWORD PTR $T843[ebp]
  029a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HILLIJIO@Buffalo?5Memory?5Co?4?0?5Ltd?4@
  029ac	50		 push	 eax
  029ad	8d 8d d0 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5536]
  029b3	c7 85 a0 7d ff
	ff 14 2c 00 00	 mov	 DWORD PTR $T843[ebp], 11284 ; 00002c14H
  029bd	c7 85 a4 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T843[ebp+4], 0
  029c7	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  029cc	c6 45 fc e8	 mov	 BYTE PTR __$EHRec$[ebp+8], 232 ; 000000e8H
  029d0	c7 85 98 7d ff
	ff 15 2c 00 00	 mov	 DWORD PTR $T842[ebp], 11285 ; 00002c15H
  029da	c7 85 9c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T842[ebp+4], 0
  029e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DKIJINPN@Xentris?5Wireless@
  029e9	8d 85 98 7d ff
	ff		 lea	 eax, DWORD PTR $T842[ebp]
  029ef	50		 push	 eax
  029f0	8d 8d f0 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5568]
  029f6	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  029fb	c6 45 fc e9	 mov	 BYTE PTR __$EHRec$[ebp+8], 233 ; 000000e9H
  029ff	8d 85 90 7d ff
	ff		 lea	 eax, DWORD PTR $T841[ebp]
  02a05	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NLLJAIMO@Sunlike?5Technology?5Co?4?0?5Ltd?4@
  02a0a	50		 push	 eax
  02a0b	8d 8d 10 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5600]
  02a11	c7 85 90 7d ff
	ff 19 2c 00 00	 mov	 DWORD PTR $T841[ebp], 11289 ; 00002c19H
  02a1b	c7 85 94 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T841[ebp+4], 0
  02a25	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  02a2a	c6 45 fc ea	 mov	 BYTE PTR __$EHRec$[ebp+8], 234 ; 000000eaH
  02a2e	8d 85 88 7d ff
	ff		 lea	 eax, DWORD PTR $T840[ebp]
  02a34	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JOEEEHPJ@Young?5Fast?5Optoelectronics?5Co?4?0@
  02a39	50		 push	 eax
  02a3a	8d 8d 30 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5632]
  02a40	c7 85 88 7d ff
	ff 1a 2c 00 00	 mov	 DWORD PTR $T840[ebp], 11290 ; 00002c1aH
  02a4a	c7 85 8c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T840[ebp+4], 0
  02a54	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  02a59	c6 45 fc eb	 mov	 BYTE PTR __$EHRec$[ebp+8], 235 ; 000000ebH
  02a5d	8d 85 80 7d ff
	ff		 lea	 eax, DWORD PTR $T839[ebp]
  02a63	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CDEOCILD@Qanba?5USA?0?5LLC@
  02a68	50		 push	 eax
  02a69	8d 8d 50 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5664]
  02a6f	c7 85 80 7d ff
	ff 22 2c 00 00	 mov	 DWORD PTR $T839[ebp], 11298 ; 00002c22H
  02a79	c7 85 84 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T839[ebp+4], 0
  02a83	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  02a88	c6 45 fc ec	 mov	 BYTE PTR __$EHRec$[ebp+8], 236 ; 000000ecH
  02a8c	8d 85 78 7d ff
	ff		 lea	 eax, DWORD PTR $T838[ebp]
  02a92	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JEFPHDAK@American?5Megatrends@
  02a97	50		 push	 eax
  02a98	8d 8d 70 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5696]
  02a9e	c7 85 78 7d ff
	ff 6b 04 00 00	 mov	 DWORD PTR $T838[ebp], 1131 ; 0000046bH
  02aa8	c7 85 7c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T838[ebp+4], 0
  02ab2	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  02ab7	c6 45 fc ed	 mov	 BYTE PTR __$EHRec$[ebp+8], 237 ; 000000edH
  02abb	8d 85 70 7d ff
	ff		 lea	 eax, DWORD PTR $T837[ebp]
  02ac1	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NOPPPJKO@Hualun?5Technology?5Co?4?0?5Ltd?4?5?9?5L@
  02ac6	50		 push	 eax
  02ac7	8d 8d 90 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5728]
  02acd	c7 85 70 7d ff
	ff 2e 2c 00 00	 mov	 DWORD PTR $T837[ebp], 11310 ; 00002c2eH
  02ad7	c7 85 74 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T837[ebp+4], 0
  02ae1	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  02ae6	c6 45 fc ee	 mov	 BYTE PTR __$EHRec$[ebp+8], 238 ; 000000eeH
  02aea	8d 85 68 7d ff
	ff		 lea	 eax, DWORD PTR $T836[ebp]
  02af0	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JIBCINJG@JIB?5Electronics?5Technology?5Co?4?0@
  02af5	50		 push	 eax
  02af6	8d 8d b0 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5760]
  02afc	c7 85 68 7d ff
	ff 39 2c 00 00	 mov	 DWORD PTR $T836[ebp], 11321 ; 00002c39H
  02b06	c7 85 6c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T836[ebp+4], 0
  02b10	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  02b15	c6 45 fc ef	 mov	 BYTE PTR __$EHRec$[ebp+8], 239 ; 000000efH
  02b19	8d 85 60 7d ff
	ff		 lea	 eax, DWORD PTR $T835[ebp]
  02b1f	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NFDKMDEH@Shenzhen?5Hangsheng?5Electronics?5@
  02b24	50		 push	 eax
  02b25	8d 8d d0 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5792]
  02b2b	c7 85 60 7d ff
	ff 3b 2c 00 00	 mov	 DWORD PTR $T835[ebp], 11323 ; 00002c3bH
  02b35	c7 85 64 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T835[ebp+4], 0
  02b3f	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  02b44	c6 45 fc f0	 mov	 BYTE PTR __$EHRec$[ebp+8], 240 ; 000000f0H
  02b48	8d 85 58 7d ff
	ff		 lea	 eax, DWORD PTR $T834[ebp]
  02b4e	68 00 00 00 00	 push	 OFFSET ??_C@_09LBDOMPFP@Leadtrend@
  02b53	50		 push	 eax
  02b54	8d 8d f0 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5824]
  02b5a	c7 85 58 7d ff
	ff 40 2c 00 00	 mov	 DWORD PTR $T834[ebp], 11328 ; 00002c40H
  02b64	c7 85 5c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T834[ebp+4], 0
  02b6e	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  02b73	c6 45 fc f1	 mov	 BYTE PTR __$EHRec$[ebp+8], 241 ; 000000f1H
  02b77	c7 85 50 7d ff
	ff 6d 04 00 00	 mov	 DWORD PTR $T833[ebp], 1133 ; 0000046dH
  02b81	c7 85 54 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T833[ebp+4], 0
  02b8b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NMJDEFAN@Logitech?5Inc?4@
  02b90	8d 85 50 7d ff
	ff		 lea	 eax, DWORD PTR $T833[ebp]
  02b96	50		 push	 eax
  02b97	8d 8d 10 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5856]
  02b9d	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  02ba2	c6 45 fc f2	 mov	 BYTE PTR __$EHRec$[ebp+8], 242 ; 000000f2H
  02ba6	8d 85 48 7d ff
	ff		 lea	 eax, DWORD PTR $T832[ebp]
  02bac	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OPCGHFPE@Feature?5Integration?5Technology?5@
  02bb1	50		 push	 eax
  02bb2	8d 8d 30 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5888]
  02bb8	c7 85 48 7d ff
	ff 42 2c 00 00	 mov	 DWORD PTR $T832[ebp], 11330 ; 00002c42H
  02bc2	c7 85 4c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T832[ebp+4], 0
  02bcc	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  02bd1	c6 45 fc f3	 mov	 BYTE PTR __$EHRec$[ebp+8], 243 ; 000000f3H
  02bd5	8d 85 40 7d ff
	ff		 lea	 eax, DWORD PTR $T831[ebp]
  02bdb	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@NDHEONJM@Delphi?5Electrical?5Centers?5?$CIShan@
  02be0	50		 push	 eax
  02be1	8d 8d 50 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5920]
  02be7	c7 85 40 7d ff
	ff 48 2c 00 00	 mov	 DWORD PTR $T831[ebp], 11336 ; 00002c48H
  02bf1	c7 85 44 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T831[ebp+4], 0
  02bfb	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  02c00	c6 45 fc f4	 mov	 BYTE PTR __$EHRec$[ebp+8], 244 ; 000000f4H
  02c04	8d 85 38 7d ff
	ff		 lea	 eax, DWORD PTR $T830[ebp]
  02c0a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@OGKLOPNP@Huizhou?5Foryou?5General?5Electron@
  02c0f	50		 push	 eax
  02c10	8d 8d 70 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5952]
  02c16	c7 85 38 7d ff
	ff 53 2c 00 00	 mov	 DWORD PTR $T830[ebp], 11347 ; 00002c53H
  02c20	c7 85 3c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T830[ebp+4], 0
  02c2a	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  02c2f	c6 45 fc f5	 mov	 BYTE PTR __$EHRec$[ebp+8], 245 ; 000000f5H
  02c33	8d 85 30 7d ff
	ff		 lea	 eax, DWORD PTR $T829[ebp]
  02c39	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNAANFII@Shenglan?5Technology?5Co?4?5Ltd@
  02c3e	50		 push	 eax
  02c3f	8d 8d 90 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5984]
  02c45	c7 85 30 7d ff
	ff 5b 2c 00 00	 mov	 DWORD PTR $T829[ebp], 11355 ; 00002c5bH
  02c4f	c7 85 34 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T829[ebp+4], 0
  02c59	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  02c5e	c6 45 fc f6	 mov	 BYTE PTR __$EHRec$[ebp+8], 246 ; 000000f6H
  02c62	8d 85 28 7d ff
	ff		 lea	 eax, DWORD PTR $T828[ebp]
  02c68	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MBJBPOAM@Neusoft?5Corporation@
  02c6d	50		 push	 eax
  02c6e	8d 8d b0 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6016]
  02c74	c7 85 28 7d ff
	ff 5c 2c 00 00	 mov	 DWORD PTR $T828[ebp], 11356 ; 00002c5cH
  02c7e	c7 85 2c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T828[ebp+4], 0
  02c88	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  02c8d	c6 45 fc f7	 mov	 BYTE PTR __$EHRec$[ebp+8], 247 ; 000000f7H
  02c91	8d 85 20 7d ff
	ff		 lea	 eax, DWORD PTR $T827[ebp]
  02c97	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LBNLCEA@Gibson?5Innovations@
  02c9c	50		 push	 eax
  02c9d	8d 8d d0 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6048]
  02ca3	c7 85 20 7d ff
	ff 6d 2c 00 00	 mov	 DWORD PTR $T827[ebp], 11373 ; 00002c6dH
  02cad	c7 85 24 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T827[ebp+4], 0
  02cb7	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  02cbc	c6 45 fc f8	 mov	 BYTE PTR __$EHRec$[ebp+8], 248 ; 000000f8H
  02cc0	8d 85 18 7d ff
	ff		 lea	 eax, DWORD PTR $T826[ebp]
  02cc6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FMBKDJNC@Shen?5Zhen?5Xian?5Shuo?5Technology?5@
  02ccb	50		 push	 eax
  02ccc	8d 8d f0 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6080]
  02cd2	c7 85 18 7d ff
	ff 6e 2c 00 00	 mov	 DWORD PTR $T826[ebp], 11374 ; 00002c6eH
  02cdc	c7 85 1c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T826[ebp+4], 0
  02ce6	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  02ceb	c6 45 fc f9	 mov	 BYTE PTR __$EHRec$[ebp+8], 249 ; 000000f9H
  02cef	8d 85 10 7d ff
	ff		 lea	 eax, DWORD PTR $T825[ebp]
  02cf5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MLFPCAKA@BRAGI?5GmbH@
  02cfa	50		 push	 eax
  02cfb	8d 8d 10 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6112]
  02d01	c7 85 10 7d ff
	ff 78 2c 00 00	 mov	 DWORD PTR $T825[ebp], 11384 ; 00002c78H
  02d0b	c7 85 14 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T825[ebp+4], 0
  02d15	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  02d1a	c6 45 fc fa	 mov	 BYTE PTR __$EHRec$[ebp+8], 250 ; 000000faH
  02d1e	c7 85 08 7d ff
	ff 7f 2c 00 00	 mov	 DWORD PTR $T824[ebp], 11391 ; 00002c7fH
  02d28	c7 85 0c 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T824[ebp+4], 0
  02d32	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EIMPFJCL@Shenzhen?5D?9VITEC?5Industrial?5Co?4@
  02d37	8d 85 08 7d ff
	ff		 lea	 eax, DWORD PTR $T824[ebp]
  02d3d	50		 push	 eax
  02d3e	8d 8d 30 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6144]
  02d44	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  02d49	c6 45 fc fb	 mov	 BYTE PTR __$EHRec$[ebp+8], 251 ; 000000fbH
  02d4d	8d 85 00 7d ff
	ff		 lea	 eax, DWORD PTR $T823[ebp]
  02d53	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GJPLDHGD@PowerCenter?5Technology?5Limited@
  02d58	50		 push	 eax
  02d59	8d 8d 50 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6176]
  02d5f	c7 85 00 7d ff
	ff 8c 2c 00 00	 mov	 DWORD PTR $T823[ebp], 11404 ; 00002c8cH
  02d69	c7 85 04 7d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T823[ebp+4], 0
  02d73	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  02d78	c6 45 fc fc	 mov	 BYTE PTR __$EHRec$[ebp+8], 252 ; 000000fcH
  02d7c	8d 85 f8 7c ff
	ff		 lea	 eax, DWORD PTR $T822[ebp]
  02d82	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EEGPMNM@Mizco?5International?0?5Inc?4@
  02d87	50		 push	 eax
  02d88	8d 8d 70 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6208]
  02d8e	c7 85 f8 7c ff
	ff 8d 2c 00 00	 mov	 DWORD PTR $T822[ebp], 11405 ; 00002c8dH
  02d98	c7 85 fc 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T822[ebp+4], 0
  02da2	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  02da7	c6 45 fc fd	 mov	 BYTE PTR __$EHRec$[ebp+8], 253 ; 000000fdH
  02dab	8d 85 f0 7c ff
	ff		 lea	 eax, DWORD PTR $T821[ebp]
  02db1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NODKIBPO@Corigine?0?5Inc?4@
  02db6	50		 push	 eax
  02db7	8d 8d 90 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6240]
  02dbd	c7 85 f0 7c ff
	ff 91 2c 00 00	 mov	 DWORD PTR $T821[ebp], 11409 ; 00002c91H
  02dc7	c7 85 f4 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T821[ebp+4], 0
  02dd1	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  02dd6	c6 45 fc fe	 mov	 BYTE PTR __$EHRec$[ebp+8], 254 ; 000000feH
  02dda	8d 85 e8 7c ff
	ff		 lea	 eax, DWORD PTR $T820[ebp]
  02de0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OPCAMB@Prusa?5Research?5s?4r?4o?4@
  02de5	50		 push	 eax
  02de6	8d 8d b0 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6272]
  02dec	c7 85 e8 7c ff
	ff 99 2c 00 00	 mov	 DWORD PTR $T820[ebp], 11417 ; 00002c99H
  02df6	c7 85 ec 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T820[ebp+4], 0
  02e00	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  02e05	c6 45 fc ff	 mov	 BYTE PTR __$EHRec$[ebp+8], 255 ; 000000ffH
  02e09	8d 85 e0 7c ff
	ff		 lea	 eax, DWORD PTR $T819[ebp]
  02e0f	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KPGNCHGA@Leagtech?5Jiangxi?5Electronic?5Co?4@
  02e14	50		 push	 eax
  02e15	8d 8d d0 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6304]
  02e1b	c7 85 e0 7c ff
	ff a0 2c 00 00	 mov	 DWORD PTR $T819[ebp], 11424 ; 00002ca0H
  02e25	c7 85 e4 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T819[ebp+4], 0
  02e2f	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  02e34	c7 45 fc 00 01
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 256 ; 00000100H
  02e3b	8d 85 d8 7c ff
	ff		 lea	 eax, DWORD PTR $T818[ebp]
  02e41	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OILOHGB@Veetone?5Technologies?5Limited@
  02e46	50		 push	 eax
  02e47	8d 8d f0 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6336]
  02e4d	c7 85 d8 7c ff
	ff a1 2c 00 00	 mov	 DWORD PTR $T818[ebp], 11425 ; 00002ca1H
  02e57	c7 85 dc 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T818[ebp+4], 0
  02e61	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  02e66	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  02e6a	8d 85 d0 7c ff
	ff		 lea	 eax, DWORD PTR $T817[ebp]
  02e70	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MAGNEPGM@DJI?5Technology?5Co?4?0?5Ltd?4@
  02e75	50		 push	 eax
  02e76	8d 8d 10 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6368]
  02e7c	c7 85 d0 7c ff
	ff a3 2c 00 00	 mov	 DWORD PTR $T817[ebp], 11427 ; 00002ca3H
  02e86	c7 85 d4 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T817[ebp+4], 0
  02e90	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  02e95	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  02e99	8d 85 c8 7c ff
	ff		 lea	 eax, DWORD PTR $T816[ebp]
  02e9f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JPBDNOKB@Shenzhen?5Alex?5Technology?5Co?4?0?5L@
  02ea4	50		 push	 eax
  02ea5	8d 8d 30 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6400]
  02eab	c7 85 c8 7c ff
	ff a4 2c 00 00	 mov	 DWORD PTR $T816[ebp], 11428 ; 00002ca4H
  02eb5	c7 85 cc 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T816[ebp+4], 0
  02ebf	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  02ec4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  02ec8	c7 85 c0 7c ff
	ff b4 2c 00 00	 mov	 DWORD PTR $T815[ebp], 11444 ; 00002cb4H
  02ed2	c7 85 c4 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T815[ebp+4], 0
  02edc	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LINGMNGG@Ava?5Enterprises?0?5Inc?4?5dba?5Boss?5@
  02ee1	8d 85 c0 7c ff
	ff		 lea	 eax, DWORD PTR $T815[ebp]
  02ee7	50		 push	 eax
  02ee8	8d 8d 50 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6432]
  02eee	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  02ef3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  02ef7	8d 85 b8 7c ff
	ff		 lea	 eax, DWORD PTR $T814[ebp]
  02efd	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NIIHGCJE@On?9Bright?5Electronics?5?$CIShanghai@
  02f02	50		 push	 eax
  02f03	8d 8d 70 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6464]
  02f09	c7 85 b8 7c ff
	ff b9 2c 00 00	 mov	 DWORD PTR $T814[ebp], 11449 ; 00002cb9H
  02f13	c7 85 bc 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T814[ebp+4], 0
  02f1d	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  02f22	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  02f26	8d 85 b0 7c ff
	ff		 lea	 eax, DWORD PTR $T813[ebp]
  02f2c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KPNJDODK@Dongguan?5Puxu?5Industrial?5Co?4?0?5L@
  02f31	50		 push	 eax
  02f32	8d 8d 90 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6496]
  02f38	c7 85 b0 7c ff
	ff ba 2c 00 00	 mov	 DWORD PTR $T813[ebp], 11450 ; 00002cbaH
  02f42	c7 85 b4 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T813[ebp+4], 0
  02f4c	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  02f51	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  02f55	8d 85 a8 7c ff
	ff		 lea	 eax, DWORD PTR $T812[ebp]
  02f5b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IICIKNAG@Shenzhen?5Soling?5Indusrtial?5Co?4?0@
  02f60	50		 push	 eax
  02f61	8d 8d b0 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6528]
  02f67	c7 85 a8 7c ff
	ff bb 2c 00 00	 mov	 DWORD PTR $T812[ebp], 11451 ; 00002cbbH
  02f71	c7 85 ac 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T812[ebp+4], 0
  02f7b	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  02f80	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  02f84	8d 85 a0 7c ff
	ff		 lea	 eax, DWORD PTR $T811[ebp]
  02f8a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FBFHEDN@Semtech?5Corporation@
  02f8f	50		 push	 eax
  02f90	8d 8d d0 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6560]
  02f96	c7 85 a0 7c ff
	ff 7a 04 00 00	 mov	 DWORD PTR $T811[ebp], 1146 ; 0000047aH
  02fa0	c7 85 a4 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T811[ebp+4], 0
  02faa	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  02faf	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  02fb3	8d 85 98 7c ff
	ff		 lea	 eax, DWORD PTR $T810[ebp]
  02fb9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GDAADFIM@Hewlett?5Packard?5Enterprise@
  02fbe	50		 push	 eax
  02fbf	8d 8d f0 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6592]
  02fc5	c7 85 98 7c ff
	ff c8 2c 00 00	 mov	 DWORD PTR $T810[ebp], 11464 ; 00002cc8H
  02fcf	c7 85 9c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T810[ebp+4], 0
  02fd9	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  02fde	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  02fe2	8d 85 90 7c ff
	ff		 lea	 eax, DWORD PTR $T809[ebp]
  02fe8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NEDOEENG@Monolithic?5Power?5Systems?5Inc?4@
  02fed	50		 push	 eax
  02fee	8d 8d 10 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6624]
  02ff4	c7 85 90 7c ff
	ff c9 2c 00 00	 mov	 DWORD PTR $T809[ebp], 11465 ; 00002cc9H
  02ffe	c7 85 94 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T809[ebp+4], 0
  03008	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0300d	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  03011	8d 85 88 7c ff
	ff		 lea	 eax, DWORD PTR $T808[ebp]
  03017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MMLLGNFB@Silicon?5Mitus?5Inc?4@
  0301c	50		 push	 eax
  0301d	8d 8d 30 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6656]
  03023	c7 85 88 7c ff
	ff cc 2c 00 00	 mov	 DWORD PTR $T808[ebp], 11468 ; 00002cccH
  0302d	c7 85 8c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T808[ebp+4], 0
  03037	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0303c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  03040	8d 85 80 7c ff
	ff		 lea	 eax, DWORD PTR $T807[ebp]
  03046	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KLNJFLOK@Cosemi?5Technologies?5Inc?4@
  0304b	50		 push	 eax
  0304c	8d 8d 50 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6688]
  03052	c7 85 80 7c ff
	ff d7 2c 00 00	 mov	 DWORD PTR $T807[ebp], 11479 ; 00002cd7H
  0305c	c7 85 84 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T807[ebp+4], 0
  03066	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0306b	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0306f	c7 85 78 7c ff
	ff d9 2c 00 00	 mov	 DWORD PTR $T806[ebp], 11481 ; 00002cd9H
  03079	c7 85 7c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T806[ebp+4], 0
  03083	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BJPMNDLE@Cambrionix?5Ltd@
  03088	8d 85 78 7c ff
	ff		 lea	 eax, DWORD PTR $T806[ebp]
  0308e	50		 push	 eax
  0308f	8d 8d 70 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6720]
  03095	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0309a	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0309e	8d 85 70 7c ff
	ff		 lea	 eax, DWORD PTR $T805[ebp]
  030a4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GENDIOFK@CXUN?5Co?4?5Ltd?4@
  030a9	50		 push	 eax
  030aa	8d 8d 90 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6752]
  030b0	c7 85 70 7c ff
	ff da 2c 00 00	 mov	 DWORD PTR $T805[ebp], 11482 ; 00002cdaH
  030ba	c7 85 74 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T805[ebp+4], 0
  030c4	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  030c9	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  030cd	8d 85 68 7c ff
	ff		 lea	 eax, DWORD PTR $T804[ebp]
  030d3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GAGLIHNN@China?5Tsp?5Inc@
  030d8	50		 push	 eax
  030d9	8d 8d b0 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6784]
  030df	c7 85 68 7c ff
	ff db 2c 00 00	 mov	 DWORD PTR $T804[ebp], 11483 ; 00002cdbH
  030e9	c7 85 6c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T804[ebp+4], 0
  030f3	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  030f8	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  030fc	8d 85 60 7c ff
	ff		 lea	 eax, DWORD PTR $T803[ebp]
  03102	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LLMLOCHH@Kensington@
  03107	50		 push	 eax
  03108	8d 8d d0 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6816]
  0310e	c7 85 60 7c ff
	ff 7d 04 00 00	 mov	 DWORD PTR $T803[ebp], 1149 ; 0000047dH
  03118	c7 85 64 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T803[ebp+4], 0
  03122	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  03127	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0312b	8d 85 58 7c ff
	ff		 lea	 eax, DWORD PTR $T802[ebp]
  03131	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@PAADLJKP@Yanfeng?5Visteon?5?$CIChongqing?$CJ?5Aut@
  03136	50		 push	 eax
  03137	8d 8d f0 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6848]
  0313d	c7 85 58 7c ff
	ff e2 2c 00 00	 mov	 DWORD PTR $T802[ebp], 11490 ; 00002ce2H
  03147	c7 85 5c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T802[ebp+4], 0
  03151	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  03156	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  0315a	8d 85 50 7c ff
	ff		 lea	 eax, DWORD PTR $T801[ebp]
  03160	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CIBIOAAD@Alcorlink?5Corp?4@
  03165	50		 push	 eax
  03166	8d 8d 10 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6880]
  0316c	c7 85 50 7c ff
	ff e3 2c 00 00	 mov	 DWORD PTR $T801[ebp], 11491 ; 00002ce3H
  03176	c7 85 54 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T801[ebp+4], 0
  03180	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  03185	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  03189	8d 85 48 7c ff
	ff		 lea	 eax, DWORD PTR $T800[ebp]
  0318f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@FDBCEAKG@Lemobile?5Information?5Technology@
  03194	50		 push	 eax
  03195	8d 8d 30 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6912]
  0319b	c7 85 48 7c ff
	ff e7 2c 00 00	 mov	 DWORD PTR $T800[ebp], 11495 ; 00002ce7H
  031a5	c7 85 4c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T800[ebp+4], 0
  031af	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  031b4	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  031b8	8d 85 40 7c ff
	ff		 lea	 eax, DWORD PTR $T799[ebp]
  031be	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FFKIBGAN@DongGuan?5Hongweixiang?5Electroni@
  031c3	50		 push	 eax
  031c4	8d 8d 50 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6944]
  031ca	c7 85 40 7c ff
	ff e8 2c 00 00	 mov	 DWORD PTR $T799[ebp], 11496 ; 00002ce8H
  031d4	c7 85 44 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T799[ebp+4], 0
  031de	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  031e3	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  031e7	8d 85 38 7c ff
	ff		 lea	 eax, DWORD PTR $T798[ebp]
  031ed	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PDHADDLM@Suzhu?5Jingshi?5Electronic?5Techno@
  031f2	50		 push	 eax
  031f3	8d 8d 70 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6976]
  031f9	c7 85 38 7c ff
	ff e9 2c 00 00	 mov	 DWORD PTR $T798[ebp], 11497 ; 00002ce9H
  03203	c7 85 3c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T798[ebp+4], 0
  0320d	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  03212	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  03216	c7 85 30 7c ff
	ff ea 2c 00 00	 mov	 DWORD PTR $T797[ebp], 11498 ; 00002ceaH
  03220	c7 85 34 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T797[ebp+4], 0
  0322a	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CGKLDFK@Zhong?5Shan?5City?5Richsound?5Elect@
  0322f	8d 85 30 7c ff
	ff		 lea	 eax, DWORD PTR $T797[ebp]
  03235	50		 push	 eax
  03236	8d 8d 90 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7008]
  0323c	e8 00 00 00 00	 call	 ??$?0_KAAY0DF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[53],0>
  03241	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  03245	8d 85 28 7c ff
	ff		 lea	 eax, DWORD PTR $T796[ebp]
  0324b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DFFMGPM@Dongguang?5Kangbang?5Electronics?5@
  03250	50		 push	 eax
  03251	8d 8d b0 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7040]
  03257	c7 85 28 7c ff
	ff eb 2c 00 00	 mov	 DWORD PTR $T796[ebp], 11499 ; 00002cebH
  03261	c7 85 2c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T796[ebp+4], 0
  0326b	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  03270	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  03274	8d 85 20 7c ff
	ff		 lea	 eax, DWORD PTR $T795[ebp]
  0327a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NHFPPOHA@Winpower?5?$CG?5Qmadix?5Technology?5Co@
  0327f	50		 push	 eax
  03280	8d 8d d0 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7072]
  03286	c7 85 20 7c ff
	ff ee 2c 00 00	 mov	 DWORD PTR $T795[ebp], 11502 ; 00002ceeH
  03290	c7 85 24 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T795[ebp+4], 0
  0329a	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0329f	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  032a3	8d 85 18 7c ff
	ff		 lea	 eax, DWORD PTR $T794[ebp]
  032a9	68 00 00 00 00	 push	 OFFSET ??_C@_09LPAOEEIP@DTS?0?5Inc?4@
  032ae	50		 push	 eax
  032af	8d 8d f0 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7104]
  032b5	c7 85 18 7c ff
	ff f1 2c 00 00	 mov	 DWORD PTR $T794[ebp], 11505 ; 00002cf1H
  032bf	c7 85 1c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T794[ebp+4], 0
  032c9	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  032ce	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  032d2	8d 85 10 7c ff
	ff		 lea	 eax, DWORD PTR $T793[ebp]
  032d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@ELGJLDDL@KUNSHAN?5DLK?5Electronics?5Technol@
  032dd	50		 push	 eax
  032de	8d 8d 10 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7136]
  032e4	c7 85 10 7c ff
	ff f2 2c 00 00	 mov	 DWORD PTR $T793[ebp], 11506 ; 00002cf2H
  032ee	c7 85 14 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T793[ebp+4], 0
  032f8	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  032fd	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  03301	8d 85 08 7c ff
	ff		 lea	 eax, DWORD PTR $T792[ebp]
  03307	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JKCENOI@Plantronics?0?5Inc?4@
  0330c	50		 push	 eax
  0330d	8d 8d 30 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7168]
  03313	c7 85 08 7c ff
	ff 7f 04 00 00	 mov	 DWORD PTR $T792[ebp], 1151 ; 0000047fH
  0331d	c7 85 0c 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T792[ebp+4], 0
  03327	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0332c	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  03330	8d 85 00 7c ff
	ff		 lea	 eax, DWORD PTR $T791[ebp]
  03336	68 00 00 00 00	 push	 OFFSET ??_C@_05BDPLOBNE@Itron@
  0333b	50		 push	 eax
  0333c	8d 8d 50 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7200]
  03342	c7 85 00 7c ff
	ff f8 2c 00 00	 mov	 DWORD PTR $T791[ebp], 11512 ; 00002cf8H
  0334c	c7 85 04 7c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T791[ebp+4], 0
  03356	e8 00 00 00 00	 call	 ??$?0_KAAY05$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY05$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[6],0>
  0335b	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0335f	8d 85 f8 7b ff
	ff		 lea	 eax, DWORD PTR $T790[ebp]
  03365	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OAIOCOJG@Meta?5Company@
  0336a	50		 push	 eax
  0336b	8d 8d 70 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7232]
  03371	c7 85 f8 7b ff
	ff fa 2c 00 00	 mov	 DWORD PTR $T790[ebp], 11514 ; 00002cfaH
  0337b	c7 85 fc 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T790[ebp+4], 0
  03385	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  0338a	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0338e	8d 85 f0 7b ff
	ff		 lea	 eax, DWORD PTR $T789[ebp]
  03394	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GCFFHKPN@Nanchang?5Haozhun?5Electronics?5Co@
  03399	50		 push	 eax
  0339a	8d 8d 90 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7264]
  033a0	c7 85 f0 7b ff
	ff fb 2c 00 00	 mov	 DWORD PTR $T789[ebp], 11515 ; 00002cfbH
  033aa	c7 85 f4 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T789[ebp+4], 0
  033b4	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  033b9	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  033bd	c7 85 e8 7b ff
	ff fe 2c 00 00	 mov	 DWORD PTR $T788[ebp], 11518 ; 00002cfeH
  033c7	c7 85 ec 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T788[ebp+4], 0
  033d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OBJOEKEK@Alpha?5Data?5Parallel?5Systems@
  033d6	8d 85 e8 7b ff
	ff		 lea	 eax, DWORD PTR $T788[ebp]
  033dc	50		 push	 eax
  033dd	8d 8d b0 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7296]
  033e3	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  033e8	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  033ec	8d 85 e0 7b ff
	ff		 lea	 eax, DWORD PTR $T787[ebp]
  033f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KBGMLIIK@Gopod?5Group?5Limited@
  033f7	50		 push	 eax
  033f8	8d 8d d0 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7328]
  033fe	c7 85 e0 7b ff
	ff 01 2d 00 00	 mov	 DWORD PTR $T787[ebp], 11521 ; 00002d01H
  03408	c7 85 e4 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T787[ebp+4], 0
  03412	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  03417	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  0341b	8d 85 d8 7b ff
	ff		 lea	 eax, DWORD PTR $T786[ebp]
  03421	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@FLJLINKJ@Dongguan?5Evervictory?5Electronic@
  03426	50		 push	 eax
  03427	8d 8d f0 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7360]
  0342d	c7 85 d8 7b ff
	ff 09 2d 00 00	 mov	 DWORD PTR $T786[ebp], 11529 ; 00002d09H
  03437	c7 85 dc 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T786[ebp+4], 0
  03441	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  03446	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  0344a	8d 85 d0 7b ff
	ff		 lea	 eax, DWORD PTR $T785[ebp]
  03450	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IGBFJBHE@Kingsignal?5Technology?5Co?4?0?5Ltd?4@
  03455	50		 push	 eax
  03456	8d 8d 10 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7392]
  0345c	c7 85 d0 7b ff
	ff 0a 2d 00 00	 mov	 DWORD PTR $T785[ebp], 11530 ; 00002d0aH
  03466	c7 85 d4 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T785[ebp+4], 0
  03470	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  03475	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  03479	8d 85 c8 7b ff
	ff		 lea	 eax, DWORD PTR $T784[ebp]
  0347f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GNDJLIIP@Linxee?5?$CIBeijing?$CJ?5Technology?5LTD@
  03484	50		 push	 eax
  03485	8d 8d 30 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7424]
  0348b	c7 85 c8 7b ff
	ff 0e 2d 00 00	 mov	 DWORD PTR $T784[ebp], 11534 ; 00002d0eH
  03495	c7 85 cc 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T784[ebp+4], 0
  0349f	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  034a4	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  034a8	8d 85 c0 7b ff
	ff		 lea	 eax, DWORD PTR $T783[ebp]
  034ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CKDJICMG@M8TRIX?5TECH?5LLC@
  034b3	50		 push	 eax
  034b4	8d 8d 50 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7456]
  034ba	c7 85 c0 7b ff
	ff 0f 2d 00 00	 mov	 DWORD PTR $T783[ebp], 11535 ; 00002d0fH
  034c4	c7 85 c4 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T783[ebp+4], 0
  034ce	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  034d3	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
  034d7	8d 85 b8 7b ff
	ff		 lea	 eax, DWORD PTR $T782[ebp]
  034dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@FHNLCAG@Shenzhen?5San?5Guan?5Si?5Yuan?5Techn@
  034e2	50		 push	 eax
  034e3	8d 8d 70 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7488]
  034e9	c7 85 b8 7b ff
	ff 10 2d 00 00	 mov	 DWORD PTR $T782[ebp], 11536 ; 00002d10H
  034f3	c7 85 bc 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T782[ebp+4], 0
  034fd	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  03502	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
  03506	8d 85 b0 7b ff
	ff		 lea	 eax, DWORD PTR $T781[ebp]
  0350c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKAJDFPM@DONG?5GUAN?5EBEN?5ELECTRONIC?5CO?4?0?5@
  03511	50		 push	 eax
  03512	8d 8d 90 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7520]
  03518	c7 85 b0 7b ff
	ff 13 2d 00 00	 mov	 DWORD PTR $T781[ebp], 11539 ; 00002d13H
  03522	c7 85 b4 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T781[ebp+4], 0
  0352c	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  03531	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  03535	8d 85 a8 7b ff
	ff		 lea	 eax, DWORD PTR $T780[ebp]
  0353b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OKFLBHJF@Kyocera?5Corporation@
  03540	50		 push	 eax
  03541	8d 8d b0 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7552]
  03547	c7 85 a8 7b ff
	ff 82 04 00 00	 mov	 DWORD PTR $T780[ebp], 1154 ; 00000482H
  03551	c7 85 ac 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T780[ebp+4], 0
  0355b	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  03560	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  03564	c7 85 a0 7b ff
	ff 14 2d 00 00	 mov	 DWORD PTR $T779[ebp], 11540 ; 00002d14H
  0356e	c7 85 a4 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T779[ebp+4], 0
  03578	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JCFLCGEH@Palit?5Microsystems?5Ltd@
  0357d	8d 85 a0 7b ff
	ff		 lea	 eax, DWORD PTR $T779[ebp]
  03583	50		 push	 eax
  03584	8d 8d d0 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7584]
  0358a	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0358f	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  03593	8d 85 98 7b ff
	ff		 lea	 eax, DWORD PTR $T778[ebp]
  03599	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@CMEOKEMH@TECHVIWIN?5INTERNATIONAL?5?$CIHONGKO@
  0359e	50		 push	 eax
  0359f	8d 8d f0 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7616]
  035a5	c7 85 98 7b ff
	ff 17 2d 00 00	 mov	 DWORD PTR $T778[ebp], 11543 ; 00002d17H
  035af	c7 85 9c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T778[ebp+4], 0
  035b9	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  035be	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  035c2	8d 85 90 7b ff
	ff		 lea	 eax, DWORD PTR $T777[ebp]
  035c8	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IDADAAHN@Hui?5Zhou?5Kai?5Yue?5Electronics?5Co@
  035cd	50		 push	 eax
  035ce	8d 8d 10 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7648]
  035d4	c7 85 90 7b ff
	ff 18 2d 00 00	 mov	 DWORD PTR $T777[ebp], 11544 ; 00002d18H
  035de	c7 85 94 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T777[ebp+4], 0
  035e8	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  035ed	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  035f1	8d 85 88 7b ff
	ff		 lea	 eax, DWORD PTR $T776[ebp]
  035f7	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GMADILLN@Suzhou?5Yourfriend?5Electronic?5Co@
  035fc	50		 push	 eax
  035fd	8d 8d 30 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7680]
  03603	c7 85 88 7b ff
	ff 1b 2d 00 00	 mov	 DWORD PTR $T776[ebp], 11547 ; 00002d1bH
  0360d	c7 85 8c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T776[ebp+4], 0
  03617	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0361c	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  03620	8d 85 80 7b ff
	ff		 lea	 eax, DWORD PTR $T775[ebp]
  03626	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OHBOEKAL@Club?53D?5BV@
  0362b	50		 push	 eax
  0362c	8d 8d 50 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7712]
  03632	c7 85 80 7b ff
	ff 1c 2d 00 00	 mov	 DWORD PTR $T775[ebp], 11548 ; 00002d1cH
  0363c	c7 85 84 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T775[ebp+4], 0
  03646	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  0364b	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  0364f	8d 85 78 7b ff
	ff		 lea	 eax, DWORD PTR $T774[ebp]
  03655	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HLNLHFNK@Design?5Pool?5Limited@
  0365a	50		 push	 eax
  0365b	8d 8d 70 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7744]
  03661	c7 85 78 7b ff
	ff 1d 2d 00 00	 mov	 DWORD PTR $T774[ebp], 11549 ; 00002d1dH
  0366b	c7 85 7c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T774[ebp+4], 0
  03675	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0367a	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  0367e	8d 85 70 7b ff
	ff		 lea	 eax, DWORD PTR $T773[ebp]
  03684	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KBJBCOHP@STMicroelectronics@
  03689	50		 push	 eax
  0368a	8d 8d 90 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7776]
  03690	c7 85 70 7b ff
	ff 83 04 00 00	 mov	 DWORD PTR $T773[ebp], 1155 ; 00000483H
  0369a	c7 85 74 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T773[ebp+4], 0
  036a4	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  036a9	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  036ad	8d 85 68 7b ff
	ff		 lea	 eax, DWORD PTR $T772[ebp]
  036b3	68 00 00 00 00	 push	 OFFSET ??_C@_06NJDDIMGF@UL?5LLC@
  036b8	50		 push	 eax
  036b9	8d 8d b0 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7808]
  036bf	c7 85 68 7b ff
	ff 20 2d 00 00	 mov	 DWORD PTR $T772[ebp], 11552 ; 00002d20H
  036c9	c7 85 6c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T772[ebp+4], 0
  036d3	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  036d8	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  036dc	8d 85 60 7b ff
	ff		 lea	 eax, DWORD PTR $T771[ebp]
  036e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IPBGDHOH@STYL?5Solutions?5Pte?5Ltd@
  036e7	50		 push	 eax
  036e8	8d 8d d0 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7840]
  036ee	c7 85 60 7b ff
	ff 2b 2d 00 00	 mov	 DWORD PTR $T771[ebp], 11563 ; 00002d2bH
  036f8	c7 85 64 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T771[ebp+4], 0
  03702	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  03707	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+8], 48 ; 00000030H
  0370b	c7 85 58 7b ff
	ff 2c 2d 00 00	 mov	 DWORD PTR $T770[ebp], 11564 ; 00002d2cH
  03715	c7 85 5c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T770[ebp+4], 0
  0371f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KGNNIHAN@Tankya?5Developing?5Co?4?0?5Limited@
  03724	8d 85 58 7b ff
	ff		 lea	 eax, DWORD PTR $T770[ebp]
  0372a	50		 push	 eax
  0372b	8d 8d f0 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7872]
  03731	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  03736	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
  0373a	8d 85 50 7b ff
	ff		 lea	 eax, DWORD PTR $T769[ebp]
  03740	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@OOPFMMEA@Hieyoung?5International?5?$CIHong?5Ko@
  03745	50		 push	 eax
  03746	8d 8d 10 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7904]
  0374c	c7 85 50 7b ff
	ff 2e 2d 00 00	 mov	 DWORD PTR $T769[ebp], 11566 ; 00002d2eH
  03756	c7 85 54 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T769[ebp+4], 0
  03760	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  03765	c6 45 fc 32	 mov	 BYTE PTR __$EHRec$[ebp+8], 50 ; 00000032H
  03769	8d 85 48 7b ff
	ff		 lea	 eax, DWORD PTR $T768[ebp]
  0376f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FNGIIHNK@PT?5Phototechnics?5AG@
  03774	50		 push	 eax
  03775	8d 8d 30 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7936]
  0377b	c7 85 48 7b ff
	ff 2f 2d 00 00	 mov	 DWORD PTR $T768[ebp], 11567 ; 00002d2fH
  03785	c7 85 4c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T768[ebp+4], 0
  0378f	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  03794	c6 45 fc 33	 mov	 BYTE PTR __$EHRec$[ebp+8], 51 ; 00000033H
  03798	8d 85 40 7b ff
	ff		 lea	 eax, DWORD PTR $T767[ebp]
  0379e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OEKPFDJ@JR?5Technik?5Co?4?0?5Ltd?4@
  037a3	50		 push	 eax
  037a4	8d 8d 50 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7968]
  037aa	c7 85 40 7b ff
	ff 32 2d 00 00	 mov	 DWORD PTR $T767[ebp], 11570 ; 00002d32H
  037b4	c7 85 44 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T767[ebp+4], 0
  037be	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  037c3	c6 45 fc 34	 mov	 BYTE PTR __$EHRec$[ebp+8], 52 ; 00000034H
  037c7	8d 85 38 7b ff
	ff		 lea	 eax, DWORD PTR $T766[ebp]
  037cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PEGHLIOG@Roofer?5Cable?5?$CIBao?5Shan?$CJ?5Co?4?0?5Lt@
  037d2	50		 push	 eax
  037d3	8d 8d 70 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8000]
  037d9	c7 85 38 7b ff
	ff 39 2d 00 00	 mov	 DWORD PTR $T766[ebp], 11577 ; 00002d39H
  037e3	c7 85 3c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T766[ebp+4], 0
  037ed	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  037f2	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+8], 53 ; 00000035H
  037f6	8d 85 30 7b ff
	ff		 lea	 eax, DWORD PTR $T765[ebp]
  037fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DCIOLNHH@Lencheng?5Electronics?5Co?4?0?5Ltd@
  03801	50		 push	 eax
  03802	8d 8d 90 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8032]
  03808	c7 85 30 7b ff
	ff 3b 2d 00 00	 mov	 DWORD PTR $T765[ebp], 11579 ; 00002d3bH
  03812	c7 85 34 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T765[ebp+4], 0
  0381c	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  03821	c6 45 fc 36	 mov	 BYTE PTR __$EHRec$[ebp+8], 54 ; 00000036H
  03825	8d 85 28 7b ff
	ff		 lea	 eax, DWORD PTR $T764[ebp]
  0382b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GFDMKFGE@FOVE?0?5Inc?4@
  03830	50		 push	 eax
  03831	8d 8d b0 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8064]
  03837	c7 85 28 7b ff
	ff 3c 2d 00 00	 mov	 DWORD PTR $T764[ebp], 11580 ; 00002d3cH
  03841	c7 85 2c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T764[ebp+4], 0
  0384b	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  03850	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H
  03854	8d 85 20 7b ff
	ff		 lea	 eax, DWORD PTR $T763[ebp]
  0385a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HFCJMCPC@Protech?5Electronics?5?$CG?5Technolog@
  0385f	50		 push	 eax
  03860	8d 8d d0 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8096]
  03866	c7 85 20 7b ff
	ff 42 2d 00 00	 mov	 DWORD PTR $T763[ebp], 11586 ; 00002d42H
  03870	c7 85 24 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T763[ebp+4], 0
  0387a	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0387f	c6 45 fc 38	 mov	 BYTE PTR __$EHRec$[ebp+8], 56 ; 00000038H
  03883	8d 85 18 7b ff
	ff		 lea	 eax, DWORD PTR $T762[ebp]
  03889	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EAJEMIB@Dongguan?5Hongwei?5Electronics?5Co@
  0388e	50		 push	 eax
  0388f	8d 8d f0 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8128]
  03895	c7 85 18 7b ff
	ff 4b 2d 00 00	 mov	 DWORD PTR $T762[ebp], 11595 ; 00002d4bH
  0389f	c7 85 1c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T762[ebp+4], 0
  038a9	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  038ae	c6 45 fc 39	 mov	 BYTE PTR __$EHRec$[ebp+8], 57 ; 00000039H
  038b2	c7 85 10 7b ff
	ff 4f 2d 00 00	 mov	 DWORD PTR $T761[ebp], 11599 ; 00002d4fH
  038bc	c7 85 14 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T761[ebp+4], 0
  038c6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KNNDJKPJ@Dongguan?5Hanker?5Electronic?5Tech@
  038cb	8d 85 10 7b ff
	ff		 lea	 eax, DWORD PTR $T761[ebp]
  038d1	50		 push	 eax
  038d2	8d 8d 10 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8160]
  038d8	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  038dd	c6 45 fc 3a	 mov	 BYTE PTR __$EHRec$[ebp+8], 58 ; 0000003aH
  038e1	8d 85 08 7b ff
	ff		 lea	 eax, DWORD PTR $T760[ebp]
  038e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OKMKHOAG@YiQin?5Electronics?5Co?4?0Ltd@
  038ec	50		 push	 eax
  038ed	8d 8d 30 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8192]
  038f3	c7 85 08 7b ff
	ff 52 2d 00 00	 mov	 DWORD PTR $T760[ebp], 11602 ; 00002d52H
  038fd	c7 85 0c 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T760[ebp+4], 0
  03907	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0390c	c6 45 fc 3b	 mov	 BYTE PTR __$EHRec$[ebp+8], 59 ; 0000003bH
  03910	8d 85 00 7b ff
	ff		 lea	 eax, DWORD PTR $T759[ebp]
  03916	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LAFCAOCH@DongGuan?5Kelta?5Electro?5Mechanic@
  0391b	50		 push	 eax
  0391c	8d 8d 50 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8224]
  03922	c7 85 00 7b ff
	ff 56 2d 00 00	 mov	 DWORD PTR $T759[ebp], 11606 ; 00002d56H
  0392c	c7 85 04 7b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T759[ebp+4], 0
  03936	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  0393b	c6 45 fc 3c	 mov	 BYTE PTR __$EHRec$[ebp+8], 60 ; 0000003cH
  0393f	8d 85 f8 7a ff
	ff		 lea	 eax, DWORD PTR $T758[ebp]
  03945	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EDCEGDNA@Lyra?5Semiconductor?5Incorporated@
  0394a	50		 push	 eax
  0394b	8d 8d 70 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8256]
  03951	c7 85 f8 7a ff
	ff 58 2d 00 00	 mov	 DWORD PTR $T758[ebp], 11608 ; 00002d58H
  0395b	c7 85 fc 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T758[ebp+4], 0
  03965	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0396a	c6 45 fc 3d	 mov	 BYTE PTR __$EHRec$[ebp+8], 61 ; 0000003dH
  0396e	8d 85 f0 7a ff
	ff		 lea	 eax, DWORD PTR $T757[ebp]
  03974	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BFJNNMFH@Sunyking?5Technology?5Co?4?0?5Ltd@
  03979	50		 push	 eax
  0397a	8d 8d 90 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8288]
  03980	c7 85 f0 7a ff
	ff 59 2d 00 00	 mov	 DWORD PTR $T757[ebp], 11609 ; 00002d59H
  0398a	c7 85 f4 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T757[ebp+4], 0
  03994	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  03999	c6 45 fc 3e	 mov	 BYTE PTR __$EHRec$[ebp+8], 62 ; 0000003eH
  0399d	8d 85 e8 7a ff
	ff		 lea	 eax, DWORD PTR $T756[ebp]
  039a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OEHDDJBP@Foxconn?5?1?5Hon?5Hai@
  039a8	50		 push	 eax
  039a9	8d 8d b0 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8320]
  039af	c7 85 e8 7a ff
	ff 89 04 00 00	 mov	 DWORD PTR $T756[ebp], 1161 ; 00000489H
  039b9	c7 85 ec 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T756[ebp+4], 0
  039c3	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  039c8	c6 45 fc 3f	 mov	 BYTE PTR __$EHRec$[ebp+8], 63 ; 0000003fH
  039cc	8d 85 e0 7a ff
	ff		 lea	 eax, DWORD PTR $T755[ebp]
  039d2	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GLIEJDCH@Shenzhen?5YAAN?5Precision?5Connect@
  039d7	50		 push	 eax
  039d8	8d 8d d0 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8352]
  039de	c7 85 e0 7a ff
	ff 5a 2d 00 00	 mov	 DWORD PTR $T755[ebp], 11610 ; 00002d5aH
  039e8	c7 85 e4 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T755[ebp+4], 0
  039f2	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  039f7	c6 45 fc 40	 mov	 BYTE PTR __$EHRec$[ebp+8], 64 ; 00000040H
  039fb	8d 85 d8 7a ff
	ff		 lea	 eax, DWORD PTR $T754[ebp]
  03a01	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@GEGHNMG@SunTo?5Technology?5?$CIShen?5Zhen?$CJ?5Co@
  03a06	50		 push	 eax
  03a07	8d 8d f0 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8384]
  03a0d	c7 85 d8 7a ff
	ff 5b 2d 00 00	 mov	 DWORD PTR $T754[ebp], 11611 ; 00002d5bH
  03a17	c7 85 dc 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T754[ebp+4], 0
  03a21	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  03a26	c6 45 fc 41	 mov	 BYTE PTR __$EHRec$[ebp+8], 65 ; 00000041H
  03a2a	8d 85 d0 7a ff
	ff		 lea	 eax, DWORD PTR $T753[ebp]
  03a30	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BBKMGNDN@Daiwoo?5Electronics?5Co?4?0?5LTD@
  03a35	50		 push	 eax
  03a36	8d 8d 10 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8416]
  03a3c	c7 85 d0 7a ff
	ff 5c 2d 00 00	 mov	 DWORD PTR $T753[ebp], 11612 ; 00002d5cH
  03a46	c7 85 d4 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T753[ebp+4], 0
  03a50	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  03a55	c6 45 fc 42	 mov	 BYTE PTR __$EHRec$[ebp+8], 66 ; 00000042H
  03a59	c7 85 c8 7a ff
	ff 63 2d 00 00	 mov	 DWORD PTR $T752[ebp], 11619 ; 00002d63H
  03a63	c7 85 cc 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T752[ebp+4], 0
  03a6d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NCOJKANO@Cable?5Technology?5Corp?4@
  03a72	8d 85 c8 7a ff
	ff		 lea	 eax, DWORD PTR $T752[ebp]
  03a78	50		 push	 eax
  03a79	8d 8d 30 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8448]
  03a7f	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  03a84	c6 45 fc 43	 mov	 BYTE PTR __$EHRec$[ebp+8], 67 ; 00000043H
  03a88	8d 85 c0 7a ff
	ff		 lea	 eax, DWORD PTR $T751[ebp]
  03a8e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OCBLFBEN@DPA?5Microphones@
  03a93	50		 push	 eax
  03a94	8d 8d 50 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8480]
  03a9a	c7 85 c0 7a ff
	ff 65 2d 00 00	 mov	 DWORD PTR $T751[ebp], 11621 ; 00002d65H
  03aa4	c7 85 c4 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T751[ebp+4], 0
  03aae	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  03ab3	c6 45 fc 44	 mov	 BYTE PTR __$EHRec$[ebp+8], 68 ; 00000044H
  03ab7	8d 85 b8 7a ff
	ff		 lea	 eax, DWORD PTR $T750[ebp]
  03abd	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BGNCIFAC@Zhongshan?5Winner?5Electronic?5Tec@
  03ac2	50		 push	 eax
  03ac3	8d 8d 70 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8512]
  03ac9	c7 85 b8 7a ff
	ff 70 2d 00 00	 mov	 DWORD PTR $T750[ebp], 11632 ; 00002d70H
  03ad3	c7 85 bc 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T750[ebp+4], 0
  03add	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  03ae2	c6 45 fc 45	 mov	 BYTE PTR __$EHRec$[ebp+8], 69 ; 00000045H
  03ae6	8d 85 b0 7a ff
	ff		 lea	 eax, DWORD PTR $T749[ebp]
  03aec	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JJCODFBL@Shenzhen?5Taiji?5Electronics?5Co?4?0@
  03af1	50		 push	 eax
  03af2	8d 8d 90 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8544]
  03af8	c7 85 b0 7a ff
	ff 75 2d 00 00	 mov	 DWORD PTR $T749[ebp], 11637 ; 00002d75H
  03b02	c7 85 b4 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T749[ebp+4], 0
  03b0c	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  03b11	c6 45 fc 46	 mov	 BYTE PTR __$EHRec$[ebp+8], 70 ; 00000046H
  03b15	8d 85 a8 7a ff
	ff		 lea	 eax, DWORD PTR $T748[ebp]
  03b1b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DENIAHG@SiliConch?5Systems?5Private?5Limit@
  03b20	50		 push	 eax
  03b21	8d 8d b0 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8576]
  03b27	c7 85 a8 7a ff
	ff 76 2d 00 00	 mov	 DWORD PTR $T748[ebp], 11638 ; 00002d76H
  03b31	c7 85 ac 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T748[ebp+4], 0
  03b3b	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  03b40	c6 45 fc 47	 mov	 BYTE PTR __$EHRec$[ebp+8], 71 ; 00000047H
  03b44	8d 85 a0 7a ff
	ff		 lea	 eax, DWORD PTR $T747[ebp]
  03b4a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GKKMPOEO@SweDeltaco?5AB@
  03b4f	50		 push	 eax
  03b50	8d 8d d0 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8608]
  03b56	c7 85 a0 7a ff
	ff 77 2d 00 00	 mov	 DWORD PTR $T747[ebp], 11639 ; 00002d77H
  03b60	c7 85 a4 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T747[ebp+4], 0
  03b6a	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  03b6f	c6 45 fc 48	 mov	 BYTE PTR __$EHRec$[ebp+8], 72 ; 00000048H
  03b73	8d 85 98 7a ff
	ff		 lea	 eax, DWORD PTR $T746[ebp]
  03b79	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MJBBPIAD@Shenzhen?5Legendary?5Technologies@
  03b7e	50		 push	 eax
  03b7f	8d 8d f0 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8640]
  03b85	c7 85 98 7a ff
	ff 79 2d 00 00	 mov	 DWORD PTR $T746[ebp], 11641 ; 00002d79H
  03b8f	c7 85 9c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T746[ebp+4], 0
  03b99	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  03b9e	c6 45 fc 49	 mov	 BYTE PTR __$EHRec$[ebp+8], 73 ; 00000049H
  03ba2	8d 85 90 7a ff
	ff		 lea	 eax, DWORD PTR $T745[ebp]
  03ba8	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@IGAPFOPN@Dongguan?5JingFeng?5Electronics?5T@
  03bad	50		 push	 eax
  03bae	8d 8d 10 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8672]
  03bb4	c7 85 90 7a ff
	ff 7a 2d 00 00	 mov	 DWORD PTR $T745[ebp], 11642 ; 00002d7aH
  03bbe	c7 85 94 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T745[ebp+4], 0
  03bc8	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  03bcd	c6 45 fc 4a	 mov	 BYTE PTR __$EHRec$[ebp+8], 74 ; 0000004aH
  03bd1	8d 85 88 7a ff
	ff		 lea	 eax, DWORD PTR $T744[ebp]
  03bd7	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GBEIKGLD@Dongguan?5City?5Qingda?5Electronic@
  03bdc	50		 push	 eax
  03bdd	8d 8d 30 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8704]
  03be3	c7 85 88 7a ff
	ff 7c 2d 00 00	 mov	 DWORD PTR $T744[ebp], 11644 ; 00002d7cH
  03bed	c7 85 8c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T744[ebp+4], 0
  03bf7	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  03bfc	c6 45 fc 4b	 mov	 BYTE PTR __$EHRec$[ebp+8], 75 ; 0000004bH
  03c00	c7 85 80 7a ff
	ff 8d 04 00 00	 mov	 DWORD PTR $T743[ebp], 1165 ; 0000048dH
  03c0a	c7 85 84 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T743[ebp+4], 0
  03c14	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KONCBIDB@ITE?5Tech?5Inc?4@
  03c19	8d 85 80 7a ff
	ff		 lea	 eax, DWORD PTR $T743[ebp]
  03c1f	50		 push	 eax
  03c20	8d 8d 50 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8736]
  03c26	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  03c2b	c6 45 fc 4c	 mov	 BYTE PTR __$EHRec$[ebp+8], 76 ; 0000004cH
  03c2f	8d 85 78 7a ff
	ff		 lea	 eax, DWORD PTR $T742[ebp]
  03c35	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@OKPDAIC@Dongguan?5Team?5Force?5Electronic?5@
  03c3a	50		 push	 eax
  03c3b	8d 8d 70 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8768]
  03c41	c7 85 78 7a ff
	ff 86 2d 00 00	 mov	 DWORD PTR $T742[ebp], 11654 ; 00002d86H
  03c4b	c7 85 7c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T742[ebp+4], 0
  03c55	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  03c5a	c6 45 fc 4d	 mov	 BYTE PTR __$EHRec$[ebp+8], 77 ; 0000004dH
  03c5e	8d 85 70 7a ff
	ff		 lea	 eax, DWORD PTR $T741[ebp]
  03c64	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@JMONGKEP@Zhuhai?5Spark?5Electronic?5Equipme@
  03c69	50		 push	 eax
  03c6a	8d 8d 90 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8800]
  03c70	c7 85 70 7a ff
	ff 87 2d 00 00	 mov	 DWORD PTR $T741[ebp], 11655 ; 00002d87H
  03c7a	c7 85 74 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T741[ebp+4], 0
  03c84	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  03c89	c6 45 fc 4e	 mov	 BYTE PTR __$EHRec$[ebp+8], 78 ; 0000004eH
  03c8d	8d 85 68 7a ff
	ff		 lea	 eax, DWORD PTR $T740[ebp]
  03c93	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@OHKLDCIL@I?9O?5Conn?5?$CIGuangDong?$CJ?5Technologi@
  03c98	50		 push	 eax
  03c99	8d 8d b0 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8832]
  03c9f	c7 85 68 7a ff
	ff 8a 2d 00 00	 mov	 DWORD PTR $T740[ebp], 11658 ; 00002d8aH
  03ca9	c7 85 6c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T740[ebp+4], 0
  03cb3	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  03cb8	c6 45 fc 4f	 mov	 BYTE PTR __$EHRec$[ebp+8], 79 ; 0000004fH
  03cbc	8d 85 60 7a ff
	ff		 lea	 eax, DWORD PTR $T739[ebp]
  03cc2	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PAIHBMNH@Hongrida?5Electronic?5Technology?5@
  03cc7	50		 push	 eax
  03cc8	8d 8d d0 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8864]
  03cce	c7 85 60 7a ff
	ff 8c 2d 00 00	 mov	 DWORD PTR $T739[ebp], 11660 ; 00002d8cH
  03cd8	c7 85 64 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T739[ebp+4], 0
  03ce2	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  03ce7	c6 45 fc 50	 mov	 BYTE PTR __$EHRec$[ebp+8], 80 ; 00000050H
  03ceb	8d 85 58 7a ff
	ff		 lea	 eax, DWORD PTR $T738[ebp]
  03cf1	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@ECIHOIJA@Shenzhen?5Bing?5Chuang?5Wei?5Techno@
  03cf6	50		 push	 eax
  03cf7	8d 8d f0 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8896]
  03cfd	c7 85 58 7a ff
	ff 8f 2d 00 00	 mov	 DWORD PTR $T738[ebp], 11663 ; 00002d8fH
  03d07	c7 85 5c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T738[ebp+4], 0
  03d11	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  03d16	c6 45 fc 51	 mov	 BYTE PTR __$EHRec$[ebp+8], 81 ; 00000051H
  03d1a	8d 85 50 7a ff
	ff		 lea	 eax, DWORD PTR $T737[ebp]
  03d20	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BAOAOHKP@Vivo?5Mobile?5Communication?5Co?4?0?5@
  03d25	50		 push	 eax
  03d26	8d 8d 10 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8928]
  03d2c	c7 85 50 7a ff
	ff 95 2d 00 00	 mov	 DWORD PTR $T737[ebp], 11669 ; 00002d95H
  03d36	c7 85 54 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T737[ebp+4], 0
  03d40	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  03d45	c6 45 fc 52	 mov	 BYTE PTR __$EHRec$[ebp+8], 82 ; 00000052H
  03d49	8d 85 48 7a ff
	ff		 lea	 eax, DWORD PTR $T736[ebp]
  03d4f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@MHPBMNBP@SHENZHEN?5WAMAXLINK?5ELECTRONIC?5T@
  03d54	50		 push	 eax
  03d55	8d 8d 30 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8960]
  03d5b	c7 85 48 7a ff
	ff 96 2d 00 00	 mov	 DWORD PTR $T736[ebp], 11670 ; 00002d96H
  03d65	c7 85 4c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T736[ebp+4], 0
  03d6f	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  03d74	c6 45 fc 53	 mov	 BYTE PTR __$EHRec$[ebp+8], 83 ; 00000053H
  03d78	8d 85 40 7a ff
	ff		 lea	 eax, DWORD PTR $T735[ebp]
  03d7e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BAFPAFFA@Dong?5Guan?5JingHe?5Electronics?5Te@
  03d83	50		 push	 eax
  03d84	8d 8d 50 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8992]
  03d8a	c7 85 40 7a ff
	ff 97 2d 00 00	 mov	 DWORD PTR $T735[ebp], 11671 ; 00002d97H
  03d94	c7 85 44 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T735[ebp+4], 0
  03d9e	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  03da3	c6 45 fc 54	 mov	 BYTE PTR __$EHRec$[ebp+8], 84 ; 00000054H
  03da7	c7 85 38 7a ff
	ff 99 2d 00 00	 mov	 DWORD PTR $T734[ebp], 11673 ; 00002d99H
  03db1	c7 85 3c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T734[ebp+4], 0
  03dbb	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OEJPFIMK@Edifier?5International?5Limited@
  03dc0	8d 85 38 7a ff
	ff		 lea	 eax, DWORD PTR $T734[ebp]
  03dc6	50		 push	 eax
  03dc7	8d 8d 70 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9024]
  03dcd	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  03dd2	c6 45 fc 55	 mov	 BYTE PTR __$EHRec$[ebp+8], 85 ; 00000055H
  03dd6	8d 85 30 7a ff
	ff		 lea	 eax, DWORD PTR $T733[ebp]
  03ddc	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CKIDKBLO@Dongguan?5Suntes?5Electronics?5Tec@
  03de1	50		 push	 eax
  03de2	8d 8d 90 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9056]
  03de8	c7 85 30 7a ff
	ff 9d 2d 00 00	 mov	 DWORD PTR $T733[ebp], 11677 ; 00002d9dH
  03df2	c7 85 34 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T733[ebp+4], 0
  03dfc	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  03e01	c6 45 fc 56	 mov	 BYTE PTR __$EHRec$[ebp+8], 86 ; 00000056H
  03e05	8d 85 28 7a ff
	ff		 lea	 eax, DWORD PTR $T732[ebp]
  03e0b	68 00 00 00 00	 push	 OFFSET ??_C@_07KLFCANCH@SABRENT@
  03e10	50		 push	 eax
  03e11	8d 8d b0 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9088]
  03e17	c7 85 28 7a ff
	ff 9f 2d 00 00	 mov	 DWORD PTR $T732[ebp], 11679 ; 00002d9fH
  03e21	c7 85 2c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T732[ebp+4], 0
  03e2b	e8 00 00 00 00	 call	 ??$?0_KAAY07$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY07$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[8],0>
  03e30	c6 45 fc 57	 mov	 BYTE PTR __$EHRec$[ebp+8], 87 ; 00000057H
  03e34	8d 85 20 7a ff
	ff		 lea	 eax, DWORD PTR $T731[ebp]
  03e3a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPFFCHAJ@Superior?5Communications@
  03e3f	50		 push	 eax
  03e40	8d 8d d0 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9120]
  03e46	c7 85 20 7a ff
	ff a3 2d 00 00	 mov	 DWORD PTR $T731[ebp], 11683 ; 00002da3H
  03e50	c7 85 24 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T731[ebp+4], 0
  03e5a	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  03e5f	c6 45 fc 58	 mov	 BYTE PTR __$EHRec$[ebp+8], 88 ; 00000058H
  03e63	8d 85 18 7a ff
	ff		 lea	 eax, DWORD PTR $T730[ebp]
  03e69	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LHMHCDGM@Topland?5Corporation@
  03e6e	50		 push	 eax
  03e6f	8d 8d f0 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9152]
  03e75	c7 85 18 7a ff
	ff a7 2d 00 00	 mov	 DWORD PTR $T730[ebp], 11687 ; 00002da7H
  03e7f	c7 85 1c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T730[ebp+4], 0
  03e89	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  03e8e	c6 45 fc 59	 mov	 BYTE PTR __$EHRec$[ebp+8], 89 ; 00000059H
  03e92	8d 85 10 7a ff
	ff		 lea	 eax, DWORD PTR $T729[ebp]
  03e98	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@KDOAHNGO@Shenzhen?5Jing?5Tuo?5Jin?5Electroni@
  03e9d	50		 push	 eax
  03e9e	8d 8d 10 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9184]
  03ea4	c7 85 10 7a ff
	ff aa 2d 00 00	 mov	 DWORD PTR $T729[ebp], 11690 ; 00002daaH
  03eae	c7 85 14 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T729[ebp+4], 0
  03eb8	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  03ebd	c6 45 fc 5a	 mov	 BYTE PTR __$EHRec$[ebp+8], 90 ; 0000005aH
  03ec1	8d 85 08 7a ff
	ff		 lea	 eax, DWORD PTR $T728[ebp]
  03ec7	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KOIKGGHI@CYD?5Electronics?5?$CIShenzhen?$CJ?5Co?4?0@
  03ecc	50		 push	 eax
  03ecd	8d 8d 30 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9216]
  03ed3	c7 85 08 7a ff
	ff ab 2d 00 00	 mov	 DWORD PTR $T728[ebp], 11691 ; 00002dabH
  03edd	c7 85 0c 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T728[ebp+4], 0
  03ee7	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  03eec	c6 45 fc 5b	 mov	 BYTE PTR __$EHRec$[ebp+8], 91 ; 0000005bH
  03ef0	8d 85 00 7a ff
	ff		 lea	 eax, DWORD PTR $T727[ebp]
  03ef6	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DNCNIJKK@Shenzhen?5YZB?5Electronics?5Techno@
  03efb	50		 push	 eax
  03efc	8d 8d 50 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9248]
  03f02	c7 85 00 7a ff
	ff ac 2d 00 00	 mov	 DWORD PTR $T727[ebp], 11692 ; 00002dacH
  03f0c	c7 85 04 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T727[ebp+4], 0
  03f16	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  03f1b	c6 45 fc 5c	 mov	 BYTE PTR __$EHRec$[ebp+8], 92 ; 0000005cH
  03f1f	8d 85 f8 79 ff
	ff		 lea	 eax, DWORD PTR $T726[ebp]
  03f25	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BICPKOPM@GoerTek?5Dynaudio?5Co?4?0?5Ltd@
  03f2a	50		 push	 eax
  03f2b	8d 8d 70 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9280]
  03f31	c7 85 f8 79 ff
	ff ad 2d 00 00	 mov	 DWORD PTR $T726[ebp], 11693 ; 00002dadH
  03f3b	c7 85 fc 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T726[ebp+4], 0
  03f45	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  03f4a	c6 45 fc 5d	 mov	 BYTE PTR __$EHRec$[ebp+8], 93 ; 0000005dH
  03f4e	c7 85 f0 79 ff
	ff af 2d 00 00	 mov	 DWORD PTR $T725[ebp], 11695 ; 00002dafH
  03f58	c7 85 f4 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T725[ebp+4], 0
  03f62	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MFNOLJNJ@IF?5Link?5Electronics?5Co?5Limited@
  03f67	8d 85 f0 79 ff
	ff		 lea	 eax, DWORD PTR $T725[ebp]
  03f6d	50		 push	 eax
  03f6e	8d 8d 90 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9312]
  03f74	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  03f79	c6 45 fc 5e	 mov	 BYTE PTR __$EHRec$[ebp+8], 94 ; 0000005eH
  03f7d	8d 85 e8 79 ff
	ff		 lea	 eax, DWORD PTR $T724[ebp]
  03f83	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GPNIFKCG@Shenzhen?5Welltech?5Cable?5Co?4?0?5Lt@
  03f88	50		 push	 eax
  03f89	8d 8d b0 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9344]
  03f8f	c7 85 e8 79 ff
	ff b0 2d 00 00	 mov	 DWORD PTR $T724[ebp], 11696 ; 00002db0H
  03f99	c7 85 ec 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T724[ebp+4], 0
  03fa3	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  03fa8	c6 45 fc 5f	 mov	 BYTE PTR __$EHRec$[ebp+8], 95 ; 0000005fH
  03fac	8d 85 e0 79 ff
	ff		 lea	 eax, DWORD PTR $T723[ebp]
  03fb2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HKAAGFAI@i?5Digital?5Galaxy?5Ltd?4@
  03fb7	50		 push	 eax
  03fb8	8d 8d d0 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9376]
  03fbe	c7 85 e0 79 ff
	ff b3 2d 00 00	 mov	 DWORD PTR $T723[ebp], 11699 ; 00002db3H
  03fc8	c7 85 e4 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T723[ebp+4], 0
  03fd2	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  03fd7	c6 45 fc 60	 mov	 BYTE PTR __$EHRec$[ebp+8], 96 ; 00000060H
  03fdb	8d 85 d8 79 ff
	ff		 lea	 eax, DWORD PTR $T722[ebp]
  03fe1	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PACJHINC@Dongguan?5Changtuo?5Hardware?5Tech@
  03fe6	50		 push	 eax
  03fe7	8d 8d f0 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9408]
  03fed	c7 85 d8 79 ff
	ff b4 2d 00 00	 mov	 DWORD PTR $T722[ebp], 11700 ; 00002db4H
  03ff7	c7 85 dc 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T722[ebp+4], 0
  04001	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  04006	c6 45 fc 61	 mov	 BYTE PTR __$EHRec$[ebp+8], 97 ; 00000061H
  0400a	8d 85 d0 79 ff
	ff		 lea	 eax, DWORD PTR $T721[ebp]
  04010	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OKHCALEJ@Tul?5Corporation@
  04015	50		 push	 eax
  04016	8d 8d 10 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9440]
  0401c	c7 85 d0 79 ff
	ff bf 2d 00 00	 mov	 DWORD PTR $T721[ebp], 11711 ; 00002dbfH
  04026	c7 85 d4 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T721[ebp+4], 0
  04030	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  04035	c6 45 fc 62	 mov	 BYTE PTR __$EHRec$[ebp+8], 98 ; 00000062H
  04039	8d 85 c8 79 ff
	ff		 lea	 eax, DWORD PTR $T720[ebp]
  0403f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LDJAEIIO@Action?5Industries?5?$CIM?$CJ?5SDN?5BHD@
  04044	50		 push	 eax
  04045	8d 8d 30 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9472]
  0404b	c7 85 c8 79 ff
	ff c3 2d 00 00	 mov	 DWORD PTR $T720[ebp], 11715 ; 00002dc3H
  04055	c7 85 cc 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T720[ebp+4], 0
  0405f	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  04064	c6 45 fc 63	 mov	 BYTE PTR __$EHRec$[ebp+8], 99 ; 00000063H
  04068	8d 85 c0 79 ff
	ff		 lea	 eax, DWORD PTR $T719[ebp]
  0406e	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GKNHLFHE@Dongguan?5Kingtron?5Electronics?5T@
  04073	50		 push	 eax
  04074	8d 8d 50 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9504]
  0407a	c7 85 c0 79 ff
	ff c6 2d 00 00	 mov	 DWORD PTR $T719[ebp], 11718 ; 00002dc6H
  04084	c7 85 c4 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T719[ebp+4], 0
  0408e	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  04093	c6 45 fc 64	 mov	 BYTE PTR __$EHRec$[ebp+8], 100 ; 00000064H
  04097	8d 85 b8 79 ff
	ff		 lea	 eax, DWORD PTR $T718[ebp]
  0409d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MKCFEICF@Yeonho?5Electronics@
  040a2	50		 push	 eax
  040a3	8d 8d 70 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9536]
  040a9	c7 85 b8 79 ff
	ff cd 2d 00 00	 mov	 DWORD PTR $T718[ebp], 11725 ; 00002dcdH
  040b3	c7 85 bc 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T718[ebp+4], 0
  040bd	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  040c2	c6 45 fc 65	 mov	 BYTE PTR __$EHRec$[ebp+8], 101 ; 00000065H
  040c6	8d 85 b0 79 ff
	ff		 lea	 eax, DWORD PTR $T717[ebp]
  040cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@ICBCKHDA@Shen?5Zhen?5Farmer?5Technology?5Co?4@
  040d1	50		 push	 eax
  040d2	8d 8d 90 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9568]
  040d8	c7 85 b0 79 ff
	ff ce 2d 00 00	 mov	 DWORD PTR $T717[ebp], 11726 ; 00002dceH
  040e2	c7 85 b4 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T717[ebp+4], 0
  040ec	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  040f1	c6 45 fc 66	 mov	 BYTE PTR __$EHRec$[ebp+8], 102 ; 00000066H
  040f5	c7 85 a8 79 ff
	ff cf 2d 00 00	 mov	 DWORD PTR $T716[ebp], 11727 ; 00002dcfH
  040ff	c7 85 ac 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T716[ebp+4], 0
  04109	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MOAECPO@Dialog?5Semiconductor?5?$CIUK?$CJ?5Ltd@
  0410e	8d 85 a8 79 ff
	ff		 lea	 eax, DWORD PTR $T716[ebp]
  04114	50		 push	 eax
  04115	8d 8d b0 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9600]
  0411b	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  04120	c6 45 fc 67	 mov	 BYTE PTR __$EHRec$[ebp+8], 103 ; 00000067H
  04124	8d 85 a0 79 ff
	ff		 lea	 eax, DWORD PTR $T715[ebp]
  0412a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OPLPEOO@iBaby?5Labs?0?5Inc@
  0412f	50		 push	 eax
  04130	8d 8d d0 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9632]
  04136	c7 85 a0 79 ff
	ff d0 2d 00 00	 mov	 DWORD PTR $T715[ebp], 11728 ; 00002dd0H
  04140	c7 85 a4 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T715[ebp+4], 0
  0414a	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0414f	c6 45 fc 68	 mov	 BYTE PTR __$EHRec$[ebp+8], 104 ; 00000068H
  04153	8d 85 98 79 ff
	ff		 lea	 eax, DWORD PTR $T714[ebp]
  04159	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@PACEAHOE@Dong?5Guan?5Fei?5Tai?5Electronics?5C@
  0415e	50		 push	 eax
  0415f	8d 8d f0 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9664]
  04165	c7 85 98 79 ff
	ff d9 2d 00 00	 mov	 DWORD PTR $T714[ebp], 11737 ; 00002dd9H
  0416f	c7 85 9c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T714[ebp+4], 0
  04179	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0417e	c6 45 fc 69	 mov	 BYTE PTR __$EHRec$[ebp+8], 105 ; 00000069H
  04182	8d 85 90 79 ff
	ff		 lea	 eax, DWORD PTR $T713[ebp]
  04188	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@JICAOIIA@Shenzhen?5DAK?5Technology?5Co?4?0?5Lt@
  0418d	50		 push	 eax
  0418e	8d 8d 10 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9696]
  04194	c7 85 90 79 ff
	ff db 2d 00 00	 mov	 DWORD PTR $T713[ebp], 11739 ; 00002ddbH
  0419e	c7 85 94 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T713[ebp+4], 0
  041a8	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  041ad	c6 45 fc 6a	 mov	 BYTE PTR __$EHRec$[ebp+8], 106 ; 0000006aH
  041b1	8d 85 88 79 ff
	ff		 lea	 eax, DWORD PTR $T712[ebp]
  041b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PBDJBFFG@Audiolink?5Co?4?0?5Ltd@
  041bc	50		 push	 eax
  041bd	8d 8d 30 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9728]
  041c3	c7 85 88 79 ff
	ff dc 2d 00 00	 mov	 DWORD PTR $T712[ebp], 11740 ; 00002ddcH
  041cd	c7 85 8c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T712[ebp+4], 0
  041d7	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  041dc	c6 45 fc 6b	 mov	 BYTE PTR __$EHRec$[ebp+8], 107 ; 0000006bH
  041e0	8d 85 80 79 ff
	ff		 lea	 eax, DWORD PTR $T711[ebp]
  041e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FJAMIBEI@Princeton?5Infrared?5Technologies@
  041eb	50		 push	 eax
  041ec	8d 8d 50 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9760]
  041f2	c7 85 80 79 ff
	ff dd 2d 00 00	 mov	 DWORD PTR $T711[ebp], 11741 ; 00002dddH
  041fc	c7 85 84 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T711[ebp+4], 0
  04206	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0420b	c6 45 fc 6c	 mov	 BYTE PTR __$EHRec$[ebp+8], 108 ; 0000006cH
  0420f	8d 85 78 79 ff
	ff		 lea	 eax, DWORD PTR $T710[ebp]
  04215	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LAFKEJCL@Active?9semi?0?5Inc@
  0421a	50		 push	 eax
  0421b	8d 8d 70 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9792]
  04221	c7 85 78 79 ff
	ff e0 2d 00 00	 mov	 DWORD PTR $T710[ebp], 11744 ; 00002de0H
  0422b	c7 85 7c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T710[ebp+4], 0
  04235	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0423a	c6 45 fc 6d	 mov	 BYTE PTR __$EHRec$[ebp+8], 109 ; 0000006dH
  0423e	8d 85 70 79 ff
	ff		 lea	 eax, DWORD PTR $T709[ebp]
  04244	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GJPGNKOL@Jiang?5Su?5Denseting?5Precision?5Te@
  04249	50		 push	 eax
  0424a	8d 8d 90 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9824]
  04250	c7 85 70 79 ff
	ff e1 2d 00 00	 mov	 DWORD PTR $T709[ebp], 11745 ; 00002de1H
  0425a	c7 85 74 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T709[ebp+4], 0
  04264	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  04269	c6 45 fc 6e	 mov	 BYTE PTR __$EHRec$[ebp+8], 110 ; 0000006eH
  0426d	8d 85 68 79 ff
	ff		 lea	 eax, DWORD PTR $T708[ebp]
  04273	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NMPGMBHH@The?5LightCo?0?5Inc?4@
  04278	50		 push	 eax
  04279	8d 8d b0 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9856]
  0427f	c7 85 68 79 ff
	ff e7 2d 00 00	 mov	 DWORD PTR $T708[ebp], 11751 ; 00002de7H
  04289	c7 85 6c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T708[ebp+4], 0
  04293	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  04298	c6 45 fc 6f	 mov	 BYTE PTR __$EHRec$[ebp+8], 111 ; 0000006fH
  0429c	c7 85 60 79 ff
	ff ed 2d 00 00	 mov	 DWORD PTR $T707[ebp], 11757 ; 00002dedH
  042a6	c7 85 64 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T707[ebp+4], 0
  042b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OONBKCAD@Aquil?5Star?5Precision?5Industrial@
  042b5	8d 85 60 79 ff
	ff		 lea	 eax, DWORD PTR $T707[ebp]
  042bb	50		 push	 eax
  042bc	8d 8d d0 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9888]
  042c2	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  042c7	c6 45 fc 70	 mov	 BYTE PTR __$EHRec$[ebp+8], 112 ; 00000070H
  042cb	8d 85 58 79 ff
	ff		 lea	 eax, DWORD PTR $T706[ebp]
  042d1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENMBGIMC@Inovonics?5Corp@
  042d6	50		 push	 eax
  042d7	8d 8d f0 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9920]
  042dd	c7 85 58 79 ff
	ff f1 2d 00 00	 mov	 DWORD PTR $T706[ebp], 11761 ; 00002df1H
  042e7	c7 85 5c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T706[ebp+4], 0
  042f1	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  042f6	c6 45 fc 71	 mov	 BYTE PTR __$EHRec$[ebp+8], 113 ; 00000071H
  042fa	8d 85 50 79 ff
	ff		 lea	 eax, DWORD PTR $T705[ebp]
  04300	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KHJCJABF@LongSung?5Technology?5?$CIShanghai?$CJ?5@
  04305	50		 push	 eax
  04306	8d 8d 10 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9952]
  0430c	c7 85 50 79 ff
	ff f3 2d 00 00	 mov	 DWORD PTR $T705[ebp], 11763 ; 00002df3H
  04316	c7 85 54 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T705[ebp+4], 0
  04320	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  04325	c6 45 fc 72	 mov	 BYTE PTR __$EHRec$[ebp+8], 114 ; 00000072H
  04329	8d 85 48 79 ff
	ff		 lea	 eax, DWORD PTR $T704[ebp]
  0432f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CPFIBBJP@Jumplux?5Technology?5Co?4?0?5Ltd?4@
  04334	50		 push	 eax
  04335	8d 8d 30 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9984]
  0433b	c7 85 48 79 ff
	ff f4 2d 00 00	 mov	 DWORD PTR $T704[ebp], 11764 ; 00002df4H
  04345	c7 85 4c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T704[ebp+4], 0
  0434f	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  04354	c6 45 fc 73	 mov	 BYTE PTR __$EHRec$[ebp+8], 115 ; 00000073H
  04358	8d 85 40 79 ff
	ff		 lea	 eax, DWORD PTR $T703[ebp]
  0435e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LBNNEMMM@Yamaha?5Corporation@
  04363	50		 push	 eax
  04364	8d 8d 50 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10016]
  0436a	c7 85 40 79 ff
	ff 99 04 00 00	 mov	 DWORD PTR $T703[ebp], 1177 ; 00000499H
  04374	c7 85 44 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T703[ebp+4], 0
  0437e	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  04383	c6 45 fc 74	 mov	 BYTE PTR __$EHRec$[ebp+8], 116 ; 00000074H
  04387	8d 85 38 79 ff
	ff		 lea	 eax, DWORD PTR $T702[ebp]
  0438d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LHIIJKGP@CIB?5Security?5Inc@
  04392	50		 push	 eax
  04393	8d 8d 70 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10048]
  04399	c7 85 38 79 ff
	ff 00 2e 00 00	 mov	 DWORD PTR $T702[ebp], 11776 ; 00002e00H
  043a3	c7 85 3c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T702[ebp+4], 0
  043ad	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  043b2	c6 45 fc 75	 mov	 BYTE PTR __$EHRec$[ebp+8], 117 ; 00000075H
  043b6	8d 85 30 79 ff
	ff		 lea	 eax, DWORD PTR $T701[ebp]
  043bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GNOOPNKF@Zhejiang?5Dahua?5Technology?5Co?4?0?5@
  043c1	50		 push	 eax
  043c2	8d 8d 90 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10080]
  043c8	c7 85 30 79 ff
	ff 03 2e 00 00	 mov	 DWORD PTR $T701[ebp], 11779 ; 00002e03H
  043d2	c7 85 34 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T701[ebp+4], 0
  043dc	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  043e1	c6 45 fc 76	 mov	 BYTE PTR __$EHRec$[ebp+8], 118 ; 00000076H
  043e5	8d 85 28 79 ff
	ff		 lea	 eax, DWORD PTR $T700[ebp]
  043eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JNKFANPJ@Shenzhen?5Junlan?5Electronic?5Ltd@
  043f0	50		 push	 eax
  043f1	8d 8d b0 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10112]
  043f7	c7 85 28 79 ff
	ff 06 2e 00 00	 mov	 DWORD PTR $T700[ebp], 11782 ; 00002e06H
  04401	c7 85 2c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T700[ebp+4], 0
  0440b	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  04410	c6 45 fc 77	 mov	 BYTE PTR __$EHRec$[ebp+8], 119 ; 00000077H
  04414	8d 85 20 79 ff
	ff		 lea	 eax, DWORD PTR $T699[ebp]
  0441a	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@IPDKEBAP@ShenZhen?5ShenTai?5WeiXiang?5Elect@
  0441f	50		 push	 eax
  04420	8d 8d d0 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10144]
  04426	c7 85 20 79 ff
	ff 11 2e 00 00	 mov	 DWORD PTR $T699[ebp], 11793 ; 00002e11H
  04430	c7 85 24 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T699[ebp+4], 0
  0443a	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  0443f	c6 45 fc 78	 mov	 BYTE PTR __$EHRec$[ebp+8], 120 ; 00000078H
  04443	c7 85 18 79 ff
	ff 12 2e 00 00	 mov	 DWORD PTR $T698[ebp], 11794 ; 00002e12H
  0444d	c7 85 1c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T698[ebp+4], 0
  04457	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@FBKJCJGP@Hongkong?5Chenyang?5Electronic?5Co@
  0445c	8d 85 18 79 ff
	ff		 lea	 eax, DWORD PTR $T698[ebp]
  04462	50		 push	 eax
  04463	8d 8d f0 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10176]
  04469	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  0446e	c6 45 fc 79	 mov	 BYTE PTR __$EHRec$[ebp+8], 121 ; 00000079H
  04472	8d 85 10 79 ff
	ff		 lea	 eax, DWORD PTR $T697[ebp]
  04478	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NFGCEAJL@Glosys?5Inc?4@
  0447d	50		 push	 eax
  0447e	8d 8d 10 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10208]
  04484	c7 85 10 79 ff
	ff 16 2e 00 00	 mov	 DWORD PTR $T697[ebp], 11798 ; 00002e16H
  0448e	c7 85 14 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T697[ebp+4], 0
  04498	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  0449d	c6 45 fc 7a	 mov	 BYTE PTR __$EHRec$[ebp+8], 122 ; 0000007aH
  044a1	8d 85 08 79 ff
	ff		 lea	 eax, DWORD PTR $T696[ebp]
  044a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NLOFNCDI@Clarion?5?$CIMalaysia?$CJ?5Sdn?4?5Bhd?4@
  044ac	50		 push	 eax
  044ad	8d 8d 30 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10240]
  044b3	c7 85 08 79 ff
	ff 1d 2e 00 00	 mov	 DWORD PTR $T696[ebp], 11805 ; 00002e1dH
  044bd	c7 85 0c 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T696[ebp+4], 0
  044c7	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  044cc	c6 45 fc 7b	 mov	 BYTE PTR __$EHRec$[ebp+8], 123 ; 0000007bH
  044d0	8d 85 00 79 ff
	ff		 lea	 eax, DWORD PTR $T695[ebp]
  044d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LCBEDPCL@Guangzhou?5Long?5Do?5Co?4?0Ltd@
  044db	50		 push	 eax
  044dc	8d 8d 50 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10272]
  044e2	c7 85 00 79 ff
	ff 20 2e 00 00	 mov	 DWORD PTR $T695[ebp], 11808 ; 00002e20H
  044ec	c7 85 04 79 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T695[ebp+4], 0
  044f6	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  044fb	c6 45 fc 7c	 mov	 BYTE PTR __$EHRec$[ebp+8], 124 ; 0000007cH
  044ff	8d 85 f8 78 ff
	ff		 lea	 eax, DWORD PTR $T694[ebp]
  04505	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FKHNGDGP@Lion?5Semiconductor@
  0450a	50		 push	 eax
  0450b	8d 8d 70 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10304]
  04511	c7 85 f8 78 ff
	ff 27 2e 00 00	 mov	 DWORD PTR $T694[ebp], 11815 ; 00002e27H
  0451b	c7 85 fc 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T694[ebp+4], 0
  04525	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0452a	c6 45 fc 7d	 mov	 BYTE PTR __$EHRec$[ebp+8], 125 ; 0000007dH
  0452e	8d 85 f0 78 ff
	ff		 lea	 eax, DWORD PTR $T693[ebp]
  04534	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENOEDNCO@Clas?5Ohlson?5AB@
  04539	50		 push	 eax
  0453a	8d 8d 90 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10336]
  04540	c7 85 f0 78 ff
	ff 29 2e 00 00	 mov	 DWORD PTR $T693[ebp], 11817 ; 00002e29H
  0454a	c7 85 f4 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T693[ebp+4], 0
  04554	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  04559	c6 45 fc 7e	 mov	 BYTE PTR __$EHRec$[ebp+8], 126 ; 0000007eH
  0455d	8d 85 e8 78 ff
	ff		 lea	 eax, DWORD PTR $T692[ebp]
  04563	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DBOHKJPD@Shenzhen?5Qinps?5Technology?5Co?5Li@
  04568	50		 push	 eax
  04569	8d 8d b0 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10368]
  0456f	c7 85 e8 78 ff
	ff 2b 2e 00 00	 mov	 DWORD PTR $T692[ebp], 11819 ; 00002e2bH
  04579	c7 85 ec 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T692[ebp+4], 0
  04583	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  04588	c6 45 fc 7f	 mov	 BYTE PTR __$EHRec$[ebp+8], 127 ; 0000007fH
  0458c	8d 85 e0 78 ff
	ff		 lea	 eax, DWORD PTR $T691[ebp]
  04592	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JJAPEGGG@Dashine?5Electronics?5Co?0?5Ltd@
  04597	50		 push	 eax
  04598	8d 8d d0 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10400]
  0459e	c7 85 e0 78 ff
	ff 2c 2e 00 00	 mov	 DWORD PTR $T691[ebp], 11820 ; 00002e2cH
  045a8	c7 85 e4 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T691[ebp+4], 0
  045b2	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  045b7	c6 45 fc 80	 mov	 BYTE PTR __$EHRec$[ebp+8], 128 ; 00000080H
  045bb	8d 85 d8 78 ff
	ff		 lea	 eax, DWORD PTR $T690[ebp]
  045c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GGGPMHOD@Thine?5Electronics?0?5Inc?4@
  045c6	50		 push	 eax
  045c7	8d 8d f0 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10432]
  045cd	c7 85 d8 78 ff
	ff 31 2e 00 00	 mov	 DWORD PTR $T690[ebp], 11825 ; 00002e31H
  045d7	c7 85 dc 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T690[ebp+4], 0
  045e1	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  045e6	c6 45 fc 81	 mov	 BYTE PTR __$EHRec$[ebp+8], 129 ; 00000081H
  045ea	c7 85 d0 78 ff
	ff 34 2e 00 00	 mov	 DWORD PTR $T689[ebp], 11828 ; 00002e34H
  045f4	c7 85 d4 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T689[ebp+4], 0
  045fe	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LADIIKPP@ALLDATA?5LLC@
  04603	8d 85 d0 78 ff
	ff		 lea	 eax, DWORD PTR $T689[ebp]
  04609	50		 push	 eax
  0460a	8d 8d 10 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10464]
  04610	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  04615	c6 45 fc 82	 mov	 BYTE PTR __$EHRec$[ebp+8], 130 ; 00000082H
  04619	8d 85 c8 78 ff
	ff		 lea	 eax, DWORD PTR $T688[ebp]
  0461f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GCPBPKAK@Shenzhen?5PYS?5Industrial?5Co?4?0?5LT@
  04624	50		 push	 eax
  04625	8d 8d 30 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10496]
  0462b	c7 85 c8 78 ff
	ff 35 2e 00 00	 mov	 DWORD PTR $T688[ebp], 11829 ; 00002e35H
  04635	c7 85 cc 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T688[ebp+4], 0
  0463f	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  04644	c6 45 fc 83	 mov	 BYTE PTR __$EHRec$[ebp+8], 131 ; 00000083H
  04648	8d 85 c0 78 ff
	ff		 lea	 eax, DWORD PTR $T687[ebp]
  0464e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FMDJLLFH@Depo?5Electronics?5Limited@
  04653	50		 push	 eax
  04654	8d 8d 50 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10528]
  0465a	c7 85 c0 78 ff
	ff 36 2e 00 00	 mov	 DWORD PTR $T687[ebp], 11830 ; 00002e36H
  04664	c7 85 c4 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T687[ebp+4], 0
  0466e	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  04673	c6 45 fc 84	 mov	 BYTE PTR __$EHRec$[ebp+8], 132 ; 00000084H
  04677	8d 85 b8 78 ff
	ff		 lea	 eax, DWORD PTR $T686[ebp]
  0467d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ECIAAFAB@IRISO?5ELECTRONICS?5CO?4?0?5LTD@
  04682	50		 push	 eax
  04683	8d 8d 70 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10560]
  04689	c7 85 b8 78 ff
	ff 37 2e 00 00	 mov	 DWORD PTR $T686[ebp], 11831 ; 00002e37H
  04693	c7 85 bc 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T686[ebp+4], 0
  0469d	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  046a2	c6 45 fc 85	 mov	 BYTE PTR __$EHRec$[ebp+8], 133 ; 00000085H
  046a6	8d 85 b0 78 ff
	ff		 lea	 eax, DWORD PTR $T685[ebp]
  046ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NJFPGLKC@Nanaboshi?5Electric?5Mfg?4?5Co?4?0?5Lt@
  046b1	50		 push	 eax
  046b2	8d 8d 90 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10592]
  046b8	c7 85 b0 78 ff
	ff 3a 2e 00 00	 mov	 DWORD PTR $T685[ebp], 11834 ; 00002e3aH
  046c2	c7 85 b4 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T685[ebp+4], 0
  046cc	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  046d1	c6 45 fc 86	 mov	 BYTE PTR __$EHRec$[ebp+8], 134 ; 00000086H
  046d5	8d 85 a8 78 ff
	ff		 lea	 eax, DWORD PTR $T684[ebp]
  046db	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DJCBIEBE@Hunan?5Ronghe?5Microelectronics?5C@
  046e0	50		 push	 eax
  046e1	8d 8d b0 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10624]
  046e7	c7 85 a8 78 ff
	ff 42 2e 00 00	 mov	 DWORD PTR $T684[ebp], 11842 ; 00002e42H
  046f1	c7 85 ac 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T684[ebp+4], 0
  046fb	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  04700	c6 45 fc 87	 mov	 BYTE PTR __$EHRec$[ebp+8], 135 ; 00000087H
  04704	8d 85 a0 78 ff
	ff		 lea	 eax, DWORD PTR $T683[ebp]
  0470a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CPOENKOD@Mobileconn?5Technology?5Co?4?0?5Ltd?4@
  0470f	50		 push	 eax
  04710	8d 8d d0 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10656]
  04716	c7 85 a0 78 ff
	ff 46 2e 00 00	 mov	 DWORD PTR $T683[ebp], 11846 ; 00002e46H
  04720	c7 85 a4 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T683[ebp+4], 0
  0472a	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0472f	c6 45 fc 88	 mov	 BYTE PTR __$EHRec$[ebp+8], 136 ; 00000088H
  04733	8d 85 98 78 ff
	ff		 lea	 eax, DWORD PTR $T682[ebp]
  04739	68 00 00 00 00	 push	 OFFSET ??_C@_07MBBIIPCG@ART?5SPA@
  0473e	50		 push	 eax
  0473f	8d 8d f0 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10688]
  04745	c7 85 98 78 ff
	ff 4b 2e 00 00	 mov	 DWORD PTR $T682[ebp], 11851 ; 00002e4bH
  0474f	c7 85 9c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T682[ebp+4], 0
  04759	e8 00 00 00 00	 call	 ??$?0_KAAY07$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY07$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[8],0>
  0475e	c6 45 fc 89	 mov	 BYTE PTR __$EHRec$[ebp+8], 137 ; 00000089H
  04762	8d 85 90 78 ff
	ff		 lea	 eax, DWORD PTR $T681[ebp]
  04768	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DOMKPIBE@Mysher?5Technology?5Co?4?0?5Ltd?4@
  0476d	50		 push	 eax
  0476e	8d 8d 10 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10720]
  04774	c7 85 90 78 ff
	ff 5a 2e 00 00	 mov	 DWORD PTR $T681[ebp], 11866 ; 00002e5aH
  0477e	c7 85 94 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T681[ebp+4], 0
  04788	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0478d	c6 45 fc 8a	 mov	 BYTE PTR __$EHRec$[ebp+8], 138 ; 0000008aH
  04791	c7 85 88 78 ff
	ff 5b 2e 00 00	 mov	 DWORD PTR $T680[ebp], 11867 ; 00002e5bH
  0479b	c7 85 8c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T680[ebp+4], 0
  047a5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BAMJALNK@Fitipower?5Integrated?5Technology@
  047aa	8d 85 88 78 ff
	ff		 lea	 eax, DWORD PTR $T680[ebp]
  047b0	50		 push	 eax
  047b1	8d 8d 30 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10752]
  047b7	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  047bc	c6 45 fc 8b	 mov	 BYTE PTR __$EHRec$[ebp+8], 139 ; 0000008bH
  047c0	8d 85 80 78 ff
	ff		 lea	 eax, DWORD PTR $T679[ebp]
  047c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CKMNELII@Will?5Semiconductor?5Co?4?0?5LTD@
  047cb	50		 push	 eax
  047cc	8d 8d 50 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10784]
  047d2	c7 85 80 78 ff
	ff 62 2e 00 00	 mov	 DWORD PTR $T679[ebp], 11874 ; 00002e62H
  047dc	c7 85 84 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T679[ebp+4], 0
  047e6	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  047eb	c6 45 fc 8c	 mov	 BYTE PTR __$EHRec$[ebp+8], 140 ; 0000008cH
  047ef	8d 85 78 78 ff
	ff		 lea	 eax, DWORD PTR $T678[ebp]
  047f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@ICHPKIBM@Polaris?9Labs?5Shenzhen?5Co?4?0?5Ltd@
  047fa	50		 push	 eax
  047fb	8d 8d 70 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10816]
  04801	c7 85 78 78 ff
	ff 63 2e 00 00	 mov	 DWORD PTR $T678[ebp], 11875 ; 00002e63H
  0480b	c7 85 7c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T678[ebp+4], 0
  04815	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  0481a	c6 45 fc 8d	 mov	 BYTE PTR __$EHRec$[ebp+8], 141 ; 0000008dH
  0481e	8d 85 70 78 ff
	ff		 lea	 eax, DWORD PTR $T677[ebp]
  04824	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DMEEEGKJ@Shenzhen?5Kaibao?5Technology?5Co?4?0@
  04829	50		 push	 eax
  0482a	8d 8d 90 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10848]
  04830	c7 85 70 78 ff
	ff 64 2e 00 00	 mov	 DWORD PTR $T677[ebp], 11876 ; 00002e64H
  0483a	c7 85 74 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T677[ebp+4], 0
  04844	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  04849	c6 45 fc 8e	 mov	 BYTE PTR __$EHRec$[ebp+8], 142 ; 0000008eH
  0484d	8d 85 68 78 ff
	ff		 lea	 eax, DWORD PTR $T676[ebp]
  04853	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CNBAEEJE@Kunshan?5Xintaili?5Precision?5Comp@
  04858	50		 push	 eax
  04859	8d 8d b0 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10880]
  0485f	c7 85 68 78 ff
	ff 65 2e 00 00	 mov	 DWORD PTR $T676[ebp], 11877 ; 00002e65H
  04869	c7 85 6c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T676[ebp+4], 0
  04873	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  04878	c6 45 fc 8f	 mov	 BYTE PTR __$EHRec$[ebp+8], 143 ; 0000008fH
  0487c	8d 85 60 78 ff
	ff		 lea	 eax, DWORD PTR $T675[ebp]
  04882	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EDCNNFOI@Hitachi?0?5Ltd?4@
  04887	50		 push	 eax
  04888	8d 8d d0 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10912]
  0488e	c7 85 60 78 ff
	ff a4 04 00 00	 mov	 DWORD PTR $T675[ebp], 1188 ; 000004a4H
  04898	c7 85 64 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T675[ebp+4], 0
  048a2	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  048a7	c6 45 fc 90	 mov	 BYTE PTR __$EHRec$[ebp+8], 144 ; 00000090H
  048ab	8d 85 58 78 ff
	ff		 lea	 eax, DWORD PTR $T674[ebp]
  048b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NJMIINNM@DMX?0?5LLC?5dba?5Mood?5Media@
  048b6	50		 push	 eax
  048b7	8d 8d f0 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10944]
  048bd	c7 85 58 78 ff
	ff 6b 2e 00 00	 mov	 DWORD PTR $T674[ebp], 11883 ; 00002e6bH
  048c7	c7 85 5c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T674[ebp+4], 0
  048d1	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  048d6	c6 45 fc 91	 mov	 BYTE PTR __$EHRec$[ebp+8], 145 ; 00000091H
  048da	8d 85 50 78 ff
	ff		 lea	 eax, DWORD PTR $T673[ebp]
  048e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IJMNKDCM@DongGuan?5YongHao?5Electronics?5Co@
  048e5	50		 push	 eax
  048e6	8d 8d 10 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10976]
  048ec	c7 85 50 78 ff
	ff 72 2e 00 00	 mov	 DWORD PTR $T673[ebp], 11890 ; 00002e72H
  048f6	c7 85 54 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T673[ebp+4], 0
  04900	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  04905	c6 45 fc 92	 mov	 BYTE PTR __$EHRec$[ebp+8], 146 ; 00000092H
  04909	8d 85 48 78 ff
	ff		 lea	 eax, DWORD PTR $T672[ebp]
  0490f	68 00 00 00 00	 push	 OFFSET ??_C@_08GILNHFPJ@Rylo?5Inc@
  04914	50		 push	 eax
  04915	8d 8d 30 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11008]
  0491b	c7 85 48 78 ff
	ff 74 2e 00 00	 mov	 DWORD PTR $T672[ebp], 11892 ; 00002e74H
  04925	c7 85 4c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T672[ebp+4], 0
  0492f	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  04934	c6 45 fc 93	 mov	 BYTE PTR __$EHRec$[ebp+8], 147 ; 00000093H
  04938	c7 85 40 78 ff
	ff 76 2e 00 00	 mov	 DWORD PTR $T671[ebp], 11894 ; 00002e76H
  04942	c7 85 44 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T671[ebp+4], 0
  0494c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FOOGNKOA@Guangdong?5Jinrun?5Electronics?5Co@
  04951	8d 85 40 78 ff
	ff		 lea	 eax, DWORD PTR $T671[ebp]
  04957	50		 push	 eax
  04958	8d 8d 50 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11040]
  0495e	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  04963	c6 45 fc 94	 mov	 BYTE PTR __$EHRec$[ebp+8], 148 ; 00000094H
  04967	8d 85 38 78 ff
	ff		 lea	 eax, DWORD PTR $T670[ebp]
  0496d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@KKOHHKNC@Shenzhen?5Xin?5Yong?5Yang?5Technolo@
  04972	50		 push	 eax
  04973	8d 8d 70 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11072]
  04979	c7 85 38 78 ff
	ff 7d 2e 00 00	 mov	 DWORD PTR $T670[ebp], 11901 ; 00002e7dH
  04983	c7 85 3c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T670[ebp+4], 0
  0498d	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  04992	c6 45 fc 95	 mov	 BYTE PTR __$EHRec$[ebp+8], 149 ; 00000095H
  04996	8d 85 30 78 ff
	ff		 lea	 eax, DWORD PTR $T669[ebp]
  0499c	51		 push	 ecx
  0499d	50		 push	 eax
  0499e	8d 8d 90 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11104]
  049a4	c7 85 30 78 ff
	ff 7f 2e 00 00	 mov	 DWORD PTR $T669[ebp], 11903 ; 00002e7fH
  049ae	c7 85 34 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T669[ebp+4], 0
  049b8	e8 00 00 00 00	 call	 ??$?0_KAAY0DM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[60],0>
  049bd	c6 45 fc 96	 mov	 BYTE PTR __$EHRec$[ebp+8], 150 ; 00000096H
  049c1	8d 85 28 78 ff
	ff		 lea	 eax, DWORD PTR $T668[ebp]
  049c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BBOPPLHC@Sapphire?5Technology?5Limited@
  049cc	50		 push	 eax
  049cd	8d 8d b0 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11136]
  049d3	c7 85 28 78 ff
	ff 82 2e 00 00	 mov	 DWORD PTR $T668[ebp], 11906 ; 00002e82H
  049dd	c7 85 2c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T668[ebp+4], 0
  049e7	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  049ec	c6 45 fc 97	 mov	 BYTE PTR __$EHRec$[ebp+8], 151 ; 00000097H
  049f0	8d 85 20 78 ff
	ff		 lea	 eax, DWORD PTR $T667[ebp]
  049f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BDEHDNKG@Sheng?5San?5Electronics?5?$CIShen?5Zhe@
  049fb	50		 push	 eax
  049fc	8d 8d d0 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11168]
  04a02	c7 85 20 78 ff
	ff 84 2e 00 00	 mov	 DWORD PTR $T667[ebp], 11908 ; 00002e84H
  04a0c	c7 85 24 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T667[ebp+4], 0
  04a16	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  04a1b	c6 45 fc 98	 mov	 BYTE PTR __$EHRec$[ebp+8], 152 ; 00000098H
  04a1f	8d 85 18 78 ff
	ff		 lea	 eax, DWORD PTR $T666[ebp]
  04a25	68 00 00 00 00	 push	 OFFSET ??_C@_07LOKFIKKP@Verizon@
  04a2a	50		 push	 eax
  04a2b	8d 8d f0 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11200]
  04a31	c7 85 18 78 ff
	ff 85 2e 00 00	 mov	 DWORD PTR $T666[ebp], 11909 ; 00002e85H
  04a3b	c7 85 1c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T666[ebp+4], 0
  04a45	e8 00 00 00 00	 call	 ??$?0_KAAY07$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY07$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[8],0>
  04a4a	c6 45 fc 99	 mov	 BYTE PTR __$EHRec$[ebp+8], 153 ; 00000099H
  04a4e	8d 85 10 78 ff
	ff		 lea	 eax, DWORD PTR $T665[ebp]
  04a54	68 00 00 00 00	 push	 OFFSET ??_C@_09OEADKIBB@Visioneer@
  04a59	50		 push	 eax
  04a5a	8d 8d 10 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11232]
  04a60	c7 85 10 78 ff
	ff a7 04 00 00	 mov	 DWORD PTR $T665[ebp], 1191 ; 000004a7H
  04a6a	c7 85 14 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T665[ebp+4], 0
  04a74	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  04a79	c6 45 fc 9a	 mov	 BYTE PTR __$EHRec$[ebp+8], 154 ; 0000009aH
  04a7d	8d 85 08 78 ff
	ff		 lea	 eax, DWORD PTR $T664[ebp]
  04a83	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JLKFCBCF@Shenzhen?5Injoinic?5Technology?5Co@
  04a88	50		 push	 eax
  04a89	8d 8d 30 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11264]
  04a8f	c7 85 08 78 ff
	ff 87 2e 00 00	 mov	 DWORD PTR $T664[ebp], 11911 ; 00002e87H
  04a99	c7 85 0c 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T664[ebp+4], 0
  04aa3	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  04aa8	c6 45 fc 9b	 mov	 BYTE PTR __$EHRec$[ebp+8], 155 ; 0000009bH
  04aac	8d 85 00 78 ff
	ff		 lea	 eax, DWORD PTR $T663[ebp]
  04ab2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IEIPBGLH@Group?5Dekko?0?5Inc?4@
  04ab7	50		 push	 eax
  04ab8	8d 8d 50 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11296]
  04abe	c7 85 00 78 ff
	ff 89 2e 00 00	 mov	 DWORD PTR $T663[ebp], 11913 ; 00002e89H
  04ac8	c7 85 04 78 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T663[ebp+4], 0
  04ad2	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  04ad7	c6 45 fc 9c	 mov	 BYTE PTR __$EHRec$[ebp+8], 156 ; 0000009cH
  04adb	c7 85 f8 77 ff
	ff 98 2e 00 00	 mov	 DWORD PTR $T662[ebp], 11928 ; 00002e98H
  04ae5	c7 85 fc 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T662[ebp+4], 0
  04aef	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LPBNPKEI@Nekteck?0?5Inc?4@
  04af4	8d 85 f8 77 ff
	ff		 lea	 eax, DWORD PTR $T662[ebp]
  04afa	50		 push	 eax
  04afb	8d 8d 70 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11328]
  04b01	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  04b06	c6 45 fc 9d	 mov	 BYTE PTR __$EHRec$[ebp+8], 157 ; 0000009dH
  04b0a	8d 85 f0 77 ff
	ff		 lea	 eax, DWORD PTR $T661[ebp]
  04b10	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MFIBAGCK@Hynetek?5Semiconductor?5Co?4?0?5Ltd@
  04b15	50		 push	 eax
  04b16	8d 8d 90 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11360]
  04b1c	c7 85 f0 77 ff
	ff 99 2e 00 00	 mov	 DWORD PTR $T661[ebp], 11929 ; 00002e99H
  04b26	c7 85 f4 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T661[ebp+4], 0
  04b30	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  04b35	c6 45 fc 9e	 mov	 BYTE PTR __$EHRec$[ebp+8], 158 ; 0000009eH
  04b39	8d 85 e8 77 ff
	ff		 lea	 eax, DWORD PTR $T660[ebp]
  04b3f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GLDEECEB@Canon?5Inc?4@
  04b44	50		 push	 eax
  04b45	8d 8d b0 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11392]
  04b4b	c7 85 e8 77 ff
	ff a9 04 00 00	 mov	 DWORD PTR $T660[ebp], 1193 ; 000004a9H
  04b55	c7 85 ec 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T660[ebp+4], 0
  04b5f	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  04b64	c6 45 fc 9f	 mov	 BYTE PTR __$EHRec$[ebp+8], 159 ; 0000009fH
  04b68	8d 85 e0 77 ff
	ff		 lea	 eax, DWORD PTR $T659[ebp]
  04b6e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LDEFCJF@MS?5Solutions?5Co?4?0?5Ltd?4@
  04b73	50		 push	 eax
  04b74	8d 8d d0 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11424]
  04b7a	c7 85 e0 77 ff
	ff 9a 2e 00 00	 mov	 DWORD PTR $T659[ebp], 11930 ; 00002e9aH
  04b84	c7 85 e4 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T659[ebp+4], 0
  04b8e	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  04b93	c6 45 fc a0	 mov	 BYTE PTR __$EHRec$[ebp+8], 160 ; 000000a0H
  04b97	8d 85 d8 77 ff
	ff		 lea	 eax, DWORD PTR $T658[ebp]
  04b9d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FGBFLDLB@Shenzhen?5Silkway?5Technology?5Co?4@
  04ba2	50		 push	 eax
  04ba3	8d 8d f0 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11456]
  04ba9	c7 85 d8 77 ff
	ff 9c 2e 00 00	 mov	 DWORD PTR $T658[ebp], 11932 ; 00002e9cH
  04bb3	c7 85 dc 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T658[ebp+4], 0
  04bbd	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  04bc2	c6 45 fc a1	 mov	 BYTE PTR __$EHRec$[ebp+8], 161 ; 000000a1H
  04bc6	8d 85 d0 77 ff
	ff		 lea	 eax, DWORD PTR $T657[ebp]
  04bcc	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KHEFCECP@EyeTech?5Digital?5Systems?0?5Inc?4@
  04bd1	50		 push	 eax
  04bd2	8d 8d 10 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11488]
  04bd8	c7 85 d0 77 ff
	ff 9f 2e 00 00	 mov	 DWORD PTR $T657[ebp], 11935 ; 00002e9fH
  04be2	c7 85 d4 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T657[ebp+4], 0
  04bec	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  04bf1	c6 45 fc a2	 mov	 BYTE PTR __$EHRec$[ebp+8], 162 ; 000000a2H
  04bf5	8d 85 c8 77 ff
	ff		 lea	 eax, DWORD PTR $T656[ebp]
  04bfb	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NJDJOHPC@Ningbo?5Kangda?5Electronic?5Co?4?0?5L@
  04c00	50		 push	 eax
  04c01	8d 8d 30 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11520]
  04c07	c7 85 c8 77 ff
	ff a2 2e 00 00	 mov	 DWORD PTR $T656[ebp], 11938 ; 00002ea2H
  04c11	c7 85 cc 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T656[ebp+4], 0
  04c1b	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  04c20	c6 45 fc a3	 mov	 BYTE PTR __$EHRec$[ebp+8], 163 ; 000000a3H
  04c24	8d 85 c0 77 ff
	ff		 lea	 eax, DWORD PTR $T655[ebp]
  04c2a	51		 push	 ecx
  04c2b	50		 push	 eax
  04c2c	8d 8d 50 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11552]
  04c32	c7 85 c0 77 ff
	ff a4 2e 00 00	 mov	 DWORD PTR $T655[ebp], 11940 ; 00002ea4H
  04c3c	c7 85 c4 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T655[ebp+4], 0
  04c46	e8 00 00 00 00	 call	 ??$?0_KAAY0EA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0EA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[64],0>
  04c4b	c6 45 fc a4	 mov	 BYTE PTR __$EHRec$[ebp+8], 164 ; 000000a4H
  04c4f	8d 85 b8 77 ff
	ff		 lea	 eax, DWORD PTR $T654[ebp]
  04c55	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GGDFEADF@Dongguanshi?5Qitaiprecision?5Moul@
  04c5a	50		 push	 eax
  04c5b	8d 8d 70 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11584]
  04c61	c7 85 b8 77 ff
	ff a5 2e 00 00	 mov	 DWORD PTR $T654[ebp], 11941 ; 00002ea5H
  04c6b	c7 85 bc 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T654[ebp+4], 0
  04c75	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  04c7a	c6 45 fc a5	 mov	 BYTE PTR __$EHRec$[ebp+8], 165 ; 000000a5H
  04c7e	c7 85 b0 77 ff
	ff a6 2e 00 00	 mov	 DWORD PTR $T653[ebp], 11942 ; 00002ea6H
  04c88	c7 85 b4 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T653[ebp+4], 0
  04c92	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JCBLMJOH@Foreign?5Trade?5Corporation?5dba?4?5@
  04c97	8d 85 b0 77 ff
	ff		 lea	 eax, DWORD PTR $T653[ebp]
  04c9d	50		 push	 eax
  04c9e	8d 8d 90 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11616]
  04ca4	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  04ca9	c6 45 fc a6	 mov	 BYTE PTR __$EHRec$[ebp+8], 166 ; 000000a6H
  04cad	8d 85 a8 77 ff
	ff		 lea	 eax, DWORD PTR $T652[ebp]
  04cb3	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NCMHMFAN@Zong?5Cable?5Technology?5Co?4?0?5Ltd?4@
  04cb8	50		 push	 eax
  04cb9	8d 8d b0 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11648]
  04cbf	c7 85 a8 77 ff
	ff ab 2e 00 00	 mov	 DWORD PTR $T652[ebp], 11947 ; 00002eabH
  04cc9	c7 85 ac 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T652[ebp+4], 0
  04cd3	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  04cd8	c6 45 fc a7	 mov	 BYTE PTR __$EHRec$[ebp+8], 167 ; 000000a7H
  04cdc	8d 85 a0 77 ff
	ff		 lea	 eax, DWORD PTR $T651[ebp]
  04ce2	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OOBLADJM@Jia?5Yang?5Electronics?5?$CIDongguan?$CJ@
  04ce7	50		 push	 eax
  04ce8	8d 8d d0 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11680]
  04cee	c7 85 a0 77 ff
	ff ac 2e 00 00	 mov	 DWORD PTR $T651[ebp], 11948 ; 00002eacH
  04cf8	c7 85 a4 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T651[ebp+4], 0
  04d02	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  04d07	c6 45 fc a8	 mov	 BYTE PTR __$EHRec$[ebp+8], 168 ; 000000a8H
  04d0b	8d 85 98 77 ff
	ff		 lea	 eax, DWORD PTR $T650[ebp]
  04d11	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CDFNLDJG@Shenzhen?5TOMTOP?5Technology?5Co?4?0@
  04d16	50		 push	 eax
  04d17	8d 8d f0 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11712]
  04d1d	c7 85 98 77 ff
	ff ae 2e 00 00	 mov	 DWORD PTR $T650[ebp], 11950 ; 00002eaeH
  04d27	c7 85 9c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T650[ebp+4], 0
  04d31	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  04d36	c6 45 fc a9	 mov	 BYTE PTR __$EHRec$[ebp+8], 169 ; 000000a9H
  04d3a	8d 85 90 77 ff
	ff		 lea	 eax, DWORD PTR $T649[ebp]
  04d40	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GICCJNJN@Samsung?5SmartThings@
  04d45	50		 push	 eax
  04d46	8d 8d 10 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11744]
  04d4c	c7 85 90 77 ff
	ff b1 2e 00 00	 mov	 DWORD PTR $T649[ebp], 11953 ; 00002eb1H
  04d56	c7 85 94 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T649[ebp+4], 0
  04d60	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  04d65	c6 45 fc aa	 mov	 BYTE PTR __$EHRec$[ebp+8], 170 ; 000000aaH
  04d69	8d 85 88 77 ff
	ff		 lea	 eax, DWORD PTR $T648[ebp]
  04d6f	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@BINBMFGL@Shenzhen?5Tokwa?5Precision?5Techno@
  04d74	50		 push	 eax
  04d75	8d 8d 30 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11776]
  04d7b	c7 85 88 77 ff
	ff b3 2e 00 00	 mov	 DWORD PTR $T648[ebp], 11955 ; 00002eb3H
  04d85	c7 85 8c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T648[ebp+4], 0
  04d8f	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  04d94	c6 45 fc ab	 mov	 BYTE PTR __$EHRec$[ebp+8], 171 ; 000000abH
  04d98	8d 85 80 77 ff
	ff		 lea	 eax, DWORD PTR $T647[ebp]
  04d9e	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IOOHMIDD@Dongguan?5HengYue?5Communication?5@
  04da3	50		 push	 eax
  04da4	8d 8d 50 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11808]
  04daa	c7 85 80 77 ff
	ff b5 2e 00 00	 mov	 DWORD PTR $T647[ebp], 11957 ; 00002eb5H
  04db4	c7 85 84 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T647[ebp+4], 0
  04dbe	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  04dc3	c6 45 fc ac	 mov	 BYTE PTR __$EHRec$[ebp+8], 172 ; 000000acH
  04dc7	8d 85 78 77 ff
	ff		 lea	 eax, DWORD PTR $T646[ebp]
  04dcd	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MMKJMGEP@The?5Vehicle?5Group?5LTD@
  04dd2	50		 push	 eax
  04dd3	8d 8d 70 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11840]
  04dd9	c7 85 78 77 ff
	ff b6 2e 00 00	 mov	 DWORD PTR $T646[ebp], 11958 ; 00002eb6H
  04de3	c7 85 7c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T646[ebp+4], 0
  04ded	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  04df2	c6 45 fc ad	 mov	 BYTE PTR __$EHRec$[ebp+8], 173 ; 000000adH
  04df6	8d 85 70 77 ff
	ff		 lea	 eax, DWORD PTR $T645[ebp]
  04dfc	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DMHIMFNC@Yueqing?5Nuode?5Electronic?5Techno@
  04e01	50		 push	 eax
  04e02	8d 8d 90 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11872]
  04e08	c7 85 70 77 ff
	ff b8 2e 00 00	 mov	 DWORD PTR $T645[ebp], 11960 ; 00002eb8H
  04e12	c7 85 74 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T645[ebp+4], 0
  04e1c	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  04e21	c6 45 fc ae	 mov	 BYTE PTR __$EHRec$[ebp+8], 174 ; 000000aeH
  04e25	c7 85 68 77 ff
	ff b9 2e 00 00	 mov	 DWORD PTR $T644[ebp], 11961 ; 00002eb9H
  04e2f	c7 85 6c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T644[ebp+4], 0
  04e39	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KKFDDMKG@SSI?5Computer?5Corp?4@
  04e3e	8d 85 68 77 ff
	ff		 lea	 eax, DWORD PTR $T644[ebp]
  04e44	50		 push	 eax
  04e45	8d 8d b0 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11904]
  04e4b	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  04e50	c6 45 fc af	 mov	 BYTE PTR __$EHRec$[ebp+8], 175 ; 000000afH
  04e54	8d 85 60 77 ff
	ff		 lea	 eax, DWORD PTR $T643[ebp]
  04e5a	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@DNNPHNEO@Shenzhen?5He?5Xing?5Sheng?5Smart?5Li@
  04e5f	50		 push	 eax
  04e60	8d 8d d0 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11936]
  04e66	c7 85 60 77 ff
	ff ba 2e 00 00	 mov	 DWORD PTR $T643[ebp], 11962 ; 00002ebaH
  04e70	c7 85 64 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T643[ebp+4], 0
  04e7a	e8 00 00 00 00	 call	 ??$?0_KAAY0DH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[55],0>
  04e7f	c6 45 fc b0	 mov	 BYTE PTR __$EHRec$[ebp+8], 176 ; 000000b0H
  04e83	8d 85 58 77 ff
	ff		 lea	 eax, DWORD PTR $T642[ebp]
  04e89	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OHHCCCJC@RAIDON?5Technology?5Inc?4@
  04e8e	50		 push	 eax
  04e8f	8d 8d f0 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11968]
  04e95	c7 85 58 77 ff
	ff bc 2e 00 00	 mov	 DWORD PTR $T642[ebp], 11964 ; 00002ebcH
  04e9f	c7 85 5c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T642[ebp+4], 0
  04ea9	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  04eae	c6 45 fc b1	 mov	 BYTE PTR __$EHRec$[ebp+8], 177 ; 000000b1H
  04eb2	8d 85 50 77 ff
	ff		 lea	 eax, DWORD PTR $T641[ebp]
  04eb8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IOCKICGC@Netstor?5Technology?5Co?4?0?5Ltd?4@
  04ebd	50		 push	 eax
  04ebe	8d 8d 10 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12000]
  04ec4	c7 85 50 77 ff
	ff bd 2e 00 00	 mov	 DWORD PTR $T641[ebp], 11965 ; 00002ebdH
  04ece	c7 85 54 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T641[ebp+4], 0
  04ed8	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  04edd	c6 45 fc b2	 mov	 BYTE PTR __$EHRec$[ebp+8], 178 ; 000000b2H
  04ee1	8d 85 48 77 ff
	ff		 lea	 eax, DWORD PTR $T640[ebp]
  04ee7	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DOAHHEJB@Delphi?5Automotive?5Systems?0?5LLC@
  04eec	50		 push	 eax
  04eed	8d 8d 30 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12032]
  04ef3	c7 85 48 77 ff
	ff be 2e 00 00	 mov	 DWORD PTR $T640[ebp], 11966 ; 00002ebeH
  04efd	c7 85 4c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T640[ebp+4], 0
  04f07	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  04f0c	c6 45 fc b3	 mov	 BYTE PTR __$EHRec$[ebp+8], 179 ; 000000b3H
  04f10	8d 85 40 77 ff
	ff		 lea	 eax, DWORD PTR $T639[ebp]
  04f16	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DFCMHNMG@Shenzhen?5D?$CGD?5Technology?5Co?4?0?5Lt@
  04f1b	50		 push	 eax
  04f1c	8d 8d 50 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12064]
  04f22	c7 85 40 77 ff
	ff bf 2e 00 00	 mov	 DWORD PTR $T639[ebp], 11967 ; 00002ebfH
  04f2c	c7 85 44 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T639[ebp+4], 0
  04f36	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  04f3b	c6 45 fc b4	 mov	 BYTE PTR __$EHRec$[ebp+8], 180 ; 000000b4H
  04f3f	8d 85 38 77 ff
	ff		 lea	 eax, DWORD PTR $T638[ebp]
  04f45	68 00 00 00 00	 push	 OFFSET ??_C@_09BEJNLKKJ@GuideTech@
  04f4a	50		 push	 eax
  04f4b	8d 8d 70 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12096]
  04f51	c7 85 38 77 ff
	ff c0 2e 00 00	 mov	 DWORD PTR $T638[ebp], 11968 ; 00002ec0H
  04f5b	c7 85 3c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T638[ebp+4], 0
  04f65	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  04f6a	c6 45 fc b5	 mov	 BYTE PTR __$EHRec$[ebp+8], 181 ; 000000b5H
  04f6e	8d 85 30 77 ff
	ff		 lea	 eax, DWORD PTR $T637[ebp]
  04f74	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CPCMKJOB@Shenzhen?5Huntkey?5Electric?5Co?4?0?5@
  04f79	50		 push	 eax
  04f7a	8d 8d 90 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12128]
  04f80	c7 85 30 77 ff
	ff c3 2e 00 00	 mov	 DWORD PTR $T637[ebp], 11971 ; 00002ec3H
  04f8a	c7 85 34 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T637[ebp+4], 0
  04f94	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  04f99	c6 45 fc b6	 mov	 BYTE PTR __$EHRec$[ebp+8], 182 ; 000000b6H
  04f9d	8d 85 28 77 ff
	ff		 lea	 eax, DWORD PTR $T636[ebp]
  04fa3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HPALAHLL@Ariba?5Technology?5Co?4?0?5LTD?4@
  04fa8	50		 push	 eax
  04fa9	8d 8d b0 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12160]
  04faf	c7 85 28 77 ff
	ff c5 2e 00 00	 mov	 DWORD PTR $T636[ebp], 11973 ; 00002ec5H
  04fb9	c7 85 2c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T636[ebp+4], 0
  04fc3	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  04fc8	c6 45 fc b7	 mov	 BYTE PTR __$EHRec$[ebp+8], 183 ; 000000b7H
  04fcc	c7 85 20 77 ff
	ff c8 2e 00 00	 mov	 DWORD PTR $T635[ebp], 11976 ; 00002ec8H
  04fd6	c7 85 24 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T635[ebp+4], 0
  04fe0	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KGEHJFPD@Ningbo?5Prime?5Electronic?5Co?4?0?5Lt@
  04fe5	8d 85 20 77 ff
	ff		 lea	 eax, DWORD PTR $T635[ebp]
  04feb	50		 push	 eax
  04fec	8d 8d d0 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12192]
  04ff2	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  04ff7	c6 45 fc b8	 mov	 BYTE PTR __$EHRec$[ebp+8], 184 ; 000000b8H
  04ffb	8d 85 18 77 ff
	ff		 lea	 eax, DWORD PTR $T634[ebp]
  05001	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IIKJJOLO@AQuantia?5Corp@
  05006	50		 push	 eax
  05007	8d 8d f0 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12224]
  0500d	c7 85 18 77 ff
	ff ca 2e 00 00	 mov	 DWORD PTR $T634[ebp], 11978 ; 00002ecaH
  05017	c7 85 1c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T634[ebp+4], 0
  05021	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  05026	c6 45 fc b9	 mov	 BYTE PTR __$EHRec$[ebp+8], 185 ; 000000b9H
  0502a	8d 85 10 77 ff
	ff		 lea	 eax, DWORD PTR $T633[ebp]
  05030	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JGLJBNFN@Zhejiang?5Quzhou?5Gelinte?5Wire?5an@
  05035	50		 push	 eax
  05036	8d 8d 10 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12256]
  0503c	c7 85 10 77 ff
	ff cb 2e 00 00	 mov	 DWORD PTR $T633[ebp], 11979 ; 00002ecbH
  05046	c7 85 14 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T633[ebp+4], 0
  05050	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  05055	c6 45 fc ba	 mov	 BYTE PTR __$EHRec$[ebp+8], 186 ; 000000baH
  05059	8d 85 08 77 ff
	ff		 lea	 eax, DWORD PTR $T632[ebp]
  0505f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OHDPFJLL@E?9Lead?5Electronic?5Co?4?0?5Ltd?4@
  05064	50		 push	 eax
  05065	8d 8d 30 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12288]
  0506b	c7 85 08 77 ff
	ff ce 2e 00 00	 mov	 DWORD PTR $T632[ebp], 11982 ; 00002eceH
  05075	c7 85 0c 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T632[ebp+4], 0
  0507f	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  05084	c6 45 fc bb	 mov	 BYTE PTR __$EHRec$[ebp+8], 187 ; 000000bbH
  05088	8d 85 00 77 ff
	ff		 lea	 eax, DWORD PTR $T631[ebp]
  0508e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EPGHAOC@QBit?5Semiconductor?5LTD@
  05093	50		 push	 eax
  05094	8d 8d 50 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12320]
  0509a	c7 85 00 77 ff
	ff d1 2e 00 00	 mov	 DWORD PTR $T631[ebp], 11985 ; 00002ed1H
  050a4	c7 85 04 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T631[ebp+4], 0
  050ae	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  050b3	c6 45 fc bc	 mov	 BYTE PTR __$EHRec$[ebp+8], 188 ; 000000bcH
  050b7	8d 85 f8 76 ff
	ff		 lea	 eax, DWORD PTR $T630[ebp]
  050bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MGFKGGNB@Shenzhen?5Xinhongya?5Electronics?5@
  050c2	50		 push	 eax
  050c3	8d 8d 70 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12352]
  050c9	c7 85 f8 76 ff
	ff d3 2e 00 00	 mov	 DWORD PTR $T630[ebp], 11987 ; 00002ed3H
  050d3	c7 85 fc 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T630[ebp+4], 0
  050dd	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  050e2	c6 45 fc bd	 mov	 BYTE PTR __$EHRec$[ebp+8], 189 ; 000000bdH
  050e6	8d 85 f0 76 ff
	ff		 lea	 eax, DWORD PTR $T629[ebp]
  050ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DKOBPKOL@QSAN?5Technology?0?5Inc?4@
  050f1	50		 push	 eax
  050f2	8d 8d 90 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12384]
  050f8	c7 85 f0 76 ff
	ff d5 2e 00 00	 mov	 DWORD PTR $T629[ebp], 11989 ; 00002ed5H
  05102	c7 85 f4 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T629[ebp+4], 0
  0510c	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  05111	c6 45 fc be	 mov	 BYTE PTR __$EHRec$[ebp+8], 190 ; 000000beH
  05115	8d 85 e8 76 ff
	ff		 lea	 eax, DWORD PTR $T628[ebp]
  0511b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MGDGHCIK@Shenzhen?5Xinliyang?5Co?4?0?5Ltd?4@
  05120	50		 push	 eax
  05121	8d 8d b0 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12416]
  05127	c7 85 e8 76 ff
	ff d6 2e 00 00	 mov	 DWORD PTR $T628[ebp], 11990 ; 00002ed6H
  05131	c7 85 ec 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T628[ebp+4], 0
  0513b	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  05140	c6 45 fc bf	 mov	 BYTE PTR __$EHRec$[ebp+8], 191 ; 000000bfH
  05144	8d 85 e0 76 ff
	ff		 lea	 eax, DWORD PTR $T627[ebp]
  0514a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HGLNPNPL@Libratel?5Inc@
  0514f	50		 push	 eax
  05150	8d 8d d0 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12448]
  05156	c7 85 e0 76 ff
	ff d7 2e 00 00	 mov	 DWORD PTR $T627[ebp], 11991 ; 00002ed7H
  05160	c7 85 e4 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T627[ebp+4], 0
  0516a	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  0516f	c6 45 fc c0	 mov	 BYTE PTR __$EHRec$[ebp+8], 192 ; 000000c0H
  05173	c7 85 d8 76 ff
	ff d8 2e 00 00	 mov	 DWORD PTR $T626[ebp], 11992 ; 00002ed8H
  0517d	c7 85 dc 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T626[ebp+4], 0
  05187	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CACJAFDJ@Dongguan?5Lontion?5Industrial?5Co?4@
  0518c	8d 85 d8 76 ff
	ff		 lea	 eax, DWORD PTR $T626[ebp]
  05192	50		 push	 eax
  05193	8d 8d f0 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12480]
  05199	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0519e	c6 45 fc c1	 mov	 BYTE PTR __$EHRec$[ebp+8], 193 ; 000000c1H
  051a2	8d 85 d0 76 ff
	ff		 lea	 eax, DWORD PTR $T625[ebp]
  051a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BHEBNKFL@Microscopes?5International?0?5LLC@
  051ad	50		 push	 eax
  051ae	8d 8d 10 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12512]
  051b4	c7 85 d0 76 ff
	ff d9 2e 00 00	 mov	 DWORD PTR $T625[ebp], 11993 ; 00002ed9H
  051be	c7 85 d4 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T625[ebp+4], 0
  051c8	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  051cd	c6 45 fc c2	 mov	 BYTE PTR __$EHRec$[ebp+8], 194 ; 000000c2H
  051d1	8d 85 c8 76 ff
	ff		 lea	 eax, DWORD PTR $T624[ebp]
  051d7	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@FCCPDDBP@Wenzhou?5Haitong?5Communication?5E@
  051dc	50		 push	 eax
  051dd	8d 8d 30 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12544]
  051e3	c7 85 c8 76 ff
	ff da 2e 00 00	 mov	 DWORD PTR $T624[ebp], 11994 ; 00002edaH
  051ed	c7 85 cc 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T624[ebp+4], 0
  051f7	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  051fc	c6 45 fc c3	 mov	 BYTE PTR __$EHRec$[ebp+8], 195 ; 000000c3H
  05200	8d 85 c0 76 ff
	ff		 lea	 eax, DWORD PTR $T623[ebp]
  05206	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KOIEJGPA@Technik?5Industrial?5Company?5Limi@
  0520b	50		 push	 eax
  0520c	8d 8d 50 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12576]
  05212	c7 85 c0 76 ff
	ff de 2e 00 00	 mov	 DWORD PTR $T623[ebp], 11998 ; 00002edeH
  0521c	c7 85 c4 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T623[ebp+4], 0
  05226	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0522b	c6 45 fc c4	 mov	 BYTE PTR __$EHRec$[ebp+8], 196 ; 000000c4H
  0522f	8d 85 b8 76 ff
	ff		 lea	 eax, DWORD PTR $T622[ebp]
  05235	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NMAKMKPG@Huizhou?5Wealth?5Metal?5Micro?5Cont@
  0523a	50		 push	 eax
  0523b	8d 8d 70 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12608]
  05241	c7 85 b8 76 ff
	ff df 2e 00 00	 mov	 DWORD PTR $T622[ebp], 11999 ; 00002edfH
  0524b	c7 85 bc 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T622[ebp+4], 0
  05255	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  0525a	c6 45 fc c5	 mov	 BYTE PTR __$EHRec$[ebp+8], 197 ; 000000c5H
  0525e	8d 85 b0 76 ff
	ff		 lea	 eax, DWORD PTR $T621[ebp]
  05264	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GNNADKEG@Nikon?5Corporation@
  05269	50		 push	 eax
  0526a	8d 8d 90 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12640]
  05270	c7 85 b0 76 ff
	ff b0 04 00 00	 mov	 DWORD PTR $T621[ebp], 1200 ; 000004b0H
  0527a	c7 85 b4 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T621[ebp+4], 0
  05284	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  05289	c6 45 fc c6	 mov	 BYTE PTR __$EHRec$[ebp+8], 198 ; 000000c6H
  0528d	8d 85 a8 76 ff
	ff		 lea	 eax, DWORD PTR $T620[ebp]
  05293	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LNPOAICG@Pogotec?5Inc?4@
  05298	50		 push	 eax
  05299	8d 8d b0 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12672]
  0529f	c7 85 a8 76 ff
	ff e0 2e 00 00	 mov	 DWORD PTR $T620[ebp], 12000 ; 00002ee0H
  052a9	c7 85 ac 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T620[ebp+4], 0
  052b3	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  052b8	c6 45 fc c7	 mov	 BYTE PTR __$EHRec$[ebp+8], 199 ; 000000c7H
  052bc	8d 85 a0 76 ff
	ff		 lea	 eax, DWORD PTR $T619[ebp]
  052c2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ODJHKKOO@Safetrust?5Inc@
  052c7	50		 push	 eax
  052c8	8d 8d d0 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12704]
  052ce	c7 85 a0 76 ff
	ff e1 2e 00 00	 mov	 DWORD PTR $T619[ebp], 12001 ; 00002ee1H
  052d8	c7 85 a4 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T619[ebp+4], 0
  052e2	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  052e7	c6 45 fc c8	 mov	 BYTE PTR __$EHRec$[ebp+8], 200 ; 000000c8H
  052eb	8d 85 98 76 ff
	ff		 lea	 eax, DWORD PTR $T618[ebp]
  052f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OENCHBM@Kashimura?5Co?4?0?5Ltd?4@
  052f6	50		 push	 eax
  052f7	8d 8d f0 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12736]
  052fd	c7 85 98 76 ff
	ff e2 2e 00 00	 mov	 DWORD PTR $T618[ebp], 12002 ; 00002ee2H
  05307	c7 85 9c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T618[ebp+4], 0
  05311	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  05316	c6 45 fc c9	 mov	 BYTE PTR __$EHRec$[ebp+8], 201 ; 000000c9H
  0531a	c7 85 90 76 ff
	ff e3 2e 00 00	 mov	 DWORD PTR $T617[ebp], 12003 ; 00002ee3H
  05324	c7 85 94 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T617[ebp+4], 0
  0532e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KHKNEEHL@Kin?5Keung?5Electrical?5Mfg?4?5Ltd?4@
  05333	8d 85 90 76 ff
	ff		 lea	 eax, DWORD PTR $T617[ebp]
  05339	50		 push	 eax
  0533a	8d 8d 10 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12768]
  05340	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  05345	c6 45 fc ca	 mov	 BYTE PTR __$EHRec$[ebp+8], 202 ; 000000caH
  05349	8d 85 88 76 ff
	ff		 lea	 eax, DWORD PTR $T616[ebp]
  0534f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EPFHDNLC@Hisense?5USA?5Corporation@
  05354	50		 push	 eax
  05355	8d 8d 30 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12800]
  0535b	c7 85 88 76 ff
	ff e5 2e 00 00	 mov	 DWORD PTR $T616[ebp], 12005 ; 00002ee5H
  05365	c7 85 8c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T616[ebp+4], 0
  0536f	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  05374	c6 45 fc cb	 mov	 BYTE PTR __$EHRec$[ebp+8], 203 ; 000000cbH
  05378	8d 85 80 76 ff
	ff		 lea	 eax, DWORD PTR $T615[ebp]
  0537e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DBDCEMBK@GOOGFIT?5TECH?5LIMITED@
  05383	50		 push	 eax
  05384	8d 8d 50 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12832]
  0538a	c7 85 80 76 ff
	ff e7 2e 00 00	 mov	 DWORD PTR $T615[ebp], 12007 ; 00002ee7H
  05394	c7 85 84 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T615[ebp+4], 0
  0539e	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  053a3	c6 45 fc cc	 mov	 BYTE PTR __$EHRec$[ebp+8], 204 ; 000000ccH
  053a7	8d 85 78 76 ff
	ff		 lea	 eax, DWORD PTR $T614[ebp]
  053ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HJPMHLJH@Pan?5International@
  053b2	50		 push	 eax
  053b3	8d 8d 70 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12864]
  053b9	c7 85 78 76 ff
	ff b1 04 00 00	 mov	 DWORD PTR $T614[ebp], 1201 ; 000004b1H
  053c3	c7 85 7c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T614[ebp+4], 0
  053cd	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  053d2	c6 45 fc cd	 mov	 BYTE PTR __$EHRec$[ebp+8], 205 ; 000000cdH
  053d6	8d 85 70 76 ff
	ff		 lea	 eax, DWORD PTR $T613[ebp]
  053dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@POHEEAAC@Jianduan?5Technology?5?$CIShenzhen?$CJ?5@
  053e1	50		 push	 eax
  053e2	8d 8d 90 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12896]
  053e8	c7 85 70 76 ff
	ff eb 2e 00 00	 mov	 DWORD PTR $T613[ebp], 12011 ; 00002eebH
  053f2	c7 85 74 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T613[ebp+4], 0
  053fc	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  05401	c6 45 fc ce	 mov	 BYTE PTR __$EHRec$[ebp+8], 206 ; 000000ceH
  05405	8d 85 68 76 ff
	ff		 lea	 eax, DWORD PTR $T612[ebp]
  0540b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIDLKED@Sensor?5Industries?5Limited@
  05410	50		 push	 eax
  05411	8d 8d b0 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12928]
  05417	c7 85 68 76 ff
	ff ec 2e 00 00	 mov	 DWORD PTR $T612[ebp], 12012 ; 00002eecH
  05421	c7 85 6c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T612[ebp+4], 0
  0542b	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  05430	c6 45 fc cf	 mov	 BYTE PTR __$EHRec$[ebp+8], 207 ; 000000cfH
  05434	8d 85 60 76 ff
	ff		 lea	 eax, DWORD PTR $T611[ebp]
  0543a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@CIPPBOJD@Beijing?5Qunli?5Tiancheng?5Network@
  0543f	50		 push	 eax
  05440	8d 8d d0 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12960]
  05446	c7 85 60 76 ff
	ff ee 2e 00 00	 mov	 DWORD PTR $T611[ebp], 12014 ; 00002eeeH
  05450	c7 85 64 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T611[ebp+4], 0
  0545a	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  0545f	c6 45 fc d0	 mov	 BYTE PTR __$EHRec$[ebp+8], 208 ; 000000d0H
  05463	8d 85 58 76 ff
	ff		 lea	 eax, DWORD PTR $T610[ebp]
  05469	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HMKBEPH@Zhongshan?5Auxus?5Electronic?5Tech@
  0546e	50		 push	 eax
  0546f	8d 8d f0 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12992]
  05475	c7 85 58 76 ff
	ff f0 2e 00 00	 mov	 DWORD PTR $T610[ebp], 12016 ; 00002ef0H
  0547f	c7 85 5c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T610[ebp+4], 0
  05489	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0548e	c6 45 fc d1	 mov	 BYTE PTR __$EHRec$[ebp+8], 209 ; 000000d1H
  05492	8d 85 50 76 ff
	ff		 lea	 eax, DWORD PTR $T609[ebp]
  05498	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NOCJDPPN@Tatvik?5Biosystems?5Private?5Limit@
  0549d	50		 push	 eax
  0549e	8d 8d 10 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13024]
  054a4	c7 85 50 76 ff
	ff f1 2e 00 00	 mov	 DWORD PTR $T609[ebp], 12017 ; 00002ef1H
  054ae	c7 85 54 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T609[ebp+4], 0
  054b8	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  054bd	c6 45 fc d2	 mov	 BYTE PTR __$EHRec$[ebp+8], 210 ; 000000d2H
  054c1	c7 85 48 76 ff
	ff f2 2e 00 00	 mov	 DWORD PTR $T608[ebp], 12018 ; 00002ef2H
  054cb	c7 85 4c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T608[ebp+4], 0
  054d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLHALCO@Shenzhen?5Goodwin?5Technology?5Co?4@
  054da	8d 85 48 76 ff
	ff		 lea	 eax, DWORD PTR $T608[ebp]
  054e0	50		 push	 eax
  054e1	8d 8d 30 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13056]
  054e7	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  054ec	c6 45 fc d3	 mov	 BYTE PTR __$EHRec$[ebp+8], 211 ; 000000d3H
  054f0	8d 85 40 76 ff
	ff		 lea	 eax, DWORD PTR $T607[ebp]
  054f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PJNCEGEM@Hopewin?5Electronic?5Material?5Co?4@
  054fb	50		 push	 eax
  054fc	8d 8d 50 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13088]
  05502	c7 85 40 76 ff
	ff f4 2e 00 00	 mov	 DWORD PTR $T607[ebp], 12020 ; 00002ef4H
  0550c	c7 85 44 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T607[ebp+4], 0
  05516	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0551b	c6 45 fc d4	 mov	 BYTE PTR __$EHRec$[ebp+8], 212 ; 000000d4H
  0551f	8d 85 38 76 ff
	ff		 lea	 eax, DWORD PTR $T606[ebp]
  05525	68 00 00 00 00	 push	 OFFSET ??_C@_08DFCOMEMG@pureLiFi@
  0552a	50		 push	 eax
  0552b	8d 8d 70 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13120]
  05531	c7 85 38 76 ff
	ff f5 2e 00 00	 mov	 DWORD PTR $T606[ebp], 12021 ; 00002ef5H
  0553b	c7 85 3c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T606[ebp+4], 0
  05545	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  0554a	c6 45 fc d5	 mov	 BYTE PTR __$EHRec$[ebp+8], 213 ; 000000d5H
  0554e	8d 85 30 76 ff
	ff		 lea	 eax, DWORD PTR $T605[ebp]
  05554	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BIDDJNKO@SHING?5ECOBLUE?5CO?4?0?5LTD?4@
  05559	50		 push	 eax
  0555a	8d 8d 90 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13152]
  05560	c7 85 30 76 ff
	ff f6 2e 00 00	 mov	 DWORD PTR $T605[ebp], 12022 ; 00002ef6H
  0556a	c7 85 34 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T605[ebp+4], 0
  05574	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  05579	c6 45 fc d6	 mov	 BYTE PTR __$EHRec$[ebp+8], 214 ; 000000d6H
  0557d	8d 85 28 76 ff
	ff		 lea	 eax, DWORD PTR $T604[ebp]
  05583	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HNMMHID@Shenzhen?5DBK?5Electronics?5Co?4?0?5L@
  05588	50		 push	 eax
  05589	8d 8d b0 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13184]
  0558f	c7 85 28 76 ff
	ff f8 2e 00 00	 mov	 DWORD PTR $T604[ebp], 12024 ; 00002ef8H
  05599	c7 85 2c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T604[ebp+4], 0
  055a3	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  055a8	c6 45 fc d7	 mov	 BYTE PTR __$EHRec$[ebp+8], 215 ; 000000d7H
  055ac	8d 85 20 76 ff
	ff		 lea	 eax, DWORD PTR $T603[ebp]
  055b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DAEGJGIO@BDStar?5?$CIChongqing?$CJ?5Auto?5Electro@
  055b7	50		 push	 eax
  055b8	8d 8d d0 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13216]
  055be	c7 85 20 76 ff
	ff f9 2e 00 00	 mov	 DWORD PTR $T603[ebp], 12025 ; 00002ef9H
  055c8	c7 85 24 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T603[ebp+4], 0
  055d2	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  055d7	c6 45 fc d8	 mov	 BYTE PTR __$EHRec$[ebp+8], 216 ; 000000d8H
  055db	8d 85 18 76 ff
	ff		 lea	 eax, DWORD PTR $T602[ebp]
  055e1	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LGPGMKGP@Dongguan?5Xcomm?5Electronic?5Tech?5@
  055e6	50		 push	 eax
  055e7	8d 8d f0 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13248]
  055ed	c7 85 18 76 ff
	ff fa 2e 00 00	 mov	 DWORD PTR $T602[ebp], 12026 ; 00002efaH
  055f7	c7 85 1c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T602[ebp+4], 0
  05601	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  05606	c6 45 fc d9	 mov	 BYTE PTR __$EHRec$[ebp+8], 217 ; 000000d9H
  0560a	8d 85 10 76 ff
	ff		 lea	 eax, DWORD PTR $T601[ebp]
  05610	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MLNBFMPD@Shen?5Zhen?5GLGNET?5Electronics?5Co@
  05615	50		 push	 eax
  05616	8d 8d 10 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13280]
  0561c	c7 85 10 76 ff
	ff fb 2e 00 00	 mov	 DWORD PTR $T601[ebp], 12027 ; 00002efbH
  05626	c7 85 14 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T601[ebp+4], 0
  05630	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  05635	c6 45 fc da	 mov	 BYTE PTR __$EHRec$[ebp+8], 218 ; 000000daH
  05639	8d 85 08 76 ff
	ff		 lea	 eax, DWORD PTR $T600[ebp]
  0563f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HKOAOGIK@Rapid?5Power?5Co?4?0?5Ltd?4@
  05644	50		 push	 eax
  05645	8d 8d 30 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13312]
  0564b	c7 85 08 76 ff
	ff 03 2f 00 00	 mov	 DWORD PTR $T600[ebp], 12035 ; 00002f03H
  05655	c7 85 0c 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T600[ebp+4], 0
  0565f	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  05664	c6 45 fc db	 mov	 BYTE PTR __$EHRec$[ebp+8], 219 ; 000000dbH
  05668	c7 85 00 76 ff
	ff 05 2f 00 00	 mov	 DWORD PTR $T599[ebp], 12037 ; 00002f05H
  05672	c7 85 04 76 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T599[ebp+4], 0
  0567c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NKGMNMEH@Shenzhen?5jiayz?5photo?5industrial@
  05681	8d 85 00 76 ff
	ff		 lea	 eax, DWORD PTR $T599[ebp]
  05687	50		 push	 eax
  05688	8d 8d 50 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13344]
  0568e	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  05693	c6 45 fc dc	 mov	 BYTE PTR __$EHRec$[ebp+8], 220 ; 000000dcH
  05697	8d 85 f8 75 ff
	ff		 lea	 eax, DWORD PTR $T598[ebp]
  0569d	68 00 00 00 00	 push	 OFFSET ??_C@_06ODKNODPO@Qmadix@
  056a2	50		 push	 eax
  056a3	8d 8d 70 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13376]
  056a9	c7 85 f8 75 ff
	ff 07 2f 00 00	 mov	 DWORD PTR $T598[ebp], 12039 ; 00002f07H
  056b3	c7 85 fc 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T598[ebp+4], 0
  056bd	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  056c2	c6 45 fc dd	 mov	 BYTE PTR __$EHRec$[ebp+8], 221 ; 000000ddH
  056c6	8d 85 f0 75 ff
	ff		 lea	 eax, DWORD PTR $T597[ebp]
  056cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGCLJBBL@Cypress?5Semiconductor@
  056d1	50		 push	 eax
  056d2	8d 8d 90 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13408]
  056d8	c7 85 f0 75 ff
	ff b4 04 00 00	 mov	 DWORD PTR $T597[ebp], 1204 ; 000004b4H
  056e2	c7 85 f4 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T597[ebp+4], 0
  056ec	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  056f1	c6 45 fc de	 mov	 BYTE PTR __$EHRec$[ebp+8], 222 ; 000000deH
  056f5	8d 85 e8 75 ff
	ff		 lea	 eax, DWORD PTR $T596[ebp]
  056fb	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@HCGIEMEA@Shenzhen?5Techoss?5Technology?5Co?4@
  05700	50		 push	 eax
  05701	8d 8d b0 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13440]
  05707	c7 85 e8 75 ff
	ff 08 2f 00 00	 mov	 DWORD PTR $T596[ebp], 12040 ; 00002f08H
  05711	c7 85 ec 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T596[ebp+4], 0
  0571b	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  05720	c6 45 fc df	 mov	 BYTE PTR __$EHRec$[ebp+8], 223 ; 000000dfH
  05724	8d 85 e0 75 ff
	ff		 lea	 eax, DWORD PTR $T595[ebp]
  0572a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JGAEFIDA@JOLANYEE?5Technology?5Co?4?0?5Ltd?4@
  0572f	50		 push	 eax
  05730	8d 8d d0 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13472]
  05736	c7 85 e0 75 ff
	ff 0b 2f 00 00	 mov	 DWORD PTR $T595[ebp], 12043 ; 00002f0bH
  05740	c7 85 e4 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T595[ebp+4], 0
  0574a	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0574f	c6 45 fc e0	 mov	 BYTE PTR __$EHRec$[ebp+8], 224 ; 000000e0H
  05753	8d 85 d8 75 ff
	ff		 lea	 eax, DWORD PTR $T594[ebp]
  05759	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LHACCCGD@Landis?$CLGyr?5AG@
  0575e	50		 push	 eax
  0575f	8d 8d f0 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13504]
  05765	c7 85 d8 75 ff
	ff 0c 2f 00 00	 mov	 DWORD PTR $T594[ebp], 12044 ; 00002f0cH
  0576f	c7 85 dc 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T594[ebp+4], 0
  05779	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0577e	c6 45 fc e1	 mov	 BYTE PTR __$EHRec$[ebp+8], 225 ; 000000e1H
  05782	8d 85 d0 75 ff
	ff		 lea	 eax, DWORD PTR $T593[ebp]
  05788	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KILIMEPB@Shenzhen?5RoadRover?5Technology?5C@
  0578d	50		 push	 eax
  0578e	8d 8d 10 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13536]
  05794	c7 85 d0 75 ff
	ff 0f 2f 00 00	 mov	 DWORD PTR $T593[ebp], 12047 ; 00002f0fH
  0579e	c7 85 d4 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T593[ebp+4], 0
  057a8	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  057ad	c6 45 fc e2	 mov	 BYTE PTR __$EHRec$[ebp+8], 226 ; 000000e2H
  057b1	8d 85 c8 75 ff
	ff		 lea	 eax, DWORD PTR $T592[ebp]
  057b7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EGJMBONJ@1MORE?5INC?4@
  057bc	50		 push	 eax
  057bd	8d 8d 30 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13568]
  057c3	c7 85 c8 75 ff
	ff 10 2f 00 00	 mov	 DWORD PTR $T592[ebp], 12048 ; 00002f10H
  057cd	c7 85 cc 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T592[ebp+4], 0
  057d7	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  057dc	c6 45 fc e3	 mov	 BYTE PTR __$EHRec$[ebp+8], 227 ; 000000e3H
  057e0	8d 85 c0 75 ff
	ff		 lea	 eax, DWORD PTR $T591[ebp]
  057e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HDLBGPKA@Shenzhen?5LVSUN?5Electronics?5Tech@
  057eb	50		 push	 eax
  057ec	8d 8d 50 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13600]
  057f2	c7 85 c0 75 ff
	ff 11 2f 00 00	 mov	 DWORD PTR $T591[ebp], 12049 ; 00002f11H
  057fc	c7 85 c4 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T591[ebp+4], 0
  05806	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  0580b	c6 45 fc e4	 mov	 BYTE PTR __$EHRec$[ebp+8], 228 ; 000000e4H
  0580f	c7 85 b8 75 ff
	ff b5 04 00 00	 mov	 DWORD PTR $T590[ebp], 1205 ; 000004b5H
  05819	c7 85 bc 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T590[ebp+4], 0
  05823	68 00 00 00 00	 push	 OFFSET ??_C@_0P@POFNKNIM@ROHM?5Co?4?0?5Ltd?4@
  05828	8d 85 b8 75 ff
	ff		 lea	 eax, DWORD PTR $T590[ebp]
  0582e	50		 push	 eax
  0582f	8d 8d 70 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13632]
  05835	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0583a	c6 45 fc e5	 mov	 BYTE PTR __$EHRec$[ebp+8], 229 ; 000000e5H
  0583e	8d 85 b0 75 ff
	ff		 lea	 eax, DWORD PTR $T589[ebp]
  05844	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HKFDBEKA@Enovate?5Medical?5LLC@
  05849	50		 push	 eax
  0584a	8d 8d 90 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13664]
  05850	c7 85 b0 75 ff
	ff 14 2f 00 00	 mov	 DWORD PTR $T589[ebp], 12052 ; 00002f14H
  0585a	c7 85 b4 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T589[ebp+4], 0
  05864	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  05869	c6 45 fc e6	 mov	 BYTE PTR __$EHRec$[ebp+8], 230 ; 000000e6H
  0586d	8d 85 a8 75 ff
	ff		 lea	 eax, DWORD PTR $T588[ebp]
  05873	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LHICFEEG@Shell?5Electronic?5Limited@
  05878	50		 push	 eax
  05879	8d 8d b0 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13696]
  0587f	c7 85 a8 75 ff
	ff 19 2f 00 00	 mov	 DWORD PTR $T588[ebp], 12057 ; 00002f19H
  05889	c7 85 ac 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T588[ebp+4], 0
  05893	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  05898	c6 45 fc e7	 mov	 BYTE PTR __$EHRec$[ebp+8], 231 ; 000000e7H
  0589c	8d 85 a0 75 ff
	ff		 lea	 eax, DWORD PTR $T587[ebp]
  058a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@LIGAICNF@Shenzhen?5Zhiyou?5Precise?5Electro@
  058a7	50		 push	 eax
  058a8	8d 8d d0 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13728]
  058ae	c7 85 a0 75 ff
	ff 1a 2f 00 00	 mov	 DWORD PTR $T587[ebp], 12058 ; 00002f1aH
  058b8	c7 85 a4 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T587[ebp+4], 0
  058c2	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  058c7	c6 45 fc e8	 mov	 BYTE PTR __$EHRec$[ebp+8], 232 ; 000000e8H
  058cb	8d 85 98 75 ff
	ff		 lea	 eax, DWORD PTR $T586[ebp]
  058d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MMMOCHOF@Liyang?5Sino?5Cable?5Electronics?5C@
  058d6	50		 push	 eax
  058d7	8d 8d f0 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13760]
  058dd	c7 85 98 75 ff
	ff 1c 2f 00 00	 mov	 DWORD PTR $T586[ebp], 12060 ; 00002f1cH
  058e7	c7 85 9c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T586[ebp+4], 0
  058f1	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  058f6	c6 45 fc e9	 mov	 BYTE PTR __$EHRec$[ebp+8], 233 ; 000000e9H
  058fa	8d 85 90 75 ff
	ff		 lea	 eax, DWORD PTR $T585[ebp]
  05900	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CDKNHILD@Shenzhen?5HSY?5Electronics?5Co?4?0?5L@
  05905	50		 push	 eax
  05906	8d 8d 10 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13792]
  0590c	c7 85 90 75 ff
	ff 1e 2f 00 00	 mov	 DWORD PTR $T585[ebp], 12062 ; 00002f1eH
  05916	c7 85 94 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T585[ebp+4], 0
  05920	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  05925	c6 45 fc ea	 mov	 BYTE PTR __$EHRec$[ebp+8], 234 ; 000000eaH
  05929	8d 85 88 75 ff
	ff		 lea	 eax, DWORD PTR $T584[ebp]
  0592f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EDHAFCBB@Byrne?5Electrical?5Specialists?0?5I@
  05934	50		 push	 eax
  05935	8d 8d 30 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13824]
  0593b	c7 85 88 75 ff
	ff 22 2f 00 00	 mov	 DWORD PTR $T584[ebp], 12066 ; 00002f22H
  05945	c7 85 8c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T584[ebp+4], 0
  0594f	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  05954	c6 45 fc eb	 mov	 BYTE PTR __$EHRec$[ebp+8], 235 ; 000000ebH
  05958	8d 85 80 75 ff
	ff		 lea	 eax, DWORD PTR $T583[ebp]
  0595e	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GOCOEEKN@Shenzhen?5Taildie?5Science?5and?5Te@
  05963	50		 push	 eax
  05964	8d 8d 50 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13856]
  0596a	c7 85 80 75 ff
	ff 25 2f 00 00	 mov	 DWORD PTR $T583[ebp], 12069 ; 00002f25H
  05974	c7 85 84 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T583[ebp+4], 0
  0597e	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  05983	c6 45 fc ec	 mov	 BYTE PTR __$EHRec$[ebp+8], 236 ; 000000ecH
  05987	8d 85 78 75 ff
	ff		 lea	 eax, DWORD PTR $T582[ebp]
  0598d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IBBFBLCL@Compal?5Electronics?0?5Inc?4@
  05992	50		 push	 eax
  05993	8d 8d 70 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13888]
  05999	c7 85 78 75 ff
	ff b7 04 00 00	 mov	 DWORD PTR $T582[ebp], 1207 ; 000004b7H
  059a3	c7 85 7c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T582[ebp+4], 0
  059ad	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  059b2	c6 45 fc ed	 mov	 BYTE PTR __$EHRec$[ebp+8], 237 ; 000000edH
  059b6	c7 85 70 75 ff
	ff 27 2f 00 00	 mov	 DWORD PTR $T581[ebp], 12071 ; 00002f27H
  059c0	c7 85 74 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T581[ebp+4], 0
  059ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CPEKDNKG@Launch?5Tech?5Co?4?0?5Ltd?4@
  059cf	8d 85 70 75 ff
	ff		 lea	 eax, DWORD PTR $T581[ebp]
  059d5	50		 push	 eax
  059d6	8d 8d 90 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13920]
  059dc	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  059e1	c6 45 fc ee	 mov	 BYTE PTR __$EHRec$[ebp+8], 238 ; 000000eeH
  059e5	8d 85 68 75 ff
	ff		 lea	 eax, DWORD PTR $T580[ebp]
  059eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJLMLHNF@DAS?5Companies?0?5Inc?4@
  059f0	50		 push	 eax
  059f1	8d 8d b0 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13952]
  059f7	c7 85 68 75 ff
	ff 28 2f 00 00	 mov	 DWORD PTR $T580[ebp], 12072 ; 00002f28H
  05a01	c7 85 6c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T580[ebp+4], 0
  05a0b	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  05a10	c6 45 fc ef	 mov	 BYTE PTR __$EHRec$[ebp+8], 239 ; 000000efH
  05a14	8d 85 60 75 ff
	ff		 lea	 eax, DWORD PTR $T579[ebp]
  05a1a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LOEBGJOJ@Owltech?5Corporation@
  05a1f	50		 push	 eax
  05a20	8d 8d d0 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13984]
  05a26	c7 85 60 75 ff
	ff 2a 2f 00 00	 mov	 DWORD PTR $T579[ebp], 12074 ; 00002f2aH
  05a30	c7 85 64 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T579[ebp+4], 0
  05a3a	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  05a3f	c6 45 fc f0	 mov	 BYTE PTR __$EHRec$[ebp+8], 240 ; 000000f0H
  05a43	8d 85 58 75 ff
	ff		 lea	 eax, DWORD PTR $T578[ebp]
  05a49	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PNCBKNNA@Armoya?5Yuksek?5Teknoloji?5A?4S?4@
  05a4e	50		 push	 eax
  05a4f	8d 8d f0 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14016]
  05a55	c7 85 58 75 ff
	ff 2b 2f 00 00	 mov	 DWORD PTR $T578[ebp], 12075 ; 00002f2bH
  05a5f	c7 85 5c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T578[ebp+4], 0
  05a69	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  05a6e	c6 45 fc f1	 mov	 BYTE PTR __$EHRec$[ebp+8], 241 ; 000000f1H
  05a72	8d 85 50 75 ff
	ff		 lea	 eax, DWORD PTR $T577[ebp]
  05a78	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MIGNPKKA@Shenzhen?5Genius?5Fashion?5Technol@
  05a7d	50		 push	 eax
  05a7e	8d 8d 10 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14048]
  05a84	c7 85 50 75 ff
	ff 2e 2f 00 00	 mov	 DWORD PTR $T577[ebp], 12078 ; 00002f2eH
  05a8e	c7 85 54 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T577[ebp+4], 0
  05a98	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  05a9d	c6 45 fc f2	 mov	 BYTE PTR __$EHRec$[ebp+8], 242 ; 000000f2H
  05aa1	8d 85 48 75 ff
	ff		 lea	 eax, DWORD PTR $T576[ebp]
  05aa7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LODEJCJJ@Seiko?5Epson?5Corp?4@
  05aac	50		 push	 eax
  05aad	8d 8d 30 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14080]
  05ab3	c7 85 48 75 ff
	ff b8 04 00 00	 mov	 DWORD PTR $T576[ebp], 1208 ; 000004b8H
  05abd	c7 85 4c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T576[ebp+4], 0
  05ac7	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  05acc	c6 45 fc f3	 mov	 BYTE PTR __$EHRec$[ebp+8], 243 ; 000000f3H
  05ad0	8d 85 40 75 ff
	ff		 lea	 eax, DWORD PTR $T575[ebp]
  05ad6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DFNAEMHA@Cepa?5Taiwan?5Ltd?4@
  05adb	50		 push	 eax
  05adc	8d 8d 50 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14112]
  05ae2	c7 85 40 75 ff
	ff 30 2f 00 00	 mov	 DWORD PTR $T575[ebp], 12080 ; 00002f30H
  05aec	c7 85 44 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T575[ebp+4], 0
  05af6	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  05afb	c6 45 fc f4	 mov	 BYTE PTR __$EHRec$[ebp+8], 244 ; 000000f4H
  05aff	8d 85 38 75 ff
	ff		 lea	 eax, DWORD PTR $T574[ebp]
  05b05	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EEIAJEC@Jiangsu?5East?5Century?5Network?5In@
  05b0a	50		 push	 eax
  05b0b	8d 8d 70 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14144]
  05b11	c7 85 38 75 ff
	ff 33 2f 00 00	 mov	 DWORD PTR $T574[ebp], 12083 ; 00002f33H
  05b1b	c7 85 3c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T574[ebp+4], 0
  05b25	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  05b2a	c6 45 fc f5	 mov	 BYTE PTR __$EHRec$[ebp+8], 245 ; 000000f5H
  05b2e	8d 85 30 75 ff
	ff		 lea	 eax, DWORD PTR $T573[ebp]
  05b34	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FPLFAD@Scy?5Manufacturing@
  05b39	50		 push	 eax
  05b3a	8d 8d 90 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14176]
  05b40	c7 85 30 75 ff
	ff 37 2f 00 00	 mov	 DWORD PTR $T573[ebp], 12087 ; 00002f37H
  05b4a	c7 85 34 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T573[ebp+4], 0
  05b54	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  05b59	c6 45 fc f6	 mov	 BYTE PTR __$EHRec$[ebp+8], 246 ; 000000f6H
  05b5d	c7 85 28 75 ff
	ff 39 2f 00 00	 mov	 DWORD PTR $T572[ebp], 12089 ; 00002f39H
  05b67	c7 85 2c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T572[ebp+4], 0
  05b71	51		 push	 ecx
  05b72	8d 85 28 75 ff
	ff		 lea	 eax, DWORD PTR $T572[ebp]
  05b78	50		 push	 eax
  05b79	8d 8d b0 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14208]
  05b7f	e8 00 00 00 00	 call	 ??$?0_KAAY0DJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[57],0>
  05b84	c6 45 fc f7	 mov	 BYTE PTR __$EHRec$[ebp+8], 247 ; 000000f7H
  05b88	8d 85 20 75 ff
	ff		 lea	 eax, DWORD PTR $T571[ebp]
  05b8e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BJIIHPAJ@Shenzhen?5Junyang?5Investment?5Tec@
  05b93	50		 push	 eax
  05b94	8d 8d d0 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14240]
  05b9a	c7 85 20 75 ff
	ff 3b 2f 00 00	 mov	 DWORD PTR $T571[ebp], 12091 ; 00002f3bH
  05ba4	c7 85 24 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T571[ebp+4], 0
  05bae	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  05bb3	c6 45 fc f8	 mov	 BYTE PTR __$EHRec$[ebp+8], 248 ; 000000f8H
  05bb7	8d 85 18 75 ff
	ff		 lea	 eax, DWORD PTR $T570[ebp]
  05bbd	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OAOPPKHC@Shanghai?5Fuyulong?5Auto?5Tech?5Co?4@
  05bc2	50		 push	 eax
  05bc3	8d 8d f0 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14272]
  05bc9	c7 85 18 75 ff
	ff 3c 2f 00 00	 mov	 DWORD PTR $T570[ebp], 12092 ; 00002f3cH
  05bd3	c7 85 1c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T570[ebp+4], 0
  05bdd	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  05be2	c6 45 fc f9	 mov	 BYTE PTR __$EHRec$[ebp+8], 249 ; 000000f9H
  05be6	8d 85 10 75 ff
	ff		 lea	 eax, DWORD PTR $T569[ebp]
  05bec	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FICHCFMO@Dongguan?5Yubao?5Electronic?5Co?4?0?5@
  05bf1	50		 push	 eax
  05bf2	8d 8d 10 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14304]
  05bf8	c7 85 10 75 ff
	ff 3d 2f 00 00	 mov	 DWORD PTR $T569[ebp], 12093 ; 00002f3dH
  05c02	c7 85 14 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T569[ebp+4], 0
  05c0c	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  05c11	c6 45 fc fa	 mov	 BYTE PTR __$EHRec$[ebp+8], 250 ; 000000faH
  05c15	8d 85 08 75 ff
	ff		 lea	 eax, DWORD PTR $T568[ebp]
  05c1b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FDEGCKMA@Shanghai?5IC?5Technology?5?$CG?5Indust@
  05c20	50		 push	 eax
  05c21	8d 8d 30 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14336]
  05c27	c7 85 08 75 ff
	ff 40 2f 00 00	 mov	 DWORD PTR $T568[ebp], 12096 ; 00002f40H
  05c31	c7 85 0c 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T568[ebp+4], 0
  05c3b	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  05c40	c6 45 fc fb	 mov	 BYTE PTR __$EHRec$[ebp+8], 251 ; 000000fbH
  05c44	8d 85 00 75 ff
	ff		 lea	 eax, DWORD PTR $T567[ebp]
  05c4a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ILJOHFNG@ZPE?5Systems?0?5Inc?4@
  05c4f	50		 push	 eax
  05c50	8d 8d 50 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14368]
  05c56	c7 85 00 75 ff
	ff 47 2f 00 00	 mov	 DWORD PTR $T567[ebp], 12103 ; 00002f47H
  05c60	c7 85 04 75 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T567[ebp+4], 0
  05c6a	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  05c6f	c6 45 fc fc	 mov	 BYTE PTR __$EHRec$[ebp+8], 252 ; 000000fcH
  05c73	8d 85 f8 74 ff
	ff		 lea	 eax, DWORD PTR $T566[ebp]
  05c79	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NPEEBNIM@Shenzhen?5Aukey?5E?5Business?5Co?4?0?5@
  05c7e	50		 push	 eax
  05c7f	8d 8d 70 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14400]
  05c85	c7 85 f8 74 ff
	ff 49 2f 00 00	 mov	 DWORD PTR $T566[ebp], 12105 ; 00002f49H
  05c8f	c7 85 fc 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T566[ebp+4], 0
  05c99	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  05c9e	c6 45 fc fd	 mov	 BYTE PTR __$EHRec$[ebp+8], 253 ; 000000fdH
  05ca2	8d 85 f0 74 ff
	ff		 lea	 eax, DWORD PTR $T565[ebp]
  05ca8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JPMOFDBN@Tzumi?5Electronics?5LLC@
  05cad	50		 push	 eax
  05cae	8d 8d 90 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14432]
  05cb4	c7 85 f0 74 ff
	ff 4a 2f 00 00	 mov	 DWORD PTR $T565[ebp], 12106 ; 00002f4aH
  05cbe	c7 85 f4 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T565[ebp+4], 0
  05cc8	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  05ccd	c6 45 fc fe	 mov	 BYTE PTR __$EHRec$[ebp+8], 254 ; 000000feH
  05cd1	8d 85 e8 74 ff
	ff		 lea	 eax, DWORD PTR $T564[ebp]
  05cd7	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LOHOAODN@Shanghai?5Oceanhood?5Opto?9Electro@
  05cdc	50		 push	 eax
  05cdd	8d 8d b0 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14464]
  05ce3	c7 85 e8 74 ff
	ff 4b 2f 00 00	 mov	 DWORD PTR $T564[ebp], 12107 ; 00002f4bH
  05ced	c7 85 ec 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T564[ebp+4], 0
  05cf7	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  05cfc	c6 45 fc ff	 mov	 BYTE PTR __$EHRec$[ebp+8], 255 ; 000000ffH
  05d00	c7 85 e0 74 ff
	ff 4c 2f 00 00	 mov	 DWORD PTR $T563[ebp], 12108 ; 00002f4cH
  05d0a	c7 85 e4 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T563[ebp+4], 0
  05d14	68 00 00 00 00	 push	 OFFSET ??_C@_08LJOGNEHO@COLORFUL@
  05d19	8d 85 e0 74 ff
	ff		 lea	 eax, DWORD PTR $T563[ebp]
  05d1f	50		 push	 eax
  05d20	8d 8d d0 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14496]
  05d26	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  05d2b	c7 45 fc 00 02
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 512 ; 00000200H
  05d32	8d 85 d8 74 ff
	ff		 lea	 eax, DWORD PTR $T562[ebp]
  05d38	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IAGCDMCP@JDCS?5SVAHA?5TECHNOLOGY?5CO?4?0?5LTD@
  05d3d	50		 push	 eax
  05d3e	8d 8d f0 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14528]
  05d44	c7 85 d8 74 ff
	ff 4d 2f 00 00	 mov	 DWORD PTR $T562[ebp], 12109 ; 00002f4dH
  05d4e	c7 85 dc 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T562[ebp+4], 0
  05d58	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  05d5d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  05d61	8d 85 d0 74 ff
	ff		 lea	 eax, DWORD PTR $T561[ebp]
  05d67	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NAOBNEME@I?9O?5Data?5Device?0?5Inc?4@
  05d6c	50		 push	 eax
  05d6d	8d 8d 10 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14560]
  05d73	c7 85 d0 74 ff
	ff bb 04 00 00	 mov	 DWORD PTR $T561[ebp], 1211 ; 000004bbH
  05d7d	c7 85 d4 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T561[ebp+4], 0
  05d87	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  05d8c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  05d90	8d 85 c8 74 ff
	ff		 lea	 eax, DWORD PTR $T560[ebp]
  05d96	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HNMCMKHO@Wei?5Sheng?5Industrial?5Company@
  05d9b	50		 push	 eax
  05d9c	8d 8d 30 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14592]
  05da2	c7 85 c8 74 ff
	ff 4f 2f 00 00	 mov	 DWORD PTR $T560[ebp], 12111 ; 00002f4fH
  05dac	c7 85 cc 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T560[ebp+4], 0
  05db6	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  05dbb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  05dbf	8d 85 c0 74 ff
	ff		 lea	 eax, DWORD PTR $T559[ebp]
  05dc5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KFAIPEPN@Iconic?5Corporation@
  05dca	50		 push	 eax
  05dcb	8d 8d 50 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14624]
  05dd1	c7 85 c0 74 ff
	ff 51 2f 00 00	 mov	 DWORD PTR $T559[ebp], 12113 ; 00002f51H
  05ddb	c7 85 c4 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T559[ebp+4], 0
  05de5	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  05dea	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  05dee	8d 85 b8 74 ff
	ff		 lea	 eax, DWORD PTR $T558[ebp]
  05df4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MKLOEJGF@Electronique?5Bluewave?5Inc@
  05df9	50		 push	 eax
  05dfa	8d 8d 70 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14656]
  05e00	c7 85 b8 74 ff
	ff 54 2f 00 00	 mov	 DWORD PTR $T558[ebp], 12116 ; 00002f54H
  05e0a	c7 85 bc 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T558[ebp+4], 0
  05e14	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  05e19	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  05e1d	8d 85 b0 74 ff
	ff		 lea	 eax, DWORD PTR $T557[ebp]
  05e23	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OHAOAFFP@Dongguan?5Qishi?5Yongkang?5Hardwar@
  05e28	50		 push	 eax
  05e29	8d 8d 90 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14688]
  05e2f	c7 85 b0 74 ff
	ff 55 2f 00 00	 mov	 DWORD PTR $T557[ebp], 12117 ; 00002f55H
  05e39	c7 85 b4 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T557[ebp+4], 0
  05e43	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  05e48	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  05e4c	8d 85 a8 74 ff
	ff		 lea	 eax, DWORD PTR $T556[ebp]
  05e52	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NLNNKDAG@SuZhou?5QIWEI?5Electronic?5Co?4?0?5Lt@
  05e57	50		 push	 eax
  05e58	8d 8d b0 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14720]
  05e5e	c7 85 a8 74 ff
	ff 56 2f 00 00	 mov	 DWORD PTR $T556[ebp], 12118 ; 00002f56H
  05e68	c7 85 ac 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T556[ebp+4], 0
  05e72	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  05e77	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  05e7b	8d 85 a0 74 ff
	ff		 lea	 eax, DWORD PTR $T555[ebp]
  05e81	51		 push	 ecx
  05e82	50		 push	 eax
  05e83	8d 8d d0 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14752]
  05e89	c7 85 a0 74 ff
	ff 57 2f 00 00	 mov	 DWORD PTR $T555[ebp], 12119 ; 00002f57H
  05e93	c7 85 a4 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T555[ebp+4], 0
  05e9d	e8 00 00 00 00	 call	 ??$?0_KAAY0EN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0EN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[77],0>
  05ea2	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  05ea6	c7 85 98 74 ff
	ff 59 2f 00 00	 mov	 DWORD PTR $T554[ebp], 12121 ; 00002f59H
  05eb0	c7 85 9c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T554[ebp+4], 0
  05eba	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@CEHPCCLM@DongGuan?5City?5GuangJie?5Electron@
  05ebf	8d 85 98 74 ff
	ff		 lea	 eax, DWORD PTR $T554[ebp]
  05ec5	50		 push	 eax
  05ec6	8d 8d f0 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14784]
  05ecc	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  05ed1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  05ed5	8d 85 90 74 ff
	ff		 lea	 eax, DWORD PTR $T553[ebp]
  05edb	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LPELIOMJ@Dongguan?5Yudianming?5Communicati@
  05ee0	50		 push	 eax
  05ee1	8d 8d 10 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14816]
  05ee7	c7 85 90 74 ff
	ff 5c 2f 00 00	 mov	 DWORD PTR $T553[ebp], 12124 ; 00002f5cH
  05ef1	c7 85 94 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T553[ebp+4], 0
  05efb	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  05f00	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  05f04	8d 85 88 74 ff
	ff		 lea	 eax, DWORD PTR $T552[ebp]
  05f0a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FEBJLCGL@KAB?5Enterprise?5Co?4?0?5Ltd?4@
  05f0f	50		 push	 eax
  05f10	8d 8d 30 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14848]
  05f16	c7 85 88 74 ff
	ff 5e 2f 00 00	 mov	 DWORD PTR $T552[ebp], 12126 ; 00002f5eH
  05f20	c7 85 8c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T552[ebp+4], 0
  05f2a	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  05f2f	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  05f33	8d 85 80 74 ff
	ff		 lea	 eax, DWORD PTR $T551[ebp]
  05f39	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DFDJCINA@DONGGUAN?5NOONE?5TECHNOLOGY?5CO?4?0?5@
  05f3e	50		 push	 eax
  05f3f	8d 8d 50 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14880]
  05f45	c7 85 80 74 ff
	ff 5f 2f 00 00	 mov	 DWORD PTR $T551[ebp], 12127 ; 00002f5fH
  05f4f	c7 85 84 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T551[ebp+4], 0
  05f59	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  05f5e	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  05f62	8d 85 78 74 ff
	ff		 lea	 eax, DWORD PTR $T550[ebp]
  05f68	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FMNDDOBA@Changzhou?5Comp?5Electronic?5Co?4?0?5@
  05f6d	50		 push	 eax
  05f6e	8d 8d 70 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14912]
  05f74	c7 85 78 74 ff
	ff 60 2f 00 00	 mov	 DWORD PTR $T550[ebp], 12128 ; 00002f60H
  05f7e	c7 85 7c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T550[ebp+4], 0
  05f88	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  05f8d	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  05f91	8d 85 70 74 ff
	ff		 lea	 eax, DWORD PTR $T549[ebp]
  05f97	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BAMJPFNP@Lontium?5Semiconductor?5Corporati@
  05f9c	50		 push	 eax
  05f9d	8d 8d 90 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14944]
  05fa3	c7 85 70 74 ff
	ff 61 2f 00 00	 mov	 DWORD PTR $T549[ebp], 12129 ; 00002f61H
  05fad	c7 85 74 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T549[ebp+4], 0
  05fb7	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  05fbc	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  05fc0	8d 85 68 74 ff
	ff		 lea	 eax, DWORD PTR $T548[ebp]
  05fc6	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BOBNCMFD@Dongguan?5Zhaobang?5Electronic?5Te@
  05fcb	50		 push	 eax
  05fcc	8d 8d b0 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14976]
  05fd2	c7 85 68 74 ff
	ff 62 2f 00 00	 mov	 DWORD PTR $T548[ebp], 12130 ; 00002f62H
  05fdc	c7 85 6c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T548[ebp+4], 0
  05fe6	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  05feb	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  05fef	8d 85 60 74 ff
	ff		 lea	 eax, DWORD PTR $T547[ebp]
  05ff5	51		 push	 ecx
  05ff6	50		 push	 eax
  05ff7	8d 8d d0 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15008]
  05ffd	c7 85 60 74 ff
	ff 63 2f 00 00	 mov	 DWORD PTR $T547[ebp], 12131 ; 00002f63H
  06007	c7 85 64 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T547[ebp+4], 0
  06011	e8 00 00 00 00	 call	 ??$?0_KAAY0DL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[59],0>
  06016	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0601a	8d 85 58 74 ff
	ff		 lea	 eax, DWORD PTR $T546[ebp]
  06020	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FNOLFMIJ@Omnicharge?5Inc?4@
  06025	50		 push	 eax
  06026	8d 8d f0 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15040]
  0602c	c7 85 58 74 ff
	ff 64 2f 00 00	 mov	 DWORD PTR $T546[ebp], 12132 ; 00002f64H
  06036	c7 85 5c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T546[ebp+4], 0
  06040	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  06045	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  06049	c7 85 50 74 ff
	ff 68 2f 00 00	 mov	 DWORD PTR $T545[ebp], 12136 ; 00002f68H
  06053	c7 85 54 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T545[ebp+4], 0
  0605d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KPOOHBBE@Zhuhai?5Hoksi?5Technology?5Co?4?0?5Lt@
  06062	8d 85 50 74 ff
	ff		 lea	 eax, DWORD PTR $T545[ebp]
  06068	50		 push	 eax
  06069	8d 8d 10 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15072]
  0606f	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  06074	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  06078	8d 85 48 74 ff
	ff		 lea	 eax, DWORD PTR $T544[ebp]
  0607e	68 00 00 00 00	 push	 OFFSET ??_C@_09PFILNHJG@DAQRI?5LLC@
  06083	50		 push	 eax
  06084	8d 8d 30 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15104]
  0608a	c7 85 48 74 ff
	ff 69 2f 00 00	 mov	 DWORD PTR $T544[ebp], 12137 ; 00002f69H
  06094	c7 85 4c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T544[ebp+4], 0
  0609e	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  060a3	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  060a7	8d 85 40 74 ff
	ff		 lea	 eax, DWORD PTR $T543[ebp]
  060ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JGHHOMDJ@Zhejiang?5Uniview?5Technology?5Co?4@
  060b2	50		 push	 eax
  060b3	8d 8d 50 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15136]
  060b9	c7 85 40 74 ff
	ff 6a 2f 00 00	 mov	 DWORD PTR $T543[ebp], 12138 ; 00002f6aH
  060c3	c7 85 44 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T543[ebp+4], 0
  060cd	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  060d2	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  060d6	8d 85 38 74 ff
	ff		 lea	 eax, DWORD PTR $T542[ebp]
  060dc	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@DAPMAENB@Aute?5?$CIZhongshan?$CJ?5Electronics?5Te@
  060e1	50		 push	 eax
  060e2	8d 8d 70 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15168]
  060e8	c7 85 38 74 ff
	ff 6c 2f 00 00	 mov	 DWORD PTR $T542[ebp], 12140 ; 00002f6cH
  060f2	c7 85 3c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T542[ebp+4], 0
  060fc	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  06101	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  06105	8d 85 30 74 ff
	ff		 lea	 eax, DWORD PTR $T541[ebp]
  0610b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JBHEOGLL@SMMMPLUS?5ELECTRONIC?5TECHNOLOGY?5@
  06110	50		 push	 eax
  06111	8d 8d 90 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15200]
  06117	c7 85 30 74 ff
	ff 6e 2f 00 00	 mov	 DWORD PTR $T541[ebp], 12142 ; 00002f6eH
  06121	c7 85 34 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T541[ebp+4], 0
  0612b	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  06130	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  06134	8d 85 28 74 ff
	ff		 lea	 eax, DWORD PTR $T540[ebp]
  0613a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JMLJNGIC@Avantree?5Corporation@
  0613f	50		 push	 eax
  06140	8d 8d b0 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15232]
  06146	c7 85 28 74 ff
	ff 71 2f 00 00	 mov	 DWORD PTR $T540[ebp], 12145 ; 00002f71H
  06150	c7 85 2c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T540[ebp+4], 0
  0615a	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0615f	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  06163	8d 85 20 74 ff
	ff		 lea	 eax, DWORD PTR $T539[ebp]
  06169	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HMBFJMMK@Dong?5Guan?5Cita?5Intelligent?5Tech@
  0616e	50		 push	 eax
  0616f	8d 8d d0 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15264]
  06175	c7 85 20 74 ff
	ff 73 2f 00 00	 mov	 DWORD PTR $T539[ebp], 12147 ; 00002f73H
  0617f	c7 85 24 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T539[ebp+4], 0
  06189	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0618e	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  06192	8d 85 18 74 ff
	ff		 lea	 eax, DWORD PTR $T538[ebp]
  06198	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MEBMIPCE@Shuzhou?5Huajie?5Electronic?5Co?4?0?5@
  0619d	50		 push	 eax
  0619e	8d 8d f0 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15296]
  061a4	c7 85 18 74 ff
	ff 7b 2f 00 00	 mov	 DWORD PTR $T538[ebp], 12155 ; 00002f7bH
  061ae	c7 85 1c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T538[ebp+4], 0
  061b8	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  061bd	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  061c1	8d 85 10 74 ff
	ff		 lea	 eax, DWORD PTR $T537[ebp]
  061c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EPAOBDKH@Diebold?5Nixdorf@
  061cc	50		 push	 eax
  061cd	8d 8d 10 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15328]
  061d3	c7 85 10 74 ff
	ff 7c 2f 00 00	 mov	 DWORD PTR $T537[ebp], 12156 ; 00002f7cH
  061dd	c7 85 14 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T537[ebp+4], 0
  061e7	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  061ec	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  061f0	c7 85 08 74 ff
	ff 7e 2f 00 00	 mov	 DWORD PTR $T536[ebp], 12158 ; 00002f7eH
  061fa	c7 85 0c 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T536[ebp+4], 0
  06204	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JPMGPFFE@Leader?5Electronics?5Inc?4@
  06209	8d 85 08 74 ff
	ff		 lea	 eax, DWORD PTR $T536[ebp]
  0620f	50		 push	 eax
  06210	8d 8d 30 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15360]
  06216	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0621b	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  0621f	8d 85 00 74 ff
	ff		 lea	 eax, DWORD PTR $T535[ebp]
  06225	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DGLEFCBO@Shenzhen?5Tuoshuo?5Electronics?5Co@
  0622a	50		 push	 eax
  0622b	8d 8d 50 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15392]
  06231	c7 85 00 74 ff
	ff 7f 2f 00 00	 mov	 DWORD PTR $T535[ebp], 12159 ; 00002f7fH
  0623b	c7 85 04 74 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T535[ebp+4], 0
  06245	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0624a	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0624e	8d 85 f8 73 ff
	ff		 lea	 eax, DWORD PTR $T534[ebp]
  06254	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KAMDILMM@Kandou?5Bus?5SA@
  06259	50		 push	 eax
  0625a	8d 8d 70 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15424]
  06260	c7 85 f8 73 ff
	ff 80 2f 00 00	 mov	 DWORD PTR $T534[ebp], 12160 ; 00002f80H
  0626a	c7 85 fc 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T534[ebp+4], 0
  06274	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  06279	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0627d	8d 85 f0 73 ff
	ff		 lea	 eax, DWORD PTR $T533[ebp]
  06283	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@BOMFNKLB@Guizhou?5Huaxintong?5Semiconducto@
  06288	50		 push	 eax
  06289	8d 8d 90 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15456]
  0628f	c7 85 f0 73 ff
	ff 82 2f 00 00	 mov	 DWORD PTR $T533[ebp], 12162 ; 00002f82H
  06299	c7 85 f4 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T533[ebp+4], 0
  062a3	e8 00 00 00 00	 call	 ??$?0_KAAY0DG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[54],0>
  062a8	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  062ac	8d 85 e8 73 ff
	ff		 lea	 eax, DWORD PTR $T532[ebp]
  062b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MDKIGAFE@Shenzhen?5Reflying?5Electronic?5Co@
  062b7	50		 push	 eax
  062b8	8d 8d b0 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15488]
  062be	c7 85 e8 73 ff
	ff 83 2f 00 00	 mov	 DWORD PTR $T532[ebp], 12163 ; 00002f83H
  062c8	c7 85 ec 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T532[ebp+4], 0
  062d2	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  062d7	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  062db	8d 85 e0 73 ff
	ff		 lea	 eax, DWORD PTR $T531[ebp]
  062e1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ILNFIBEC@UWE?5?$CIWeihai?$CJ?5Technologies?5Corp?4@
  062e6	50		 push	 eax
  062e7	8d 8d d0 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15520]
  062ed	c7 85 e0 73 ff
	ff 85 2f 00 00	 mov	 DWORD PTR $T531[ebp], 12165 ; 00002f85H
  062f7	c7 85 e4 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T531[ebp+4], 0
  06301	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  06306	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  0630a	8d 85 d8 73 ff
	ff		 lea	 eax, DWORD PTR $T530[ebp]
  06310	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DBLFCBJC@Guangzhou?5Walkera?5Technology?5Co@
  06315	50		 push	 eax
  06316	8d 8d f0 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15552]
  0631c	c7 85 d8 73 ff
	ff 86 2f 00 00	 mov	 DWORD PTR $T530[ebp], 12166 ; 00002f86H
  06326	c7 85 dc 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T530[ebp+4], 0
  06330	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  06335	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  06339	8d 85 d0 73 ff
	ff		 lea	 eax, DWORD PTR $T529[ebp]
  0633f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LDLOOMIM@E?9Link?5Technology?5Co?4?0?5Ltd?4@
  06344	50		 push	 eax
  06345	8d 8d 10 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15584]
  0634b	c7 85 d0 73 ff
	ff 87 2f 00 00	 mov	 DWORD PTR $T529[ebp], 12167 ; 00002f87H
  06355	c7 85 d4 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T529[ebp+4], 0
  0635f	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  06364	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  06368	8d 85 c8 73 ff
	ff		 lea	 eax, DWORD PTR $T528[ebp]
  0636e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IHFKAHBN@Lenjoy?5Technology?5Limited@
  06373	50		 push	 eax
  06374	8d 8d 30 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15616]
  0637a	c7 85 c8 73 ff
	ff 91 2f 00 00	 mov	 DWORD PTR $T528[ebp], 12177 ; 00002f91H
  06384	c7 85 cc 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T528[ebp+4], 0
  0638e	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  06393	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  06397	c7 85 c0 73 ff
	ff 92 2f 00 00	 mov	 DWORD PTR $T527[ebp], 12178 ; 00002f92H
  063a1	c7 85 c4 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T527[ebp+4], 0
  063ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OMALANND@Idea?5Electronics?5Inc@
  063b0	8d 85 c0 73 ff
	ff		 lea	 eax, DWORD PTR $T527[ebp]
  063b6	50		 push	 eax
  063b7	8d 8d 50 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15648]
  063bd	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  063c2	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
  063c6	8d 85 b8 73 ff
	ff		 lea	 eax, DWORD PTR $T526[ebp]
  063cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FANAJKLI@Shanghai?5Yanying?5Electronic?5Tec@
  063d1	50		 push	 eax
  063d2	8d 8d 70 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15680]
  063d8	c7 85 b8 73 ff
	ff 93 2f 00 00	 mov	 DWORD PTR $T526[ebp], 12179 ; 00002f93H
  063e2	c7 85 bc 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T526[ebp+4], 0
  063ec	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  063f1	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
  063f5	8d 85 b0 73 ff
	ff		 lea	 eax, DWORD PTR $T525[ebp]
  063fb	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DLIAEDBK@Antlion?5Audio@
  06400	50		 push	 eax
  06401	8d 8d 90 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15712]
  06407	c7 85 b0 73 ff
	ff 96 2f 00 00	 mov	 DWORD PTR $T525[ebp], 12182 ; 00002f96H
  06411	c7 85 b4 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T525[ebp+4], 0
  0641b	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  06420	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  06424	8d 85 a8 73 ff
	ff		 lea	 eax, DWORD PTR $T524[ebp]
  0642a	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KEJNGCFH@VogDUO?5International?5Corporatio@
  0642f	50		 push	 eax
  06430	8d 8d b0 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15744]
  06436	c7 85 a8 73 ff
	ff 97 2f 00 00	 mov	 DWORD PTR $T524[ebp], 12183 ; 00002f97H
  06440	c7 85 ac 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T524[ebp+4], 0
  0644a	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  0644f	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  06453	8d 85 a0 73 ff
	ff		 lea	 eax, DWORD PTR $T523[ebp]
  06459	68 00 00 00 00	 push	 OFFSET ??_C@_09DNNANIEC@Qomo?0?5LLC@
  0645e	50		 push	 eax
  0645f	8d 8d d0 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15776]
  06465	c7 85 a0 73 ff
	ff 98 2f 00 00	 mov	 DWORD PTR $T523[ebp], 12184 ; 00002f98H
  0646f	c7 85 a4 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T523[ebp+4], 0
  06479	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  0647e	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  06482	8d 85 98 73 ff
	ff		 lea	 eax, DWORD PTR $T522[ebp]
  06488	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FCHHFLBP@Minwa?5Electronics?5Co?4?0?5Ltd?4@
  0648d	50		 push	 eax
  0648e	8d 8d f0 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15808]
  06494	c7 85 98 73 ff
	ff 99 2f 00 00	 mov	 DWORD PTR $T522[ebp], 12185 ; 00002f99H
  0649e	c7 85 9c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T522[ebp+4], 0
  064a8	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  064ad	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  064b1	8d 85 90 73 ff
	ff		 lea	 eax, DWORD PTR $T521[ebp]
  064b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LAFKCGAI@Fortune?5Advanced?5Technology?5Co?4@
  064bc	50		 push	 eax
  064bd	8d 8d 10 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15840]
  064c3	c7 85 90 73 ff
	ff 9e 2f 00 00	 mov	 DWORD PTR $T521[ebp], 12190 ; 00002f9eH
  064cd	c7 85 94 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T521[ebp+4], 0
  064d7	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  064dc	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  064e0	8d 85 88 73 ff
	ff		 lea	 eax, DWORD PTR $T520[ebp]
  064e6	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CCNDJAMF@Dongguan?5IRice?5Electronics?5Deve@
  064eb	50		 push	 eax
  064ec	8d 8d 30 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15872]
  064f2	c7 85 88 73 ff
	ff a1 2f 00 00	 mov	 DWORD PTR $T520[ebp], 12193 ; 00002fa1H
  064fc	c7 85 8c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T520[ebp+4], 0
  06506	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  0650b	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  0650f	8d 85 80 73 ff
	ff		 lea	 eax, DWORD PTR $T519[ebp]
  06515	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ECEIFALG@Epiq?5Solutions@
  0651a	50		 push	 eax
  0651b	8d 8d 50 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15904]
  06521	c7 85 80 73 ff
	ff a2 2f 00 00	 mov	 DWORD PTR $T519[ebp], 12194 ; 00002fa2H
  0652b	c7 85 84 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T519[ebp+4], 0
  06535	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0653a	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  0653e	c7 85 78 73 ff
	ff a5 2f 00 00	 mov	 DWORD PTR $T518[ebp], 12197 ; 00002fa5H
  06548	c7 85 7c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T518[ebp+4], 0
  06552	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OLIMILKO@Shenzhen?5Jinlai?5Cable?5Co?4?0?5Ltd?4@
  06557	8d 85 78 73 ff
	ff		 lea	 eax, DWORD PTR $T518[ebp]
  0655d	50		 push	 eax
  0655e	8d 8d 70 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15936]
  06564	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  06569	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  0656d	8d 85 70 73 ff
	ff		 lea	 eax, DWORD PTR $T517[ebp]
  06573	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JIBDMOEM@Darkglass?5Electronics@
  06578	50		 push	 eax
  06579	8d 8d 90 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15968]
  0657f	c7 85 70 73 ff
	ff a6 2f 00 00	 mov	 DWORD PTR $T517[ebp], 12198 ; 00002fa6H
  06589	c7 85 74 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T517[ebp+4], 0
  06593	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  06598	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  0659c	8d 85 68 73 ff
	ff		 lea	 eax, DWORD PTR $T516[ebp]
  065a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EAFCDFAH@Dongguan?5Huiyan?5Electronic?5Co?4?0@
  065a7	50		 push	 eax
  065a8	8d 8d b0 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16000]
  065ae	c7 85 68 73 ff
	ff a7 2f 00 00	 mov	 DWORD PTR $T516[ebp], 12199 ; 00002fa7H
  065b8	c7 85 6c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T516[ebp+4], 0
  065c2	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  065c7	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  065cb	8d 85 60 73 ff
	ff		 lea	 eax, DWORD PTR $T515[ebp]
  065d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NIADNMOF@Hon?9Kwang?5Electric?5Co?4?0?5Ltd?4@
  065d6	50		 push	 eax
  065d7	8d 8d d0 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16032]
  065dd	c7 85 60 73 ff
	ff a8 2f 00 00	 mov	 DWORD PTR $T515[ebp], 12200 ; 00002fa8H
  065e7	c7 85 64 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T515[ebp+4], 0
  065f1	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  065f6	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+8], 48 ; 00000030H
  065fa	8d 85 58 73 ff
	ff		 lea	 eax, DWORD PTR $T514[ebp]
  06600	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HOBLJFHE@Clear?5Signal?5Solutions@
  06605	50		 push	 eax
  06606	8d 8d f0 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16064]
  0660c	c7 85 58 73 ff
	ff aa 2f 00 00	 mov	 DWORD PTR $T514[ebp], 12202 ; 00002faaH
  06616	c7 85 5c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T514[ebp+4], 0
  06620	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  06625	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
  06629	8d 85 50 73 ff
	ff		 lea	 eax, DWORD PTR $T513[ebp]
  0662f	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@OOEMEGOM@Shenzhen?5Ruiba?5New?5Energy?5Techn@
  06634	50		 push	 eax
  06635	8d 8d 10 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16096]
  0663b	c7 85 50 73 ff
	ff ac 2f 00 00	 mov	 DWORD PTR $T513[ebp], 12204 ; 00002facH
  06645	c7 85 54 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T513[ebp+4], 0
  0664f	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  06654	c6 45 fc 32	 mov	 BYTE PTR __$EHRec$[ebp+8], 50 ; 00000032H
  06658	8d 85 48 73 ff
	ff		 lea	 eax, DWORD PTR $T512[ebp]
  0665e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EENGEAH@Definium?5Technologies?5Pty?5Ltd@
  06663	50		 push	 eax
  06664	8d 8d 30 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16128]
  0666a	c7 85 48 73 ff
	ff ad 2f 00 00	 mov	 DWORD PTR $T512[ebp], 12205 ; 00002fadH
  06674	c7 85 4c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T512[ebp+4], 0
  0667e	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  06683	c6 45 fc 33	 mov	 BYTE PTR __$EHRec$[ebp+8], 51 ; 00000033H
  06687	8d 85 40 73 ff
	ff		 lea	 eax, DWORD PTR $T511[ebp]
  0668d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NPBPKKOO@Totoku?5Electric?5Co?4?0?5Ltd?4@
  06692	50		 push	 eax
  06693	8d 8d 50 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16160]
  06699	c7 85 40 73 ff
	ff b1 2f 00 00	 mov	 DWORD PTR $T511[ebp], 12209 ; 00002fb1H
  066a3	c7 85 44 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T511[ebp+4], 0
  066ad	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  066b2	c6 45 fc 34	 mov	 BYTE PTR __$EHRec$[ebp+8], 52 ; 00000034H
  066b6	8d 85 38 73 ff
	ff		 lea	 eax, DWORD PTR $T510[ebp]
  066bc	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MFGIPGKK@Fujitsu?5Ltd?4@
  066c1	50		 push	 eax
  066c2	8d 8d 70 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16192]
  066c8	c7 85 38 73 ff
	ff c5 04 00 00	 mov	 DWORD PTR $T510[ebp], 1221 ; 000004c5H
  066d2	c7 85 3c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T510[ebp+4], 0
  066dc	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  066e1	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+8], 53 ; 00000035H
  066e5	c7 85 30 73 ff
	ff b3 2f 00 00	 mov	 DWORD PTR $T509[ebp], 12211 ; 00002fb3H
  066ef	c7 85 34 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T509[ebp+4], 0
  066f9	68 00 00 00 00	 push	 OFFSET ??_C@_08FKEKHKI@OLEDCOMM@
  066fe	8d 85 30 73 ff
	ff		 lea	 eax, DWORD PTR $T509[ebp]
  06704	50		 push	 eax
  06705	8d 8d 90 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16224]
  0670b	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  06710	c6 45 fc 36	 mov	 BYTE PTR __$EHRec$[ebp+8], 54 ; 00000036H
  06714	8d 85 28 73 ff
	ff		 lea	 eax, DWORD PTR $T508[ebp]
  0671a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HCIKBDMC@American?5Crystal?5Group?5Trading?5@
  0671f	50		 push	 eax
  06720	8d 8d b0 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16256]
  06726	c7 85 28 73 ff
	ff b5 2f 00 00	 mov	 DWORD PTR $T508[ebp], 12213 ; 00002fb5H
  06730	c7 85 2c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T508[ebp+4], 0
  0673a	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  0673f	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H
  06743	8d 85 20 73 ff
	ff		 lea	 eax, DWORD PTR $T507[ebp]
  06749	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CBJGHNMF@INNO?5INSTRUMENT?4?0?5INC?4@
  0674e	50		 push	 eax
  0674f	8d 8d d0 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16288]
  06755	c7 85 20 73 ff
	ff b6 2f 00 00	 mov	 DWORD PTR $T507[ebp], 12214 ; 00002fb6H
  0675f	c7 85 24 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T507[ebp+4], 0
  06769	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0676e	c6 45 fc 38	 mov	 BYTE PTR __$EHRec$[ebp+8], 56 ; 00000038H
  06772	8d 85 18 73 ff
	ff		 lea	 eax, DWORD PTR $T506[ebp]
  06778	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MCGHJNFB@64seconds?0?5Inc?4@
  0677d	50		 push	 eax
  0677e	8d 8d f0 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16320]
  06784	c7 85 18 73 ff
	ff b7 2f 00 00	 mov	 DWORD PTR $T506[ebp], 12215 ; 00002fb7H
  0678e	c7 85 1c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T506[ebp+4], 0
  06798	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0679d	c6 45 fc 39	 mov	 BYTE PTR __$EHRec$[ebp+8], 57 ; 00000039H
  067a1	8d 85 10 73 ff
	ff		 lea	 eax, DWORD PTR $T505[ebp]
  067a7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LBGHGOJD@SiOnyx?0?5LLC@
  067ac	50		 push	 eax
  067ad	8d 8d 10 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16352]
  067b3	c7 85 10 73 ff
	ff b9 2f 00 00	 mov	 DWORD PTR $T505[ebp], 12217 ; 00002fb9H
  067bd	c7 85 14 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T505[ebp+4], 0
  067c7	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  067cc	c6 45 fc 3a	 mov	 BYTE PTR __$EHRec$[ebp+8], 58 ; 0000003aH
  067d0	8d 85 08 73 ff
	ff		 lea	 eax, DWORD PTR $T504[ebp]
  067d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JHCLJEBF@Shenzhen?5Theone?5Electronic?5Co?4?0@
  067db	50		 push	 eax
  067dc	8d 8d 30 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16384]
  067e2	c7 85 08 73 ff
	ff ba 2f 00 00	 mov	 DWORD PTR $T504[ebp], 12218 ; 00002fbaH
  067ec	c7 85 0c 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T504[ebp+4], 0
  067f6	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  067fb	c6 45 fc 3b	 mov	 BYTE PTR __$EHRec$[ebp+8], 59 ; 0000003bH
  067ff	8d 85 00 73 ff
	ff		 lea	 eax, DWORD PTR $T503[ebp]
  06805	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GJMDGPHL@M?5W?5Electronics@
  0680a	50		 push	 eax
  0680b	8d 8d 50 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16416]
  06811	c7 85 00 73 ff
	ff bb 2f 00 00	 mov	 DWORD PTR $T503[ebp], 12219 ; 00002fbbH
  0681b	c7 85 04 73 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T503[ebp+4], 0
  06825	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0682a	c6 45 fc 3c	 mov	 BYTE PTR __$EHRec$[ebp+8], 60 ; 0000003cH
  0682e	8d 85 f8 72 ff
	ff		 lea	 eax, DWORD PTR $T502[ebp]
  06834	51		 push	 ecx
  06835	50		 push	 eax
  06836	8d 8d 70 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16448]
  0683c	c7 85 f8 72 ff
	ff bc 2f 00 00	 mov	 DWORD PTR $T502[ebp], 12220 ; 00002fbcH
  06846	c7 85 fc 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T502[ebp+4], 0
  06850	e8 00 00 00 00	 call	 ??$?0_KAAY04$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY04$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[5],0>
  06855	c6 45 fc 3d	 mov	 BYTE PTR __$EHRec$[ebp+8], 61 ; 0000003dH
  06859	8d 85 f0 72 ff
	ff		 lea	 eax, DWORD PTR $T501[ebp]
  0685f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JGMHECMG@YET?5Co?4?0?5Ltd?4@
  06864	50		 push	 eax
  06865	8d 8d 90 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16480]
  0686b	c7 85 f0 72 ff
	ff bd 2f 00 00	 mov	 DWORD PTR $T501[ebp], 12221 ; 00002fbdH
  06875	c7 85 f4 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T501[ebp+4], 0
  0687f	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  06884	c6 45 fc 3e	 mov	 BYTE PTR __$EHRec$[ebp+8], 62 ; 0000003eH
  06888	c7 85 e8 72 ff
	ff be 2f 00 00	 mov	 DWORD PTR $T500[ebp], 12222 ; 00002fbeH
  06892	c7 85 ec 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T500[ebp+4], 0
  0689c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NJCFMNGC@Amphenol?5LTW?5Technology?5Co?4?0?5Lt@
  068a1	8d 85 e8 72 ff
	ff		 lea	 eax, DWORD PTR $T500[ebp]
  068a7	50		 push	 eax
  068a8	8d 8d b0 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16512]
  068ae	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  068b3	c6 45 fc 3f	 mov	 BYTE PTR __$EHRec$[ebp+8], 63 ; 0000003fH
  068b7	8d 85 e0 72 ff
	ff		 lea	 eax, DWORD PTR $T499[ebp]
  068bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NMPGAGDC@Megavision?5Focus?5Sdn?5Bhd@
  068c2	50		 push	 eax
  068c3	8d 8d d0 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16544]
  068c9	c7 85 e0 72 ff
	ff bf 2f 00 00	 mov	 DWORD PTR $T499[ebp], 12223 ; 00002fbfH
  068d3	c7 85 e4 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T499[ebp+4], 0
  068dd	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  068e2	c6 45 fc 40	 mov	 BYTE PTR __$EHRec$[ebp+8], 64 ; 00000040H
  068e6	8d 85 d8 72 ff
	ff		 lea	 eax, DWORD PTR $T498[ebp]
  068ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HFIJNHGB@Product?5Works?0?5LLC@
  068f1	50		 push	 eax
  068f2	8d 8d f0 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16576]
  068f8	c7 85 d8 72 ff
	ff c1 2f 00 00	 mov	 DWORD PTR $T498[ebp], 12225 ; 00002fc1H
  06902	c7 85 dc 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T498[ebp+4], 0
  0690c	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  06911	c6 45 fc 41	 mov	 BYTE PTR __$EHRec$[ebp+8], 65 ; 00000041H
  06915	8d 85 d0 72 ff
	ff		 lea	 eax, DWORD PTR $T497[ebp]
  0691b	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@JDKLKHBA@Dongguan?5Baolaipo?5Plastic?5Elect@
  06920	50		 push	 eax
  06921	8d 8d 10 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16608]
  06927	c7 85 d0 72 ff
	ff c2 2f 00 00	 mov	 DWORD PTR $T497[ebp], 12226 ; 00002fc2H
  06931	c7 85 d4 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T497[ebp+4], 0
  0693b	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  06940	c6 45 fc 42	 mov	 BYTE PTR __$EHRec$[ebp+8], 66 ; 00000042H
  06944	8d 85 c8 72 ff
	ff		 lea	 eax, DWORD PTR $T496[ebp]
  0694a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@ODDHIGEP@Dongguan?5Arun?5Industrial?5CO?4?0?5L@
  0694f	50		 push	 eax
  06950	8d 8d 30 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16640]
  06956	c7 85 c8 72 ff
	ff c4 2f 00 00	 mov	 DWORD PTR $T496[ebp], 12228 ; 00002fc4H
  06960	c7 85 cc 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T496[ebp+4], 0
  0696a	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0696f	c6 45 fc 43	 mov	 BYTE PTR __$EHRec$[ebp+8], 67 ; 00000043H
  06973	8d 85 c0 72 ff
	ff		 lea	 eax, DWORD PTR $T495[ebp]
  06979	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NGDNBGJ@Changzhou?5Wistar?5Electronics?5Co@
  0697e	50		 push	 eax
  0697f	8d 8d 50 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16672]
  06985	c7 85 c0 72 ff
	ff c5 2f 00 00	 mov	 DWORD PTR $T495[ebp], 12229 ; 00002fc5H
  0698f	c7 85 c4 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T495[ebp+4], 0
  06999	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0699e	c6 45 fc 44	 mov	 BYTE PTR __$EHRec$[ebp+8], 68 ; 00000044H
  069a2	8d 85 b8 72 ff
	ff		 lea	 eax, DWORD PTR $T494[ebp]
  069a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BBIPNCOI@Jiangsu?5Tenwei?5Electronic?5Co?4?0?5@
  069ad	50		 push	 eax
  069ae	8d 8d 70 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16704]
  069b4	c7 85 b8 72 ff
	ff c7 2f 00 00	 mov	 DWORD PTR $T494[ebp], 12231 ; 00002fc7H
  069be	c7 85 bc 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T494[ebp+4], 0
  069c8	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  069cd	c6 45 fc 45	 mov	 BYTE PTR __$EHRec$[ebp+8], 69 ; 00000045H
  069d1	8d 85 b0 72 ff
	ff		 lea	 eax, DWORD PTR $T493[ebp]
  069d7	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CDFOIOKG@Shenzhen?5SuperElectron?5Technolo@
  069dc	50		 push	 eax
  069dd	8d 8d 90 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16736]
  069e3	c7 85 b0 72 ff
	ff c9 2f 00 00	 mov	 DWORD PTR $T493[ebp], 12233 ; 00002fc9H
  069ed	c7 85 b4 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T493[ebp+4], 0
  069f7	e8 00 00 00 00	 call	 ??$?0_KAAY0CM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[44],0>
  069fc	c6 45 fc 46	 mov	 BYTE PTR __$EHRec$[ebp+8], 70 ; 00000046H
  06a00	8d 85 a8 72 ff
	ff		 lea	 eax, DWORD PTR $T492[ebp]
  06a06	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CLFNAGOF@Shenzhen?5Shenghongwei?5Precision@
  06a0b	50		 push	 eax
  06a0c	8d 8d b0 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16768]
  06a12	c7 85 a8 72 ff
	ff cb 2f 00 00	 mov	 DWORD PTR $T492[ebp], 12235 ; 00002fcbH
  06a1c	c7 85 ac 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T492[ebp+4], 0
  06a26	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  06a2b	c6 45 fc 47	 mov	 BYTE PTR __$EHRec$[ebp+8], 71 ; 00000047H
  06a2f	c7 85 a0 72 ff
	ff cd 2f 00 00	 mov	 DWORD PTR $T491[ebp], 12237 ; 00002fcdH
  06a39	c7 85 a4 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T491[ebp+4], 0
  06a43	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BLENMKEA@Matrix?5Electronics?5Co?4?0?5Ltd@
  06a48	8d 85 a0 72 ff
	ff		 lea	 eax, DWORD PTR $T491[ebp]
  06a4e	50		 push	 eax
  06a4f	8d 8d d0 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16800]
  06a55	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  06a5a	c6 45 fc 48	 mov	 BYTE PTR __$EHRec$[ebp+8], 72 ; 00000048H
  06a5e	8d 85 98 72 ff
	ff		 lea	 eax, DWORD PTR $T490[ebp]
  06a64	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LOPNFLME@Keyssa?5Systems?0?5Inc?4@
  06a69	50		 push	 eax
  06a6a	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16832]
  06a70	c7 85 98 72 ff
	ff ce 2f 00 00	 mov	 DWORD PTR $T490[ebp], 12238 ; 00002fceH
  06a7a	c7 85 9c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T490[ebp+4], 0
  06a84	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  06a89	c6 45 fc 49	 mov	 BYTE PTR __$EHRec$[ebp+8], 73 ; 00000049H
  06a8d	8d 85 90 72 ff
	ff		 lea	 eax, DWORD PTR $T489[ebp]
  06a93	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MCFLJCMH@Shenzhen?5Baisitai?5Computer?5Acce@
  06a98	50		 push	 eax
  06a99	8d 8d 10 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16864]
  06a9f	c7 85 90 72 ff
	ff cf 2f 00 00	 mov	 DWORD PTR $T489[ebp], 12239 ; 00002fcfH
  06aa9	c7 85 94 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T489[ebp+4], 0
  06ab3	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  06ab8	c6 45 fc 4a	 mov	 BYTE PTR __$EHRec$[ebp+8], 74 ; 0000004aH
  06abc	8d 85 88 72 ff
	ff		 lea	 eax, DWORD PTR $T488[ebp]
  06ac2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OGPFJANH@Tianjin?5C?9Core?5Technology?5Co?4?0?5@
  06ac7	50		 push	 eax
  06ac8	8d 8d 30 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16896]
  06ace	c7 85 88 72 ff
	ff d0 2f 00 00	 mov	 DWORD PTR $T488[ebp], 12240 ; 00002fd0H
  06ad8	c7 85 8c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T488[ebp+4], 0
  06ae2	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  06ae7	c6 45 fc 4b	 mov	 BYTE PTR __$EHRec$[ebp+8], 75 ; 0000004bH
  06aeb	8d 85 80 72 ff
	ff		 lea	 eax, DWORD PTR $T487[ebp]
  06af1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FCANBOOC@Digital?5Depth?0?5Inc@
  06af6	50		 push	 eax
  06af7	8d 8d 50 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16928]
  06afd	c7 85 80 72 ff
	ff d1 2f 00 00	 mov	 DWORD PTR $T487[ebp], 12241 ; 00002fd1H
  06b07	c7 85 84 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T487[ebp+4], 0
  06b11	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  06b16	c6 45 fc 4c	 mov	 BYTE PTR __$EHRec$[ebp+8], 76 ; 0000004cH
  06b1a	8d 85 78 72 ff
	ff		 lea	 eax, DWORD PTR $T486[ebp]
  06b20	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NFFJHMKI@Shenzhen?5Shadow?5Crown?5Technolog@
  06b25	50		 push	 eax
  06b26	8d 8d 70 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16960]
  06b2c	c7 85 78 72 ff
	ff d3 2f 00 00	 mov	 DWORD PTR $T486[ebp], 12243 ; 00002fd3H
  06b36	c7 85 7c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T486[ebp+4], 0
  06b40	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  06b45	c6 45 fc 4d	 mov	 BYTE PTR __$EHRec$[ebp+8], 77 ; 0000004dH
  06b49	8d 85 70 72 ff
	ff		 lea	 eax, DWORD PTR $T485[ebp]
  06b4f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ODDNDLHD@inMusic?5Brands?0?5Inc?4@
  06b54	50		 push	 eax
  06b55	8d 8d 90 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16992]
  06b5b	c7 85 70 72 ff
	ff d5 2f 00 00	 mov	 DWORD PTR $T485[ebp], 12245 ; 00002fd5H
  06b65	c7 85 74 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T485[ebp+4], 0
  06b6f	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  06b74	c6 45 fc 4e	 mov	 BYTE PTR __$EHRec$[ebp+8], 78 ; 0000004eH
  06b78	8d 85 68 72 ff
	ff		 lea	 eax, DWORD PTR $T484[ebp]
  06b7e	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LMIKNNGG@Ningbo?5Mainning?5Electronics?5Co?4@
  06b83	50		 push	 eax
  06b84	8d 8d b0 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17024]
  06b8a	c7 85 68 72 ff
	ff d8 2f 00 00	 mov	 DWORD PTR $T484[ebp], 12248 ; 00002fd8H
  06b94	c7 85 6c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T484[ebp+4], 0
  06b9e	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  06ba3	c6 45 fc 4f	 mov	 BYTE PTR __$EHRec$[ebp+8], 79 ; 0000004fH
  06ba7	8d 85 60 72 ff
	ff		 lea	 eax, DWORD PTR $T483[ebp]
  06bad	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JEANHBGL@APE?5Technology?5Ltd?4@
  06bb2	50		 push	 eax
  06bb3	8d 8d d0 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17056]
  06bb9	c7 85 60 72 ff
	ff d9 2f 00 00	 mov	 DWORD PTR $T483[ebp], 12249 ; 00002fd9H
  06bc3	c7 85 64 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T483[ebp+4], 0
  06bcd	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  06bd2	c6 45 fc 50	 mov	 BYTE PTR __$EHRec$[ebp+8], 80 ; 00000050H
  06bd6	c7 85 58 72 ff
	ff da 2f 00 00	 mov	 DWORD PTR $T482[ebp], 12250 ; 00002fdaH
  06be0	c7 85 5c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T482[ebp+4], 0
  06bea	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MJFIBMLG@Kaicap?5Investments?5Ltd@
  06bef	8d 85 58 72 ff
	ff		 lea	 eax, DWORD PTR $T482[ebp]
  06bf5	50		 push	 eax
  06bf6	8d 8d f0 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17088]
  06bfc	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  06c01	c6 45 fc 51	 mov	 BYTE PTR __$EHRec$[ebp+8], 81 ; 00000051H
  06c05	8d 85 50 72 ff
	ff		 lea	 eax, DWORD PTR $T481[ebp]
  06c0b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CKHLLPG@Fine?5Triumph?5Technology?5Corp?4?0?5@
  06c10	50		 push	 eax
  06c11	8d 8d 10 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17120]
  06c17	c7 85 50 72 ff
	ff dc 2f 00 00	 mov	 DWORD PTR $T481[ebp], 12252 ; 00002fdcH
  06c21	c7 85 54 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T481[ebp+4], 0
  06c2b	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  06c30	c6 45 fc 52	 mov	 BYTE PTR __$EHRec$[ebp+8], 82 ; 00000052H
  06c34	8d 85 48 72 ff
	ff		 lea	 eax, DWORD PTR $T480[ebp]
  06c3a	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NJKAENN@Shen?5Zhen?5Shi?5Jue?5Bao?5Dong?5Li?5K@
  06c3f	50		 push	 eax
  06c40	8d 8d 30 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17152]
  06c46	c7 85 48 72 ff
	ff df 2f 00 00	 mov	 DWORD PTR $T480[ebp], 12255 ; 00002fdfH
  06c50	c7 85 4c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T480[ebp+4], 0
  06c5a	e8 00 00 00 00	 call	 ??$?0_KAAY0DF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[53],0>
  06c5f	c6 45 fc 53	 mov	 BYTE PTR __$EHRec$[ebp+8], 83 ; 00000053H
  06c63	8d 85 40 72 ff
	ff		 lea	 eax, DWORD PTR $T479[ebp]
  06c69	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NGOIGNGL@Timecode?5Systems?5Limited@
  06c6e	50		 push	 eax
  06c6f	8d 8d 50 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17184]
  06c75	c7 85 40 72 ff
	ff e5 2f 00 00	 mov	 DWORD PTR $T479[ebp], 12261 ; 00002fe5H
  06c7f	c7 85 44 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T479[ebp+4], 0
  06c89	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  06c8e	c6 45 fc 54	 mov	 BYTE PTR __$EHRec$[ebp+8], 84 ; 00000054H
  06c92	8d 85 38 72 ff
	ff		 lea	 eax, DWORD PTR $T478[ebp]
  06c98	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EOEFMDBA@Zhuhai?5Ismartware?5Technology?5Co@
  06c9d	50		 push	 eax
  06c9e	8d 8d 70 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17216]
  06ca4	c7 85 38 72 ff
	ff e6 2f 00 00	 mov	 DWORD PTR $T478[ebp], 12262 ; 00002fe6H
  06cae	c7 85 3c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T478[ebp+4], 0
  06cb8	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  06cbd	c6 45 fc 55	 mov	 BYTE PTR __$EHRec$[ebp+8], 85 ; 00000055H
  06cc1	8d 85 30 72 ff
	ff		 lea	 eax, DWORD PTR $T477[ebp]
  06cc7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HCMALGME@O?9JIN?5Corporation@
  06ccc	50		 push	 eax
  06ccd	8d 8d 90 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17248]
  06cd3	c7 85 30 72 ff
	ff e8 2f 00 00	 mov	 DWORD PTR $T477[ebp], 12264 ; 00002fe8H
  06cdd	c7 85 34 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T477[ebp+4], 0
  06ce7	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  06cec	c6 45 fc 56	 mov	 BYTE PTR __$EHRec$[ebp+8], 86 ; 00000056H
  06cf0	8d 85 28 72 ff
	ff		 lea	 eax, DWORD PTR $T476[ebp]
  06cf6	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EIHEBMAO@Shenzhen?5Xinshenghua?5Electronic@
  06cfb	50		 push	 eax
  06cfc	8d 8d b0 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17280]
  06d02	c7 85 28 72 ff
	ff ea 2f 00 00	 mov	 DWORD PTR $T476[ebp], 12266 ; 00002feaH
  06d0c	c7 85 2c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T476[ebp+4], 0
  06d16	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  06d1b	c6 45 fc 57	 mov	 BYTE PTR __$EHRec$[ebp+8], 87 ; 00000057H
  06d1f	8d 85 20 72 ff
	ff		 lea	 eax, DWORD PTR $T475[ebp]
  06d25	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FMDBGPJJ@Appcessori?5Corporation@
  06d2a	50		 push	 eax
  06d2b	8d 8d d0 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17312]
  06d31	c7 85 20 72 ff
	ff ec 2f 00 00	 mov	 DWORD PTR $T475[ebp], 12268 ; 00002fecH
  06d3b	c7 85 24 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T475[ebp+4], 0
  06d45	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  06d4a	c6 45 fc 58	 mov	 BYTE PTR __$EHRec$[ebp+8], 88 ; 00000058H
  06d4e	8d 85 18 72 ff
	ff		 lea	 eax, DWORD PTR $T474[ebp]
  06d54	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PBKCCACE@Herbert?5Retail?5Ltd@
  06d59	50		 push	 eax
  06d5a	8d 8d f0 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17344]
  06d60	c7 85 18 72 ff
	ff ed 2f 00 00	 mov	 DWORD PTR $T474[ebp], 12269 ; 00002fedH
  06d6a	c7 85 1c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T474[ebp+4], 0
  06d74	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  06d79	c6 45 fc 59	 mov	 BYTE PTR __$EHRec$[ebp+8], 89 ; 00000059H
  06d7d	c7 85 10 72 ff
	ff cb 04 00 00	 mov	 DWORD PTR $T473[ebp], 1227 ; 000004cbH
  06d87	c7 85 14 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T473[ebp+4], 0
  06d91	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DGJHAIHG@FUJIFILM?5Corporation@
  06d96	8d 85 10 72 ff
	ff		 lea	 eax, DWORD PTR $T473[ebp]
  06d9c	50		 push	 eax
  06d9d	8d 8d 10 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17376]
  06da3	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  06da8	c6 45 fc 5a	 mov	 BYTE PTR __$EHRec$[ebp+8], 90 ; 0000005aH
  06dac	8d 85 08 72 ff
	ff		 lea	 eax, DWORD PTR $T472[ebp]
  06db2	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NJLODJBB@ShenZhen?5KingQuality?5Technology@
  06db7	50		 push	 eax
  06db8	8d 8d 30 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17408]
  06dbe	c7 85 08 72 ff
	ff ef 2f 00 00	 mov	 DWORD PTR $T472[ebp], 12271 ; 00002fefH
  06dc8	c7 85 0c 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T472[ebp+4], 0
  06dd2	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  06dd7	c6 45 fc 5b	 mov	 BYTE PTR __$EHRec$[ebp+8], 91 ; 0000005bH
  06ddb	8d 85 00 72 ff
	ff		 lea	 eax, DWORD PTR $T471[ebp]
  06de1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PCNDCDCM@Red?5Technologies?0?5LLC@
  06de6	50		 push	 eax
  06de7	8d 8d 50 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17440]
  06ded	c7 85 00 72 ff
	ff f0 2f 00 00	 mov	 DWORD PTR $T471[ebp], 12272 ; 00002ff0H
  06df7	c7 85 04 72 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T471[ebp+4], 0
  06e01	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  06e06	c6 45 fc 5c	 mov	 BYTE PTR __$EHRec$[ebp+8], 92 ; 0000005cH
  06e0a	8d 85 f8 71 ff
	ff		 lea	 eax, DWORD PTR $T470[ebp]
  06e10	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PMMOMPDO@Sentio?0?5LLC@
  06e15	50		 push	 eax
  06e16	8d 8d 70 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17472]
  06e1c	c7 85 f8 71 ff
	ff f2 2f 00 00	 mov	 DWORD PTR $T470[ebp], 12274 ; 00002ff2H
  06e26	c7 85 fc 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T470[ebp+4], 0
  06e30	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  06e35	c6 45 fc 5d	 mov	 BYTE PTR __$EHRec$[ebp+8], 93 ; 0000005dH
  06e39	8d 85 f0 71 ff
	ff		 lea	 eax, DWORD PTR $T469[ebp]
  06e3f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@INMPPLPO@Tongling?5Tongfeng?5Precision?5Tec@
  06e44	50		 push	 eax
  06e45	8d 8d 90 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17504]
  06e4b	c7 85 f0 71 ff
	ff f3 2f 00 00	 mov	 DWORD PTR $T469[ebp], 12275 ; 00002ff3H
  06e55	c7 85 f4 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T469[ebp+4], 0
  06e5f	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  06e64	c6 45 fc 5e	 mov	 BYTE PTR __$EHRec$[ebp+8], 94 ; 0000005eH
  06e68	8d 85 e8 71 ff
	ff		 lea	 eax, DWORD PTR $T468[ebp]
  06e6e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LGLEKFBG@Keytech?5Intelligent?5Technologie@
  06e73	50		 push	 eax
  06e74	8d 8d b0 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17536]
  06e7a	c7 85 e8 71 ff
	ff f7 2f 00 00	 mov	 DWORD PTR $T468[ebp], 12279 ; 00002ff7H
  06e84	c7 85 ec 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T468[ebp+4], 0
  06e8e	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  06e93	c6 45 fc 5f	 mov	 BYTE PTR __$EHRec$[ebp+8], 95 ; 0000005fH
  06e97	8d 85 e0 71 ff
	ff		 lea	 eax, DWORD PTR $T467[ebp]
  06e9d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IJPAKDBN@Hui?5Zhou?5Gaoshengda?5Technology?5@
  06ea2	50		 push	 eax
  06ea3	8d 8d d0 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17568]
  06ea9	c7 85 e0 71 ff
	ff f8 2f 00 00	 mov	 DWORD PTR $T467[ebp], 12280 ; 00002ff8H
  06eb3	c7 85 e4 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T467[ebp+4], 0
  06ebd	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  06ec2	c6 45 fc 60	 mov	 BYTE PTR __$EHRec$[ebp+8], 96 ; 00000060H
  06ec6	8d 85 d8 71 ff
	ff		 lea	 eax, DWORD PTR $T466[ebp]
  06ecc	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@INFCIOEC@Shenzhen?5Tommox?5Technology?5Co?4?0@
  06ed1	50		 push	 eax
  06ed2	8d 8d f0 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17600]
  06ed8	c7 85 d8 71 ff
	ff f9 2f 00 00	 mov	 DWORD PTR $T466[ebp], 12281 ; 00002ff9H
  06ee2	c7 85 dc 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T466[ebp+4], 0
  06eec	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  06ef1	c6 45 fc 61	 mov	 BYTE PTR __$EHRec$[ebp+8], 97 ; 00000061H
  06ef5	8d 85 d0 71 ff
	ff		 lea	 eax, DWORD PTR $T465[ebp]
  06efb	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PPKFHFAK@Guangzhou?5Haokai?5Electron?5Compa@
  06f00	50		 push	 eax
  06f01	8d 8d 10 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17632]
  06f07	c7 85 d0 71 ff
	ff fa 2f 00 00	 mov	 DWORD PTR $T465[ebp], 12282 ; 00002ffaH
  06f11	c7 85 d4 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T465[ebp+4], 0
  06f1b	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  06f20	c6 45 fc 62	 mov	 BYTE PTR __$EHRec$[ebp+8], 98 ; 00000062H
  06f24	c7 85 c8 71 ff
	ff fb 2f 00 00	 mov	 DWORD PTR $T464[ebp], 12283 ; 00002ffbH
  06f2e	c7 85 cc 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T464[ebp+4], 0
  06f38	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@POJBCLBE@LINKUP?5Technology?5Inc?4@
  06f3d	8d 85 c8 71 ff
	ff		 lea	 eax, DWORD PTR $T464[ebp]
  06f43	50		 push	 eax
  06f44	8d 8d 30 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17664]
  06f4a	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  06f4f	c6 45 fc 63	 mov	 BYTE PTR __$EHRec$[ebp+8], 99 ; 00000063H
  06f53	8d 85 c0 71 ff
	ff		 lea	 eax, DWORD PTR $T463[ebp]
  06f59	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LJHNHEBG@Shenzhen?5Wisepower?5Innovation?5T@
  06f5e	50		 push	 eax
  06f5f	8d 8d 50 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17696]
  06f65	c7 85 c0 71 ff
	ff fc 2f 00 00	 mov	 DWORD PTR $T463[ebp], 12284 ; 00002ffcH
  06f6f	c7 85 c4 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T463[ebp+4], 0
  06f79	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  06f7e	c6 45 fc 64	 mov	 BYTE PTR __$EHRec$[ebp+8], 100 ; 00000064H
  06f82	8d 85 b8 71 ff
	ff		 lea	 eax, DWORD PTR $T462[ebp]
  06f88	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MDHNPLD@Racal?5Acoustics?5Ltd@
  06f8d	50		 push	 eax
  06f8e	8d 8d 70 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17728]
  06f94	c7 85 b8 71 ff
	ff fe 2f 00 00	 mov	 DWORD PTR $T462[ebp], 12286 ; 00002ffeH
  06f9e	c7 85 bc 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T462[ebp+4], 0
  06fa8	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  06fad	c6 45 fc 65	 mov	 BYTE PTR __$EHRec$[ebp+8], 101 ; 00000065H
  06fb1	8d 85 b0 71 ff
	ff		 lea	 eax, DWORD PTR $T461[ebp]
  06fb7	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BBABEHCA@Navajo?5Incorporated@
  06fbc	50		 push	 eax
  06fbd	8d 8d 90 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17760]
  06fc3	c7 85 b0 71 ff
	ff 01 30 00 00	 mov	 DWORD PTR $T461[ebp], 12289 ; 00003001H
  06fcd	c7 85 b4 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T461[ebp+4], 0
  06fd7	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  06fdc	c6 45 fc 66	 mov	 BYTE PTR __$EHRec$[ebp+8], 102 ; 00000066H
  06fe0	8d 85 a8 71 ff
	ff		 lea	 eax, DWORD PTR $T460[ebp]
  06fe6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JOBHJAGE@Fluid?5Audio@
  06feb	50		 push	 eax
  06fec	8d 8d b0 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17792]
  06ff2	c7 85 a8 71 ff
	ff 02 30 00 00	 mov	 DWORD PTR $T460[ebp], 12290 ; 00003002H
  06ffc	c7 85 ac 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T460[ebp+4], 0
  07006	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  0700b	c6 45 fc 67	 mov	 BYTE PTR __$EHRec$[ebp+8], 103 ; 00000067H
  0700f	8d 85 a0 71 ff
	ff		 lea	 eax, DWORD PTR $T459[ebp]
  07015	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IOCEIPJL@Dongguan?5Sheng?5Kun?5Electronics?5@
  0701a	50		 push	 eax
  0701b	8d 8d d0 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17824]
  07021	c7 85 a0 71 ff
	ff 05 30 00 00	 mov	 DWORD PTR $T459[ebp], 12293 ; 00003005H
  0702b	c7 85 a4 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T459[ebp+4], 0
  07035	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0703a	c6 45 fc 68	 mov	 BYTE PTR __$EHRec$[ebp+8], 104 ; 00000068H
  0703e	8d 85 98 71 ff
	ff		 lea	 eax, DWORD PTR $T458[ebp]
  07044	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MCEHNAJO@Japan?5Display?5Inc?4@
  07049	50		 push	 eax
  0704a	8d 8d f0 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17856]
  07050	c7 85 98 71 ff
	ff 08 30 00 00	 mov	 DWORD PTR $T458[ebp], 12296 ; 00003008H
  0705a	c7 85 9c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T458[ebp+4], 0
  07064	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  07069	c6 45 fc 69	 mov	 BYTE PTR __$EHRec$[ebp+8], 105 ; 00000069H
  0706d	8d 85 90 71 ff
	ff		 lea	 eax, DWORD PTR $T457[ebp]
  07073	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OFCDOFJC@Ningbo?5Litesun?5Electronics?5Co?4?0@
  07078	50		 push	 eax
  07079	8d 8d 10 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17888]
  0707f	c7 85 90 71 ff
	ff 09 30 00 00	 mov	 DWORD PTR $T457[ebp], 12297 ; 00003009H
  07089	c7 85 94 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T457[ebp+4], 0
  07093	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  07098	c6 45 fc 6a	 mov	 BYTE PTR __$EHRec$[ebp+8], 106 ; 0000006aH
  0709c	8d 85 88 71 ff
	ff		 lea	 eax, DWORD PTR $T456[ebp]
  070a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EPKHEEBM@Agile?5Innovative?5Ltd@
  070a7	50		 push	 eax
  070a8	8d 8d 30 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17920]
  070ae	c7 85 88 71 ff
	ff 0b 30 00 00	 mov	 DWORD PTR $T456[ebp], 12299 ; 0000300bH
  070b8	c7 85 8c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T456[ebp+4], 0
  070c2	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  070c7	c6 45 fc 6b	 mov	 BYTE PTR __$EHRec$[ebp+8], 107 ; 0000006bH
  070cb	c7 85 80 71 ff
	ff 0f 30 00 00	 mov	 DWORD PTR $T455[ebp], 12303 ; 0000300fH
  070d5	c7 85 84 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T455[ebp+4], 0
  070df	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ENEFJJA@NextVPU?5?$CIShanghai?$CJ?5Co?4?0?5Ltd?4@
  070e4	8d 85 80 71 ff
	ff		 lea	 eax, DWORD PTR $T455[ebp]
  070ea	50		 push	 eax
  070eb	8d 8d 50 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17952]
  070f1	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  070f6	c6 45 fc 6c	 mov	 BYTE PTR __$EHRec$[ebp+8], 108 ; 0000006cH
  070fa	8d 85 78 71 ff
	ff		 lea	 eax, DWORD PTR $T454[ebp]
  07100	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MNJGIPGJ@Polaris?5Industries@
  07105	50		 push	 eax
  07106	8d 8d 70 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17984]
  0710c	c7 85 78 71 ff
	ff 10 30 00 00	 mov	 DWORD PTR $T454[ebp], 12304 ; 00003010H
  07116	c7 85 7c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T454[ebp+4], 0
  07120	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  07125	c6 45 fc 6d	 mov	 BYTE PTR __$EHRec$[ebp+8], 109 ; 0000006dH
  07129	8d 85 70 71 ff
	ff		 lea	 eax, DWORD PTR $T453[ebp]
  0712f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GFABNMD@Dongguan?5City?5Xuming?5Electronic@
  07134	50		 push	 eax
  07135	8d 8d 90 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18016]
  0713b	c7 85 70 71 ff
	ff 11 30 00 00	 mov	 DWORD PTR $T453[ebp], 12305 ; 00003011H
  07145	c7 85 74 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T453[ebp+4], 0
  0714f	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  07154	c6 45 fc 6e	 mov	 BYTE PTR __$EHRec$[ebp+8], 110 ; 0000006eH
  07158	8d 85 68 71 ff
	ff		 lea	 eax, DWORD PTR $T452[ebp]
  0715e	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EGHFOJKH@Hostop?5Intelligent?5Technology?5?$CI@
  07163	50		 push	 eax
  07164	8d 8d b0 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18048]
  0716a	c7 85 68 71 ff
	ff 13 30 00 00	 mov	 DWORD PTR $T452[ebp], 12307 ; 00003013H
  07174	c7 85 6c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T452[ebp+4], 0
  0717e	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  07183	c6 45 fc 6f	 mov	 BYTE PTR __$EHRec$[ebp+8], 111 ; 0000006fH
  07187	8d 85 60 71 ff
	ff		 lea	 eax, DWORD PTR $T451[ebp]
  0718d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GLLPJAAH@Microchip?5Technology?5Inc?4@
  07192	50		 push	 eax
  07193	8d 8d d0 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18080]
  07199	c7 85 60 71 ff
	ff d8 04 00 00	 mov	 DWORD PTR $T451[ebp], 1240 ; 000004d8H
  071a3	c7 85 64 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T451[ebp+4], 0
  071ad	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  071b2	c6 45 fc 70	 mov	 BYTE PTR __$EHRec$[ebp+8], 112 ; 00000070H
  071b6	8d 85 58 71 ff
	ff		 lea	 eax, DWORD PTR $T450[ebp]
  071bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BJMPMCDF@Holtek?5Semiconductor?0?5Inc?4@
  071c1	50		 push	 eax
  071c2	8d 8d f0 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18112]
  071c8	c7 85 58 71 ff
	ff d9 04 00 00	 mov	 DWORD PTR $T450[ebp], 1241 ; 000004d9H
  071d2	c7 85 5c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T450[ebp+4], 0
  071dc	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  071e1	c6 45 fc 71	 mov	 BYTE PTR __$EHRec$[ebp+8], 113 ; 00000071H
  071e5	8d 85 50 71 ff
	ff		 lea	 eax, DWORD PTR $T449[ebp]
  071eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HPBJICLA@Panasonic?5Corporation@
  071f0	50		 push	 eax
  071f1	8d 8d 10 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18144]
  071f7	c7 85 50 71 ff
	ff da 04 00 00	 mov	 DWORD PTR $T449[ebp], 1242 ; 000004daH
  07201	c7 85 54 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T449[ebp+4], 0
  0720b	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  07210	c6 45 fc 72	 mov	 BYTE PTR __$EHRec$[ebp+8], 114 ; 00000072H
  07214	8d 85 48 71 ff
	ff		 lea	 eax, DWORD PTR $T448[ebp]
  0721a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NGIIFMHF@Sharp?5Corporation@
  0721f	50		 push	 eax
  07220	8d 8d 30 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18176]
  07226	c7 85 48 71 ff
	ff dd 04 00 00	 mov	 DWORD PTR $T448[ebp], 1245 ; 000004ddH
  07230	c7 85 4c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T448[ebp+4], 0
  0723a	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0723f	c6 45 fc 73	 mov	 BYTE PTR __$EHRec$[ebp+8], 115 ; 00000073H
  07243	8d 85 40 71 ff
	ff		 lea	 eax, DWORD PTR $T447[ebp]
  07249	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BINCICOO@Identiv?0?5Inc?4@
  0724e	50		 push	 eax
  0724f	8d 8d 50 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18208]
  07255	c7 85 40 71 ff
	ff e6 04 00 00	 mov	 DWORD PTR $T447[ebp], 1254 ; 000004e6H
  0725f	c7 85 44 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T447[ebp+4], 0
  07269	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0726e	c6 45 fc 74	 mov	 BYTE PTR __$EHRec$[ebp+8], 116 ; 00000074H
  07272	c7 85 38 71 ff
	ff e8 04 00 00	 mov	 DWORD PTR $T446[ebp], 1256 ; 000004e8H
  0727c	c7 85 3c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T446[ebp+4], 0
  07286	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CGAOADOO@Samsung?5Electronics?5Co?4?0?5Ltd?4@
  0728b	8d 85 38 71 ff
	ff		 lea	 eax, DWORD PTR $T446[ebp]
  07291	50		 push	 eax
  07292	8d 8d 70 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18240]
  07298	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0729d	c6 45 fc 75	 mov	 BYTE PTR __$EHRec$[ebp+8], 117 ; 00000075H
  072a1	8d 85 30 71 ff
	ff		 lea	 eax, DWORD PTR $T445[ebp]
  072a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EFCPDDGG@Tokyo?5Electron?5Device?5Limited@
  072ac	50		 push	 eax
  072ad	8d 8d 90 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18272]
  072b3	c7 85 30 71 ff
	ff ec 04 00 00	 mov	 DWORD PTR $T445[ebp], 1260 ; 000004ecH
  072bd	c7 85 34 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T445[ebp+4], 0
  072c7	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  072cc	c6 45 fc 76	 mov	 BYTE PTR __$EHRec$[ebp+8], 118 ; 00000076H
  072d0	8d 85 28 71 ff
	ff		 lea	 eax, DWORD PTR $T444[ebp]
  072d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DEPAFADD@Chicony?5Electronics?5Co?4?0?5Ltd?4@
  072db	50		 push	 eax
  072dc	8d 8d b0 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18304]
  072e2	c7 85 28 71 ff
	ff f2 04 00 00	 mov	 DWORD PTR $T444[ebp], 1266 ; 000004f2H
  072ec	c7 85 2c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T444[ebp+4], 0
  072f6	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  072fb	c6 45 fc 77	 mov	 BYTE PTR __$EHRec$[ebp+8], 119 ; 00000077H
  072ff	8d 85 20 71 ff
	ff		 lea	 eax, DWORD PTR $T443[ebp]
  07305	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JIJDPPMO@Newnex?5Technology?5Corp?4@
  0730a	50		 push	 eax
  0730b	8d 8d d0 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18336]
  07311	c7 85 20 71 ff
	ff f7 04 00 00	 mov	 DWORD PTR $T443[ebp], 1271 ; 000004f7H
  0731b	c7 85 24 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T443[ebp+4], 0
  07325	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0732a	c6 45 fc 78	 mov	 BYTE PTR __$EHRec$[ebp+8], 120 ; 00000078H
  0732e	8d 85 18 71 ff
	ff		 lea	 eax, DWORD PTR $T442[ebp]
  07334	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LIIOOGBH@Brother?5Industries?0?5Ltd?4@
  07339	50		 push	 eax
  0733a	8d 8d f0 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18368]
  07340	c7 85 18 71 ff
	ff f9 04 00 00	 mov	 DWORD PTR $T442[ebp], 1273 ; 000004f9H
  0734a	c7 85 1c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T442[ebp+4], 0
  07354	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  07359	c6 45 fc 79	 mov	 BYTE PTR __$EHRec$[ebp+8], 121 ; 00000079H
  0735d	8d 85 10 71 ff
	ff		 lea	 eax, DWORD PTR $T441[ebp]
  07363	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EENPEENP@SUNPLUS?5TECHNOLOGY?5CO?4?0?5LTD?4@
  07368	50		 push	 eax
  07369	8d 8d 10 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18400]
  0736f	c7 85 10 71 ff
	ff fc 04 00 00	 mov	 DWORD PTR $T441[ebp], 1276 ; 000004fcH
  07379	c7 85 14 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T441[ebp+4], 0
  07383	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  07388	c6 45 fc 7a	 mov	 BYTE PTR __$EHRec$[ebp+8], 122 ; 0000007aH
  0738c	8d 85 08 71 ff
	ff		 lea	 eax, DWORD PTR $T440[ebp]
  07392	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LAOEDIBA@PFU?5Limited@
  07397	50		 push	 eax
  07398	8d 8d 30 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18432]
  0739e	c7 85 08 71 ff
	ff fe 04 00 00	 mov	 DWORD PTR $T440[ebp], 1278 ; 000004feH
  073a8	c7 85 0c 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T440[ebp+4], 0
  073b2	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  073b7	c6 45 fc 7b	 mov	 BYTE PTR __$EHRec$[ebp+8], 123 ; 0000007bH
  073bb	8d 85 00 71 ff
	ff		 lea	 eax, DWORD PTR $T439[ebp]
  073c1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HPKDLJPE@Fujikura?1DDK@
  073c6	50		 push	 eax
  073c7	8d 8d 50 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18464]
  073cd	c7 85 00 71 ff
	ff 01 05 00 00	 mov	 DWORD PTR $T439[ebp], 1281 ; 00000501H
  073d7	c7 85 04 71 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T439[ebp+4], 0
  073e1	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  073e6	c6 45 fc 7c	 mov	 BYTE PTR __$EHRec$[ebp+8], 124 ; 0000007cH
  073ea	8d 85 f8 70 ff
	ff		 lea	 eax, DWORD PTR $T438[ebp]
  073f0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IBNCPFMK@Acer?0?5Inc?4@
  073f5	50		 push	 eax
  073f6	8d 8d 70 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18496]
  073fc	c7 85 f8 70 ff
	ff 02 05 00 00	 mov	 DWORD PTR $T438[ebp], 1282 ; 00000502H
  07406	c7 85 fc 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T438[ebp+4], 0
  07410	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  07415	c6 45 fc 7d	 mov	 BYTE PTR __$EHRec$[ebp+8], 125 ; 0000007dH
  07419	c7 85 f0 70 ff
	ff 07 05 00 00	 mov	 DWORD PTR $T437[ebp], 1287 ; 00000507H
  07423	c7 85 f4 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T437[ebp+4], 0
  0742d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OMIFCFDP@Hosiden?5Corporation@
  07432	8d 85 f0 70 ff
	ff		 lea	 eax, DWORD PTR $T437[ebp]
  07438	50		 push	 eax
  07439	8d 8d 90 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18528]
  0743f	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  07444	c6 45 fc 7e	 mov	 BYTE PTR __$EHRec$[ebp+8], 126 ; 0000007eH
  07448	8d 85 e8 70 ff
	ff		 lea	 eax, DWORD PTR $T436[ebp]
  0744e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EOOICECH@Belkin?5International?0?5Inc?4@
  07453	50		 push	 eax
  07454	8d 8d b0 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18560]
  0745a	c7 85 e8 70 ff
	ff 0d 05 00 00	 mov	 DWORD PTR $T436[ebp], 1293 ; 0000050dH
  07464	c7 85 ec 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T436[ebp+4], 0
  0746e	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  07473	c6 45 fc 7f	 mov	 BYTE PTR __$EHRec$[ebp+8], 127 ; 0000007fH
  07477	8d 85 e0 70 ff
	ff		 lea	 eax, DWORD PTR $T435[ebp]
  0747d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MHMGALMF@Longwell?5Electronics?1Longwell?5C@
  07482	50		 push	 eax
  07483	8d 8d d0 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18592]
  07489	c7 85 e0 70 ff
	ff 16 05 00 00	 mov	 DWORD PTR $T435[ebp], 1302 ; 00000516H
  07493	c7 85 e4 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T435[ebp+4], 0
  0749d	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  074a2	c6 45 fc 80	 mov	 BYTE PTR __$EHRec$[ebp+8], 128 ; 00000080H
  074a6	8d 85 d8 70 ff
	ff		 lea	 eax, DWORD PTR $T434[ebp]
  074ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IEJECICL@Star?5Micronics?5Co?4?0?5LTD@
  074b1	50		 push	 eax
  074b2	8d 8d f0 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18624]
  074b8	c7 85 d8 70 ff
	ff 19 05 00 00	 mov	 DWORD PTR $T434[ebp], 1305 ; 00000519H
  074c2	c7 85 dc 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T434[ebp+4], 0
  074cc	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  074d1	c6 45 fc 81	 mov	 BYTE PTR __$EHRec$[ebp+8], 129 ; 00000081H
  074d5	8d 85 d0 70 ff
	ff		 lea	 eax, DWORD PTR $T433[ebp]
  074db	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CJECLAIC@American?5Power?5Conversion@
  074e0	50		 push	 eax
  074e1	8d 8d 10 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18656]
  074e7	c7 85 d0 70 ff
	ff 1d 05 00 00	 mov	 DWORD PTR $T433[ebp], 1309 ; 0000051dH
  074f1	c7 85 d4 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T433[ebp+4], 0
  074fb	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  07500	c6 45 fc 82	 mov	 BYTE PTR __$EHRec$[ebp+8], 130 ; 00000082H
  07504	8d 85 c8 70 ff
	ff		 lea	 eax, DWORD PTR $T432[ebp]
  0750a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MPHIFDML@ACON?0?5Advanced?9Connectek?0?5Inc?4@
  0750f	50		 push	 eax
  07510	8d 8d 30 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18688]
  07516	c7 85 c8 70 ff
	ff 22 05 00 00	 mov	 DWORD PTR $T432[ebp], 1314 ; 00000522H
  07520	c7 85 cc 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T432[ebp+4], 0
  0752a	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  0752f	c6 45 fc 83	 mov	 BYTE PTR __$EHRec$[ebp+8], 131 ; 00000083H
  07533	8d 85 c0 70 ff
	ff		 lea	 eax, DWORD PTR $T431[ebp]
  07539	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JMAENH@Synopsys?0?5Inc?4@
  0753e	50		 push	 eax
  0753f	8d 8d 50 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18720]
  07545	c7 85 c0 70 ff
	ff 3f 05 00 00	 mov	 DWORD PTR $T431[ebp], 1343 ; 0000053fH
  0754f	c7 85 c4 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T431[ebp+4], 0
  07559	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0755e	c6 45 fc 84	 mov	 BYTE PTR __$EHRec$[ebp+8], 132 ; 00000084H
  07562	8d 85 b8 70 ff
	ff		 lea	 eax, DWORD PTR $T430[ebp]
  07568	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FOPBDEC@Sony?5Corporation@
  0756d	50		 push	 eax
  0756e	8d 8d 70 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18752]
  07574	c7 85 b8 70 ff
	ff 4c 05 00 00	 mov	 DWORD PTR $T430[ebp], 1356 ; 0000054cH
  0757e	c7 85 bc 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T430[ebp+4], 0
  07588	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0758d	c6 45 fc 85	 mov	 BYTE PTR __$EHRec$[ebp+8], 133 ; 00000085H
  07591	8d 85 b0 70 ff
	ff		 lea	 eax, DWORD PTR $T429[ebp]
  07597	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BLKLAKEJ@Fuji?5Xerox?5Co?4?0?5Ltd?4@
  0759c	50		 push	 eax
  0759d	8d 8d 90 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18784]
  075a3	c7 85 b0 70 ff
	ff 50 05 00 00	 mov	 DWORD PTR $T429[ebp], 1360 ; 00000550H
  075ad	c7 85 b4 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T429[ebp+4], 0
  075b7	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  075bc	c6 45 fc 86	 mov	 BYTE PTR __$EHRec$[ebp+8], 134 ; 00000086H
  075c0	c7 85 a8 70 ff
	ff 57 05 00 00	 mov	 DWORD PTR $T428[ebp], 1367 ; 00000557H
  075ca	c7 85 ac 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T428[ebp+4], 0
  075d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FGPDBDMF@ATEN?5International?5Co?4?5Ltd?4@
  075d9	8d 85 a8 70 ff
	ff		 lea	 eax, DWORD PTR $T428[ebp]
  075df	50		 push	 eax
  075e0	8d 8d b0 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18816]
  075e6	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  075eb	c6 45 fc 87	 mov	 BYTE PTR __$EHRec$[ebp+8], 135 ; 00000087H
  075ef	8d 85 a0 70 ff
	ff		 lea	 eax, DWORD PTR $T427[ebp]
  075f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LLCBPJLE@Cadence?5Design?5Systems?0?5Inc?4@
  075fa	50		 push	 eax
  075fb	8d 8d d0 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18848]
  07601	c7 85 a0 70 ff
	ff 59 05 00 00	 mov	 DWORD PTR $T427[ebp], 1369 ; 00000559H
  0760b	c7 85 a4 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T427[ebp+4], 0
  07615	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0761a	c6 45 fc 88	 mov	 BYTE PTR __$EHRec$[ebp+8], 136 ; 00000088H
  0761e	8d 85 98 70 ff
	ff		 lea	 eax, DWORD PTR $T426[ebp]
  07624	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PCAMLHGM@WACOM?5Co?4?0?5Ltd?4@
  07629	50		 push	 eax
  0762a	8d 8d f0 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18880]
  07630	c7 85 98 70 ff
	ff 6a 05 00 00	 mov	 DWORD PTR $T426[ebp], 1386 ; 0000056aH
  0763a	c7 85 9c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T426[ebp+4], 0
  07644	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  07649	c6 45 fc 89	 mov	 BYTE PTR __$EHRec$[ebp+8], 137 ; 00000089H
  0764d	8d 85 90 70 ff
	ff		 lea	 eax, DWORD PTR $T425[ebp]
  07653	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OEOLOEBO@EIZO?5Corporation@
  07658	50		 push	 eax
  07659	8d 8d 10 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18912]
  0765f	c7 85 90 70 ff
	ff 6d 05 00 00	 mov	 DWORD PTR $T425[ebp], 1389 ; 0000056dH
  07669	c7 85 94 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T425[ebp+4], 0
  07673	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  07678	c6 45 fc 8a	 mov	 BYTE PTR __$EHRec$[ebp+8], 138 ; 0000008aH
  0767c	8d 85 88 70 ff
	ff		 lea	 eax, DWORD PTR $T424[ebp]
  07682	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LBOBFJIK@Elecom?5Co?4?0?5Ltd?4@
  07687	50		 push	 eax
  07688	8d 8d 30 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18944]
  0768e	c7 85 88 70 ff
	ff 6e 05 00 00	 mov	 DWORD PTR $T424[ebp], 1390 ; 0000056eH
  07698	c7 85 8c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T424[ebp+4], 0
  076a2	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  076a7	c6 45 fc 8b	 mov	 BYTE PTR __$EHRec$[ebp+8], 139 ; 0000008bH
  076ab	8d 85 80 70 ff
	ff		 lea	 eax, DWORD PTR $T423[ebp]
  076b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BPNCPPJL@Conexant?5Systems?0?5Inc?4@
  076b6	50		 push	 eax
  076b7	8d 8d 50 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18976]
  076bd	c7 85 80 70 ff
	ff 72 05 00 00	 mov	 DWORD PTR $T423[ebp], 1394 ; 00000572H
  076c7	c7 85 84 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T423[ebp+4], 0
  076d1	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  076d6	c6 45 fc 8c	 mov	 BYTE PTR __$EHRec$[ebp+8], 140 ; 0000008cH
  076da	8d 85 78 70 ff
	ff		 lea	 eax, DWORD PTR $T422[ebp]
  076e0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DLENFJNK@Y?9E?5Data?0?5Inc?4@
  076e5	50		 push	 eax
  076e6	8d 8d 70 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19008]
  076ec	c7 85 78 70 ff
	ff 7b 05 00 00	 mov	 DWORD PTR $T422[ebp], 1403 ; 0000057bH
  076f6	c7 85 7c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T422[ebp+4], 0
  07700	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  07705	c6 45 fc 8d	 mov	 BYTE PTR __$EHRec$[ebp+8], 141 ; 0000008dH
  07709	8d 85 70 70 ff
	ff		 lea	 eax, DWORD PTR $T421[ebp]
  0770f	68 00 00 00 00	 push	 OFFSET ??_C@_08DBEKGGBP@AVM?5GmbH@
  07714	50		 push	 eax
  07715	8d 8d 90 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19040]
  0771b	c7 85 70 70 ff
	ff 7c 05 00 00	 mov	 DWORD PTR $T421[ebp], 1404 ; 0000057cH
  07725	c7 85 74 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T421[ebp+4], 0
  0772f	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  07734	c6 45 fc 8e	 mov	 BYTE PTR __$EHRec$[ebp+8], 142 ; 0000008eH
  07738	8d 85 68 70 ff
	ff		 lea	 eax, DWORD PTR $T420[ebp]
  0773e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CDPILELF@Roland?5Corporation@
  07743	50		 push	 eax
  07744	8d 8d b0 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19072]
  0774a	c7 85 68 70 ff
	ff 82 05 00 00	 mov	 DWORD PTR $T420[ebp], 1410 ; 00000582H
  07754	c7 85 6c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T420[ebp+4], 0
  0775e	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  07763	c6 45 fc 8f	 mov	 BYTE PTR __$EHRec$[ebp+8], 143 ; 0000008fH
  07767	c7 85 60 70 ff
	ff 84 05 00 00	 mov	 DWORD PTR $T419[ebp], 1412 ; 00000584H
  07771	c7 85 64 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T419[ebp+4], 0
  0777b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PNCFOBBM@RATOC?5Systems?0?5Inc?4@
  07780	8d 85 60 70 ff
	ff		 lea	 eax, DWORD PTR $T419[ebp]
  07786	50		 push	 eax
  07787	8d 8d d0 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19104]
  0778d	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  07792	c6 45 fc 90	 mov	 BYTE PTR __$EHRec$[ebp+8], 144 ; 00000090H
  07796	8d 85 58 70 ff
	ff		 lea	 eax, DWORD PTR $T418[ebp]
  0779c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EMPKDOFH@Infineon?5Technologies@
  077a1	50		 push	 eax
  077a2	8d 8d f0 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19136]
  077a8	c7 85 58 70 ff
	ff 8b 05 00 00	 mov	 DWORD PTR $T418[ebp], 1419 ; 0000058bH
  077b2	c7 85 5c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T418[ebp+4], 0
  077bc	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  077c1	c6 45 fc 91	 mov	 BYTE PTR __$EHRec$[ebp+8], 145 ; 00000091H
  077c5	8d 85 50 70 ff
	ff		 lea	 eax, DWORD PTR $T417[ebp]
  077cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CKEFINHN@Alcor?5Micro?0?5Corp?4@
  077d0	50		 push	 eax
  077d1	8d 8d 10 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19168]
  077d7	c7 85 50 70 ff
	ff 8f 05 00 00	 mov	 DWORD PTR $T417[ebp], 1423 ; 0000058fH
  077e1	c7 85 54 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T417[ebp+4], 0
  077eb	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  077f0	c6 45 fc 92	 mov	 BYTE PTR __$EHRec$[ebp+8], 146 ; 00000092H
  077f4	8d 85 48 70 ff
	ff		 lea	 eax, DWORD PTR $T416[ebp]
  077fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LGOLJEOJ@OMRON?5Corporation@
  077ff	50		 push	 eax
  07800	8d 8d 30 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19200]
  07806	c7 85 48 70 ff
	ff 90 05 00 00	 mov	 DWORD PTR $T416[ebp], 1424 ; 00000590H
  07810	c7 85 4c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T416[ebp+4], 0
  0781a	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0781f	c6 45 fc 93	 mov	 BYTE PTR __$EHRec$[ebp+8], 147 ; 00000093H
  07823	8d 85 40 70 ff
	ff		 lea	 eax, DWORD PTR $T415[ebp]
  07829	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GBDDABHO@Bose?5Corporation@
  0782e	50		 push	 eax
  0782f	8d 8d 50 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19232]
  07835	c7 85 40 70 ff
	ff a7 05 00 00	 mov	 DWORD PTR $T415[ebp], 1447 ; 000005a7H
  0783f	c7 85 44 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T415[ebp+4], 0
  07849	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0784e	c6 45 fc 94	 mov	 BYTE PTR __$EHRec$[ebp+8], 148 ; 00000094H
  07852	8d 85 38 70 ff
	ff		 lea	 eax, DWORD PTR $T414[ebp]
  07858	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PALNNPFJ@OmniVision?5Technologies?0?5Inc?4@
  0785d	50		 push	 eax
  0785e	8d 8d 70 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19264]
  07864	c7 85 38 70 ff
	ff a9 05 00 00	 mov	 DWORD PTR $T414[ebp], 1449 ; 000005a9H
  0786e	c7 85 3c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T414[ebp+4], 0
  07878	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0787d	c6 45 fc 95	 mov	 BYTE PTR __$EHRec$[ebp+8], 149 ; 00000095H
  07881	8d 85 30 70 ff
	ff		 lea	 eax, DWORD PTR $T413[ebp]
  07887	68 00 00 00 00	 push	 OFFSET ??_C@_05EBJDGKGA@Apple@
  0788c	50		 push	 eax
  0788d	8d 8d 90 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19296]
  07893	c7 85 30 70 ff
	ff ac 05 00 00	 mov	 DWORD PTR $T413[ebp], 1452 ; 000005acH
  0789d	c7 85 34 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T413[ebp+4], 0
  078a7	e8 00 00 00 00	 call	 ??$?0_KAAY05$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY05$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[6],0>
  078ac	c6 45 fc 96	 mov	 BYTE PTR __$EHRec$[ebp+8], 150 ; 00000096H
  078b0	8d 85 28 70 ff
	ff		 lea	 eax, DWORD PTR $T412[ebp]
  078b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BEKADALE@Y?4C?4?5Cable?5U?4S?4A?4?0?5Inc@
  078bb	50		 push	 eax
  078bc	8d 8d b0 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19328]
  078c2	c7 85 28 70 ff
	ff ad 05 00 00	 mov	 DWORD PTR $T412[ebp], 1453 ; 000005adH
  078cc	c7 85 2c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T412[ebp+4], 0
  078d6	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  078db	c6 45 fc 97	 mov	 BYTE PTR __$EHRec$[ebp+8], 151 ; 00000097H
  078df	8d 85 20 70 ff
	ff		 lea	 eax, DWORD PTR $T411[ebp]
  078e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DJDIGDEG@National?5Instruments@
  078ea	50		 push	 eax
  078eb	8d 8d d0 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19360]
  078f1	c7 85 20 70 ff
	ff 23 39 00 00	 mov	 DWORD PTR $T411[ebp], 14627 ; 00003923H
  078fb	c7 85 24 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T411[ebp+4], 0
  07905	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0790a	c6 45 fc 98	 mov	 BYTE PTR __$EHRec$[ebp+8], 152 ; 00000098H
  0790e	c7 85 18 70 ff
	ff be 05 00 00	 mov	 DWORD PTR $T410[ebp], 1470 ; 000005beH
  07918	c7 85 1c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T410[ebp+4], 0
  07922	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GPJFFKGK@Tyco?5Electronics?5Corp?4?0?5a?5TE?5Co@
  07927	8d 85 18 70 ff
	ff		 lea	 eax, DWORD PTR $T410[ebp]
  0792d	50		 push	 eax
  0792e	8d 8d f0 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19392]
  07934	e8 00 00 00 00	 call	 ??$?0_KAAY0DH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[55],0>
  07939	c6 45 fc 99	 mov	 BYTE PTR __$EHRec$[ebp+8], 153 ; 00000099H
  0793d	8d 85 10 70 ff
	ff		 lea	 eax, DWORD PTR $T409[ebp]
  07943	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DEENCECE@MegaChips?5Corporation@
  07948	50		 push	 eax
  07949	8d 8d 10 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19424]
  0794f	c7 85 10 70 ff
	ff c1 05 00 00	 mov	 DWORD PTR $T409[ebp], 1473 ; 000005c1H
  07959	c7 85 14 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T409[ebp+4], 0
  07963	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  07968	c6 45 fc 9a	 mov	 BYTE PTR __$EHRec$[ebp+8], 154 ; 0000009aH
  0796c	8d 85 08 70 ff
	ff		 lea	 eax, DWORD PTR $T408[ebp]
  07972	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JJANANCF@Qualcomm?0?5Inc@
  07977	50		 push	 eax
  07978	8d 8d 30 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19456]
  0797e	c7 85 08 70 ff
	ff c6 05 00 00	 mov	 DWORD PTR $T408[ebp], 1478 ; 000005c6H
  07988	c7 85 0c 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T408[ebp+4], 0
  07992	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  07997	c6 45 fc 9b	 mov	 BYTE PTR __$EHRec$[ebp+8], 155 ; 0000009bH
  0799b	8d 85 00 70 ff
	ff		 lea	 eax, DWORD PTR $T407[ebp]
  079a1	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DIDMLNJB@Foxlink?1Cheng?5Uei?5Precision?5Ind@
  079a6	50		 push	 eax
  079a7	8d 8d 50 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19488]
  079ad	c7 85 00 70 ff
	ff c8 05 00 00	 mov	 DWORD PTR $T407[ebp], 1480 ; 000005c8H
  079b7	c7 85 04 70 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T407[ebp+4], 0
  079c1	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  079c6	c6 45 fc 9c	 mov	 BYTE PTR __$EHRec$[ebp+8], 156 ; 0000009cH
  079ca	8d 85 f8 6f ff
	ff		 lea	 eax, DWORD PTR $T406[ebp]
  079d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DNOMCPDN@Ricoh?5Company?5Ltd?4@
  079d5	50		 push	 eax
  079d6	8d 8d 70 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19520]
  079dc	c7 85 f8 6f ff
	ff ca 05 00 00	 mov	 DWORD PTR $T406[ebp], 1482 ; 000005caH
  079e6	c7 85 fc 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T406[ebp+4], 0
  079f0	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  079f5	c6 45 fc 9d	 mov	 BYTE PTR __$EHRec$[ebp+8], 157 ; 0000009dH
  079f9	8d 85 f0 6f ff
	ff		 lea	 eax, DWORD PTR $T405[ebp]
  079ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OADDMKLB@Microtek?5International?5Inc?4@
  07a04	50		 push	 eax
  07a05	8d 8d 90 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19552]
  07a0b	c7 85 f0 6f ff
	ff da 05 00 00	 mov	 DWORD PTR $T405[ebp], 1498 ; 000005daH
  07a15	c7 85 f4 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T405[ebp+4], 0
  07a1f	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  07a24	c6 45 fc 9e	 mov	 BYTE PTR __$EHRec$[ebp+8], 158 ; 0000009eH
  07a28	8d 85 e8 6f ff
	ff		 lea	 eax, DWORD PTR $T404[ebp]
  07a2e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GAABCJO@Delta?5Electronics?5Inc?4@
  07a33	50		 push	 eax
  07a34	8d 8d b0 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19584]
  07a3a	c7 85 e8 6f ff
	ff dd 05 00 00	 mov	 DWORD PTR $T404[ebp], 1501 ; 000005ddH
  07a44	c7 85 ec 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T404[ebp+4], 0
  07a4e	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  07a53	c6 45 fc 9f	 mov	 BYTE PTR __$EHRec$[ebp+8], 159 ; 0000009fH
  07a57	8d 85 e0 6f ff
	ff		 lea	 eax, DWORD PTR $T403[ebp]
  07a5d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JPKFBBCH@Symbol?5Technologies@
  07a62	50		 push	 eax
  07a63	8d 8d d0 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19616]
  07a69	c7 85 e0 6f ff
	ff e0 05 00 00	 mov	 DWORD PTR $T403[ebp], 1504 ; 000005e0H
  07a73	c7 85 e4 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T403[ebp+4], 0
  07a7d	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  07a82	c6 45 fc a0	 mov	 BYTE PTR __$EHRec$[ebp+8], 160 ; 000000a0H
  07a86	8d 85 d8 6f ff
	ff		 lea	 eax, DWORD PTR $T402[ebp]
  07a8c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CKIEML@Genesys?5Logic?0?5Inc?4@
  07a91	50		 push	 eax
  07a92	8d 8d f0 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19648]
  07a98	c7 85 d8 6f ff
	ff e3 05 00 00	 mov	 DWORD PTR $T402[ebp], 1507 ; 000005e3H
  07aa2	c7 85 dc 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T402[ebp+4], 0
  07aac	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  07ab1	c6 45 fc a1	 mov	 BYTE PTR __$EHRec$[ebp+8], 161 ; 000000a1H
  07ab5	c7 85 d0 6f ff
	ff e5 05 00 00	 mov	 DWORD PTR $T401[ebp], 1509 ; 000005e5H
  07abf	c7 85 d4 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T401[ebp+4], 0
  07ac9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KBGKOOGJ@Fuji?5Electric?5Co?4?0?5Ltd?4@
  07ace	8d 85 d0 6f ff
	ff		 lea	 eax, DWORD PTR $T401[ebp]
  07ad4	50		 push	 eax
  07ad5	8d 8d 10 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19680]
  07adb	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  07ae0	c6 45 fc a2	 mov	 BYTE PTR __$EHRec$[ebp+8], 162 ; 000000a2H
  07ae4	8d 85 c8 6f ff
	ff		 lea	 eax, DWORD PTR $T400[ebp]
  07aea	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NBAANMIA@Unixtar?5Technology?5Inc?4@
  07aef	50		 push	 eax
  07af0	8d 8d 30 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19712]
  07af6	c7 85 c8 6f ff
	ff f5 05 00 00	 mov	 DWORD PTR $T400[ebp], 1525 ; 000005f5H
  07b00	c7 85 cc 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T400[ebp+4], 0
  07b0a	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  07b0f	c6 45 fc a3	 mov	 BYTE PTR __$EHRec$[ebp+8], 163 ; 000000a3H
  07b13	8d 85 c0 6f ff
	ff		 lea	 eax, DWORD PTR $T399[ebp]
  07b19	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DHDFMBHC@Datalogic?5srl@
  07b1e	50		 push	 eax
  07b1f	8d 8d 50 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19744]
  07b25	c7 85 c0 6f ff
	ff f9 05 00 00	 mov	 DWORD PTR $T399[ebp], 1529 ; 000005f9H
  07b2f	c7 85 c4 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T399[ebp+4], 0
  07b39	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  07b3e	c6 45 fc a4	 mov	 BYTE PTR __$EHRec$[ebp+8], 164 ; 000000a4H
  07b42	8d 85 b8 6f ff
	ff		 lea	 eax, DWORD PTR $T398[ebp]
  07b48	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PJDPEADK@LeCroy?5Corporation@
  07b4d	50		 push	 eax
  07b4e	8d 8d 70 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19776]
  07b54	c7 85 b8 6f ff
	ff ff 05 00 00	 mov	 DWORD PTR $T398[ebp], 1535 ; 000005ffH
  07b5e	c7 85 bc 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T398[ebp+4], 0
  07b68	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  07b6d	c6 45 fc a5	 mov	 BYTE PTR __$EHRec$[ebp+8], 165 ; 000000a5H
  07b71	8d 85 b0 6f ff
	ff		 lea	 eax, DWORD PTR $T397[ebp]
  07b77	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HAMNADII@Novatek?5Microelectronics?5Corp?4@
  07b7c	50		 push	 eax
  07b7d	8d 8d 90 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19808]
  07b83	c7 85 b0 6f ff
	ff 03 06 00 00	 mov	 DWORD PTR $T397[ebp], 1539 ; 00000603H
  07b8d	c7 85 b4 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T397[ebp+4], 0
  07b97	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  07b9c	c6 45 fc a6	 mov	 BYTE PTR __$EHRec$[ebp+8], 166 ; 000000a6H
  07ba0	8d 85 a8 6f ff
	ff		 lea	 eax, DWORD PTR $T396[ebp]
  07ba6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LJAJLGJE@SMK?5Manufacturing?5Inc?4@
  07bab	50		 push	 eax
  07bac	8d 8d b0 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19840]
  07bb2	c7 85 a8 6f ff
	ff 09 06 00 00	 mov	 DWORD PTR $T396[ebp], 1545 ; 00000609H
  07bbc	c7 85 ac 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T396[ebp+4], 0
  07bc6	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  07bcb	c6 45 fc a7	 mov	 BYTE PTR __$EHRec$[ebp+8], 167 ; 000000a7H
  07bcf	8d 85 a0 6f ff
	ff		 lea	 eax, DWORD PTR $T395[ebp]
  07bd5	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@IBGJKEKA@Joinsoon?5Electronics?5Mfg?4?5Co?4?0?5@
  07bda	50		 push	 eax
  07bdb	8d 8d d0 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19872]
  07be1	c7 85 a0 6f ff
	ff 0f 06 00 00	 mov	 DWORD PTR $T395[ebp], 1551 ; 0000060fH
  07beb	c7 85 a4 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T395[ebp+4], 0
  07bf5	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  07bfa	c6 45 fc a8	 mov	 BYTE PTR __$EHRec$[ebp+8], 168 ; 000000a8H
  07bfe	8d 85 98 6f ff
	ff		 lea	 eax, DWORD PTR $T394[ebp]
  07c04	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BNDJFIFN@TransAct?5Technologies?5Incorpora@
  07c09	50		 push	 eax
  07c0a	8d 8d f0 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19904]
  07c10	c7 85 98 6f ff
	ff 13 06 00 00	 mov	 DWORD PTR $T394[ebp], 1555 ; 00000613H
  07c1a	c7 85 9c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T394[ebp+4], 0
  07c24	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  07c29	c6 45 fc a9	 mov	 BYTE PTR __$EHRec$[ebp+8], 169 ; 000000a9H
  07c2d	8d 85 90 6f ff
	ff		 lea	 eax, DWORD PTR $T393[ebp]
  07c33	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OFHNPHHH@Seiko?5Instruments?5Inc?4@
  07c38	50		 push	 eax
  07c39	8d 8d 10 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19936]
  07c3f	c7 85 90 6f ff
	ff 19 06 00 00	 mov	 DWORD PTR $T393[ebp], 1561 ; 00000619H
  07c49	c7 85 94 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T393[ebp+4], 0
  07c53	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  07c58	c6 45 fc aa	 mov	 BYTE PTR __$EHRec$[ebp+8], 170 ; 000000aaH
  07c5c	c7 85 88 6f ff
	ff 2e 06 00 00	 mov	 DWORD PTR $T392[ebp], 1582 ; 0000062eH
  07c66	c7 85 8c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T392[ebp+4], 0
  07c70	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JFDOJFNF@JPC?9MAIN?5SUPER?5Inc?4@
  07c75	8d 85 88 6f ff
	ff		 lea	 eax, DWORD PTR $T392[ebp]
  07c7b	50		 push	 eax
  07c7c	8d 8d 30 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19968]
  07c82	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  07c87	c6 45 fc ab	 mov	 BYTE PTR __$EHRec$[ebp+8], 171 ; 000000abH
  07c8b	8d 85 80 6f ff
	ff		 lea	 eax, DWORD PTR $T391[ebp]
  07c91	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@COKBMNFE@Sin?5Sheng?5Terminal?5?$CG?5Machine?5In@
  07c96	50		 push	 eax
  07c97	8d 8d 50 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20000]
  07c9d	c7 85 80 6f ff
	ff 2f 06 00 00	 mov	 DWORD PTR $T391[ebp], 1583 ; 0000062fH
  07ca7	c7 85 84 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T391[ebp+4], 0
  07cb1	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  07cb6	c6 45 fc ac	 mov	 BYTE PTR __$EHRec$[ebp+8], 172 ; 000000acH
  07cba	8d 85 78 6f ff
	ff		 lea	 eax, DWORD PTR $T390[ebp]
  07cc0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GAMNDPPF@Chrontel?0?5Inc?4@
  07cc5	50		 push	 eax
  07cc6	8d 8d 70 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20032]
  07ccc	c7 85 78 6f ff
	ff 39 06 00 00	 mov	 DWORD PTR $T390[ebp], 1593 ; 00000639H
  07cd6	c7 85 7c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T390[ebp+4], 0
  07ce0	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  07ce5	c6 45 fc ad	 mov	 BYTE PTR __$EHRec$[ebp+8], 173 ; 000000adH
  07ce9	8d 85 70 6f ff
	ff		 lea	 eax, DWORD PTR $T389[ebp]
  07cef	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EBDNAMPI@Ji?9Haw?5Industrial?5Co?4?0?5Ltd@
  07cf4	50		 push	 eax
  07cf5	8d 8d 90 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20064]
  07cfb	c7 85 70 6f ff
	ff 4c 06 00 00	 mov	 DWORD PTR $T389[ebp], 1612 ; 0000064cH
  07d05	c7 85 74 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T389[ebp+4], 0
  07d0f	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  07d14	c6 45 fc ae	 mov	 BYTE PTR __$EHRec$[ebp+8], 174 ; 000000aeH
  07d18	8d 85 68 6f ff
	ff		 lea	 eax, DWORD PTR $T388[ebp]
  07d1e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HBOMJHJG@Suyin?5Corporation@
  07d23	50		 push	 eax
  07d24	8d 8d b0 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20096]
  07d2a	c7 85 68 6f ff
	ff 4e 06 00 00	 mov	 DWORD PTR $T388[ebp], 1614 ; 0000064eH
  07d34	c7 85 6c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T388[ebp+4], 0
  07d3e	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  07d43	c6 45 fc af	 mov	 BYTE PTR __$EHRec$[ebp+8], 175 ; 000000afH
  07d47	8d 85 60 6f ff
	ff		 lea	 eax, DWORD PTR $T387[ebp]
  07d4d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BPHBIEFO@WIBU?9Systems?5AG@
  07d52	50		 push	 eax
  07d53	8d 8d d0 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20128]
  07d59	c7 85 60 6f ff
	ff 4f 06 00 00	 mov	 DWORD PTR $T387[ebp], 1615 ; 0000064fH
  07d63	c7 85 64 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T387[ebp+4], 0
  07d6d	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  07d72	c6 45 fc b0	 mov	 BYTE PTR __$EHRec$[ebp+8], 176 ; 000000b0H
  07d76	8d 85 58 6f ff
	ff		 lea	 eax, DWORD PTR $T386[ebp]
  07d7c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BBNBDGIM@Space?5Shuttle?5Hi?9Tech?5Co?4?0Ltd?4@
  07d81	50		 push	 eax
  07d82	8d 8d f0 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20160]
  07d88	c7 85 58 6f ff
	ff 55 06 00 00	 mov	 DWORD PTR $T386[ebp], 1621 ; 00000655H
  07d92	c7 85 5c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T386[ebp+4], 0
  07d9c	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  07da1	c6 45 fc b1	 mov	 BYTE PTR __$EHRec$[ebp+8], 177 ; 000000b1H
  07da5	8d 85 50 6f ff
	ff		 lea	 eax, DWORD PTR $T385[ebp]
  07dab	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JPOIGLAH@Glory?5Mark?5Electronic?5Ltd?4@
  07db0	50		 push	 eax
  07db1	8d 8d 10 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20192]
  07db7	c7 85 50 6f ff
	ff 56 06 00 00	 mov	 DWORD PTR $T385[ebp], 1622 ; 00000656H
  07dc1	c7 85 54 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T385[ebp+4], 0
  07dcb	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  07dd0	c6 45 fc b2	 mov	 BYTE PTR __$EHRec$[ebp+8], 178 ; 000000b2H
  07dd4	8d 85 48 6f ff
	ff		 lea	 eax, DWORD PTR $T384[ebp]
  07dda	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HLMOOHDB@Tekcon?5Electronics?5Corp?4@
  07ddf	50		 push	 eax
  07de0	8d 8d 30 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20224]
  07de6	c7 85 48 6f ff
	ff 57 06 00 00	 mov	 DWORD PTR $T384[ebp], 1623 ; 00000657H
  07df0	c7 85 4c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T384[ebp+4], 0
  07dfa	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  07dff	c6 45 fc b3	 mov	 BYTE PTR __$EHRec$[ebp+8], 179 ; 000000b3H
  07e03	c7 85 40 6f ff
	ff 5f 06 00 00	 mov	 DWORD PTR $T383[ebp], 1631 ; 0000065fH
  07e0d	c7 85 44 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T383[ebp+4], 0
  07e17	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MJJJJEAM@Good?5Way?5Technology?5Co?4?0?5Ltd?4?5?$CG@
  07e1c	8d 85 40 6f ff
	ff		 lea	 eax, DWORD PTR $T383[ebp]
  07e22	50		 push	 eax
  07e23	8d 8d 50 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20256]
  07e29	e8 00 00 00 00	 call	 ??$?0_KAAY0DD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[51],0>
  07e2e	c6 45 fc b4	 mov	 BYTE PTR __$EHRec$[ebp+8], 180 ; 000000b4H
  07e32	8d 85 38 6f ff
	ff		 lea	 eax, DWORD PTR $T382[ebp]
  07e38	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PAFBBAIH@TSAY?9E?5?$CIBVI?$CJ?5International?5Inc?4@
  07e3d	50		 push	 eax
  07e3e	8d 8d 70 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20288]
  07e44	c7 85 38 6f ff
	ff 60 06 00 00	 mov	 DWORD PTR $T382[ebp], 1632 ; 00000660H
  07e4e	c7 85 3c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T382[ebp+4], 0
  07e58	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  07e5d	c6 45 fc b5	 mov	 BYTE PTR __$EHRec$[ebp+8], 181 ; 000000b5H
  07e61	8d 85 30 6f ff
	ff		 lea	 eax, DWORD PTR $T381[ebp]
  07e67	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PKNBNCAJ@Hamamatsu?5Photonics?5K?4K?4@
  07e6c	50		 push	 eax
  07e6d	8d 8d 90 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20320]
  07e73	c7 85 30 6f ff
	ff 61 06 00 00	 mov	 DWORD PTR $T381[ebp], 1633 ; 00000661H
  07e7d	c7 85 34 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T381[ebp+4], 0
  07e87	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  07e8c	c6 45 fc b6	 mov	 BYTE PTR __$EHRec$[ebp+8], 182 ; 000000b6H
  07e90	8d 85 28 6f ff
	ff		 lea	 eax, DWORD PTR $T380[ebp]
  07e96	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BPDLABPC@Total?5Technologies?0?5Ltd?4@
  07e9b	50		 push	 eax
  07e9c	8d 8d b0 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20352]
  07ea2	c7 85 28 6f ff
	ff 6a 06 00 00	 mov	 DWORD PTR $T380[ebp], 1642 ; 0000066aH
  07eac	c7 85 2c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T380[ebp+4], 0
  07eb6	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  07ebb	c6 45 fc b7	 mov	 BYTE PTR __$EHRec$[ebp+8], 183 ; 000000b7H
  07ebf	8d 85 20 6f ff
	ff		 lea	 eax, DWORD PTR $T379[ebp]
  07ec5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PDKHMLGO@Prolific?5Technology?0?5Inc?4@
  07eca	50		 push	 eax
  07ecb	8d 8d d0 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20384]
  07ed1	c7 85 20 6f ff
	ff 7b 06 00 00	 mov	 DWORD PTR $T379[ebp], 1659 ; 0000067bH
  07edb	c7 85 24 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T379[ebp+4], 0
  07ee5	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  07eea	c6 45 fc b8	 mov	 BYTE PTR __$EHRec$[ebp+8], 184 ; 000000b8H
  07eee	8d 85 18 6f ff
	ff		 lea	 eax, DWORD PTR $T378[ebp]
  07ef4	68 00 00 00 00	 push	 OFFSET ??_C@_09JOKCKELG@Dell?5Inc?4@
  07ef9	50		 push	 eax
  07efa	8d 8d f0 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20416]
  07f00	c7 85 18 6f ff
	ff 3c 41 00 00	 mov	 DWORD PTR $T378[ebp], 16700 ; 0000413cH
  07f0a	c7 85 1c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T378[ebp+4], 0
  07f14	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  07f19	c6 45 fc b9	 mov	 BYTE PTR __$EHRec$[ebp+8], 185 ; 000000b9H
  07f1d	8d 85 10 6f ff
	ff		 lea	 eax, DWORD PTR $T377[ebp]
  07f23	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LFPCEBHN@Golden?5Bridge?5Electech?5Inc?4@
  07f28	50		 push	 eax
  07f29	8d 8d 10 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20448]
  07f2f	c7 85 10 6f ff
	ff 90 06 00 00	 mov	 DWORD PTR $T377[ebp], 1680 ; 00000690H
  07f39	c7 85 14 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T377[ebp+4], 0
  07f43	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  07f48	c6 45 fc ba	 mov	 BYTE PTR __$EHRec$[ebp+8], 186 ; 000000baH
  07f4c	8d 85 08 6f ff
	ff		 lea	 eax, DWORD PTR $T376[ebp]
  07f52	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EMAGANPI@Tektronix?0?5Inc?4@
  07f57	50		 push	 eax
  07f58	8d 8d 30 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20480]
  07f5e	c7 85 08 6f ff
	ff 99 06 00 00	 mov	 DWORD PTR $T376[ebp], 1689 ; 00000699H
  07f68	c7 85 0c 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T376[ebp+4], 0
  07f72	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  07f77	c6 45 fc bb	 mov	 BYTE PTR __$EHRec$[ebp+8], 187 ; 000000bbH
  07f7b	8d 85 00 6f ff
	ff		 lea	 eax, DWORD PTR $T375[ebp]
  07f81	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NDJHBKAO@Askey?5Computer?5Corporation@
  07f86	50		 push	 eax
  07f87	8d 8d 50 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20512]
  07f8d	c7 85 00 6f ff
	ff 9a 06 00 00	 mov	 DWORD PTR $T375[ebp], 1690 ; 0000069aH
  07f97	c7 85 04 6f ff
	ff 00 00 00 00	 mov	 DWORD PTR $T375[ebp+4], 0
  07fa1	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  07fa6	c6 45 fc bc	 mov	 BYTE PTR __$EHRec$[ebp+8], 188 ; 000000bcH
  07faa	c7 85 f8 6e ff
	ff ad 06 00 00	 mov	 DWORD PTR $T374[ebp], 1709 ; 000006adH
  07fb4	c7 85 fc 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T374[ebp+4], 0
  07fbe	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NHGJCBNO@Greatland?5Electronics?5Taiwan?5Lt@
  07fc3	8d 85 f8 6e ff
	ff		 lea	 eax, DWORD PTR $T374[ebp]
  07fc9	50		 push	 eax
  07fca	8d 8d 70 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20544]
  07fd0	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  07fd5	c6 45 fc bd	 mov	 BYTE PTR __$EHRec$[ebp+8], 189 ; 000000bdH
  07fd9	8d 85 f0 6e ff
	ff		 lea	 eax, DWORD PTR $T373[ebp]
  07fdf	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CBCOMILN@Eurofins?5Digital?5Testing?5Belgiu@
  07fe4	50		 push	 eax
  07fe5	8d 8d 90 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20576]
  07feb	c7 85 f0 6e ff
	ff ae 06 00 00	 mov	 DWORD PTR $T373[ebp], 1710 ; 000006aeH
  07ff5	c7 85 f4 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T373[ebp+4], 0
  07fff	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  08004	c6 45 fc be	 mov	 BYTE PTR __$EHRec$[ebp+8], 190 ; 000000beH
  08008	8d 85 e8 6e ff
	ff		 lea	 eax, DWORD PTR $T372[ebp]
  0800e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MFHNCDAI@Pixela?5Corporation@
  08013	50		 push	 eax
  08014	8d 8d b0 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20608]
  0801a	c7 85 e8 6e ff
	ff b8 06 00 00	 mov	 DWORD PTR $T372[ebp], 1720 ; 000006b8H
  08024	c7 85 ec 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T372[ebp+4], 0
  0802e	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  08033	c6 45 fc bf	 mov	 BYTE PTR __$EHRec$[ebp+8], 191 ; 000000bfH
  08037	8d 85 e0 6e ff
	ff		 lea	 eax, DWORD PTR $T371[ebp]
  0803d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KBMIOCIB@Oki?5Data?5Corporation@
  08042	50		 push	 eax
  08043	8d 8d d0 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20640]
  08049	c7 85 e0 6e ff
	ff bc 06 00 00	 mov	 DWORD PTR $T371[ebp], 1724 ; 000006bcH
  08053	c7 85 e4 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T371[ebp+4], 0
  0805d	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  08062	c6 45 fc c0	 mov	 BYTE PTR __$EHRec$[ebp+8], 192 ; 000000c0H
  08066	8d 85 d8 6e ff
	ff		 lea	 eax, DWORD PTR $T370[ebp]
  0806c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PBNHDNIB@Leoco?5Corporation@
  08071	50		 push	 eax
  08072	8d 8d f0 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20672]
  08078	c7 85 d8 6e ff
	ff bf 06 00 00	 mov	 DWORD PTR $T370[ebp], 1727 ; 000006bfH
  08082	c7 85 dc 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T370[ebp+4], 0
  0808c	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  08091	c6 45 fc c1	 mov	 BYTE PTR __$EHRec$[ebp+8], 193 ; 000000c1H
  08095	8d 85 d0 6e ff
	ff		 lea	 eax, DWORD PTR $T369[ebp]
  0809b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IAMJELKE@Bizlink?5Technology?0?5Inc?4@
  080a0	50		 push	 eax
  080a1	8d 8d 10 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20704]
  080a7	c7 85 d0 6e ff
	ff c4 06 00 00	 mov	 DWORD PTR $T369[ebp], 1732 ; 000006c4H
  080b1	c7 85 d4 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T369[ebp+4], 0
  080bb	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  080c0	c6 45 fc c2	 mov	 BYTE PTR __$EHRec$[ebp+8], 194 ; 000000c2H
  080c4	8d 85 c8 6e ff
	ff		 lea	 eax, DWORD PTR $T368[ebp]
  080ca	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGNPDHHH@SIIG?0?5Inc?4@
  080cf	50		 push	 eax
  080d0	8d 8d 30 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20736]
  080d6	c7 85 c8 6e ff
	ff c8 06 00 00	 mov	 DWORD PTR $T368[ebp], 1736 ; 000006c8H
  080e0	c7 85 cc 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T368[ebp+4], 0
  080ea	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  080ef	c6 45 fc c3	 mov	 BYTE PTR __$EHRec$[ebp+8], 195 ; 000000c3H
  080f3	8d 85 c0 6e ff
	ff		 lea	 eax, DWORD PTR $T367[ebp]
  080f9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OJHCGLE@Synaptics?5Inc?4@
  080fe	50		 push	 eax
  080ff	8d 8d 50 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20768]
  08105	c7 85 c0 6e ff
	ff cb 06 00 00	 mov	 DWORD PTR $T367[ebp], 1739 ; 000006cbH
  0810f	c7 85 c4 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T367[ebp+4], 0
  08119	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0811e	c6 45 fc c4	 mov	 BYTE PTR __$EHRec$[ebp+8], 196 ; 000000c4H
  08122	8d 85 b8 6e ff
	ff		 lea	 eax, DWORD PTR $T366[ebp]
  08128	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FPPDHAGC@Mitsubishi?5Electric?5Corporation@
  0812d	50		 push	 eax
  0812e	8d 8d 70 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20800]
  08134	c7 85 b8 6e ff
	ff d3 06 00 00	 mov	 DWORD PTR $T366[ebp], 1747 ; 000006d3H
  0813e	c7 85 bc 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T366[ebp+4], 0
  08148	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0814d	c6 45 fc c5	 mov	 BYTE PTR __$EHRec$[ebp+8], 197 ; 000000c5H
  08151	c7 85 b0 6e ff
	ff de 06 00 00	 mov	 DWORD PTR $T365[ebp], 1758 ; 000006deH
  0815b	c7 85 b4 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T365[ebp+4], 0
  08165	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BIPBCEJB@Heisei?5Technology?5Co?4?0?5Ltd?4@
  0816a	8d 85 b0 6e ff
	ff		 lea	 eax, DWORD PTR $T365[ebp]
  08170	50		 push	 eax
  08171	8d 8d 90 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20832]
  08177	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0817c	c6 45 fc c6	 mov	 BYTE PTR __$EHRec$[ebp+8], 198 ; 000000c6H
  08180	8d 85 a8 6e ff
	ff		 lea	 eax, DWORD PTR $T364[ebp]
  08186	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MKILJNBK@Oki?5Electric?5Industry?5Co?4?0?5Ltd?4@
  0818b	50		 push	 eax
  0818c	8d 8d b0 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20864]
  08192	c7 85 a8 6e ff
	ff 0a 07 00 00	 mov	 DWORD PTR $T364[ebp], 1802 ; 0000070aH
  0819c	c7 85 ac 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T364[ebp+4], 0
  081a6	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  081ab	c6 45 fc c7	 mov	 BYTE PTR __$EHRec$[ebp+8], 199 ; 000000c7H
  081af	8d 85 a0 6e ff
	ff		 lea	 eax, DWORD PTR $T363[ebp]
  081b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JIAGMEHO@Comoss?5Electronic?5Co?4?0?5Ltd?4@
  081ba	50		 push	 eax
  081bb	8d 8d d0 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20896]
  081c1	c7 85 a0 6e ff
	ff 0d 07 00 00	 mov	 DWORD PTR $T363[ebp], 1805 ; 0000070dH
  081cb	c7 85 a4 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T363[ebp+4], 0
  081d5	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  081da	c6 45 fc c8	 mov	 BYTE PTR __$EHRec$[ebp+8], 200 ; 000000c8H
  081de	8d 85 98 6e ff
	ff		 lea	 eax, DWORD PTR $T362[ebp]
  081e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JCFMJDGG@Magic?5Control?5Technology?5Corp?4@
  081e9	50		 push	 eax
  081ea	8d 8d f0 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20928]
  081f0	c7 85 98 6e ff
	ff 11 07 00 00	 mov	 DWORD PTR $T362[ebp], 1809 ; 00000711H
  081fa	c7 85 9c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T362[ebp+4], 0
  08204	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  08209	c6 45 fc c9	 mov	 BYTE PTR __$EHRec$[ebp+8], 201 ; 000000c9H
  0820d	8d 85 90 6e ff
	ff		 lea	 eax, DWORD PTR $T361[ebp]
  08213	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MKABCAGD@Western?5Digital?0?5G?9Tech@
  08218	50		 push	 eax
  08219	8d 8d 10 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20960]
  0821f	c7 85 90 6e ff
	ff 91 47 00 00	 mov	 DWORD PTR $T361[ebp], 18321 ; 00004791H
  08229	c7 85 94 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T361[ebp+4], 0
  08233	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  08238	c6 45 fc ca	 mov	 BYTE PTR __$EHRec$[ebp+8], 202 ; 000000caH
  0823c	8d 85 88 6e ff
	ff		 lea	 eax, DWORD PTR $T360[ebp]
  08242	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IFGJOCOG@Sunix?5Co?4?0?5Ltd?4@
  08247	50		 push	 eax
  08248	8d 8d 30 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20992]
  0824e	c7 85 88 6e ff
	ff 2e 07 00 00	 mov	 DWORD PTR $T360[ebp], 1838 ; 0000072eH
  08258	c7 85 8c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T360[ebp+4], 0
  08262	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  08267	c6 45 fc cb	 mov	 BYTE PTR __$EHRec$[ebp+8], 203 ; 000000cbH
  0826b	8d 85 80 6e ff
	ff		 lea	 eax, DWORD PTR $T359[ebp]
  08271	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PJBMJABB@Lorom?5Industrial?5Co?4?0?5Ltd?4@
  08276	50		 push	 eax
  08277	8d 8d 50 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21024]
  0827d	c7 85 80 6e ff
	ff 36 07 00 00	 mov	 DWORD PTR $T359[ebp], 1846 ; 00000736H
  08287	c7 85 84 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T359[ebp+4], 0
  08291	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  08296	c6 45 fc cc	 mov	 BYTE PTR __$EHRec$[ebp+8], 204 ; 000000ccH
  0829a	8d 85 78 6e ff
	ff		 lea	 eax, DWORD PTR $T358[ebp]
  082a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PCICHEDF@Cyber?5Power?5Systems?0?5Inc?4@
  082a5	50		 push	 eax
  082a6	8d 8d 70 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21056]
  082ac	c7 85 78 6e ff
	ff 64 07 00 00	 mov	 DWORD PTR $T358[ebp], 1892 ; 00000764H
  082b6	c7 85 7c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T358[ebp+4], 0
  082c0	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  082c5	c6 45 fc cd	 mov	 BYTE PTR __$EHRec$[ebp+8], 205 ; 000000cdH
  082c9	8d 85 70 6e ff
	ff		 lea	 eax, DWORD PTR $T357[ebp]
  082cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FCBANMAL@HID?5Global?5GmbH@
  082d4	50		 push	 eax
  082d5	8d 8d 90 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21088]
  082db	c7 85 70 6e ff
	ff 6b 07 00 00	 mov	 DWORD PTR $T357[ebp], 1899 ; 0000076bH
  082e5	c7 85 74 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T357[ebp+4], 0
  082ef	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  082f4	c6 45 fc ce	 mov	 BYTE PTR __$EHRec$[ebp+8], 206 ; 000000ceH
  082f8	c7 85 68 6e ff
	ff 6d 07 00 00	 mov	 DWORD PTR $T356[ebp], 1901 ; 0000076dH
  08302	c7 85 6c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T356[ebp+4], 0
  0830c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MIMJNFD@Denso?5Corporation@
  08311	8d 85 68 6e ff
	ff		 lea	 eax, DWORD PTR $T356[ebp]
  08317	50		 push	 eax
  08318	8d 8d b0 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21120]
  0831e	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  08323	c6 45 fc cf	 mov	 BYTE PTR __$EHRec$[ebp+8], 207 ; 000000cfH
  08327	8d 85 60 6e ff
	ff		 lea	 eax, DWORD PTR $T355[ebp]
  0832d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FFNPBCAI@Griffin?5Technology?5LLC@
  08332	50		 push	 eax
  08333	8d 8d d0 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21152]
  08339	c7 85 60 6e ff
	ff 7d 07 00 00	 mov	 DWORD PTR $T355[ebp], 1917 ; 0000077dH
  08343	c7 85 64 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T355[ebp+4], 0
  0834d	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  08352	c6 45 fc d0	 mov	 BYTE PTR __$EHRec$[ebp+8], 208 ; 000000d0H
  08356	8d 85 58 6e ff
	ff		 lea	 eax, DWORD PTR $T354[ebp]
  0835c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MOGNACPM@Western?5Digital?0?5Sandisk@
  08361	50		 push	 eax
  08362	8d 8d f0 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21184]
  08368	c7 85 58 6e ff
	ff 81 07 00 00	 mov	 DWORD PTR $T354[ebp], 1921 ; 00000781H
  08372	c7 85 5c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T354[ebp+4], 0
  0837c	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  08381	c6 45 fc d1	 mov	 BYTE PTR __$EHRec$[ebp+8], 209 ; 000000d1H
  08385	8d 85 50 6e ff
	ff		 lea	 eax, DWORD PTR $T353[ebp]
  0838b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LGBOFDFN@Copartner?5Technology?5Corporatio@
  08390	50		 push	 eax
  08391	8d 8d 10 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21216]
  08397	c7 85 50 6e ff
	ff 91 07 00 00	 mov	 DWORD PTR $T353[ebp], 1937 ; 00000791H
  083a1	c7 85 54 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T353[ebp+4], 0
  083ab	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  083b0	c6 45 fc d2	 mov	 BYTE PTR __$EHRec$[ebp+8], 210 ; 000000d2H
  083b4	8d 85 48 6e ff
	ff		 lea	 eax, DWORD PTR $T352[ebp]
  083ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MPFKAMGD@National?5Technical?5Systems@
  083bf	50		 push	 eax
  083c0	8d 8d 30 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21248]
  083c6	c7 85 48 6e ff
	ff a2 07 00 00	 mov	 DWORD PTR $T352[ebp], 1954 ; 000007a2H
  083d0	c7 85 4c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T352[ebp+4], 0
  083da	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  083df	c6 45 fc d3	 mov	 BYTE PTR __$EHRec$[ebp+8], 211 ; 000000d3H
  083e3	8d 85 40 6e ff
	ff		 lea	 eax, DWORD PTR $T351[ebp]
  083e9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OCMFCBHB@Plustek?0?5Inc?4@
  083ee	50		 push	 eax
  083ef	8d 8d 50 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21280]
  083f5	c7 85 40 6e ff
	ff b3 07 00 00	 mov	 DWORD PTR $T351[ebp], 1971 ; 000007b3H
  083ff	c7 85 44 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T351[ebp+4], 0
  08409	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0840e	c6 45 fc d4	 mov	 BYTE PTR __$EHRec$[ebp+8], 212 ; 000000d4H
  08412	8d 85 38 6e ff
	ff		 lea	 eax, DWORD PTR $T350[ebp]
  08418	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NJLEDFOB@OLYMPUS?5CORPORATION@
  0841d	50		 push	 eax
  0841e	8d 8d 70 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21312]
  08424	c7 85 38 6e ff
	ff b4 07 00 00	 mov	 DWORD PTR $T350[ebp], 1972 ; 000007b4H
  0842e	c7 85 3c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T350[ebp+4], 0
  08438	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0843d	c6 45 fc d5	 mov	 BYTE PTR __$EHRec$[ebp+8], 213 ; 000000d5H
  08441	8d 85 30 6e ff
	ff		 lea	 eax, DWORD PTR $T349[ebp]
  08447	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MGBHEDBN@TIME?5Interconnect?5Ltd?4@
  0844c	50		 push	 eax
  0844d	8d 8d 90 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21344]
  08453	c7 85 30 6e ff
	ff b7 07 00 00	 mov	 DWORD PTR $T349[ebp], 1975 ; 000007b7H
  0845d	c7 85 34 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T349[ebp+4], 0
  08467	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0846c	c6 45 fc d6	 mov	 BYTE PTR __$EHRec$[ebp+8], 214 ; 000000d6H
  08470	8d 85 28 6e ff
	ff		 lea	 eax, DWORD PTR $T348[ebp]
  08476	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EIIMJKNI@Allied?5Telesis?5Inc@
  0847b	50		 push	 eax
  0847c	8d 8d b0 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21376]
  08482	c7 85 28 6e ff
	ff c9 07 00 00	 mov	 DWORD PTR $T348[ebp], 1993 ; 000007c9H
  0848c	c7 85 2c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T348[ebp+4], 0
  08496	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0849b	c6 45 fc d7	 mov	 BYTE PTR __$EHRec$[ebp+8], 215 ; 000000d7H
  0849f	c7 85 20 6e ff
	ff ca 07 00 00	 mov	 DWORD PTR $T347[ebp], 1994 ; 000007caH
  084a9	c7 85 24 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T347[ebp+4], 0
  084b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EGFACLDP@AVerMedia?5Technologies?0?5Inc?4@
  084b8	8d 85 20 6e ff
	ff		 lea	 eax, DWORD PTR $T347[ebp]
  084be	50		 push	 eax
  084bf	8d 8d d0 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21408]
  084c5	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  084ca	c6 45 fc d8	 mov	 BYTE PTR __$EHRec$[ebp+8], 216 ; 000000d8H
  084ce	8d 85 18 6e ff
	ff		 lea	 eax, DWORD PTR $T346[ebp]
  084d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JKHOIPCI@Casio?5Computer?5Co?4?0?5Ltd?4@
  084d9	50		 push	 eax
  084da	8d 8d f0 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21440]
  084e0	c7 85 18 6e ff
	ff cf 07 00 00	 mov	 DWORD PTR $T346[ebp], 1999 ; 000007cfH
  084ea	c7 85 1c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T346[ebp+4], 0
  084f4	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  084f9	c6 45 fc d9	 mov	 BYTE PTR __$EHRec$[ebp+8], 217 ; 000000d9H
  084fd	8d 85 10 6e ff
	ff		 lea	 eax, DWORD PTR $T345[ebp]
  08503	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BNLONGOH@David?5Electronics?5Company?0?5Ltd?4@
  08508	50		 push	 eax
  08509	8d 8d 10 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21472]
  0850f	c7 85 10 6e ff
	ff df 07 00 00	 mov	 DWORD PTR $T345[ebp], 2015 ; 000007dfH
  08519	c7 85 14 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T345[ebp+4], 0
  08523	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  08528	c6 45 fc da	 mov	 BYTE PTR __$EHRec$[ebp+8], 218 ; 000000daH
  0852c	8d 85 08 6e ff
	ff		 lea	 eax, DWORD PTR $T344[ebp]
  08532	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OPFGKFFJ@Century?5Corporation@
  08537	50		 push	 eax
  08538	8d 8d 30 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21504]
  0853e	c7 85 08 6e ff
	ff f7 07 00 00	 mov	 DWORD PTR $T344[ebp], 2039 ; 000007f7H
  08548	c7 85 0c 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T344[ebp+4], 0
  08552	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  08557	c6 45 fc db	 mov	 BYTE PTR __$EHRec$[ebp+8], 219 ; 000000dbH
  0855b	8d 85 00 6e ff
	ff		 lea	 eax, DWORD PTR $T343[ebp]
  08561	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CAINGGKC@Evermuch?5Technology?5Co?4?0?5Ltd?4@
  08566	50		 push	 eax
  08567	8d 8d 50 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21536]
  0856d	c7 85 00 6e ff
	ff 0a 08 00 00	 mov	 DWORD PTR $T343[ebp], 2058 ; 0000080aH
  08577	c7 85 04 6e ff
	ff 00 00 00 00	 mov	 DWORD PTR $T343[ebp+4], 0
  08581	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  08586	c6 45 fc dc	 mov	 BYTE PTR __$EHRec$[ebp+8], 220 ; 000000dcH
  0858a	8d 85 f8 6d ff
	ff		 lea	 eax, DWORD PTR $T342[ebp]
  08590	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HEGJGHPA@Action?5Star?5Technology?5Co?4?0?5Ltd@
  08595	50		 push	 eax
  08596	8d 8d 70 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21568]
  0859c	c7 85 f8 6d ff
	ff 35 08 00 00	 mov	 DWORD PTR $T342[ebp], 2101 ; 00000835H
  085a6	c7 85 fc 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T342[ebp+4], 0
  085b0	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  085b5	c6 45 fc dd	 mov	 BYTE PTR __$EHRec$[ebp+8], 221 ; 000000ddH
  085b9	8d 85 f0 6d ff
	ff		 lea	 eax, DWORD PTR $T341[ebp]
  085bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DELPFPOB@Argosy?5Research?5Inc?4@
  085c4	50		 push	 eax
  085c5	8d 8d 90 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21600]
  085cb	c7 85 f0 6d ff
	ff 40 08 00 00	 mov	 DWORD PTR $T341[ebp], 2112 ; 00000840H
  085d5	c7 85 f4 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T341[ebp+4], 0
  085df	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  085e4	c6 45 fc de	 mov	 BYTE PTR __$EHRec$[ebp+8], 222 ; 000000deH
  085e8	8d 85 e8 6d ff
	ff		 lea	 eax, DWORD PTR $T340[ebp]
  085ee	68 00 00 00 00	 push	 OFFSET ??_C@_0O@COHJMHME@Wipro?5Limited@
  085f3	50		 push	 eax
  085f4	8d 8d b0 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21632]
  085fa	c7 85 e8 6d ff
	ff 4a 08 00 00	 mov	 DWORD PTR $T340[ebp], 2122 ; 0000084aH
  08604	c7 85 ec 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T340[ebp+4], 0
  0860e	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  08613	c6 45 fc df	 mov	 BYTE PTR __$EHRec$[ebp+8], 223 ; 000000dfH
  08617	8d 85 e0 6d ff
	ff		 lea	 eax, DWORD PTR $T339[ebp]
  0861d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FOGENENM@MEC?5IMEX?5INC?9HPT@
  08622	50		 push	 eax
  08623	8d 8d d0 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21664]
  08629	c7 85 e0 6d ff
	ff 6f 08 00 00	 mov	 DWORD PTR $T339[ebp], 2159 ; 0000086fH
  08633	c7 85 e4 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T339[ebp+4], 0
  0863d	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  08642	c6 45 fc e0	 mov	 BYTE PTR __$EHRec$[ebp+8], 224 ; 000000e0H
  08646	c7 85 d8 6d ff
	ff c7 08 00 00	 mov	 DWORD PTR $T338[ebp], 2247 ; 000008c7H
  08650	c7 85 dc 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T338[ebp+4], 0
  0865a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JNLBBKDI@TAI?5TWUN?5ENTERPRISE?5CO?4?0?5LTD?4@
  0865f	8d 85 d8 6d ff
	ff		 lea	 eax, DWORD PTR $T338[ebp]
  08665	50		 push	 eax
  08666	8d 8d f0 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21696]
  0866c	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  08671	c6 45 fc e1	 mov	 BYTE PTR __$EHRec$[ebp+8], 225 ; 000000e1H
  08675	8d 85 d0 6d ff
	ff		 lea	 eax, DWORD PTR $T337[ebp]
  0867b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PMKDDGDC@Pioneer?5Corporation@
  08680	50		 push	 eax
  08681	8d 8d 10 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21728]
  08687	c7 85 d0 6d ff
	ff e4 08 00 00	 mov	 DWORD PTR $T337[ebp], 2276 ; 000008e4H
  08691	c7 85 d4 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T337[ebp+4], 0
  0869b	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  086a0	c6 45 fc e2	 mov	 BYTE PTR __$EHRec$[ebp+8], 226 ; 000000e2H
  086a4	8d 85 c8 6d ff
	ff		 lea	 eax, DWORD PTR $T336[ebp]
  086aa	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NMFIDNE@Gemalto?5SA@
  086af	50		 push	 eax
  086b0	8d 8d 30 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21760]
  086b6	c7 85 c8 6d ff
	ff e6 08 00 00	 mov	 DWORD PTR $T336[ebp], 2278 ; 000008e6H
  086c0	c7 85 cc 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T336[ebp+4], 0
  086ca	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  086cf	c6 45 fc e3	 mov	 BYTE PTR __$EHRec$[ebp+8], 227 ; 000000e3H
  086d3	8d 85 c0 6d ff
	ff		 lea	 eax, DWORD PTR $T335[ebp]
  086d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DEEADHEC@FARADAY?5Technology?5Corp?4@
  086de	50		 push	 eax
  086df	8d 8d 50 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21792]
  086e5	c7 85 c0 6d ff
	ff 06 09 00 00	 mov	 DWORD PTR $T335[ebp], 2310 ; 00000906H
  086ef	c7 85 c4 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T335[ebp+4], 0
  086f9	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  086fe	c6 45 fc e4	 mov	 BYTE PTR __$EHRec$[ebp+8], 228 ; 000000e4H
  08702	8d 85 b8 6d ff
	ff		 lea	 eax, DWORD PTR $T334[ebp]
  08708	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DGGIOLK@Audio?9Technica?5Corp?4@
  0870d	50		 push	 eax
  0870e	8d 8d 70 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21824]
  08714	c7 85 b8 6d ff
	ff 09 09 00 00	 mov	 DWORD PTR $T334[ebp], 2313 ; 00000909H
  0871e	c7 85 bc 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T334[ebp+4], 0
  08728	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0872d	c6 45 fc e5	 mov	 BYTE PTR __$EHRec$[ebp+8], 229 ; 000000e5H
  08731	8d 85 b0 6d ff
	ff		 lea	 eax, DWORD PTR $T333[ebp]
  08737	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BNPBHCJB@Silicon?5Motion?0?5Inc?4?5?9?5Taiwan@
  0873c	50		 push	 eax
  0873d	8d 8d 90 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21856]
  08743	c7 85 b0 6d ff
	ff 0c 09 00 00	 mov	 DWORD PTR $T333[ebp], 2316 ; 0000090cH
  0874d	c7 85 b4 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T333[ebp+4], 0
  08757	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0875c	c6 45 fc e6	 mov	 BYTE PTR __$EHRec$[ebp+8], 230 ; 000000e6H
  08760	8d 85 a8 6d ff
	ff		 lea	 eax, DWORD PTR $T332[ebp]
  08766	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OCKCLCDJ@Garmin?5International@
  0876b	50		 push	 eax
  0876c	8d 8d b0 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21888]
  08772	c7 85 a8 6d ff
	ff 1e 09 00 00	 mov	 DWORD PTR $T332[ebp], 2334 ; 0000091eH
  0877c	c7 85 ac 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T332[ebp+4], 0
  08786	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0878b	c6 45 fc e7	 mov	 BYTE PTR __$EHRec$[ebp+8], 231 ; 000000e7H
  0878f	8d 85 a0 6d ff
	ff		 lea	 eax, DWORD PTR $T331[ebp]
  08795	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JMAMIBAH@Toshiba?5Corporation@
  0879a	50		 push	 eax
  0879b	8d 8d d0 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21920]
  087a1	c7 85 a0 6d ff
	ff 30 09 00 00	 mov	 DWORD PTR $T331[ebp], 2352 ; 00000930H
  087ab	c7 85 a4 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T331[ebp+4], 0
  087b5	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  087ba	c6 45 fc e8	 mov	 BYTE PTR __$EHRec$[ebp+8], 232 ; 000000e8H
  087be	8d 85 98 6d ff
	ff		 lea	 eax, DWORD PTR $T330[ebp]
  087c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FDMCHING@Pixart?5Imaging?0?5Inc?4@
  087c9	50		 push	 eax
  087ca	8d 8d f0 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21952]
  087d0	c7 85 98 6d ff
	ff 3a 09 00 00	 mov	 DWORD PTR $T330[ebp], 2362 ; 0000093aH
  087da	c7 85 9c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T330[ebp+4], 0
  087e4	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  087e9	c6 45 fc e9	 mov	 BYTE PTR __$EHRec$[ebp+8], 233 ; 000000e9H
  087ed	c7 85 90 6d ff
	ff 3b 09 00 00	 mov	 DWORD PTR $T329[ebp], 2363 ; 0000093bH
  087f7	c7 85 94 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T329[ebp+4], 0
  08801	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DPPDGGNF@Plextor?5LLC@
  08806	8d 85 90 6d ff
	ff		 lea	 eax, DWORD PTR $T329[ebp]
  0880c	50		 push	 eax
  0880d	8d 8d 10 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21984]
  08813	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  08818	c6 45 fc ea	 mov	 BYTE PTR __$EHRec$[ebp+8], 234 ; 000000eaH
  0881c	8d 85 88 6d ff
	ff		 lea	 eax, DWORD PTR $T328[ebp]
  08822	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PLHGNMC@J?4S?4T?4?5Mfg?4?5Co?4?0?5Ltd?4@
  08827	50		 push	 eax
  08828	8d 8d 30 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22016]
  0882e	c7 85 88 6d ff
	ff 3e 09 00 00	 mov	 DWORD PTR $T328[ebp], 2366 ; 0000093eH
  08838	c7 85 8c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T328[ebp+4], 0
  08842	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  08847	c6 45 fc eb	 mov	 BYTE PTR __$EHRec$[ebp+8], 235 ; 000000ebH
  0884b	8d 85 80 6d ff
	ff		 lea	 eax, DWORD PTR $T327[ebp]
  08851	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LKMMOGNE@Kingston?5Technology?5Company@
  08856	50		 push	 eax
  08857	8d 8d 50 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22048]
  0885d	c7 85 80 6d ff
	ff 51 09 00 00	 mov	 DWORD PTR $T327[ebp], 2385 ; 00000951H
  08867	c7 85 84 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T327[ebp+4], 0
  08871	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  08876	c6 45 fc ec	 mov	 BYTE PTR __$EHRec$[ebp+8], 236 ; 000000ecH
  0887a	8d 85 78 6d ff
	ff		 lea	 eax, DWORD PTR $T326[ebp]
  08880	68 00 00 00 00	 push	 OFFSET ??_C@_06HLMMPIBG@NVIDIA@
  08885	50		 push	 eax
  08886	8d 8d 70 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22080]
  0888c	c7 85 78 6d ff
	ff 55 09 00 00	 mov	 DWORD PTR $T326[ebp], 2389 ; 00000955H
  08896	c7 85 7c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T326[ebp+4], 0
  088a0	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  088a5	c6 45 fc ed	 mov	 BYTE PTR __$EHRec$[ebp+8], 237 ; 000000edH
  088a9	8d 85 70 6d ff
	ff		 lea	 eax, DWORD PTR $T325[ebp]
  088af	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DIONPOBP@Medialogic?5Corporation@
  088b4	50		 push	 eax
  088b5	8d 8d 90 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22112]
  088bb	c7 85 70 6d ff
	ff 5b 09 00 00	 mov	 DWORD PTR $T325[ebp], 2395 ; 0000095bH
  088c5	c7 85 74 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T325[ebp+4], 0
  088cf	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  088d4	c6 45 fc ee	 mov	 BYTE PTR __$EHRec$[ebp+8], 238 ; 000000eeH
  088d8	8d 85 68 6d ff
	ff		 lea	 eax, DWORD PTR $T324[ebp]
  088de	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LKCCNLNO@Polycom?0?5Inc?4@
  088e3	50		 push	 eax
  088e4	8d 8d b0 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22144]
  088ea	c7 85 68 6d ff
	ff 5d 09 00 00	 mov	 DWORD PTR $T324[ebp], 2397 ; 0000095dH
  088f4	c7 85 6c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T324[ebp+4], 0
  088fe	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  08903	c6 45 fc ef	 mov	 BYTE PTR __$EHRec$[ebp+8], 239 ; 000000efH
  08907	8d 85 60 6d ff
	ff		 lea	 eax, DWORD PTR $T323[ebp]
  0890d	68 00 00 00 00	 push	 OFFSET ??_C@_08DJJPOCMK@Apricorn@
  08912	50		 push	 eax
  08913	8d 8d d0 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22176]
  08919	c7 85 60 6d ff
	ff 84 09 00 00	 mov	 DWORD PTR $T323[ebp], 2436 ; 00000984H
  08923	c7 85 64 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T323[ebp+4], 0
  0892d	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  08932	c6 45 fc f0	 mov	 BYTE PTR __$EHRec$[ebp+8], 240 ; 000000f0H
  08936	8d 85 58 6d ff
	ff		 lea	 eax, DWORD PTR $T322[ebp]
  0893c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NHOGNCFH@Contech?5Research?0?5Inc?4@
  08941	50		 push	 eax
  08942	8d 8d f0 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22208]
  08948	c7 85 58 6d ff
	ff a4 09 00 00	 mov	 DWORD PTR $T322[ebp], 2468 ; 000009a4H
  08952	c7 85 5c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T322[ebp+4], 0
  0895c	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  08961	c6 45 fc f1	 mov	 BYTE PTR __$EHRec$[ebp+8], 241 ; 000000f1H
  08965	8d 85 50 6d ff
	ff		 lea	 eax, DWORD PTR $T321[ebp]
  0896b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NGELPCKK@Lin?5Shiung?5Enterprise?5Co?4?0?5Ltd?4@
  08970	50		 push	 eax
  08971	8d 8d 10 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22240]
  08977	c7 85 50 6d ff
	ff a8 09 00 00	 mov	 DWORD PTR $T321[ebp], 2472 ; 000009a8H
  08981	c7 85 54 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T321[ebp+4], 0
  0898b	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  08990	c6 45 fc f2	 mov	 BYTE PTR __$EHRec$[ebp+8], 242 ; 000000f2H
  08994	c7 85 48 6d ff
	ff ab 09 00 00	 mov	 DWORD PTR $T320[ebp], 2475 ; 000009abH
  0899e	c7 85 4c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T320[ebp+4], 0
  089a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OHPOFJEM@Japan?5Cash?5Machine?5Co?4?0?5Ltd?4@
  089ad	8d 85 48 6d ff
	ff		 lea	 eax, DWORD PTR $T320[ebp]
  089b3	50		 push	 eax
  089b4	8d 8d 30 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22272]
  089ba	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  089bf	c6 45 fc f3	 mov	 BYTE PTR __$EHRec$[ebp+8], 243 ; 000000f3H
  089c3	8d 85 40 6d ff
	ff		 lea	 eax, DWORD PTR $T319[ebp]
  089c9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IJKIJEMN@Tripp?5Lite@
  089ce	50		 push	 eax
  089cf	8d 8d 50 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22304]
  089d5	c7 85 40 6d ff
	ff ae 09 00 00	 mov	 DWORD PTR $T319[ebp], 2478 ; 000009aeH
  089df	c7 85 44 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T319[ebp+4], 0
  089e9	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  089ee	c6 45 fc f4	 mov	 BYTE PTR __$EHRec$[ebp+8], 244 ; 000000f4H
  089f2	8d 85 38 6d ff
	ff		 lea	 eax, DWORD PTR $T318[ebp]
  089f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JHLIIJEE@NISCA?5Corporation@
  089fd	50		 push	 eax
  089fe	8d 8d 70 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22336]
  08a04	c7 85 38 6d ff
	ff c2 09 00 00	 mov	 DWORD PTR $T318[ebp], 2498 ; 000009c2H
  08a0e	c7 85 3c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T318[ebp+4], 0
  08a18	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  08a1d	c6 45 fc f5	 mov	 BYTE PTR __$EHRec$[ebp+8], 245 ; 000000f5H
  08a21	8d 85 30 6d ff
	ff		 lea	 eax, DWORD PTR $T317[ebp]
  08a27	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HNEJNPKP@Electronics?5Testing?5Center?0?5Tai@
  08a2c	50		 push	 eax
  08a2d	8d 8d 90 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22368]
  08a33	c7 85 30 6d ff
	ff cf 09 00 00	 mov	 DWORD PTR $T317[ebp], 2511 ; 000009cfH
  08a3d	c7 85 34 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T317[ebp+4], 0
  08a47	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  08a4c	c6 45 fc f6	 mov	 BYTE PTR __$EHRec$[ebp+8], 246 ; 000000f6H
  08a50	8d 85 28 6d ff
	ff		 lea	 eax, DWORD PTR $T316[ebp]
  08a56	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LAHNEDCJ@A?9FOUR?5TECH?5CO?4?0?5LTD?4@
  08a5b	50		 push	 eax
  08a5c	8d 8d b0 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22400]
  08a62	c7 85 28 6d ff
	ff da 09 00 00	 mov	 DWORD PTR $T316[ebp], 2522 ; 000009daH
  08a6c	c7 85 2c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T316[ebp+4], 0
  08a76	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  08a7b	c6 45 fc f7	 mov	 BYTE PTR __$EHRec$[ebp+8], 247 ; 000000f7H
  08a7f	8d 85 20 6d ff
	ff		 lea	 eax, DWORD PTR $T315[ebp]
  08a85	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HPCCBBBB@HOYA?5Corporation@
  08a8a	50		 push	 eax
  08a8b	8d 8d d0 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22432]
  08a91	c7 85 20 6d ff
	ff 17 0a 00 00	 mov	 DWORD PTR $T315[ebp], 2583 ; 00000a17H
  08a9b	c7 85 24 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T315[ebp+4], 0
  08aa5	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  08aaa	c6 45 fc f8	 mov	 BYTE PTR __$EHRec$[ebp+8], 248 ; 000000f8H
  08aae	8d 85 18 6d ff
	ff		 lea	 eax, DWORD PTR $T314[ebp]
  08ab4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IKEGAKKP@Hirose?5Electric?5Co?4?0?5Ltd?4@
  08ab9	50		 push	 eax
  08aba	8d 8d f0 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22464]
  08ac0	c7 85 18 6d ff
	ff 47 0a 00 00	 mov	 DWORD PTR $T314[ebp], 2631 ; 00000a47H
  08aca	c7 85 1c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T314[ebp+4], 0
  08ad4	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  08ad9	c6 45 fc f9	 mov	 BYTE PTR __$EHRec$[ebp+8], 249 ; 000000f9H
  08add	8d 85 10 6d ff
	ff		 lea	 eax, DWORD PTR $T313[ebp]
  08ae3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LHJHCFAG@COMPUTEX?5Co?4?0?5Ltd?4@
  08ae8	50		 push	 eax
  08ae9	8d 8d 10 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22496]
  08aef	c7 85 10 6d ff
	ff 4c 0a 00 00	 mov	 DWORD PTR $T313[ebp], 2636 ; 00000a4cH
  08af9	c7 85 14 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T313[ebp+4], 0
  08b03	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  08b08	c6 45 fc fa	 mov	 BYTE PTR __$EHRec$[ebp+8], 250 ; 000000faH
  08b0c	8d 85 08 6d ff
	ff		 lea	 eax, DWORD PTR $T312[ebp]
  08b12	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KBOGHGP@Broadcom?5Corp?4@
  08b17	50		 push	 eax
  08b18	8d 8d 30 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22528]
  08b1e	c7 85 08 6d ff
	ff 5c 0a 00 00	 mov	 DWORD PTR $T312[ebp], 2652 ; 00000a5cH
  08b28	c7 85 0c 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T312[ebp+4], 0
  08b32	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  08b37	c6 45 fc fb	 mov	 BYTE PTR __$EHRec$[ebp+8], 251 ; 000000fbH
  08b3b	c7 85 00 6d ff
	ff 6b 0a 00 00	 mov	 DWORD PTR $T311[ebp], 2667 ; 00000a6bH
  08b45	c7 85 04 6d ff
	ff 00 00 00 00	 mov	 DWORD PTR $T311[ebp+4], 0
  08b4f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IJFMHNNO@Green?5House?5Co?4?0?5Ltd?4@
  08b54	8d 85 00 6d ff
	ff		 lea	 eax, DWORD PTR $T311[ebp]
  08b5a	50		 push	 eax
  08b5b	8d 8d 50 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22560]
  08b61	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  08b66	c6 45 fc fc	 mov	 BYTE PTR __$EHRec$[ebp+8], 252 ; 000000fcH
  08b6a	8d 85 f8 6c ff
	ff		 lea	 eax, DWORD PTR $T310[ebp]
  08b70	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BLIFGEAH@Japan?5Aviation?5Electronics?5Indu@
  08b75	50		 push	 eax
  08b76	8d 8d 70 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22592]
  08b7c	c7 85 f8 6c ff
	ff 8e 0a 00 00	 mov	 DWORD PTR $T310[ebp], 2702 ; 00000a8eH
  08b86	c7 85 fc 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T310[ebp+4], 0
  08b90	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  08b95	c6 45 fc fd	 mov	 BYTE PTR __$EHRec$[ebp+8], 253 ; 000000fdH
  08b99	8d 85 f0 6c ff
	ff		 lea	 eax, DWORD PTR $T309[ebp]
  08b9f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IKBKKFPF@Rohde?5?$CG?5Schwarz?5GmbH?5?$CG?5Co?4?5KG@
  08ba4	50		 push	 eax
  08ba5	8d 8d 90 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22624]
  08bab	c7 85 f0 6c ff
	ff ad 0a 00 00	 mov	 DWORD PTR $T309[ebp], 2733 ; 00000aadH
  08bb5	c7 85 f4 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T309[ebp+4], 0
  08bbf	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  08bc4	c6 45 fc fe	 mov	 BYTE PTR __$EHRec$[ebp+8], 254 ; 000000feH
  08bc8	8d 85 e8 6c ff
	ff		 lea	 eax, DWORD PTR $T308[ebp]
  08bce	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MFIELINC@Allion?5Labs?0?5Inc?4@
  08bd3	50		 push	 eax
  08bd4	8d 8d b0 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22656]
  08bda	c7 85 e8 6c ff
	ff e3 0a 00 00	 mov	 DWORD PTR $T308[ebp], 2787 ; 00000ae3H
  08be4	c7 85 ec 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T308[ebp+4], 0
  08bee	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  08bf3	c6 45 fc ff	 mov	 BYTE PTR __$EHRec$[ebp+8], 255 ; 000000ffH
  08bf7	8d 85 e0 6c ff
	ff		 lea	 eax, DWORD PTR $T307[ebp]
  08bfd	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HEOGBEPO@ASUSTek?5Computer?5Inc?4@
  08c02	50		 push	 eax
  08c03	8d 8d d0 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22688]
  08c09	c7 85 e0 6c ff
	ff 05 0b 00 00	 mov	 DWORD PTR $T307[ebp], 2821 ; 00000b05H
  08c13	c7 85 e4 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T307[ebp+4], 0
  08c1d	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  08c22	c7 45 fc 00 03
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 768 ; 00000300H
  08c29	8d 85 d8 6c ff
	ff		 lea	 eax, DWORD PTR $T306[ebp]
  08c2f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KKOFHFLP@Yokogawa?5Electric?5Corporation@
  08c34	50		 push	 eax
  08c35	8d 8d f0 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22720]
  08c3b	c7 85 d8 6c ff
	ff 21 0b 00 00	 mov	 DWORD PTR $T306[ebp], 2849 ; 00000b21H
  08c45	c7 85 dc 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T306[ebp+4], 0
  08c4f	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  08c54	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  08c58	8d 85 d0 6c ff
	ff		 lea	 eax, DWORD PTR $T305[ebp]
  08c5e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IGDJFEE@Pan?9Asia?5Electronics?5Co?4?0?5Ltd?4@
  08c63	50		 push	 eax
  08c64	8d 8d 10 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22752]
  08c6a	c7 85 d0 6c ff
	ff 23 0b 00 00	 mov	 DWORD PTR $T305[ebp], 2851 ; 00000b23H
  08c74	c7 85 d4 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T305[ebp+4], 0
  08c7e	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  08c83	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  08c87	8d 85 c8 6c ff
	ff		 lea	 eax, DWORD PTR $T304[ebp]
  08c8d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IFLMIMNA@Anritsu?5Corporation@
  08c92	50		 push	 eax
  08c93	8d 8d 30 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22784]
  08c99	c7 85 c8 6c ff
	ff 5b 0b 00 00	 mov	 DWORD PTR $T304[ebp], 2907 ; 00000b5bH
  08ca3	c7 85 cc 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T304[ebp+4], 0
  08cad	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  08cb2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  08cb6	8d 85 c0 6c ff
	ff		 lea	 eax, DWORD PTR $T303[ebp]
  08cbc	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DICOBJHO@Maxim?5Integrated?5Products@
  08cc1	50		 push	 eax
  08cc2	8d 8d 50 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22816]
  08cc8	c7 85 c0 6c ff
	ff 6a 0b 00 00	 mov	 DWORD PTR $T303[ebp], 2922 ; 00000b6aH
  08cd2	c7 85 c4 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T303[ebp+4], 0
  08cdc	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  08ce1	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  08ce5	c7 85 b8 6c ff
	ff 95 0b 00 00	 mov	 DWORD PTR $T302[ebp], 2965 ; 00000b95H
  08cef	c7 85 bc 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T302[ebp+4], 0
  08cf9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DBGBIANO@ASIX?5Electronics?5Corporation@
  08cfe	8d 85 b8 6c ff
	ff		 lea	 eax, DWORD PTR $T302[ebp]
  08d04	50		 push	 eax
  08d05	8d 8d 70 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22848]
  08d0b	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  08d10	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  08d14	8d 85 b0 6c ff
	ff		 lea	 eax, DWORD PTR $T301[ebp]
  08d1a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PGGKPFEM@O2Micro?0?5Inc?4@
  08d1f	50		 push	 eax
  08d20	8d 8d 90 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22880]
  08d26	c7 85 b0 6c ff
	ff 97 0b 00 00	 mov	 DWORD PTR $T301[ebp], 2967 ; 00000b97H
  08d30	c7 85 b4 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T301[ebp+4], 0
  08d3a	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  08d3f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  08d43	8d 85 a8 6c ff
	ff		 lea	 eax, DWORD PTR $T300[ebp]
  08d49	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JGDEFBDO@Murata?5Manufacturing?5Co?4?0?5Ltd?4@
  08d4e	50		 push	 eax
  08d4f	8d 8d b0 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22912]
  08d55	c7 85 a8 6c ff
	ff b5 0b 00 00	 mov	 DWORD PTR $T300[ebp], 2997 ; 00000bb5H
  08d5f	c7 85 ac 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T300[ebp+4], 0
  08d69	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  08d6e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  08d72	8d 85 a0 6c ff
	ff		 lea	 eax, DWORD PTR $T299[ebp]
  08d78	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PKPGHPEE@Seagate?5Technology?5LLC@
  08d7d	50		 push	 eax
  08d7e	8d 8d d0 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22944]
  08d84	c7 85 a0 6c ff
	ff c2 0b 00 00	 mov	 DWORD PTR $T299[ebp], 3010 ; 00000bc2H
  08d8e	c7 85 a4 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T299[ebp+4], 0
  08d98	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  08d9d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  08da1	8d 85 98 6c ff
	ff		 lea	 eax, DWORD PTR $T298[ebp]
  08da7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OODBLDMG@Realtek?5Semiconductor?5Corp?4@
  08dac	50		 push	 eax
  08dad	8d 8d f0 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22976]
  08db3	c7 85 98 6c ff
	ff da 0b 00 00	 mov	 DWORD PTR $T298[ebp], 3034 ; 00000bdaH
  08dbd	c7 85 9c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T298[ebp+4], 0
  08dc7	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  08dcc	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  08dd0	8d 85 90 6c ff
	ff		 lea	 eax, DWORD PTR $T297[ebp]
  08dd6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PBGCMNLB@Ericsson?5AB@
  08ddb	50		 push	 eax
  08ddc	8d 8d 10 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23008]
  08de2	c7 85 90 6c ff
	ff db 0b 00 00	 mov	 DWORD PTR $T297[ebp], 3035 ; 00000bdbH
  08dec	c7 85 94 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T297[ebp+4], 0
  08df6	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  08dfb	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  08dff	8d 85 88 6c ff
	ff		 lea	 eax, DWORD PTR $T296[ebp]
  08e05	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GAPKJOJF@Elka?5International?5Ltd?4@
  08e0a	50		 push	 eax
  08e0b	8d 8d 30 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23040]
  08e11	c7 85 88 6c ff
	ff e4 0b 00 00	 mov	 DWORD PTR $T296[ebp], 3044 ; 00000be4H
  08e1b	c7 85 8c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T296[ebp+4], 0
  08e25	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  08e2a	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  08e2e	8d 85 80 6c ff
	ff		 lea	 eax, DWORD PTR $T295[ebp]
  08e34	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BDCJOHPC@Taiyo?5Yuden?5Co?4?0?5Ltd?4@
  08e39	50		 push	 eax
  08e3a	8d 8d 50 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23072]
  08e40	c7 85 80 6c ff
	ff 24 0c 00 00	 mov	 DWORD PTR $T295[ebp], 3108 ; 00000c24H
  08e4a	c7 85 84 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T295[ebp+4], 0
  08e54	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  08e59	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  08e5d	8d 85 78 6c ff
	ff		 lea	 eax, DWORD PTR $T294[ebp]
  08e63	68 00 00 00 00	 push	 OFFSET ??_C@_08EDJBOCE@Aeroflex@
  08e68	50		 push	 eax
  08e69	8d 8d 70 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23104]
  08e6f	c7 85 78 6c ff
	ff 39 0c 00 00	 mov	 DWORD PTR $T294[ebp], 3129 ; 00000c39H
  08e79	c7 85 7c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T294[ebp+4], 0
  08e83	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  08e88	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  08e8c	c7 85 70 6c ff
	ff 3c 0c 00 00	 mov	 DWORD PTR $T293[ebp], 3132 ; 00000c3cH
  08e96	c7 85 74 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T293[ebp+4], 0
  08ea0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IPNFABII@Radius?5Co?4?0?5Ltd?4@
  08ea5	8d 85 70 6c ff
	ff		 lea	 eax, DWORD PTR $T293[ebp]
  08eab	50		 push	 eax
  08eac	8d 8d 90 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23136]
  08eb2	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  08eb7	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  08ebb	8d 85 68 6c ff
	ff		 lea	 eax, DWORD PTR $T292[ebp]
  08ec1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IIBBHDLP@Sonix?5Technology?5Co?4?0?5Ltd?4@
  08ec6	50		 push	 eax
  08ec7	8d 8d b0 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23168]
  08ecd	c7 85 68 6c ff
	ff 45 0c 00 00	 mov	 DWORD PTR $T292[ebp], 3141 ; 00000c45H
  08ed7	c7 85 6c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T292[ebp+4], 0
  08ee1	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  08ee6	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  08eea	8d 85 60 6c ff
	ff		 lea	 eax, DWORD PTR $T291[ebp]
  08ef0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NFHHHBFN@Billion?5Bright?5?$CIHK?$CJ?5Corporation@
  08ef5	50		 push	 eax
  08ef6	8d 8d d0 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23200]
  08efc	c7 85 60 6c ff
	ff 56 0c 00 00	 mov	 DWORD PTR $T291[ebp], 3158 ; 00000c56H
  08f06	c7 85 64 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T291[ebp+4], 0
  08f10	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  08f15	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  08f19	8d 85 58 6c ff
	ff		 lea	 eax, DWORD PTR $T290[ebp]
  08f1f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KMAKLJKD@Dong?5Guan?5Shinko?5Wire?5Co?4?0?5Ltd?4@
  08f24	50		 push	 eax
  08f25	8d 8d f0 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23232]
  08f2b	c7 85 58 6c ff
	ff 59 0c 00 00	 mov	 DWORD PTR $T290[ebp], 3161 ; 00000c59H
  08f35	c7 85 5c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T290[ebp+4], 0
  08f3f	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  08f44	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  08f48	8d 85 50 6c ff
	ff		 lea	 eax, DWORD PTR $T289[ebp]
  08f4e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FHGKBINA@Chant?5Sincere?5Co?4?0?5Ltd@
  08f53	50		 push	 eax
  08f54	8d 8d 10 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23264]
  08f5a	c7 85 50 6c ff
	ff 62 0c 00 00	 mov	 DWORD PTR $T289[ebp], 3170 ; 00000c62H
  08f64	c7 85 54 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T289[ebp+4], 0
  08f6e	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  08f73	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  08f77	8d 85 48 6c ff
	ff		 lea	 eax, DWORD PTR $T288[ebp]
  08f7d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KANEMGNF@Whanam?5Electronics?5Co?4?0?5Ltd?4@
  08f82	50		 push	 eax
  08f83	8d 8d 30 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23296]
  08f89	c7 85 48 6c ff
	ff 68 0c 00 00	 mov	 DWORD PTR $T288[ebp], 3176 ; 00000c68H
  08f93	c7 85 4c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T288[ebp+4], 0
  08f9d	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  08fa2	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  08fa6	8d 85 40 6c ff
	ff		 lea	 eax, DWORD PTR $T287[ebp]
  08fac	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PNHCHLDH@Solid?5State?5System?5Co?4?0?5Ltd?4@
  08fb1	50		 push	 eax
  08fb2	8d 8d 50 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23328]
  08fb8	c7 85 40 6c ff
	ff 76 0c 00 00	 mov	 DWORD PTR $T287[ebp], 3190 ; 00000c76H
  08fc2	c7 85 44 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T287[ebp+4], 0
  08fcc	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  08fd1	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  08fd5	8d 85 38 6c ff
	ff		 lea	 eax, DWORD PTR $T286[ebp]
  08fdb	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KPNGPOOH@Honda?5Tsushin?5Kogyo?5Co?4?0?5Ltd@
  08fe0	50		 push	 eax
  08fe1	8d 8d 70 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23360]
  08fe7	c7 85 38 6c ff
	ff 89 0c 00 00	 mov	 DWORD PTR $T286[ebp], 3209 ; 00000c89H
  08ff1	c7 85 3c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T286[ebp+4], 0
  08ffb	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  09000	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  09004	8d 85 30 6c ff
	ff		 lea	 eax, DWORD PTR $T285[ebp]
  0900a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DKFGFGHA@Singatron?5Enterprise?5Co?4?5Ltd?4@
  0900f	50		 push	 eax
  09010	8d 8d 90 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23392]
  09016	c7 85 30 6c ff
	ff b7 0c 00 00	 mov	 DWORD PTR $T285[ebp], 3255 ; 00000cb7H
  09020	c7 85 34 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T285[ebp+4], 0
  0902a	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0902f	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  09033	c7 85 28 6c ff
	ff bf 0c 00 00	 mov	 DWORD PTR $T284[ebp], 3263 ; 00000cbfH
  0903d	c7 85 2c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T284[ebp+4], 0
  09047	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KHNEOKDK@Union?5Genius?5Computer?5Co?4?0?5Ltd@
  0904c	8d 85 28 6c ff
	ff		 lea	 eax, DWORD PTR $T284[ebp]
  09052	50		 push	 eax
  09053	8d 8d b0 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23424]
  09059	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  0905e	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  09062	8d 85 20 6c ff
	ff		 lea	 eax, DWORD PTR $T283[ebp]
  09068	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NGPEIKDH@emsys?5Embedded?5Systems?5GmbH@
  0906d	50		 push	 eax
  0906e	8d 8d d0 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23456]
  09074	c7 85 20 6c ff
	ff c4 0c 00 00	 mov	 DWORD PTR $T283[ebp], 3268 ; 00000cc4H
  0907e	c7 85 24 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T283[ebp+4], 0
  09088	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0908d	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  09091	8d 85 18 6c ff
	ff		 lea	 eax, DWORD PTR $T282[ebp]
  09097	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JMHKNMDG@Amphenol?5Corporation@
  0909c	50		 push	 eax
  0909d	8d 8d f0 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23488]
  090a3	c7 85 18 6c ff
	ff ca 0c 00 00	 mov	 DWORD PTR $T282[ebp], 3274 ; 00000ccaH
  090ad	c7 85 1c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T282[ebp+4], 0
  090b7	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  090bc	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  090c0	8d 85 10 6c ff
	ff		 lea	 eax, DWORD PTR $T281[ebp]
  090c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ECMAKMHG@Intel?5Corporation@
  090cb	50		 push	 eax
  090cc	8d 8d 10 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23520]
  090d2	c7 85 10 6c ff
	ff 86 80 00 00	 mov	 DWORD PTR $T281[ebp], 32902 ; 00008086H
  090dc	c7 85 14 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T281[ebp+4], 0
  090e6	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  090eb	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  090ef	8d 85 08 6c ff
	ff		 lea	 eax, DWORD PTR $T280[ebp]
  090f5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OACAMJJG@Z?9Com?5INC?4@
  090fa	50		 push	 eax
  090fb	8d 8d 30 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23552]
  09101	c7 85 08 6c ff
	ff de 0c 00 00	 mov	 DWORD PTR $T280[ebp], 3294 ; 00000cdeH
  0910b	c7 85 0c 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T280[ebp+4], 0
  09115	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  0911a	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  0911e	8d 85 00 6c ff
	ff		 lea	 eax, DWORD PTR $T279[ebp]
  09124	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OOCFEMN@e?9CONN?5ELECTRONIC?5CO?4?0?5LTD?4@
  09129	50		 push	 eax
  0912a	8d 8d 50 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23584]
  09130	c7 85 00 6c ff
	ff f1 0c 00 00	 mov	 DWORD PTR $T279[ebp], 3313 ; 00000cf1H
  0913a	c7 85 04 6c ff
	ff 00 00 00 00	 mov	 DWORD PTR $T279[ebp+4], 0
  09144	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  09149	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0914d	8d 85 f8 6b ff
	ff		 lea	 eax, DWORD PTR $T278[ebp]
  09153	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KPNEJJKA@ENE?5Technology?5Inc?4@
  09158	50		 push	 eax
  09159	8d 8d 70 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23616]
  0915f	c7 85 f8 6b ff
	ff f2 0c 00 00	 mov	 DWORD PTR $T278[ebp], 3314 ; 00000cf2H
  09169	c7 85 fc 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T278[ebp+4], 0
  09173	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  09178	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0917c	8d 85 f0 6b ff
	ff		 lea	 eax, DWORD PTR $T277[ebp]
  09182	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDKBGBCG@NALTEC?0?5Inc?4@
  09187	50		 push	 eax
  09188	8d 8d 90 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23648]
  0918e	c7 85 f0 6b ff
	ff 17 0d 00 00	 mov	 DWORD PTR $T277[ebp], 3351 ; 00000d17H
  09198	c7 85 f4 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T277[ebp+4], 0
  091a2	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  091a7	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  091ab	8d 85 e8 6b ff
	ff		 lea	 eax, DWORD PTR $T276[ebp]
  091b1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MAHCGCHE@NF?5Corporation@
  091b6	50		 push	 eax
  091b7	8d 8d b0 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23680]
  091bd	c7 85 e8 6b ff
	ff 4a 0d 00 00	 mov	 DWORD PTR $T276[ebp], 3402 ; 00000d4aH
  091c7	c7 85 ec 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T276[ebp+4], 0
  091d1	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  091d6	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  091da	c7 85 e0 6b ff
	ff 4b 0d 00 00	 mov	 DWORD PTR $T275[ebp], 3403 ; 00000d4bH
  091e4	c7 85 e4 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T275[ebp+4], 0
  091ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KEPOILEK@Grape?5Systems?5Inc?4@
  091f3	8d 85 e0 6b ff
	ff		 lea	 eax, DWORD PTR $T275[ebp]
  091f9	50		 push	 eax
  091fa	8d 8d d0 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23712]
  09200	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  09205	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  09209	8d 85 d8 6b ff
	ff		 lea	 eax, DWORD PTR $T274[ebp]
  0920f	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DILBGHLF@MEILU?5ELECTRONICS?5?$CISHENZHEN?$CJ?5CO@
  09214	50		 push	 eax
  09215	8d 8d f0 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23744]
  0921b	c7 85 d8 6b ff
	ff 61 0d 00 00	 mov	 DWORD PTR $T274[ebp], 3425 ; 00000d61H
  09225	c7 85 dc 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T274[ebp+4], 0
  0922f	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  09234	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  09238	8d 85 d0 6b ff
	ff		 lea	 eax, DWORD PTR $T273[ebp]
  0923e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JNDMIFOJ@Hirakawa?5Hewtech?5Corp?4@
  09243	50		 push	 eax
  09244	8d 8d 10 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23776]
  0924a	c7 85 d0 6b ff
	ff 71 0d 00 00	 mov	 DWORD PTR $T273[ebp], 3441 ; 00000d71H
  09254	c7 85 d4 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T273[ebp+4], 0
  0925e	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  09263	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  09267	8d 85 c8 6b ff
	ff		 lea	 eax, DWORD PTR $T272[ebp]
  0926d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DEKDBPDL@Taiwan?5Line?5Tek?5Electronic?5Co?4?0@
  09272	50		 push	 eax
  09273	8d 8d 30 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23808]
  09279	c7 85 c8 6b ff
	ff 7c 0d 00 00	 mov	 DWORD PTR $T272[ebp], 3452 ; 00000d7cH
  09283	c7 85 cc 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T272[ebp+4], 0
  0928d	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  09292	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  09296	8d 85 c0 6b ff
	ff		 lea	 eax, DWORD PTR $T271[ebp]
  0929c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ICKBMN@C?9MEDIA?5ELECTRONICS?5INC?4@
  092a1	50		 push	 eax
  092a2	8d 8d 50 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23840]
  092a8	c7 85 c0 6b ff
	ff 8c 0d 00 00	 mov	 DWORD PTR $T271[ebp], 3468 ; 00000d8cH
  092b2	c7 85 c4 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T271[ebp+4], 0
  092bc	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  092c1	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
  092c5	8d 85 b8 6b ff
	ff		 lea	 eax, DWORD PTR $T270[ebp]
  092cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CBEHKKIA@Sure?9Fire?5Electrical?5Corporatio@
  092d0	50		 push	 eax
  092d1	8d 8d 70 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23872]
  092d7	c7 85 b8 6b ff
	ff 90 0d 00 00	 mov	 DWORD PTR $T270[ebp], 3472 ; 00000d90H
  092e1	c7 85 bc 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T270[ebp+4], 0
  092eb	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  092f0	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
  092f4	8d 85 b0 6b ff
	ff		 lea	 eax, DWORD PTR $T269[ebp]
  092fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MANDAFLC@Sanwa?5Supply?5Inc?4@
  092ff	50		 push	 eax
  09300	8d 8d 90 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23904]
  09306	c7 85 b0 6b ff
	ff 9d 0d 00 00	 mov	 DWORD PTR $T269[ebp], 3485 ; 00000d9dH
  09310	c7 85 b4 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T269[ebp+4], 0
  0931a	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0931f	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  09323	8d 85 a8 6b ff
	ff		 lea	 eax, DWORD PTR $T268[ebp]
  09329	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BBFDLJEL@IOGEAR?0?5Inc?4@
  0932e	50		 push	 eax
  0932f	8d 8d b0 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23936]
  09335	c7 85 a8 6b ff
	ff a7 0d 00 00	 mov	 DWORD PTR $T268[ebp], 3495 ; 00000da7H
  0933f	c7 85 ac 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T268[ebp+4], 0
  09349	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  0934e	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  09352	8d 85 a0 6b ff
	ff		 lea	 eax, DWORD PTR $T267[ebp]
  09358	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LDGCJJON@Micro?9Star?5International?5Co?4?0?5L@
  0935d	50		 push	 eax
  0935e	8d 8d d0 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23968]
  09364	c7 85 a0 6b ff
	ff b0 0d 00 00	 mov	 DWORD PTR $T267[ebp], 3504 ; 00000db0H
  0936e	c7 85 a4 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T267[ebp+4], 0
  09378	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0937d	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  09381	c7 85 98 6b ff
	ff b9 0d 00 00	 mov	 DWORD PTR $T266[ebp], 3513 ; 00000db9H
  0938b	c7 85 9c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T266[ebp+4], 0
  09395	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PGMKHMFI@Knowles?5Electronics?5LLC@
  0939a	8d 85 98 6b ff
	ff		 lea	 eax, DWORD PTR $T266[ebp]
  093a0	50		 push	 eax
  093a1	8d 8d f0 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24000]
  093a7	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  093ac	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  093b0	8d 85 90 6b ff
	ff		 lea	 eax, DWORD PTR $T265[ebp]
  093b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MEJNGPFO@Contek?5Electronics?5Co?4?0?5Ltd?4@
  093bb	50		 push	 eax
  093bc	8d 8d 10 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24032]
  093c2	c7 85 90 6b ff
	ff d1 0d 00 00	 mov	 DWORD PTR $T265[ebp], 3537 ; 00000dd1H
  093cc	c7 85 94 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T265[ebp+4], 0
  093d6	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  093db	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  093df	8d 85 88 6b ff
	ff		 lea	 eax, DWORD PTR $T264[ebp]
  093e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JAOPMIJP@Custom?5Engineering?5SPA@
  093ea	50		 push	 eax
  093eb	8d 8d 30 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24064]
  093f1	c7 85 88 6b ff
	ff d4 0d 00 00	 mov	 DWORD PTR $T264[ebp], 3540 ; 00000dd4H
  093fb	c7 85 8c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T264[ebp+4], 0
  09405	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0940a	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  0940e	8d 85 80 6b ff
	ff		 lea	 eax, DWORD PTR $T263[ebp]
  09414	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@BNIAIBOP@Smart?5Modular?5Technologies?0?5Inc@
  09419	50		 push	 eax
  0941a	8d 8d 50 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24096]
  09420	c7 85 80 6b ff
	ff 39 0e 00 00	 mov	 DWORD PTR $T263[ebp], 3641 ; 00000e39H
  0942a	c7 85 84 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T263[ebp+4], 0
  09434	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  09439	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  0943d	8d 85 78 6b ff
	ff		 lea	 eax, DWORD PTR $T262[ebp]
  09443	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DKLMDFEK@Neltron?5Industrial?5Co?4?0?5Ltd?4@
  09448	50		 push	 eax
  09449	8d 8d 70 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24128]
  0944f	c7 85 78 6b ff
	ff 5d 0e 00 00	 mov	 DWORD PTR $T262[ebp], 3677 ; 00000e5dH
  09459	c7 85 7c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T262[ebp+4], 0
  09463	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  09468	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  0946c	8d 85 70 6b ff
	ff		 lea	 eax, DWORD PTR $T261[ebp]
  09472	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PNJNPPHF@Megawin?5Technology?5Co?4?0?5Ltd?4@
  09477	50		 push	 eax
  09478	8d 8d 90 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24160]
  0947e	c7 85 70 6b ff
	ff 6a 0e 00 00	 mov	 DWORD PTR $T261[ebp], 3690 ; 00000e6aH
  09488	c7 85 74 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T261[ebp+4], 0
  09492	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  09497	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  0949b	8d 85 68 6b ff
	ff		 lea	 eax, DWORD PTR $T260[ebp]
  094a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@FIEIALAE@Hsi?9Chin?5Electronics?5Co?4?0?5Ltd?4@
  094a6	50		 push	 eax
  094a7	8d 8d b0 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24192]
  094ad	c7 85 68 6b ff
	ff 72 0e 00 00	 mov	 DWORD PTR $T260[ebp], 3698 ; 00000e72H
  094b7	c7 85 6c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T260[ebp+4], 0
  094c1	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  094c6	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  094ca	8d 85 60 6b ff
	ff		 lea	 eax, DWORD PTR $T259[ebp]
  094d0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DBHJNIK@MediaTek?5Inc?4@
  094d5	50		 push	 eax
  094d6	8d 8d d0 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24224]
  094dc	c7 85 60 6b ff
	ff 8d 0e 00 00	 mov	 DWORD PTR $T259[ebp], 3725 ; 00000e8dH
  094e6	c7 85 64 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T259[ebp+4], 0
  094f0	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  094f5	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+8], 48 ; 00000030H
  094f9	8d 85 58 6b ff
	ff		 lea	 eax, DWORD PTR $T258[ebp]
  094ff	51		 push	 ecx
  09500	50		 push	 eax
  09501	8d 8d f0 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24256]
  09507	c7 85 58 6b ff
	ff 90 0e 00 00	 mov	 DWORD PTR $T258[ebp], 3728 ; 00000e90H
  09511	c7 85 5c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T258[ebp+4], 0
  0951b	e8 00 00 00 00	 call	 ??$?0_KAAY03$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY03$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[4],0>
  09520	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
  09524	c7 85 50 6b ff
	ff a0 0e 00 00	 mov	 DWORD PTR $T257[ebp], 3744 ; 00000ea0H
  0952e	c7 85 54 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T257[ebp+4], 0
  09538	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LFNPLID@Ours?5Technology?5Inc?4@
  0953d	8d 85 50 6b ff
	ff		 lea	 eax, DWORD PTR $T257[ebp]
  09543	50		 push	 eax
  09544	8d 8d 10 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24288]
  0954a	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0954f	c6 45 fc 32	 mov	 BYTE PTR __$EHRec$[ebp+8], 50 ; 00000032H
  09553	8d 85 48 6b ff
	ff		 lea	 eax, DWORD PTR $T256[ebp]
  09559	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MFMAEIPG@MSL?5Enterprises?5Corp?4@
  0955e	50		 push	 eax
  0955f	8d 8d 30 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24320]
  09565	c7 85 48 6b ff
	ff a7 0e 00 00	 mov	 DWORD PTR $T256[ebp], 3751 ; 00000ea7H
  0956f	c7 85 4c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T256[ebp+4], 0
  09579	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0957e	c6 45 fc 33	 mov	 BYTE PTR __$EHRec$[ebp+8], 51 ; 00000033H
  09582	8d 85 40 6b ff
	ff		 lea	 eax, DWORD PTR $T255[ebp]
  09588	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FFOINCNP@Y?9S?5ELECTRONIC?5CO?4?0?5LTD?4@
  0958d	50		 push	 eax
  0958e	8d 8d 50 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24352]
  09594	c7 85 40 6b ff
	ff b2 0e 00 00	 mov	 DWORD PTR $T255[ebp], 3762 ; 00000eb2H
  0959e	c7 85 44 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T255[ebp+4], 0
  095a8	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  095ad	c6 45 fc 34	 mov	 BYTE PTR __$EHRec$[ebp+8], 52 ; 00000034H
  095b1	8d 85 38 6b ff
	ff		 lea	 eax, DWORD PTR $T254[ebp]
  095b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EEJFEJAC@Sweetray?5Industrial?5Ltd?4@
  095bc	50		 push	 eax
  095bd	8d 8d 70 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24384]
  095c3	c7 85 38 6b ff
	ff c2 0e 00 00	 mov	 DWORD PTR $T254[ebp], 3778 ; 00000ec2H
  095cd	c7 85 3c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T254[ebp+4], 0
  095d7	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  095dc	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+8], 53 ; 00000035H
  095e0	8d 85 30 6b ff
	ff		 lea	 eax, DWORD PTR $T253[ebp]
  095e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NLMJJEGP@Axell?5Corporation@
  095eb	50		 push	 eax
  095ec	8d 8d 90 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24416]
  095f2	c7 85 30 6b ff
	ff c3 0e 00 00	 mov	 DWORD PTR $T253[ebp], 3779 ; 00000ec3H
  095fc	c7 85 34 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T253[ebp+4], 0
  09606	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0960b	c6 45 fc 36	 mov	 BYTE PTR __$EHRec$[ebp+8], 54 ; 00000036H
  0960f	8d 85 28 6b ff
	ff		 lea	 eax, DWORD PTR $T252[ebp]
  09615	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@HGLIFDP@InnoVISION?5Multimedia?5Limited@
  0961a	50		 push	 eax
  0961b	8d 8d b0 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24448]
  09621	c7 85 28 6b ff
	ff c6 0e 00 00	 mov	 DWORD PTR $T252[ebp], 3782 ; 00000ec6H
  0962b	c7 85 2c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T252[ebp+4], 0
  09635	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0963a	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H
  0963e	8d 85 20 6b ff
	ff		 lea	 eax, DWORD PTR $T251[ebp]
  09644	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LAJGACMM@TaiSol?5Electronics?5Co?4?0?5Ltd?4@
  09649	50		 push	 eax
  0964a	8d 8d d0 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24480]
  09650	c7 85 20 6b ff
	ff ce 0e 00 00	 mov	 DWORD PTR $T251[ebp], 3790 ; 00000eceH
  0965a	c7 85 24 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T251[ebp+4], 0
  09664	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  09669	c6 45 fc 38	 mov	 BYTE PTR __$EHRec$[ebp+8], 56 ; 00000038H
  0966d	8d 85 18 6b ff
	ff		 lea	 eax, DWORD PTR $T250[ebp]
  09673	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OLFMJOLO@Sunrich?5Technology?5?$CIH?4K?4?$CJ?5Ltd?4@
  09678	50		 push	 eax
  09679	8d 8d f0 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24512]
  0967f	c7 85 18 6b ff
	ff e4 0e 00 00	 mov	 DWORD PTR $T250[ebp], 3812 ; 00000ee4H
  09689	c7 85 1c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T250[ebp+4], 0
  09693	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  09698	c6 45 fc 39	 mov	 BYTE PTR __$EHRec$[ebp+8], 57 ; 00000039H
  0969c	8d 85 10 6b ff
	ff		 lea	 eax, DWORD PTR $T249[ebp]
  096a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LHKAEIDJ@CSL?5Wire?5?$CG?5Plug?5?$CIShen?5Zhen?$CJ?5Com@
  096a7	50		 push	 eax
  096a8	8d 8d 10 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24544]
  096ae	c7 85 10 6b ff
	ff 08 0f 00 00	 mov	 DWORD PTR $T249[ebp], 3848 ; 00000f08H
  096b8	c7 85 14 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T249[ebp+4], 0
  096c2	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  096c7	c6 45 fc 3a	 mov	 BYTE PTR __$EHRec$[ebp+8], 58 ; 0000003aH
  096cb	c7 85 08 6b ff
	ff 1c 0f 00 00	 mov	 DWORD PTR $T248[ebp], 3868 ; 00000f1cH
  096d5	c7 85 0c 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T248[ebp+4], 0
  096df	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BFCEICOB@Funai?5Electric?5Co?4?0?5Ltd?4@
  096e4	8d 85 08 6b ff
	ff		 lea	 eax, DWORD PTR $T248[ebp]
  096ea	50		 push	 eax
  096eb	8d 8d 30 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24576]
  096f1	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  096f6	c6 45 fc 3b	 mov	 BYTE PTR __$EHRec$[ebp+8], 59 ; 0000003bH
  096fa	8d 85 00 6b ff
	ff		 lea	 eax, DWORD PTR $T247[ebp]
  09700	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNIPFKPA@IOI?5Technology?5Corporation@
  09705	50		 push	 eax
  09706	8d 8d 50 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24608]
  0970c	c7 85 00 6b ff
	ff 21 0f 00 00	 mov	 DWORD PTR $T247[ebp], 3873 ; 00000f21H
  09716	c7 85 04 6b ff
	ff 00 00 00 00	 mov	 DWORD PTR $T247[ebp+4], 0
  09720	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  09725	c6 45 fc 3c	 mov	 BYTE PTR __$EHRec$[ebp+8], 60 ; 0000003cH
  09729	8d 85 f8 6a ff
	ff		 lea	 eax, DWORD PTR $T246[ebp]
  0972f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKBEBDIB@YFC?9BonEagle?5Electric?5Co?4?0?5Ltd?4@
  09734	50		 push	 eax
  09735	8d 8d 70 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24640]
  0973b	c7 85 f8 6a ff
	ff 32 0f 00 00	 mov	 DWORD PTR $T246[ebp], 3890 ; 00000f32H
  09745	c7 85 fc 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T246[ebp+4], 0
  0974f	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  09754	c6 45 fc 3d	 mov	 BYTE PTR __$EHRec$[ebp+8], 61 ; 0000003dH
  09758	8d 85 f0 6a ff
	ff		 lea	 eax, DWORD PTR $T245[ebp]
  0975e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KJGCCIGG@Nien?9Yi?5Industrial?5Corp?4@
  09763	50		 push	 eax
  09764	8d 8d 90 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24672]
  0976a	c7 85 f0 6a ff
	ff 38 0f 00 00	 mov	 DWORD PTR $T245[ebp], 3896 ; 00000f38H
  09774	c7 85 f4 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T245[ebp+4], 0
  0977e	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  09783	c6 45 fc 3e	 mov	 BYTE PTR __$EHRec$[ebp+8], 62 ; 0000003eH
  09787	8d 85 e8 6a ff
	ff		 lea	 eax, DWORD PTR $T244[ebp]
  0978d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PCHAGLHO@WORLDWIDE?5CABLE?5OPTO?5CORP?4@
  09792	50		 push	 eax
  09793	8d 8d b0 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24704]
  09799	c7 85 e8 6a ff
	ff 4c 0f 00 00	 mov	 DWORD PTR $T244[ebp], 3916 ; 00000f4cH
  097a3	c7 85 ec 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T244[ebp+4], 0
  097ad	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  097b2	c6 45 fc 3f	 mov	 BYTE PTR __$EHRec$[ebp+8], 63 ; 0000003fH
  097b6	8d 85 e0 6a ff
	ff		 lea	 eax, DWORD PTR $T243[ebp]
  097bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JJBCDJBC@Taiyo?5Cable?5?$CIDongguan?$CJ?5Co?4?5Ltd?4@
  097c1	50		 push	 eax
  097c2	8d 8d d0 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24736]
  097c8	c7 85 e0 6a ff
	ff 53 0f 00 00	 mov	 DWORD PTR $T243[ebp], 3923 ; 00000f53H
  097d2	c7 85 e4 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T243[ebp+4], 0
  097dc	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  097e1	c6 45 fc 40	 mov	 BYTE PTR __$EHRec$[ebp+8], 64 ; 00000040H
  097e5	8d 85 d8 6a ff
	ff		 lea	 eax, DWORD PTR $T242[ebp]
  097eb	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GLJCMOOM@Kawai?5Musical?5Instruments?5Mfg?4?5@
  097f0	50		 push	 eax
  097f1	8d 8d f0 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24768]
  097f7	c7 85 d8 6a ff
	ff 54 0f 00 00	 mov	 DWORD PTR $T242[ebp], 3924 ; 00000f54H
  09801	c7 85 dc 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T242[ebp+4], 0
  0980b	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  09810	c6 45 fc 41	 mov	 BYTE PTR __$EHRec$[ebp+8], 65 ; 00000041H
  09814	8d 85 d0 6a ff
	ff		 lea	 eax, DWORD PTR $T241[ebp]
  0981a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CHAEBCC@UQUEST?0?5LTD?4@
  0981f	50		 push	 eax
  09820	8d 8d 10 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24800]
  09826	c7 85 d0 6a ff
	ff 68 0f 00 00	 mov	 DWORD PTR $T241[ebp], 3944 ; 00000f68H
  09830	c7 85 d4 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T241[ebp+4], 0
  0983a	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  0983f	c6 45 fc 42	 mov	 BYTE PTR __$EHRec$[ebp+8], 66 ; 00000042H
  09843	8d 85 10 67 ff
	ff		 lea	 eax, DWORD PTR $T121[ebp]
  09849	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NPCAKEK@CviLux?5Corporation@
  0984e	50		 push	 eax
  0984f	8d 8d 30 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24832]
  09855	c7 85 10 67 ff
	ff 97 0f 00 00	 mov	 DWORD PTR $T121[ebp], 3991 ; 00000f97H
  0985f	c7 85 14 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T121[ebp+4], 0
  09869	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0986e	c6 45 fc 43	 mov	 BYTE PTR __$EHRec$[ebp+8], 67 ; 00000043H
  09872	c7 85 c0 6a ff
	ff ce 0f 00 00	 mov	 DWORD PTR $T239[ebp], 4046 ; 00000fceH
  0987c	c7 85 c4 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T239[ebp+4], 0
  09886	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OGPLHBON@Sony?5Mobile?5Communications@
  0988b	8d 85 c0 6a ff
	ff		 lea	 eax, DWORD PTR $T239[ebp]
  09891	50		 push	 eax
  09892	8d 8d 50 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24864]
  09898	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0989d	c6 45 fc 44	 mov	 BYTE PTR __$EHRec$[ebp+8], 68 ; 00000044H
  098a1	8d 85 b8 6a ff
	ff		 lea	 eax, DWORD PTR $T238[ebp]
  098a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@MNOHKIGC@CHI?5SHING?5COMPUTER?5ACCESSORIES?5@
  098ac	50		 push	 eax
  098ad	8d 8d 70 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24896]
  098b3	c7 85 b8 6a ff
	ff f7 0f 00 00	 mov	 DWORD PTR $T238[ebp], 4087 ; 00000ff7H
  098bd	c7 85 bc 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T238[ebp+4], 0
  098c7	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  098cc	c6 45 fc 45	 mov	 BYTE PTR __$EHRec$[ebp+8], 69 ; 00000045H
  098d0	8d 85 b0 6a ff
	ff		 lea	 eax, DWORD PTR $T237[ebp]
  098d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNNKEBO@Speed?5Tech?5Corp?4@
  098db	50		 push	 eax
  098dc	8d 8d 90 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24928]
  098e2	c7 85 b0 6a ff
	ff 00 10 00 00	 mov	 DWORD PTR $T237[ebp], 4096 ; 00001000H
  098ec	c7 85 b4 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T237[ebp+4], 0
  098f6	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  098fb	c6 45 fc 46	 mov	 BYTE PTR __$EHRec$[ebp+8], 70 ; 00000046H
  098ff	8d 85 a8 6a ff
	ff		 lea	 eax, DWORD PTR $T236[ebp]
  09905	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PPCAGGEP@LG?5Electronics?5Inc?4@
  0990a	50		 push	 eax
  0990b	8d 8d b0 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24960]
  09911	c7 85 a8 6a ff
	ff 04 10 00 00	 mov	 DWORD PTR $T236[ebp], 4100 ; 00001004H
  0991b	c7 85 ac 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T236[ebp+4], 0
  09925	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0992a	c6 45 fc 47	 mov	 BYTE PTR __$EHRec$[ebp+8], 71 ; 00000047H
  0992e	8d 85 a0 6a ff
	ff		 lea	 eax, DWORD PTR $T235[ebp]
  09934	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NLKKALNF@Apacer?5Technology?5Inc?4@
  09939	50		 push	 eax
  0993a	8d 8d d0 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24992]
  09940	c7 85 a0 6a ff
	ff 05 10 00 00	 mov	 DWORD PTR $T235[ebp], 4101 ; 00001005H
  0994a	c7 85 a4 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T235[ebp+4], 0
  09954	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  09959	c6 45 fc 48	 mov	 BYTE PTR __$EHRec$[ebp+8], 72 ; 00000048H
  0995d	8d 85 98 6a ff
	ff		 lea	 eax, DWORD PTR $T234[ebp]
  09963	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PLIKKMJN@Targus?5International?5LLC@
  09968	50		 push	 eax
  09969	8d 8d f0 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25024]
  0996f	c7 85 98 6a ff
	ff 48 10 00 00	 mov	 DWORD PTR $T234[ebp], 4168 ; 00001048H
  09979	c7 85 9c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T234[ebp+4], 0
  09983	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  09988	c6 45 fc 49	 mov	 BYTE PTR __$EHRec$[ebp+8], 73 ; 00000049H
  0998c	8d 85 90 6a ff
	ff		 lea	 eax, DWORD PTR $T233[ebp]
  09992	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NOLLDIAK@AMCO?5TEC?5International?5Inc?4@
  09997	50		 push	 eax
  09998	8d 8d 10 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25056]
  0999e	c7 85 90 6a ff
	ff 4c 10 00 00	 mov	 DWORD PTR $T233[ebp], 4172 ; 0000104cH
  099a8	c7 85 94 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T233[ebp+4], 0
  099b2	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  099b7	c6 45 fc 4a	 mov	 BYTE PTR __$EHRec$[ebp+8], 74 ; 0000004aH
  099bb	8d 85 88 6a ff
	ff		 lea	 eax, DWORD PTR $T232[ebp]
  099c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MCAPDOMI@ON?5Semiconductor@
  099c6	50		 push	 eax
  099c7	8d 8d 30 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25088]
  099cd	c7 85 88 6a ff
	ff 57 10 00 00	 mov	 DWORD PTR $T232[ebp], 4183 ; 00001057H
  099d7	c7 85 8c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T232[ebp+4], 0
  099e1	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  099e6	c6 45 fc 4b	 mov	 BYTE PTR __$EHRec$[ebp+8], 75 ; 0000004bH
  099ea	8d 85 80 6a ff
	ff		 lea	 eax, DWORD PTR $T231[ebp]
  099f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@POPFAELO@Western?5Digital?0?5Branded@
  099f5	50		 push	 eax
  099f6	8d 8d 50 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25120]
  099fc	c7 85 80 6a ff
	ff 58 10 00 00	 mov	 DWORD PTR $T231[ebp], 4184 ; 00001058H
  09a06	c7 85 84 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T231[ebp+4], 0
  09a10	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  09a15	c6 45 fc 4c	 mov	 BYTE PTR __$EHRec$[ebp+8], 76 ; 0000004cH
  09a19	c7 85 78 6a ff
	ff 83 10 00 00	 mov	 DWORD PTR $T230[ebp], 4227 ; 00001083H
  09a23	c7 85 7c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T230[ebp+4], 0
  09a2d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GGINDOFM@CANON?5ELECTRONICS?5INC?4@
  09a32	8d 85 78 6a ff
	ff		 lea	 eax, DWORD PTR $T230[ebp]
  09a38	50		 push	 eax
  09a39	8d 8d 70 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25152]
  09a3f	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  09a44	c6 45 fc 4d	 mov	 BYTE PTR __$EHRec$[ebp+8], 77 ; 0000004dH
  09a48	8d 85 70 6a ff
	ff		 lea	 eax, DWORD PTR $T229[ebp]
  09a4e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HEECLKMJ@Grand?9tek?5Technology?5Co?4?0?5Ltd?4@
  09a53	50		 push	 eax
  09a54	8d 8d 90 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25184]
  09a5a	c7 85 70 6a ff
	ff 8b 10 00 00	 mov	 DWORD PTR $T229[ebp], 4235 ; 0000108bH
  09a64	c7 85 74 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T229[ebp+4], 0
  09a6e	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  09a73	c6 45 fc 4e	 mov	 BYTE PTR __$EHRec$[ebp+8], 78 ; 0000004eH
  09a77	8d 85 68 6a ff
	ff		 lea	 eax, DWORD PTR $T228[ebp]
  09a7d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MMEHCLPH@Robert?5Bosch?5GmbH@
  09a82	50		 push	 eax
  09a83	8d 8d b0 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25216]
  09a89	c7 85 68 6a ff
	ff 8c 10 00 00	 mov	 DWORD PTR $T228[ebp], 4236 ; 0000108cH
  09a93	c7 85 6c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T228[ebp+4], 0
  09a9d	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  09aa2	c6 45 fc 4f	 mov	 BYTE PTR __$EHRec$[ebp+8], 79 ; 0000004fH
  09aa6	8d 85 60 6a ff
	ff		 lea	 eax, DWORD PTR $T227[ebp]
  09aac	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBGEKCBJ@Lotes?5Co?4?0?5Ltd?4@
  09ab1	50		 push	 eax
  09ab2	8d 8d d0 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25248]
  09ab8	c7 85 60 6a ff
	ff 8e 10 00 00	 mov	 DWORD PTR $T227[ebp], 4238 ; 0000108eH
  09ac2	c7 85 64 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T227[ebp+4], 0
  09acc	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  09ad1	c6 45 fc 50	 mov	 BYTE PTR __$EHRec$[ebp+8], 80 ; 00000050H
  09ad5	8d 85 58 6a ff
	ff		 lea	 eax, DWORD PTR $T226[ebp]
  09adb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MADBCNBC@Cables?5To?5Go@
  09ae0	50		 push	 eax
  09ae1	8d 8d f0 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25280]
  09ae7	c7 85 58 6a ff
	ff aa 10 00 00	 mov	 DWORD PTR $T226[ebp], 4266 ; 000010aaH
  09af1	c7 85 5c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T226[ebp+4], 0
  09afb	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  09b00	c6 45 fc 51	 mov	 BYTE PTR __$EHRec$[ebp+8], 81 ; 00000051H
  09b04	8d 85 50 6a ff
	ff		 lea	 eax, DWORD PTR $T225[ebp]
  09b0a	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@OABIDDLN@Universal?5Global?5Scientific?5Ind@
  09b0f	50		 push	 eax
  09b10	8d 8d 10 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25312]
  09b16	c7 85 50 6a ff
	ff ab 10 00 00	 mov	 DWORD PTR $T225[ebp], 4267 ; 000010abH
  09b20	c7 85 54 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T225[ebp+4], 0
  09b2a	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  09b2f	c6 45 fc 52	 mov	 BYTE PTR __$EHRec$[ebp+8], 82 ; 00000052H
  09b33	8d 85 48 6a ff
	ff		 lea	 eax, DWORD PTR $T224[ebp]
  09b39	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BEPCHFBK@Silicon?5Laboratories?0?5Inc?4@
  09b3e	50		 push	 eax
  09b3f	8d 8d 30 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25344]
  09b45	c7 85 48 6a ff
	ff c4 10 00 00	 mov	 DWORD PTR $T224[ebp], 4292 ; 000010c4H
  09b4f	c7 85 4c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T224[ebp+4], 0
  09b59	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  09b5e	c6 45 fc 53	 mov	 BYTE PTR __$EHRec$[ebp+8], 83 ; 00000053H
  09b62	8d 85 40 6a ff
	ff		 lea	 eax, DWORD PTR $T223[ebp]
  09b68	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BEMBIFEP@Kycon?5Inc?4@
  09b6d	50		 push	 eax
  09b6e	8d 8d 50 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25376]
  09b74	c7 85 40 6a ff
	ff cd 10 00 00	 mov	 DWORD PTR $T223[ebp], 4301 ; 000010cdH
  09b7e	c7 85 44 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T223[ebp+4], 0
  09b88	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  09b8d	c6 45 fc 54	 mov	 BYTE PTR __$EHRec$[ebp+8], 84 ; 00000054H
  09b91	8d 85 38 6a ff
	ff		 lea	 eax, DWORD PTR $T222[ebp]
  09b97	68 00 00 00 00	 push	 OFFSET ??_C@_09GOLPFLPD@Moxa?5Inc?4@
  09b9c	50		 push	 eax
  09b9d	8d 8d 70 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25408]
  09ba3	c7 85 38 6a ff
	ff 0a 11 00 00	 mov	 DWORD PTR $T222[ebp], 4362 ; 0000110aH
  09bad	c7 85 3c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T222[ebp+4], 0
  09bb7	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  09bbc	c6 45 fc 55	 mov	 BYTE PTR __$EHRec$[ebp+8], 85 ; 00000055H
  09bc0	c7 85 30 6a ff
	ff 12 11 00 00	 mov	 DWORD PTR $T221[ebp], 4370 ; 00001112H
  09bca	c7 85 34 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T221[ebp+4], 0
  09bd4	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NDHMOMGK@Golden?5Bright?5?$CISichuan?$CJ?5Electro@
  09bd9	8d 85 30 6a ff
	ff		 lea	 eax, DWORD PTR $T221[ebp]
  09bdf	50		 push	 eax
  09be0	8d 8d 90 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25440]
  09be6	e8 00 00 00 00	 call	 ??$?0_KAAY0DF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[53],0>
  09beb	c6 45 fc 56	 mov	 BYTE PTR __$EHRec$[ebp+8], 86 ; 00000056H
  09bef	8d 85 28 6a ff
	ff		 lea	 eax, DWORD PTR $T220[ebp]
  09bf5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DEMMBJPB@VSO?5ELECTRONICS?5CO?4?0?5LTD?4@
  09bfa	50		 push	 eax
  09bfb	8d 8d b0 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25472]
  09c01	c7 85 28 6a ff
	ff 1e 11 00 00	 mov	 DWORD PTR $T220[ebp], 4382 ; 0000111eH
  09c0b	c7 85 2c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T220[ebp+4], 0
  09c15	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  09c1a	c6 45 fc 57	 mov	 BYTE PTR __$EHRec$[ebp+8], 87 ; 00000057H
  09c1e	8d 85 20 6a ff
	ff		 lea	 eax, DWORD PTR $T219[ebp]
  09c24	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@HLACDLIC@Master?5Hill?5Electric?5Wire?5and?5C@
  09c29	50		 push	 eax
  09c2a	8d 8d d0 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25504]
  09c30	c7 85 20 6a ff
	ff 2e 11 00 00	 mov	 DWORD PTR $T219[ebp], 4398 ; 0000112eH
  09c3a	c7 85 24 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T219[ebp+4], 0
  09c44	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  09c49	c6 45 fc 58	 mov	 BYTE PTR __$EHRec$[ebp+8], 88 ; 00000058H
  09c4d	8d 85 18 6a ff
	ff		 lea	 eax, DWORD PTR $T218[ebp]
  09c53	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BALKNAEF@Santa?5Electronic?5Inc?4@
  09c58	50		 push	 eax
  09c59	8d 8d f0 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25536]
  09c5f	c7 85 18 6a ff
	ff 7d 11 00 00	 mov	 DWORD PTR $T218[ebp], 4477 ; 0000117dH
  09c69	c7 85 1c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T218[ebp+4], 0
  09c73	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  09c78	c6 45 fc 59	 mov	 BYTE PTR __$EHRec$[ebp+8], 89 ; 00000059H
  09c7c	8d 85 10 6a ff
	ff		 lea	 eax, DWORD PTR $T217[ebp]
  09c82	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FDIEEFFD@Sierra?5Wireless?5Inc?4@
  09c87	50		 push	 eax
  09c88	8d 8d 10 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25568]
  09c8e	c7 85 10 6a ff
	ff 99 11 00 00	 mov	 DWORD PTR $T217[ebp], 4505 ; 00001199H
  09c98	c7 85 14 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T217[ebp+4], 0
  09ca2	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  09ca7	c6 45 fc 5a	 mov	 BYTE PTR __$EHRec$[ebp+8], 90 ; 0000005aH
  09cab	8d 85 08 6a ff
	ff		 lea	 eax, DWORD PTR $T216[ebp]
  09cb1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LNLMLHPJ@GlobalMedia?5Group?0?5LLC@
  09cb6	50		 push	 eax
  09cb7	8d 8d 30 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25600]
  09cbd	c7 85 08 6a ff
	ff aa 11 00 00	 mov	 DWORD PTR $T216[ebp], 4522 ; 000011aaH
  09cc7	c7 85 0c 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T216[ebp+4], 0
  09cd1	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  09cd6	c6 45 fc 5b	 mov	 BYTE PTR __$EHRec$[ebp+8], 91 ; 0000005bH
  09cda	8d 85 00 6a ff
	ff		 lea	 eax, DWORD PTR $T215[ebp]
  09ce0	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HFAICOFB@ATECH?5FLASH?5TECHNOLOGY@
  09ce5	50		 push	 eax
  09ce6	8d 8d 50 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25632]
  09cec	c7 85 00 6a ff
	ff b0 11 00 00	 mov	 DWORD PTR $T215[ebp], 4528 ; 000011b0H
  09cf6	c7 85 04 6a ff
	ff 00 00 00 00	 mov	 DWORD PTR $T215[ebp+4], 0
  09d00	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  09d05	c6 45 fc 5c	 mov	 BYTE PTR __$EHRec$[ebp+8], 92 ; 0000005cH
  09d09	8d 85 f8 69 ff
	ff		 lea	 eax, DWORD PTR $T214[ebp]
  09d0f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MNCEAPFD@SKYCABLE?5ENTERPRISE?5CO?4?0?5LTD?4@
  09d14	50		 push	 eax
  09d15	8d 8d 70 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25664]
  09d1b	c7 85 f8 69 ff
	ff 23 12 00 00	 mov	 DWORD PTR $T214[ebp], 4643 ; 00001223H
  09d25	c7 85 fc 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T214[ebp+4], 0
  09d2f	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  09d34	c6 45 fc 5d	 mov	 BYTE PTR __$EHRec$[ebp+8], 93 ; 0000005dH
  09d38	8d 85 f0 69 ff
	ff		 lea	 eax, DWORD PTR $T213[ebp]
  09d3e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FCGNNKPJ@ADATA?5Technology?5Co?4?0?5Ltd?4@
  09d43	50		 push	 eax
  09d44	8d 8d 90 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25696]
  09d4a	c7 85 f0 69 ff
	ff 5f 12 00 00	 mov	 DWORD PTR $T213[ebp], 4703 ; 0000125fH
  09d54	c7 85 f4 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T213[ebp+4], 0
  09d5e	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  09d63	c6 45 fc 5e	 mov	 BYTE PTR __$EHRec$[ebp+8], 94 ; 0000005eH
  09d67	c7 85 e8 69 ff
	ff 6c 12 00 00	 mov	 DWORD PTR $T212[ebp], 4716 ; 0000126cH
  09d71	c7 85 ec 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T212[ebp+4], 0
  09d7b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BANJHMOB@Aristocrat?5Technologies@
  09d80	8d 85 e8 69 ff
	ff		 lea	 eax, DWORD PTR $T212[ebp]
  09d86	50		 push	 eax
  09d87	8d 8d b0 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25728]
  09d8d	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  09d92	c6 45 fc 5f	 mov	 BYTE PTR __$EHRec$[ebp+8], 95 ; 0000005fH
  09d96	8d 85 e0 69 ff
	ff		 lea	 eax, DWORD PTR $T211[ebp]
  09d9c	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FDHCJPEM@MARVELL?5SEMICONDUCTOR?0?5INC?4@
  09da1	50		 push	 eax
  09da2	8d 8d d0 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25760]
  09da8	c7 85 e0 69 ff
	ff 86 12 00 00	 mov	 DWORD PTR $T211[ebp], 4742 ; 00001286H
  09db2	c7 85 e4 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T211[ebp+4], 0
  09dbc	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  09dc1	c6 45 fc 60	 mov	 BYTE PTR __$EHRec$[ebp+8], 96 ; 00000060H
  09dc5	8d 85 d8 69 ff
	ff		 lea	 eax, DWORD PTR $T210[ebp]
  09dcb	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CDINJBKA@RISO?5KAGAKU?5CORP?4@
  09dd0	50		 push	 eax
  09dd1	8d 8d f0 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25792]
  09dd7	c7 85 d8 69 ff
	ff 94 12 00 00	 mov	 DWORD PTR $T210[ebp], 4756 ; 00001294H
  09de1	c7 85 dc 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T210[ebp+4], 0
  09deb	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  09df0	c6 45 fc 61	 mov	 BYTE PTR __$EHRec$[ebp+8], 97 ; 00000061H
  09df4	8d 85 d0 69 ff
	ff		 lea	 eax, DWORD PTR $T209[ebp]
  09dfa	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@OPCIAOPO@Zhejiang?5Xinya?5Electronic?5Techn@
  09dff	50		 push	 eax
  09e00	8d 8d 10 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25824]
  09e06	c7 85 d0 69 ff
	ff b8 12 00 00	 mov	 DWORD PTR $T209[ebp], 4792 ; 000012b8H
  09e10	c7 85 d4 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T209[ebp+4], 0
  09e1a	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  09e1f	c6 45 fc 62	 mov	 BYTE PTR __$EHRec$[ebp+8], 98 ; 00000062H
  09e23	8d 85 c8 69 ff
	ff		 lea	 eax, DWORD PTR $T208[ebp]
  09e29	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PCALMJMN@Huawei?5Technologies?5Co?4?0?5Ltd?4@
  09e2e	50		 push	 eax
  09e2f	8d 8d 30 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25856]
  09e35	c7 85 c8 69 ff
	ff d1 12 00 00	 mov	 DWORD PTR $T208[ebp], 4817 ; 000012d1H
  09e3f	c7 85 cc 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T208[ebp+4], 0
  09e49	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  09e4e	c6 45 fc 63	 mov	 BYTE PTR __$EHRec$[ebp+8], 99 ; 00000063H
  09e52	8d 85 c0 69 ff
	ff		 lea	 eax, DWORD PTR $T207[ebp]
  09e58	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FPEFMCEM@Konica?5Minolta?0?5Inc?4@
  09e5d	50		 push	 eax
  09e5e	8d 8d 50 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25888]
  09e64	c7 85 c0 69 ff
	ff 2b 13 00 00	 mov	 DWORD PTR $T207[ebp], 4907 ; 0000132bH
  09e6e	c7 85 c4 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T207[ebp+4], 0
  09e78	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  09e7d	c6 45 fc 64	 mov	 BYTE PTR __$EHRec$[ebp+8], 100 ; 00000064H
  09e81	8d 85 b8 69 ff
	ff		 lea	 eax, DWORD PTR $T206[ebp]
  09e87	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IGGHMHJA@Jasco?5Products?5Company@
  09e8c	50		 push	 eax
  09e8d	8d 8d 70 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25920]
  09e93	c7 85 b8 69 ff
	ff 3d 13 00 00	 mov	 DWORD PTR $T206[ebp], 4925 ; 0000133dH
  09e9d	c7 85 bc 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T206[ebp+4], 0
  09ea7	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  09eac	c6 45 fc 65	 mov	 BYTE PTR __$EHRec$[ebp+8], 101 ; 00000065H
  09eb0	8d 85 b0 69 ff
	ff		 lea	 eax, DWORD PTR $T205[ebp]
  09eb6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IPAHGEJP@Swissbit?5AG@
  09ebb	50		 push	 eax
  09ebc	8d 8d 90 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25952]
  09ec2	c7 85 b0 69 ff
	ff 70 13 00 00	 mov	 DWORD PTR $T205[ebp], 4976 ; 00001370H
  09ecc	c7 85 b4 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T205[ebp+4], 0
  09ed6	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  09edb	c6 45 fc 66	 mov	 BYTE PTR __$EHRec$[ebp+8], 102 ; 00000066H
  09edf	8d 85 a8 69 ff
	ff		 lea	 eax, DWORD PTR $T204[ebp]
  09ee5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OCMGADHD@Diodes?5Incorporated@
  09eea	50		 push	 eax
  09eeb	8d 8d b0 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25984]
  09ef1	c7 85 a8 69 ff
	ff 7d 13 00 00	 mov	 DWORD PTR $T204[ebp], 4989 ; 0000137dH
  09efb	c7 85 ac 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T204[ebp+4], 0
  09f05	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  09f0a	c6 45 fc 67	 mov	 BYTE PTR __$EHRec$[ebp+8], 103 ; 00000067H
  09f0e	c7 85 a0 69 ff
	ff 90 13 00 00	 mov	 DWORD PTR $T203[ebp], 5008 ; 00001390H
  09f18	c7 85 a4 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T203[ebp+4], 0
  09f22	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LJKDAPJK@TomTom?5International?5B?4V?4@
  09f27	8d 85 a0 69 ff
	ff		 lea	 eax, DWORD PTR $T203[ebp]
  09f2d	50		 push	 eax
  09f2e	8d 8d d0 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26016]
  09f34	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  09f39	c6 45 fc 68	 mov	 BYTE PTR __$EHRec$[ebp+8], 104 ; 00000068H
  09f3d	8d 85 98 69 ff
	ff		 lea	 eax, DWORD PTR $T202[ebp]
  09f43	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BNPLLCII@AzureWave?5Technologies?0?5Inc?4@
  09f48	50		 push	 eax
  09f49	8d 8d f0 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26048]
  09f4f	c7 85 98 69 ff
	ff d3 13 00 00	 mov	 DWORD PTR $T202[ebp], 5075 ; 000013d3H
  09f59	c7 85 9c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T202[ebp+4], 0
  09f63	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  09f68	c6 45 fc 69	 mov	 BYTE PTR __$EHRec$[ebp+8], 105 ; 00000069H
  09f6c	8d 85 90 69 ff
	ff		 lea	 eax, DWORD PTR $T201[ebp]
  09f72	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JADJMDJN@Initio?5?$CIHK?$CJ?5Corporation?5Limited@
  09f77	50		 push	 eax
  09f78	8d 8d 10 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26080]
  09f7e	c7 85 90 69 ff
	ff fd 13 00 00	 mov	 DWORD PTR $T201[ebp], 5117 ; 000013fdH
  09f88	c7 85 94 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T201[ebp+4], 0
  09f92	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  09f97	c6 45 fc 6a	 mov	 BYTE PTR __$EHRec$[ebp+8], 106 ; 0000006aH
  09f9b	8d 85 88 69 ff
	ff		 lea	 eax, DWORD PTR $T200[ebp]
  09fa1	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PODMPDKE@Phison?5Electronics?5Corp?4@
  09fa6	50		 push	 eax
  09fa7	8d 8d 30 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26112]
  09fad	c7 85 88 69 ff
	ff fe 13 00 00	 mov	 DWORD PTR $T200[ebp], 5118 ; 000013feH
  09fb7	c7 85 8c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T200[ebp+4], 0
  09fc1	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  09fc6	c6 45 fc 6b	 mov	 BYTE PTR __$EHRec$[ebp+8], 107 ; 0000006bH
  09fca	8d 85 80 69 ff
	ff		 lea	 eax, DWORD PTR $T199[ebp]
  09fd0	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EBAJJPHC@Telechips?0?5Inc?4@
  09fd5	50		 push	 eax
  09fd6	8d 8d 50 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26144]
  09fdc	c7 85 80 69 ff
	ff 0e 14 00 00	 mov	 DWORD PTR $T199[ebp], 5134 ; 0000140eH
  09fe6	c7 85 84 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T199[ebp+4], 0
  09ff0	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  09ff5	c6 45 fc 6c	 mov	 BYTE PTR __$EHRec$[ebp+8], 108 ; 0000006cH
  09ff9	8d 85 78 69 ff
	ff		 lea	 eax, DWORD PTR $T198[ebp]
  09fff	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KECIKNAF@ABILITY?5ENTERPRISE?5CO?4?0?5LTD?4@
  0a004	50		 push	 eax
  0a005	8d 8d 70 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26176]
  0a00b	c7 85 78 69 ff
	ff 19 14 00 00	 mov	 DWORD PTR $T198[ebp], 5145 ; 00001419H
  0a015	c7 85 7c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T198[ebp+4], 0
  0a01f	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0a024	c6 45 fc 6d	 mov	 BYTE PTR __$EHRec$[ebp+8], 109 ; 0000006dH
  0a028	8d 85 70 69 ff
	ff		 lea	 eax, DWORD PTR $T197[ebp]
  0a02e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BDFMJCOJ@Panstrong?5Company?5Ltd?4@
  0a033	50		 push	 eax
  0a034	8d 8d 90 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26208]
  0a03a	c7 85 70 69 ff
	ff 97 14 00 00	 mov	 DWORD PTR $T197[ebp], 5271 ; 00001497H
  0a044	c7 85 74 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T197[ebp+4], 0
  0a04e	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0a053	c6 45 fc 6e	 mov	 BYTE PTR __$EHRec$[ebp+8], 110 ; 0000006eH
  0a057	8d 85 68 69 ff
	ff		 lea	 eax, DWORD PTR $T196[ebp]
  0a05d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GIDLPKMM@CTK?5Corporation@
  0a062	50		 push	 eax
  0a063	8d 8d b0 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26240]
  0a069	c7 85 68 69 ff
	ff ad 14 00 00	 mov	 DWORD PTR $T196[ebp], 5293 ; 000014adH
  0a073	c7 85 6c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T196[ebp+4], 0
  0a07d	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0a082	c6 45 fc 6f	 mov	 BYTE PTR __$EHRec$[ebp+8], 111 ; 0000006fH
  0a086	8d 85 60 69 ff
	ff		 lea	 eax, DWORD PTR $T195[ebp]
  0a08c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LNFIEHCE@StarTech?4com?5Ltd?4@
  0a091	50		 push	 eax
  0a092	8d 8d d0 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26272]
  0a098	c7 85 60 69 ff
	ff b0 14 00 00	 mov	 DWORD PTR $T195[ebp], 5296 ; 000014b0H
  0a0a2	c7 85 64 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T195[ebp+4], 0
  0a0ac	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0a0b1	c6 45 fc 70	 mov	 BYTE PTR __$EHRec$[ebp+8], 112 ; 00000070H
  0a0b5	c7 85 58 69 ff
	ff 00 15 00 00	 mov	 DWORD PTR $T194[ebp], 5376 ; 00001500H
  0a0bf	c7 85 5c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T194[ebp+4], 0
  0a0c9	68 00 00 00 00	 push	 OFFSET ??_C@_07HKBKGGAL@Ellisys@
  0a0ce	8d 85 58 69 ff
	ff		 lea	 eax, DWORD PTR $T194[ebp]
  0a0d4	50		 push	 eax
  0a0d5	8d 8d f0 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26304]
  0a0db	e8 00 00 00 00	 call	 ??$?0_KAAY07$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY07$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[8],0>
  0a0e0	c6 45 fc 71	 mov	 BYTE PTR __$EHRec$[ebp+8], 113 ; 00000071H
  0a0e4	8d 85 50 69 ff
	ff		 lea	 eax, DWORD PTR $T193[ebp]
  0a0ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NNBEAIKI@JMicron?5Technology?5Corp?4@
  0a0ef	50		 push	 eax
  0a0f0	8d 8d 10 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26336]
  0a0f6	c7 85 50 69 ff
	ff 2d 15 00 00	 mov	 DWORD PTR $T193[ebp], 5421 ; 0000152dH
  0a100	c7 85 54 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T193[ebp+4], 0
  0a10a	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0a10f	c6 45 fc 72	 mov	 BYTE PTR __$EHRec$[ebp+8], 114 ; 00000072H
  0a113	8d 85 48 69 ff
	ff		 lea	 eax, DWORD PTR $T192[ebp]
  0a119	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KFFNHPKK@HLDS?5?$CIHitachi?9LG?5Data?5Storage?0?5@
  0a11e	50		 push	 eax
  0a11f	8d 8d 30 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26368]
  0a125	c7 85 48 69 ff
	ff 2e 15 00 00	 mov	 DWORD PTR $T192[ebp], 5422 ; 0000152eH
  0a12f	c7 85 4c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T192[ebp+4], 0
  0a139	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0a13e	c6 45 fc 73	 mov	 BYTE PTR __$EHRec$[ebp+8], 115 ; 00000073H
  0a142	8d 85 40 69 ff
	ff		 lea	 eax, DWORD PTR $T191[ebp]
  0a148	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PJAMMHJM@Phihong?5Technology?5Co?4?0?5Ltd?4@
  0a14d	50		 push	 eax
  0a14e	8d 8d 50 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26400]
  0a154	c7 85 40 69 ff
	ff 40 15 00 00	 mov	 DWORD PTR $T191[ebp], 5440 ; 00001540H
  0a15e	c7 85 44 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T191[ebp+4], 0
  0a168	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0a16d	c6 45 fc 74	 mov	 BYTE PTR __$EHRec$[ebp+8], 116 ; 00000074H
  0a171	8d 85 38 69 ff
	ff		 lea	 eax, DWORD PTR $T190[ebp]
  0a177	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FDFFBPKH@PNY?5Technologies?5Inc?4@
  0a17c	50		 push	 eax
  0a17d	8d 8d 70 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26432]
  0a183	c7 85 38 69 ff
	ff 4b 15 00 00	 mov	 DWORD PTR $T190[ebp], 5451 ; 0000154bH
  0a18d	c7 85 3c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T190[ebp+4], 0
  0a197	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0a19c	c6 45 fc 75	 mov	 BYTE PTR __$EHRec$[ebp+8], 117 ; 00000075H
  0a1a0	8d 85 30 69 ff
	ff		 lea	 eax, DWORD PTR $T189[ebp]
  0a1a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@PJGLCGBH@Rapid?5Conn?0?5Connect?5County?5Hold@
  0a1ab	50		 push	 eax
  0a1ac	8d 8d 90 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26464]
  0a1b2	c7 85 30 69 ff
	ff 4d 15 00 00	 mov	 DWORD PTR $T189[ebp], 5453 ; 0000154dH
  0a1bc	c7 85 34 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T189[ebp+4], 0
  0a1c6	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0a1cb	c6 45 fc 76	 mov	 BYTE PTR __$EHRec$[ebp+8], 118 ; 00000076H
  0a1cf	8d 85 28 69 ff
	ff		 lea	 eax, DWORD PTR $T188[ebp]
  0a1d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KCLHJFIN@D?5?$CG?5M?5Holdings?0?5Inc?4@
  0a1da	50		 push	 eax
  0a1db	8d 8d b0 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26496]
  0a1e1	c7 85 28 69 ff
	ff 4e 15 00 00	 mov	 DWORD PTR $T188[ebp], 5454 ; 0000154eH
  0a1eb	c7 85 2c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T188[ebp+4], 0
  0a1f5	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0a1fa	c6 45 fc 77	 mov	 BYTE PTR __$EHRec$[ebp+8], 119 ; 00000077H
  0a1fe	8d 85 20 69 ff
	ff		 lea	 eax, DWORD PTR $T187[ebp]
  0a204	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BMNNADLC@Sunf?5Pu?5Technology?5?$CIDong?9Guan?$CJ?5@
  0a209	50		 push	 eax
  0a20a	8d 8d d0 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26528]
  0a210	c7 85 20 69 ff
	ff 68 15 00 00	 mov	 DWORD PTR $T187[ebp], 5480 ; 00001568H
  0a21a	c7 85 24 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T187[ebp+4], 0
  0a224	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0a229	c6 45 fc 78	 mov	 BYTE PTR __$EHRec$[ebp+8], 120 ; 00000078H
  0a22d	8d 85 18 69 ff
	ff		 lea	 eax, DWORD PTR $T186[ebp]
  0a233	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PJFBNPPK@ALLTOP?5TECHNOLOGY?5CO?4?0?5LTD?4@
  0a238	50		 push	 eax
  0a239	8d 8d f0 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26560]
  0a23f	c7 85 18 69 ff
	ff 70 15 00 00	 mov	 DWORD PTR $T186[ebp], 5488 ; 00001570H
  0a249	c7 85 1c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T186[ebp+4], 0
  0a253	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0a258	c6 45 fc 79	 mov	 BYTE PTR __$EHRec$[ebp+8], 121 ; 00000079H
  0a25c	c7 85 10 69 ff
	ff 86 15 00 00	 mov	 DWORD PTR $T185[ebp], 5510 ; 00001586H
  0a266	c7 85 14 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T185[ebp+4], 0
  0a270	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MGGPMLNL@Palconn?5Technology?5Co?4?0?5Ltd?4@
  0a275	8d 85 10 69 ff
	ff		 lea	 eax, DWORD PTR $T185[ebp]
  0a27b	50		 push	 eax
  0a27c	8d 8d 10 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26592]
  0a282	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0a287	c6 45 fc 7a	 mov	 BYTE PTR __$EHRec$[ebp+8], 122 ; 0000007aH
  0a28b	8d 85 08 69 ff
	ff		 lea	 eax, DWORD PTR $T184[ebp]
  0a291	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@PMMBMBA@GuangDong?5Ya?5Lian?5Technology?5Co@
  0a296	50		 push	 eax
  0a297	8d 8d 30 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26624]
  0a29d	c7 85 08 69 ff
	ff aa 15 00 00	 mov	 DWORD PTR $T184[ebp], 5546 ; 000015aaH
  0a2a7	c7 85 0c 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T184[ebp+4], 0
  0a2b1	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0a2b6	c6 45 fc 7b	 mov	 BYTE PTR __$EHRec$[ebp+8], 123 ; 0000007bH
  0a2ba	8d 85 00 69 ff
	ff		 lea	 eax, DWORD PTR $T183[ebp]
  0a2c0	68 00 00 00 00	 push	 OFFSET ??_C@_06DGDFLKMM@Samtec@
  0a2c5	50		 push	 eax
  0a2c6	8d 8d 50 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26656]
  0a2cc	c7 85 00 69 ff
	ff 0d 16 00 00	 mov	 DWORD PTR $T183[ebp], 5645 ; 0000160dH
  0a2d6	c7 85 04 69 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T183[ebp+4], 0
  0a2e0	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  0a2e5	c6 45 fc 7c	 mov	 BYTE PTR __$EHRec$[ebp+8], 124 ; 0000007cH
  0a2e9	8d 85 f8 68 ff
	ff		 lea	 eax, DWORD PTR $T182[ebp]
  0a2ef	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@PHGPMLJG@Dezhou?5HongJu?5Communication?5Tec@
  0a2f4	50		 push	 eax
  0a2f5	8d 8d 70 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26688]
  0a2fb	c7 85 f8 68 ff
	ff 3e 16 00 00	 mov	 DWORD PTR $T182[ebp], 5694 ; 0000163eH
  0a305	c7 85 fc 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T182[ebp+4], 0
  0a30f	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  0a314	c6 45 fc 7d	 mov	 BYTE PTR __$EHRec$[ebp+8], 125 ; 0000007dH
  0a318	8d 85 f0 68 ff
	ff		 lea	 eax, DWORD PTR $T181[ebp]
  0a31e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OMFDOLIG@Total?5Phase@
  0a323	50		 push	 eax
  0a324	8d 8d 90 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26720]
  0a32a	c7 85 f0 68 ff
	ff 79 16 00 00	 mov	 DWORD PTR $T181[ebp], 5753 ; 00001679H
  0a334	c7 85 f4 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T181[ebp+4], 0
  0a33e	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  0a343	c6 45 fc 7e	 mov	 BYTE PTR __$EHRec$[ebp+8], 126 ; 0000007eH
  0a347	8d 85 e8 68 ff
	ff		 lea	 eax, DWORD PTR $T180[ebp]
  0a34d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PACCMCDL@ZOOM?5Corporation@
  0a352	50		 push	 eax
  0a353	8d 8d b0 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26752]
  0a359	c7 85 e8 68 ff
	ff 86 16 00 00	 mov	 DWORD PTR $T180[ebp], 5766 ; 00001686H
  0a363	c7 85 ec 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T180[ebp+4], 0
  0a36d	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0a372	c6 45 fc 7f	 mov	 BYTE PTR __$EHRec$[ebp+8], 127 ; 0000007fH
  0a376	8d 85 e0 68 ff
	ff		 lea	 eax, DWORD PTR $T179[ebp]
  0a37c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GHEMOGNO@Dongguan?5ChingLung?5Wire?5?$CG?5Cable@
  0a381	50		 push	 eax
  0a382	8d 8d d0 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26784]
  0a388	c7 85 e0 68 ff
	ff ac 16 00 00	 mov	 DWORD PTR $T179[ebp], 5804 ; 000016acH
  0a392	c7 85 e4 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T179[ebp+4], 0
  0a39c	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  0a3a1	c6 45 fc 80	 mov	 BYTE PTR __$EHRec$[ebp+8], 128 ; 00000080H
  0a3a5	8d 85 d8 68 ff
	ff		 lea	 eax, DWORD PTR $T178[ebp]
  0a3ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EKGKEMKL@silex?5technology?0?5Inc?4@
  0a3b0	50		 push	 eax
  0a3b1	8d 8d f0 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26816]
  0a3b7	c7 85 d8 68 ff
	ff cc 16 00 00	 mov	 DWORD PTR $T178[ebp], 5836 ; 000016ccH
  0a3c1	c7 85 dc 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T178[ebp+4], 0
  0a3cb	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0a3d0	c6 45 fc 81	 mov	 BYTE PTR __$EHRec$[ebp+8], 129 ; 00000081H
  0a3d4	8d 85 d0 68 ff
	ff		 lea	 eax, DWORD PTR $T177[ebp]
  0a3da	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FOKIOAF@F?4?5Hoffmann?9La?5Roche?5AG@
  0a3df	50		 push	 eax
  0a3e0	8d 8d 10 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26848]
  0a3e6	c7 85 d0 68 ff
	ff 3a 17 00 00	 mov	 DWORD PTR $T177[ebp], 5946 ; 0000173aH
  0a3f0	c7 85 d4 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T177[ebp+4], 0
  0a3fa	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0a3ff	c6 45 fc 82	 mov	 BYTE PTR __$EHRec$[ebp+8], 130 ; 00000082H
  0a403	c7 85 c8 68 ff
	ff 48 17 00 00	 mov	 DWORD PTR $T176[ebp], 5960 ; 00001748H
  0a40d	c7 85 cc 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T176[ebp+4], 0
  0a417	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BACBMICM@MQP?5Electronics?5Ltd?4@
  0a41c	8d 85 c8 68 ff
	ff		 lea	 eax, DWORD PTR $T176[ebp]
  0a422	50		 push	 eax
  0a423	8d 8d 30 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26880]
  0a429	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0a42e	c6 45 fc 83	 mov	 BYTE PTR __$EHRec$[ebp+8], 131 ; 00000083H
  0a432	8d 85 c0 68 ff
	ff		 lea	 eax, DWORD PTR $T175[ebp]
  0a438	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EFCFBFPB@ASMedia?5Technology?5Inc?4@
  0a43d	50		 push	 eax
  0a43e	8d 8d 50 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26912]
  0a444	c7 85 c0 68 ff
	ff 4c 17 00 00	 mov	 DWORD PTR $T175[ebp], 5964 ; 0000174cH
  0a44e	c7 85 c4 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T175[ebp+4], 0
  0a458	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0a45d	c6 45 fc 84	 mov	 BYTE PTR __$EHRec$[ebp+8], 132 ; 00000084H
  0a461	8d 85 b8 68 ff
	ff		 lea	 eax, DWORD PTR $T174[ebp]
  0a467	68 00 00 00 00	 push	 OFFSET ??_C@_09CIDMGMMG@Lantronix@
  0a46c	50		 push	 eax
  0a46d	8d 8d 70 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26944]
  0a473	c7 85 b8 68 ff
	ff 5a 17 00 00	 mov	 DWORD PTR $T174[ebp], 5978 ; 0000175aH
  0a47d	c7 85 bc 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T174[ebp+4], 0
  0a487	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  0a48c	c6 45 fc 85	 mov	 BYTE PTR __$EHRec$[ebp+8], 133 ; 00000085H
  0a490	8d 85 b0 68 ff
	ff		 lea	 eax, DWORD PTR $T173[ebp]
  0a496	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LLHADAIP@UD?5electronic?5corp?4@
  0a49b	50		 push	 eax
  0a49c	8d 8d 90 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26976]
  0a4a2	c7 85 b0 68 ff
	ff 6e 17 00 00	 mov	 DWORD PTR $T173[ebp], 5998 ; 0000176eH
  0a4ac	c7 85 b4 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T173[ebp+4], 0
  0a4b6	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0a4bb	c6 45 fc 86	 mov	 BYTE PTR __$EHRec$[ebp+8], 134 ; 00000086H
  0a4bf	8d 85 a8 68 ff
	ff		 lea	 eax, DWORD PTR $T172[ebp]
  0a4c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KBPLCNPO@Shenzhen?5Alex?5Connector?5Co?4?0?5Lt@
  0a4ca	50		 push	 eax
  0a4cb	8d 8d b0 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27008]
  0a4d1	c7 85 a8 68 ff
	ff 71 17 00 00	 mov	 DWORD PTR $T172[ebp], 6001 ; 00001771H
  0a4db	c7 85 ac 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T172[ebp+4], 0
  0a4e5	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0a4ea	c6 45 fc 87	 mov	 BYTE PTR __$EHRec$[ebp+8], 135 ; 00000087H
  0a4ee	8d 85 a0 68 ff
	ff		 lea	 eax, DWORD PTR $T171[ebp]
  0a4f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MGLGHCII@System?5Level?5Solutions?0?5Inc?4@
  0a4f9	50		 push	 eax
  0a4fa	8d 8d d0 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27040]
  0a500	c7 85 a0 68 ff
	ff 72 17 00 00	 mov	 DWORD PTR $T171[ebp], 6002 ; 00001772H
  0a50a	c7 85 a4 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T171[ebp+4], 0
  0a514	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0a519	c6 45 fc 88	 mov	 BYTE PTR __$EHRec$[ebp+8], 136 ; 00000088H
  0a51d	8d 85 98 68 ff
	ff		 lea	 eax, DWORD PTR $T170[ebp]
  0a523	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HBGELLHJ@Spreadtrum?5Hong?5Kong?5Limited@
  0a528	50		 push	 eax
  0a529	8d 8d f0 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27072]
  0a52f	c7 85 98 68 ff
	ff 82 17 00 00	 mov	 DWORD PTR $T170[ebp], 6018 ; 00001782H
  0a539	c7 85 9c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T170[ebp+4], 0
  0a543	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0a548	c6 45 fc 89	 mov	 BYTE PTR __$EHRec$[ebp+8], 137 ; 00000089H
  0a54c	8d 85 90 68 ff
	ff		 lea	 eax, DWORD PTR $T169[ebp]
  0a552	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GLPFKNO@ShenZhen?5Litkconn?5Technology?5Co@
  0a557	50		 push	 eax
  0a558	8d 8d 10 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27104]
  0a55e	c7 85 90 68 ff
	ff 88 17 00 00	 mov	 DWORD PTR $T169[ebp], 6024 ; 00001788H
  0a568	c7 85 94 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T169[ebp+4], 0
  0a572	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0a577	c6 45 fc 8a	 mov	 BYTE PTR __$EHRec$[ebp+8], 138 ; 0000008aH
  0a57b	8d 85 88 68 ff
	ff		 lea	 eax, DWORD PTR $T168[ebp]
  0a581	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FMNDGFCO@Advanced?5Connection?5Technology?5@
  0a586	50		 push	 eax
  0a587	8d 8d 30 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27136]
  0a58d	c7 85 88 68 ff
	ff a5 17 00 00	 mov	 DWORD PTR $T168[ebp], 6053 ; 000017a5H
  0a597	c7 85 8c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T168[ebp+4], 0
  0a5a1	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  0a5a6	c6 45 fc 8b	 mov	 BYTE PTR __$EHRec$[ebp+8], 139 ; 0000008bH
  0a5aa	c7 85 80 68 ff
	ff be 17 00 00	 mov	 DWORD PTR $T167[ebp], 6078 ; 000017beH
  0a5b4	c7 85 84 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T167[ebp+4], 0
  0a5be	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@DPFEGAEM@Dongguan?5Yangming?5Precision?5of?5@
  0a5c3	8d 85 80 68 ff
	ff		 lea	 eax, DWORD PTR $T167[ebp]
  0a5c9	50		 push	 eax
  0a5ca	8d 8d 50 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27168]
  0a5d0	e8 00 00 00 00	 call	 ??$?0_KAAY0DI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[56],0>
  0a5d5	c6 45 fc 8c	 mov	 BYTE PTR __$EHRec$[ebp+8], 140 ; 0000008cH
  0a5d9	8d 85 78 68 ff
	ff		 lea	 eax, DWORD PTR $T166[ebp]
  0a5df	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PLILAAEO@DisplayLink?5?$CIUK?$CJ?5Ltd?4@
  0a5e4	50		 push	 eax
  0a5e5	8d 8d 70 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27200]
  0a5eb	c7 85 78 68 ff
	ff e9 17 00 00	 mov	 DWORD PTR $T166[ebp], 6121 ; 000017e9H
  0a5f5	c7 85 7c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T166[ebp+4], 0
  0a5ff	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0a604	c6 45 fc 8d	 mov	 BYTE PTR __$EHRec$[ebp+8], 141 ; 0000008dH
  0a608	8d 85 70 68 ff
	ff		 lea	 eax, DWORD PTR $T165[ebp]
  0a60e	68 00 00 00 00	 push	 OFFSET ??_C@_06EOFPOMJG@Lenovo@
  0a613	50		 push	 eax
  0a614	8d 8d 90 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27232]
  0a61a	c7 85 70 68 ff
	ff ef 17 00 00	 mov	 DWORD PTR $T165[ebp], 6127 ; 000017efH
  0a624	c7 85 74 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T165[ebp+4], 0
  0a62e	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  0a633	c6 45 fc 8e	 mov	 BYTE PTR __$EHRec$[ebp+8], 142 ; 0000008eH
  0a637	8d 85 68 68 ff
	ff		 lea	 eax, DWORD PTR $T164[ebp]
  0a63d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGMLMAAK@K?4K?4?5Rocky@
  0a642	50		 push	 eax
  0a643	8d 8d b0 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27264]
  0a649	c7 85 68 68 ff
	ff f5 17 00 00	 mov	 DWORD PTR $T164[ebp], 6133 ; 000017f5H
  0a653	c7 85 6c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T164[ebp+4], 0
  0a65d	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  0a662	c6 45 fc 8f	 mov	 BYTE PTR __$EHRec$[ebp+8], 143 ; 0000008fH
  0a666	8d 85 60 68 ff
	ff		 lea	 eax, DWORD PTR $T163[ebp]
  0a66c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EHODKKAD@Wanshih?5Electronic?5Co?4?0?5Ltd?4@
  0a671	50		 push	 eax
  0a672	8d 8d d0 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27296]
  0a678	c7 85 60 68 ff
	ff 10 18 00 00	 mov	 DWORD PTR $T163[ebp], 6160 ; 00001810H
  0a682	c7 85 64 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T163[ebp+4], 0
  0a68c	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0a691	c6 45 fc 90	 mov	 BYTE PTR __$EHRec$[ebp+8], 144 ; 00000090H
  0a695	8d 85 58 68 ff
	ff		 lea	 eax, DWORD PTR $T162[ebp]
  0a69b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KAKIFJIN@Dongguan?5YuQiu?5Electronics?5Co?4?0@
  0a6a0	50		 push	 eax
  0a6a1	8d 8d f0 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27328]
  0a6a7	c7 85 58 68 ff
	ff 29 18 00 00	 mov	 DWORD PTR $T162[ebp], 6185 ; 00001829H
  0a6b1	c7 85 5c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T162[ebp+4], 0
  0a6bb	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0a6c0	c6 45 fc 91	 mov	 BYTE PTR __$EHRec$[ebp+8], 145 ; 00000091H
  0a6c4	8d 85 50 68 ff
	ff		 lea	 eax, DWORD PTR $T161[ebp]
  0a6ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DPMJHMBK@Gwo?5Jinn?5Industries?5Co?4?0?5Ltd?4@
  0a6cf	50		 push	 eax
  0a6d0	8d 8d 10 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27360]
  0a6d6	c7 85 50 68 ff
	ff 31 18 00 00	 mov	 DWORD PTR $T161[ebp], 6193 ; 00001831H
  0a6e0	c7 85 54 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T161[ebp+4], 0
  0a6ea	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0a6ef	c6 45 fc 92	 mov	 BYTE PTR __$EHRec$[ebp+8], 146 ; 00000092H
  0a6f3	8d 85 48 68 ff
	ff		 lea	 eax, DWORD PTR $T160[ebp]
  0a6f9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@INPJKDFM@Google?5Inc?4@
  0a6fe	50		 push	 eax
  0a6ff	8d 8d 30 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27392]
  0a705	c7 85 48 68 ff
	ff d1 18 00 00	 mov	 DWORD PTR $T160[ebp], 6353 ; 000018d1H
  0a70f	c7 85 4c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T160[ebp+4], 0
  0a719	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  0a71e	c6 45 fc 93	 mov	 BYTE PTR __$EHRec$[ebp+8], 147 ; 00000093H
  0a722	8d 85 40 68 ff
	ff		 lea	 eax, DWORD PTR $T159[ebp]
  0a728	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NCCLCDI@Kuang?5Ying?5Computer?5Equipment?5C@
  0a72d	50		 push	 eax
  0a72e	8d 8d 50 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27424]
  0a734	c7 85 40 68 ff
	ff fa 18 00 00	 mov	 DWORD PTR $T159[ebp], 6394 ; 000018faH
  0a73e	c7 85 44 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T159[ebp+4], 0
  0a748	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0a74d	c6 45 fc 94	 mov	 BYTE PTR __$EHRec$[ebp+8], 148 ; 00000094H
  0a751	c7 85 38 68 ff
	ff 15 19 00 00	 mov	 DWORD PTR $T158[ebp], 6421 ; 00001915H
  0a75b	c7 85 3c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T158[ebp+4], 0
  0a765	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FNMFPLIK@Nordic?5Semiconductor?5ASA@
  0a76a	8d 85 38 68 ff
	ff		 lea	 eax, DWORD PTR $T158[ebp]
  0a770	50		 push	 eax
  0a771	8d 8d 70 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27456]
  0a777	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0a77c	c6 45 fc 95	 mov	 BYTE PTR __$EHRec$[ebp+8], 149 ; 00000095H
  0a780	8d 85 30 68 ff
	ff		 lea	 eax, DWORD PTR $T157[ebp]
  0a786	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HIOJCDGJ@Power?57?5Technologies?5Corp?4@
  0a78b	50		 push	 eax
  0a78c	8d 8d 90 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27488]
  0a792	c7 85 30 68 ff
	ff 22 19 00 00	 mov	 DWORD PTR $T157[ebp], 6434 ; 00001922H
  0a79c	c7 85 34 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T157[ebp+4], 0
  0a7a6	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0a7ab	c6 45 fc 96	 mov	 BYTE PTR __$EHRec$[ebp+8], 150 ; 00000096H
  0a7af	8d 85 28 68 ff
	ff		 lea	 eax, DWORD PTR $T156[ebp]
  0a7b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NLNPHLHC@Shenzhen?5Xianhe?5Technology?5Co?4?0@
  0a7ba	50		 push	 eax
  0a7bb	8d 8d b0 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27520]
  0a7c1	c7 85 28 68 ff
	ff 30 19 00 00	 mov	 DWORD PTR $T156[ebp], 6448 ; 00001930H
  0a7cb	c7 85 2c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T156[ebp+4], 0
  0a7d5	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0a7da	c6 45 fc 97	 mov	 BYTE PTR __$EHRec$[ebp+8], 151 ; 00000097H
  0a7de	8d 85 20 68 ff
	ff		 lea	 eax, DWORD PTR $T155[ebp]
  0a7e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@FJMLIAEB@Ningbo?5Broad?5Telecommunication?5@
  0a7e9	50		 push	 eax
  0a7ea	8d 8d d0 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27552]
  0a7f0	c7 85 20 68 ff
	ff 31 19 00 00	 mov	 DWORD PTR $T155[ebp], 6449 ; 00001931H
  0a7fa	c7 85 24 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T155[ebp+4], 0
  0a804	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0a809	c6 45 fc 98	 mov	 BYTE PTR __$EHRec$[ebp+8], 152 ; 00000098H
  0a80d	8d 85 18 68 ff
	ff		 lea	 eax, DWORD PTR $T154[ebp]
  0a813	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PCAKKDFD@Irisguard?5UK?5Ltd@
  0a818	50		 push	 eax
  0a819	8d 8d f0 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27584]
  0a81f	c7 85 18 68 ff
	ff 46 19 00 00	 mov	 DWORD PTR $T154[ebp], 6470 ; 00001946H
  0a829	c7 85 1c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T154[ebp+4], 0
  0a833	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0a838	c6 45 fc 99	 mov	 BYTE PTR __$EHRec$[ebp+8], 153 ; 00000099H
  0a83c	8d 85 10 68 ff
	ff		 lea	 eax, DWORD PTR $T153[ebp]
  0a842	68 00 00 00 00	 push	 OFFSET ??_C@_06CHAGPIBB@Lab126@
  0a847	50		 push	 eax
  0a848	8d 8d 10 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27616]
  0a84e	c7 85 10 68 ff
	ff 49 19 00 00	 mov	 DWORD PTR $T153[ebp], 6473 ; 00001949H
  0a858	c7 85 14 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T153[ebp+4], 0
  0a862	e8 00 00 00 00	 call	 ??$?0_KAAY06$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY06$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[7],0>
  0a867	c6 45 fc 9a	 mov	 BYTE PTR __$EHRec$[ebp+8], 154 ; 0000009aH
  0a86b	8d 85 08 68 ff
	ff		 lea	 eax, DWORD PTR $T152[ebp]
  0a871	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FPFCCPOD@Hyperstone?5GmbH@
  0a876	50		 push	 eax
  0a877	8d 8d 30 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27648]
  0a87d	c7 85 08 68 ff
	ff 51 19 00 00	 mov	 DWORD PTR $T152[ebp], 6481 ; 00001951H
  0a887	c7 85 0c 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T152[ebp+4], 0
  0a891	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0a896	c6 45 fc 9b	 mov	 BYTE PTR __$EHRec$[ebp+8], 155 ; 0000009bH
  0a89a	8d 85 00 68 ff
	ff		 lea	 eax, DWORD PTR $T151[ebp]
  0a8a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PPNLBENA@BIOS?5Corporation@
  0a8a5	50		 push	 eax
  0a8a6	8d 8d 50 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27680]
  0a8ac	c7 85 00 68 ff
	ff 57 19 00 00	 mov	 DWORD PTR $T151[ebp], 6487 ; 00001957H
  0a8b6	c7 85 04 68 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T151[ebp+4], 0
  0a8c0	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0a8c5	c6 45 fc 9c	 mov	 BYTE PTR __$EHRec$[ebp+8], 156 ; 0000009cH
  0a8c9	8d 85 f8 67 ff
	ff		 lea	 eax, DWORD PTR $T150[ebp]
  0a8cf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ICKPBEAD@Dexxon?5Groupe@
  0a8d4	50		 push	 eax
  0a8d5	8d 8d 70 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27712]
  0a8db	c7 85 f8 67 ff
	ff 9d 19 00 00	 mov	 DWORD PTR $T150[ebp], 6557 ; 0000199dH
  0a8e5	c7 85 fc 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T150[ebp+4], 0
  0a8ef	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0a8f4	c6 45 fc 9d	 mov	 BYTE PTR __$EHRec$[ebp+8], 157 ; 0000009dH
  0a8f8	c7 85 f0 67 ff
	ff ef 19 00 00	 mov	 DWORD PTR $T149[ebp], 6639 ; 000019efH
  0a902	c7 85 f4 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T149[ebp+4], 0
  0a90c	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GONBANIC@Pak?5Heng?5Technology?5?$CIShenzhen?$CJ?5@
  0a911	8d 85 f0 67 ff
	ff		 lea	 eax, DWORD PTR $T149[ebp]
  0a917	50		 push	 eax
  0a918	8d 8d 90 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27744]
  0a91e	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0a923	c6 45 fc 9e	 mov	 BYTE PTR __$EHRec$[ebp+8], 158 ; 0000009eH
  0a927	8d 85 e8 67 ff
	ff		 lea	 eax, DWORD PTR $T148[ebp]
  0a92d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PPEHNAPN@Best?5Buy?5China?5Ltd?4@
  0a932	50		 push	 eax
  0a933	8d 8d b0 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27776]
  0a939	c7 85 e8 67 ff
	ff ff 19 00 00	 mov	 DWORD PTR $T148[ebp], 6655 ; 000019ffH
  0a943	c7 85 ec 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T148[ebp+4], 0
  0a94d	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0a952	c6 45 fc 9f	 mov	 BYTE PTR __$EHRec$[ebp+8], 159 ; 0000009fH
  0a956	8d 85 e0 67 ff
	ff		 lea	 eax, DWORD PTR $T147[ebp]
  0a95c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CPPPDBKP@Polymax?5Precision?5Industry?5Co?4?0@
  0a961	50		 push	 eax
  0a962	8d 8d d0 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27808]
  0a968	c7 85 e0 67 ff
	ff 00 1a 00 00	 mov	 DWORD PTR $T147[ebp], 6656 ; 00001a00H
  0a972	c7 85 e4 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T147[ebp+4], 0
  0a97c	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0a981	c6 45 fc a0	 mov	 BYTE PTR __$EHRec$[ebp+8], 160 ; 000000a0H
  0a985	8d 85 d8 67 ff
	ff		 lea	 eax, DWORD PTR $T146[ebp]
  0a98b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BIONMJOM@USB?9IF?5non?9workshop@
  0a990	50		 push	 eax
  0a991	8d 8d f0 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27840]
  0a997	c7 85 d8 67 ff
	ff 0a 1a 00 00	 mov	 DWORD PTR $T146[ebp], 6666 ; 00001a0aH
  0a9a1	c7 85 dc 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T146[ebp+4], 0
  0a9ab	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0a9b0	c6 45 fc a1	 mov	 BYTE PTR __$EHRec$[ebp+8], 161 ; 000000a1H
  0a9b4	8d 85 d0 67 ff
	ff		 lea	 eax, DWORD PTR $T145[ebp]
  0a9ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PJBAGNMH@Artesyn?5Technologies?5Inc?4@
  0a9bf	50		 push	 eax
  0a9c0	8d 8d 10 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27872]
  0a9c6	c7 85 d0 67 ff
	ff 35 1a 00 00	 mov	 DWORD PTR $T145[ebp], 6709 ; 00001a35H
  0a9d0	c7 85 d4 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T145[ebp+4], 0
  0a9da	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0a9df	c6 45 fc a2	 mov	 BYTE PTR __$EHRec$[ebp+8], 162 ; 000000a2H
  0a9e3	8d 85 c8 67 ff
	ff		 lea	 eax, DWORD PTR $T144[ebp]
  0a9e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KAKHDDLA@TERMINUS?5TECHNOLOGY?5INC?4@
  0a9ee	50		 push	 eax
  0a9ef	8d 8d 30 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27904]
  0a9f5	c7 85 c8 67 ff
	ff 40 1a 00 00	 mov	 DWORD PTR $T144[ebp], 6720 ; 00001a40H
  0a9ff	c7 85 cc 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T144[ebp+4], 0
  0aa09	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0aa0e	c6 45 fc a3	 mov	 BYTE PTR __$EHRec$[ebp+8], 163 ; 000000a3H
  0aa12	8d 85 c0 67 ff
	ff		 lea	 eax, DWORD PTR $T143[ebp]
  0aa18	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GMHKDAOP@Proconn?5Technology?5Co?4?0?5Ltd?4@
  0aa1d	50		 push	 eax
  0aa1e	8d 8d 50 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27936]
  0aa24	c7 85 c0 67 ff
	ff 82 1a 00 00	 mov	 DWORD PTR $T143[ebp], 6786 ; 00001a82H
  0aa2e	c7 85 c4 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T143[ebp+4], 0
  0aa38	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0aa3d	c6 45 fc a4	 mov	 BYTE PTR __$EHRec$[ebp+8], 164 ; 000000a4H
  0aa41	8d 85 b8 67 ff
	ff		 lea	 eax, DWORD PTR $T142[ebp]
  0aa47	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HJFKHBGL@Simula?5Technology?5Inc?4@
  0aa4c	50		 push	 eax
  0aa4d	8d 8d 70 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27968]
  0aa53	c7 85 b8 67 ff
	ff 8a 1a 00 00	 mov	 DWORD PTR $T142[ebp], 6794 ; 00001a8aH
  0aa5d	c7 85 bc 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T142[ebp+4], 0
  0aa67	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0aa6c	c6 45 fc a5	 mov	 BYTE PTR __$EHRec$[ebp+8], 165 ; 000000a5H
  0aa70	8d 85 b0 67 ff
	ff		 lea	 eax, DWORD PTR $T141[ebp]
  0aa76	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KBMPMKDN@SGS?5Taiwan?5Ltd?4@
  0aa7b	50		 push	 eax
  0aa7c	8d 8d 90 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28000]
  0aa82	c7 85 b0 67 ff
	ff 8b 1a 00 00	 mov	 DWORD PTR $T141[ebp], 6795 ; 00001a8bH
  0aa8c	c7 85 b4 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T141[ebp+4], 0
  0aa96	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0aa9b	c6 45 fc a6	 mov	 BYTE PTR __$EHRec$[ebp+8], 166 ; 000000a6H
  0aa9f	c7 85 a8 67 ff
	ff 8f 1a 00 00	 mov	 DWORD PTR $T140[ebp], 6799 ; 00001a8fH
  0aaa9	c7 85 ac 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T140[ebp+4], 0
  0aab3	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LANMGAIF@Harman?5Becker?5Automotive?5System@
  0aab8	8d 85 a8 67 ff
	ff		 lea	 eax, DWORD PTR $T140[ebp]
  0aabe	50		 push	 eax
  0aabf	8d 8d b0 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28032]
  0aac5	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0aaca	c6 45 fc a7	 mov	 BYTE PTR __$EHRec$[ebp+8], 167 ; 000000a7H
  0aace	8d 85 a0 67 ff
	ff		 lea	 eax, DWORD PTR $T139[ebp]
  0aad4	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@EENODCNA@Johnson?5Component?5?$CG?5Equipments?5@
  0aad9	50		 push	 eax
  0aada	8d 8d d0 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28064]
  0aae0	c7 85 a0 67 ff
	ff ae 1a 00 00	 mov	 DWORD PTR $T139[ebp], 6830 ; 00001aaeH
  0aaea	c7 85 a4 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T139[ebp+4], 0
  0aaf4	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0aaf9	c6 45 fc a8	 mov	 BYTE PTR __$EHRec$[ebp+8], 168 ; 000000a8H
  0aafd	8d 85 98 67 ff
	ff		 lea	 eax, DWORD PTR $T138[ebp]
  0ab03	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KDBDJMKB@Allied?5Vision?5Technologies?5GmbH@
  0ab08	50		 push	 eax
  0ab09	8d 8d f0 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28096]
  0ab0f	c7 85 98 67 ff
	ff b2 1a 00 00	 mov	 DWORD PTR $T138[ebp], 6834 ; 00001ab2H
  0ab19	c7 85 9c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T138[ebp+4], 0
  0ab23	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0ab28	c6 45 fc a9	 mov	 BYTE PTR __$EHRec$[ebp+8], 169 ; 000000a9H
  0ab2c	8d 85 90 67 ff
	ff		 lea	 eax, DWORD PTR $T137[ebp]
  0ab32	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BNPJBJHO@Salcomp?5Plc@
  0ab37	50		 push	 eax
  0ab38	8d 8d 10 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28128]
  0ab3e	c7 85 90 67 ff
	ff cb 1a 00 00	 mov	 DWORD PTR $T137[ebp], 6859 ; 00001acbH
  0ab48	c7 85 94 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T137[ebp+4], 0
  0ab52	e8 00 00 00 00	 call	 ??$?0_KAAY0M@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0M@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[12],0>
  0ab57	c6 45 fc aa	 mov	 BYTE PTR __$EHRec$[ebp+8], 170 ; 000000aaH
  0ab5b	8d 85 88 67 ff
	ff		 lea	 eax, DWORD PTR $T136[ebp]
  0ab61	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@ENEIOO@High?5Top?5Precision?5Electronic?5C@
  0ab66	50		 push	 eax
  0ab67	8d 8d 30 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28160]
  0ab6d	c7 85 88 67 ff
	ff ed 1a 00 00	 mov	 DWORD PTR $T136[ebp], 6893 ; 00001aedH
  0ab77	c7 85 8c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T136[ebp+4], 0
  0ab81	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0ab86	c6 45 fc ab	 mov	 BYTE PTR __$EHRec$[ebp+8], 171 ; 000000abH
  0ab8a	8d 85 80 67 ff
	ff		 lea	 eax, DWORD PTR $T135[ebp]
  0ab90	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BAHHJBOM@Octekconn?5Incorporation@
  0ab95	50		 push	 eax
  0ab96	8d 8d 50 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28192]
  0ab9c	c7 85 80 67 ff
	ff ef 1a 00 00	 mov	 DWORD PTR $T135[ebp], 6895 ; 00001aefH
  0aba6	c7 85 84 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T135[ebp+4], 0
  0abb0	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0abb5	c6 45 fc ac	 mov	 BYTE PTR __$EHRec$[ebp+8], 172 ; 000000acH
  0abb9	8d 85 78 67 ff
	ff		 lea	 eax, DWORD PTR $T134[ebp]
  0abbf	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FLEFAHEK@MStar?5Semiconductor?0?5Inc?4@
  0abc4	50		 push	 eax
  0abc5	8d 8d 70 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28224]
  0abcb	c7 85 78 67 ff
	ff 20 1b 00 00	 mov	 DWORD PTR $T134[ebp], 6944 ; 00001b20H
  0abd5	c7 85 7c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T134[ebp+4], 0
  0abdf	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0abe4	c6 45 fc ad	 mov	 BYTE PTR __$EHRec$[ebp+8], 173 ; 000000adH
  0abe8	8d 85 70 67 ff
	ff		 lea	 eax, DWORD PTR $T133[ebp]
  0abee	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ODKKJGBD@Plastron?5Precision?5Co?4?0?5Ltd?4@
  0abf3	50		 push	 eax
  0abf4	8d 8d 90 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28256]
  0abfa	c7 85 70 67 ff
	ff 48 1b 00 00	 mov	 DWORD PTR $T133[ebp], 6984 ; 00001b48H
  0ac04	c7 85 74 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T133[ebp+4], 0
  0ac0e	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0ac13	c6 45 fc ae	 mov	 BYTE PTR __$EHRec$[ebp+8], 174 ; 000000aeH
  0ac17	8d 85 68 67 ff
	ff		 lea	 eax, DWORD PTR $T132[ebp]
  0ac1d	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@EOOOBNLE@The?5Hong?5Kong?5Standards?5and?5Tes@
  0ac22	50		 push	 eax
  0ac23	8d 8d b0 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28288]
  0ac29	c7 85 68 67 ff
	ff 65 1b 00 00	 mov	 DWORD PTR $T132[ebp], 7013 ; 00001b65H
  0ac33	c7 85 6c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T132[ebp+4], 0
  0ac3d	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0ac42	c6 45 fc af	 mov	 BYTE PTR __$EHRec$[ebp+8], 175 ; 000000afH
  0ac46	c7 85 60 67 ff
	ff 88 1b 00 00	 mov	 DWORD PTR $T131[ebp], 7048 ; 00001b88H
  0ac50	c7 85 64 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T131[ebp+4], 0
  0ac5a	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@GNFBMNPP@ShenMing?5Electron?5?$CIDong?5Guan?$CJ?5C@
  0ac5f	8d 85 60 67 ff
	ff		 lea	 eax, DWORD PTR $T131[ebp]
  0ac65	50		 push	 eax
  0ac66	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28320]
  0ac6c	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0ac71	c6 45 fc b0	 mov	 BYTE PTR __$EHRec$[ebp+8], 176 ; 000000b0H
  0ac75	8d 85 58 67 ff
	ff		 lea	 eax, DWORD PTR $T130[ebp]
  0ac7b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IPLHGMF@Amlogic?0?5Inc?4@
  0ac80	50		 push	 eax
  0ac81	8d 8d f0 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28352]
  0ac87	c7 85 58 67 ff
	ff 8e 1b 00 00	 mov	 DWORD PTR $T130[ebp], 7054 ; 00001b8eH
  0ac91	c7 85 5c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T130[ebp+4], 0
  0ac9b	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0aca0	c6 45 fc b1	 mov	 BYTE PTR __$EHRec$[ebp+8], 177 ; 000000b1H
  0aca4	8d 85 50 67 ff
	ff		 lea	 eax, DWORD PTR $T129[ebp]
  0acaa	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CCKODFFJ@Vuzix?5Corporation@
  0acaf	50		 push	 eax
  0acb0	8d 8d 10 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28384]
  0acb6	c7 85 50 67 ff
	ff ae 1b 00 00	 mov	 DWORD PTR $T129[ebp], 7086 ; 00001baeH
  0acc0	c7 85 54 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T129[ebp+4], 0
  0acca	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0accf	c6 45 fc b2	 mov	 BYTE PTR __$EHRec$[ebp+8], 178 ; 000000b2H
  0acd3	8d 85 48 67 ff
	ff		 lea	 eax, DWORD PTR $T128[ebp]
  0acd9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JGHIOJAI@Ford?5Motor?5Co?4@
  0acde	50		 push	 eax
  0acdf	8d 8d 30 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28416]
  0ace5	c7 85 48 67 ff
	ff c4 1b 00 00	 mov	 DWORD PTR $T128[ebp], 7108 ; 00001bc4H
  0acef	c7 85 4c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T128[ebp+4], 0
  0acf9	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0acfe	c6 45 fc b3	 mov	 BYTE PTR __$EHRec$[ebp+8], 179 ; 000000b3H
  0ad02	8d 85 40 67 ff
	ff		 lea	 eax, DWORD PTR $T127[ebp]
  0ad08	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FCJOHAEE@Contac?5Cable?5Industrial?5Limited@
  0ad0d	50		 push	 eax
  0ad0e	8d 8d 50 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28448]
  0ad14	c7 85 40 67 ff
	ff ce 1b 00 00	 mov	 DWORD PTR $T127[ebp], 7118 ; 00001bceH
  0ad1e	c7 85 44 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T127[ebp+4], 0
  0ad28	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0ad2d	c6 45 fc b4	 mov	 BYTE PTR __$EHRec$[ebp+8], 180 ; 000000b4H
  0ad31	8d 85 38 67 ff
	ff		 lea	 eax, DWORD PTR $T126[ebp]
  0ad37	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HFOIMFJ@Sunplus?5Innovation?5Technology?5I@
  0ad3c	50		 push	 eax
  0ad3d	8d 8d 70 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28480]
  0ad43	c7 85 38 67 ff
	ff cf 1b 00 00	 mov	 DWORD PTR $T126[ebp], 7119 ; 00001bcfH
  0ad4d	c7 85 3c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T126[ebp+4], 0
  0ad57	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0ad5c	c6 45 fc b5	 mov	 BYTE PTR __$EHRec$[ebp+8], 181 ; 000000b5H
  0ad60	8d 85 30 67 ff
	ff		 lea	 eax, DWORD PTR $T125[ebp]
  0ad66	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DGGINAPB@P?9TWO?5INDUSTRIES?0?5INC?4@
  0ad6b	50		 push	 eax
  0ad6c	8d 8d 90 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28512]
  0ad72	c7 85 30 67 ff
	ff de 1b 00 00	 mov	 DWORD PTR $T125[ebp], 7134 ; 00001bdeH
  0ad7c	c7 85 34 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T125[ebp+4], 0
  0ad86	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0ad8b	c6 45 fc b6	 mov	 BYTE PTR __$EHRec$[ebp+8], 182 ; 000000b6H
  0ad8f	8d 85 28 67 ff
	ff		 lea	 eax, DWORD PTR $T124[ebp]
  0ad95	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KIMIGBPK@Orient?5Semiconductor?5Electronic@
  0ad9a	50		 push	 eax
  0ad9b	8d 8d b0 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28544]
  0ada1	c7 85 28 67 ff
	ff f6 1b 00 00	 mov	 DWORD PTR $T124[ebp], 7158 ; 00001bf6H
  0adab	c7 85 2c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T124[ebp+4], 0
  0adb5	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0adba	c6 45 fc b7	 mov	 BYTE PTR __$EHRec$[ebp+8], 183 ; 000000b7H
  0adbe	8d 85 20 67 ff
	ff		 lea	 eax, DWORD PTR $T123[ebp]
  0adc4	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GEFGPOJP@SHENZHEN?5DNS?5INDUSTRIES?5CO?4?0?5LT@
  0adc9	50		 push	 eax
  0adca	8d 8d d0 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28576]
  0add0	c7 85 20 67 ff
	ff 27 1c 00 00	 mov	 DWORD PTR $T123[ebp], 7207 ; 00001c27H
  0adda	c7 85 24 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T123[ebp+4], 0
  0ade4	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0ade9	c6 45 fc b8	 mov	 BYTE PTR __$EHRec$[ebp+8], 184 ; 000000b8H
  0aded	c7 85 18 67 ff
	ff 31 1c 00 00	 mov	 DWORD PTR $T122[ebp], 7217 ; 00001c31H
  0adf7	c7 85 1c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T122[ebp+4], 0
  0ae01	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DNDLJCDA@LS?5Mtron?5Ltd?4@
  0ae06	8d 85 18 67 ff
	ff		 lea	 eax, DWORD PTR $T122[ebp]
  0ae0c	50		 push	 eax
  0ae0d	8d 8d f0 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28608]
  0ae13	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0ae18	c6 45 fc b9	 mov	 BYTE PTR __$EHRec$[ebp+8], 185 ; 000000b9H
  0ae1c	8d 85 58 63 ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0ae22	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PPLCBMMB@Philips?5?$CG?5Lite?9ON?5Digital?5Solut@
  0ae27	50		 push	 eax
  0ae28	8d 8d 10 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28640]
  0ae2e	c7 85 58 63 ff
	ff 6b 1c 00 00	 mov	 DWORD PTR $T2[ebp], 7275 ; 00001c6bH
  0ae38	c7 85 5c 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+4], 0
  0ae42	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0ae47	c6 45 fc ba	 mov	 BYTE PTR __$EHRec$[ebp+8], 186 ; 000000baH
  0ae4b	8d 85 08 67 ff
	ff		 lea	 eax, DWORD PTR $T120[ebp]
  0ae51	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NCJEDCIM@ASTRON?5INTERNATIONAL?5CORP?4@
  0ae56	50		 push	 eax
  0ae57	8d 8d 30 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28672]
  0ae5d	c7 85 08 67 ff
	ff 8e 1c 00 00	 mov	 DWORD PTR $T120[ebp], 7310 ; 00001c8eH
  0ae67	c7 85 0c 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T120[ebp+4], 0
  0ae71	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0ae76	c6 45 fc bb	 mov	 BYTE PTR __$EHRec$[ebp+8], 187 ; 000000bbH
  0ae7a	8d 85 00 67 ff
	ff		 lea	 eax, DWORD PTR $T119[ebp]
  0ae80	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GEGPHPDK@ALPINE?5ELECTRONICS?0?5INC?4@
  0ae85	50		 push	 eax
  0ae86	8d 8d 50 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28704]
  0ae8c	c7 85 00 67 ff
	ff 98 1c 00 00	 mov	 DWORD PTR $T119[ebp], 7320 ; 00001c98H
  0ae96	c7 85 04 67 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T119[ebp+4], 0
  0aea0	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0aea5	c6 45 fc bc	 mov	 BYTE PTR __$EHRec$[ebp+8], 188 ; 000000bcH
  0aea9	8d 85 f8 66 ff
	ff		 lea	 eax, DWORD PTR $T118[ebp]
  0aeaf	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CHCFPHFA@Aces?5Electronics?5Co?4?0?5Ltd?4@
  0aeb4	50		 push	 eax
  0aeb5	8d 8d 70 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28736]
  0aebb	c7 85 f8 66 ff
	ff b3 1c 00 00	 mov	 DWORD PTR $T118[ebp], 7347 ; 00001cb3H
  0aec5	c7 85 fc 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T118[ebp+4], 0
  0aecf	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0aed4	c6 45 fc bd	 mov	 BYTE PTR __$EHRec$[ebp+8], 189 ; 000000bdH
  0aed8	8d 85 f0 66 ff
	ff		 lea	 eax, DWORD PTR $T117[ebp]
  0aede	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EIGDHDFJ@OPEX?5CORPORATION@
  0aee3	50		 push	 eax
  0aee4	8d 8d 90 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28768]
  0aeea	c7 85 f0 66 ff
	ff b4 1c 00 00	 mov	 DWORD PTR $T117[ebp], 7348 ; 00001cb4H
  0aef4	c7 85 f4 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T117[ebp+4], 0
  0aefe	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0af03	c6 45 fc be	 mov	 BYTE PTR __$EHRec$[ebp+8], 190 ; 000000beH
  0af07	8d 85 e8 66 ff
	ff		 lea	 eax, DWORD PTR $T116[ebp]
  0af0d	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BKKOBFJG@Telecommunications?5Technology?5A@
  0af12	50		 push	 eax
  0af13	8d 8d b0 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28800]
  0af19	c7 85 e8 66 ff
	ff de 1c 00 00	 mov	 DWORD PTR $T116[ebp], 7390 ; 00001cdeH
  0af23	c7 85 ec 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T116[ebp+4], 0
  0af2d	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0af32	c6 45 fc bf	 mov	 BYTE PTR __$EHRec$[ebp+8], 191 ; 000000bfH
  0af36	8d 85 e0 66 ff
	ff		 lea	 eax, DWORD PTR $T115[ebp]
  0af3c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EEOPBIIG@Visteon?5Corporation@
  0af41	50		 push	 eax
  0af42	8d 8d d0 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28832]
  0af48	c7 85 e0 66 ff
	ff 0a 1d 00 00	 mov	 DWORD PTR $T115[ebp], 7434 ; 00001d0aH
  0af52	c7 85 e4 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T115[ebp+4], 0
  0af5c	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0af61	c6 45 fc c0	 mov	 BYTE PTR __$EHRec$[ebp+8], 192 ; 000000c0H
  0af65	8d 85 d8 66 ff
	ff		 lea	 eax, DWORD PTR $T114[ebp]
  0af6b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GDMPIAIK@Horng?5Tong?5Enterprise?5Co?4?0?5Ltd?4@
  0af70	50		 push	 eax
  0af71	8d 8d f0 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28864]
  0af77	c7 85 d8 66 ff
	ff 29 1d 00 00	 mov	 DWORD PTR $T114[ebp], 7465 ; 00001d29H
  0af81	c7 85 dc 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T114[ebp+4], 0
  0af8b	e8 00 00 00 00	 call	 ??$?0_KAAY0CA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[32],0>
  0af90	c6 45 fc c1	 mov	 BYTE PTR __$EHRec$[ebp+8], 193 ; 000000c1H
  0af94	c7 85 d0 66 ff
	ff 4d 1d 00 00	 mov	 DWORD PTR $T113[ebp], 7501 ; 00001d4dH
  0af9e	c7 85 d4 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T113[ebp+4], 0
  0afa8	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EEHMEIJP@Pegatron?5Corporation@
  0afad	8d 85 d0 66 ff
	ff		 lea	 eax, DWORD PTR $T113[ebp]
  0afb3	50		 push	 eax
  0afb4	8d 8d 10 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28896]
  0afba	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0afbf	c6 45 fc c2	 mov	 BYTE PTR __$EHRec$[ebp+8], 194 ; 000000c2H
  0afc3	8d 85 c8 66 ff
	ff		 lea	 eax, DWORD PTR $T112[ebp]
  0afc9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HAMMCKPN@Fresco?5Logic?5Inc?4@
  0afce	50		 push	 eax
  0afcf	8d 8d 30 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28928]
  0afd5	c7 85 c8 66 ff
	ff 5c 1d 00 00	 mov	 DWORD PTR $T112[ebp], 7516 ; 00001d5cH
  0afdf	c7 85 cc 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T112[ebp+4], 0
  0afe9	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0afee	c6 45 fc c3	 mov	 BYTE PTR __$EHRec$[ebp+8], 195 ; 000000c3H
  0aff2	8d 85 c0 66 ff
	ff		 lea	 eax, DWORD PTR $T111[ebp]
  0aff8	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NKBOOFNF@Walta?5Electronic?5Co?4?0?5Ltd?4@
  0affd	50		 push	 eax
  0affe	8d 8d 50 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28960]
  0b004	c7 85 c0 66 ff
	ff 69 1d 00 00	 mov	 DWORD PTR $T111[ebp], 7529 ; 00001d69H
  0b00e	c7 85 c4 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T111[ebp+4], 0
  0b018	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0b01d	c6 45 fc c4	 mov	 BYTE PTR __$EHRec$[ebp+8], 196 ; 000000c4H
  0b021	8d 85 b8 66 ff
	ff		 lea	 eax, DWORD PTR $T110[ebp]
  0b027	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IMGLKMI@Yueqing?5Changling?5Electronic?5In@
  0b02c	50		 push	 eax
  0b02d	8d 8d 70 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28992]
  0b033	c7 85 b8 66 ff
	ff 77 1d 00 00	 mov	 DWORD PTR $T110[ebp], 7543 ; 00001d77H
  0b03d	c7 85 bc 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T110[ebp+4], 0
  0b047	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  0b04c	c6 45 fc c5	 mov	 BYTE PTR __$EHRec$[ebp+8], 197 ; 000000c5H
  0b050	8d 85 b0 66 ff
	ff		 lea	 eax, DWORD PTR $T109[ebp]
  0b056	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FNCNBIIF@Parade?5Technologies?0?5Inc?4@
  0b05b	50		 push	 eax
  0b05c	8d 8d 90 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29024]
  0b062	c7 85 b0 66 ff
	ff a0 1d 00 00	 mov	 DWORD PTR $T109[ebp], 7584 ; 00001da0H
  0b06c	c7 85 b4 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T109[ebp+4], 0
  0b076	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0b07b	c6 45 fc c6	 mov	 BYTE PTR __$EHRec$[ebp+8], 198 ; 000000c6H
  0b07f	8d 85 a8 66 ff
	ff		 lea	 eax, DWORD PTR $T108[ebp]
  0b085	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BBLGIHKL@Actions?5Microelectronics?5Co?4?0?5L@
  0b08a	50		 push	 eax
  0b08b	8d 8d b0 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29056]
  0b091	c7 85 a8 66 ff
	ff e1 1d 00 00	 mov	 DWORD PTR $T108[ebp], 7649 ; 00001de1H
  0b09b	c7 85 ac 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T108[ebp+4], 0
  0b0a5	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0b0aa	c6 45 fc c7	 mov	 BYTE PTR __$EHRec$[ebp+8], 199 ; 000000c7H
  0b0ae	8d 85 a0 66 ff
	ff		 lea	 eax, DWORD PTR $T107[ebp]
  0b0b4	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JOHIKOGB@China?5Telecommunication?5Technol@
  0b0b9	50		 push	 eax
  0b0ba	8d 8d d0 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29088]
  0b0c0	c7 85 a0 66 ff
	ff f2 1d 00 00	 mov	 DWORD PTR $T107[ebp], 7666 ; 00001df2H
  0b0ca	c7 85 a4 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T107[ebp+4], 0
  0b0d4	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  0b0d9	c6 45 fc c8	 mov	 BYTE PTR __$EHRec$[ebp+8], 200 ; 000000c8H
  0b0dd	8d 85 98 66 ff
	ff		 lea	 eax, DWORD PTR $T106[ebp]
  0b0e3	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IHINPAOL@SHEN?5ZHEN?5FORMAN?5PRECISION?5INDU@
  0b0e8	50		 push	 eax
  0b0e9	8d 8d f0 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29120]
  0b0ef	c7 85 98 66 ff
	ff f4 1d 00 00	 mov	 DWORD PTR $T106[ebp], 7668 ; 00001df4H
  0b0f9	c7 85 9c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T106[ebp+4], 0
  0b103	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  0b108	c6 45 fc c9	 mov	 BYTE PTR __$EHRec$[ebp+8], 201 ; 000000c9H
  0b10c	8d 85 90 66 ff
	ff		 lea	 eax, DWORD PTR $T105[ebp]
  0b112	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DBPMBKKE@FLIR?5Integrated?5Imaging?5Solutio@
  0b117	50		 push	 eax
  0b118	8d 8d 10 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29152]
  0b11e	c7 85 90 66 ff
	ff 10 1e 00 00	 mov	 DWORD PTR $T105[ebp], 7696 ; 00001e10H
  0b128	c7 85 94 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T105[ebp+4], 0
  0b132	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0b137	c6 45 fc ca	 mov	 BYTE PTR __$EHRec$[ebp+8], 202 ; 000000caH
  0b13b	c7 85 88 66 ff
	ff 47 1e 00 00	 mov	 DWORD PTR $T104[ebp], 7751 ; 00001e47H
  0b145	c7 85 8c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T104[ebp+4], 0
  0b14f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@BKOLJNN@HUNG?5TA?5H?4T?4ENTERPRISE?5CO?4?0?5LTD@
  0b154	8d 85 88 66 ff
	ff		 lea	 eax, DWORD PTR $T104[ebp]
  0b15a	50		 push	 eax
  0b15b	8d 8d 30 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29184]
  0b161	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  0b166	c6 45 fc cb	 mov	 BYTE PTR __$EHRec$[ebp+8], 203 ; 000000cbH
  0b16a	8d 85 80 66 ff
	ff		 lea	 eax, DWORD PTR $T103[ebp]
  0b170	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JAAJJDAF@Etron?5Technology?0?5Inc?4@
  0b175	50		 push	 eax
  0b176	8d 8d 50 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29216]
  0b17c	c7 85 80 66 ff
	ff 4e 1e 00 00	 mov	 DWORD PTR $T103[ebp], 7758 ; 00001e4eH
  0b186	c7 85 84 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T103[ebp+4], 0
  0b190	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0b195	c6 45 fc cc	 mov	 BYTE PTR __$EHRec$[ebp+8], 204 ; 000000ccH
  0b199	8d 85 78 66 ff
	ff		 lea	 eax, DWORD PTR $T102[ebp]
  0b19f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OPAJPFGF@COMLINK?5ELECTRONICS?5CO?4?0?5LTD?4@
  0b1a4	50		 push	 eax
  0b1a5	8d 8d 70 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29248]
  0b1ab	c7 85 78 66 ff
	ff 73 1e 00 00	 mov	 DWORD PTR $T102[ebp], 7795 ; 00001e73H
  0b1b5	c7 85 7c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T102[ebp+4], 0
  0b1bf	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0b1c4	c6 45 fc cd	 mov	 BYTE PTR __$EHRec$[ebp+8], 205 ; 000000cdH
  0b1c8	8d 85 70 66 ff
	ff		 lea	 eax, DWORD PTR $T101[ebp]
  0b1ce	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JAHIBMAB@HIBEST?5Electronic?5?$CIDongGuan?$CJ?5Co@
  0b1d3	50		 push	 eax
  0b1d4	8d 8d 90 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29280]
  0b1da	c7 85 70 66 ff
	ff 8a 1e 00 00	 mov	 DWORD PTR $T101[ebp], 7818 ; 00001e8aH
  0b1e4	c7 85 74 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T101[ebp+4], 0
  0b1ee	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0b1f3	c6 45 fc ce	 mov	 BYTE PTR __$EHRec$[ebp+8], 206 ; 000000ceH
  0b1f7	8d 85 68 66 ff
	ff		 lea	 eax, DWORD PTR $T100[ebp]
  0b1fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EHNBGDFF@Other?5World?5Computing@
  0b202	50		 push	 eax
  0b203	8d 8d b0 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29312]
  0b209	c7 85 68 66 ff
	ff 91 1e 00 00	 mov	 DWORD PTR $T100[ebp], 7825 ; 00001e91H
  0b213	c7 85 6c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T100[ebp+4], 0
  0b21d	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0b222	c6 45 fc cf	 mov	 BYTE PTR __$EHRec$[ebp+8], 207 ; 000000cfH
  0b226	8d 85 60 66 ff
	ff		 lea	 eax, DWORD PTR $T99[ebp]
  0b22c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IFPLLPOK@WIN?5WIN?5PRECISION?5INDUSTRIAL?5CO@
  0b231	50		 push	 eax
  0b232	8d 8d d0 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29344]
  0b238	c7 85 60 66 ff
	ff b7 1e 00 00	 mov	 DWORD PTR $T99[ebp], 7863 ; 00001eb7H
  0b242	c7 85 64 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T99[ebp+4], 0
  0b24c	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0b251	c6 45 fc d0	 mov	 BYTE PTR __$EHRec$[ebp+8], 208 ; 000000d0H
  0b255	8d 85 58 66 ff
	ff		 lea	 eax, DWORD PTR $T98[ebp]
  0b25b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PIBOCPGJ@Gefen?5Inc?4@
  0b260	50		 push	 eax
  0b261	8d 8d f0 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29376]
  0b267	c7 85 58 66 ff
	ff c7 1e 00 00	 mov	 DWORD PTR $T98[ebp], 7879 ; 00001ec7H
  0b271	c7 85 5c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T98[ebp+4], 0
  0b27b	e8 00 00 00 00	 call	 ??$?0_KAAY0L@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0L@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[11],0>
  0b280	c6 45 fc d1	 mov	 BYTE PTR __$EHRec$[ebp+8], 209 ; 000000d1H
  0b284	8d 85 50 66 ff
	ff		 lea	 eax, DWORD PTR $T97[ebp]
  0b28a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@IADLJBAM@MOSER?5BAER?5INDIA?5LIMITED@
  0b28f	50		 push	 eax
  0b290	8d 8d 10 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29408]
  0b296	c7 85 50 66 ff
	ff c9 1e 00 00	 mov	 DWORD PTR $T97[ebp], 7881 ; 00001ec9H
  0b2a0	c7 85 54 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T97[ebp+4], 0
  0b2aa	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0b2af	c6 45 fc d2	 mov	 BYTE PTR __$EHRec$[ebp+8], 210 ; 000000d2H
  0b2b3	8d 85 48 66 ff
	ff		 lea	 eax, DWORD PTR $T96[ebp]
  0b2b9	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BPEFDKAJ@SHENZHEN?5EVERWIN?5PRECISION?5TECH@
  0b2be	50		 push	 eax
  0b2bf	8d 8d 30 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29440]
  0b2c5	c7 85 48 66 ff
	ff e6 1e 00 00	 mov	 DWORD PTR $T96[ebp], 7910 ; 00001ee6H
  0b2cf	c7 85 4c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T96[ebp+4], 0
  0b2d9	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0b2de	c6 45 fc d3	 mov	 BYTE PTR __$EHRec$[ebp+8], 211 ; 000000d3H
  0b2e2	c7 85 40 66 ff
	ff f3 1e 00 00	 mov	 DWORD PTR $T95[ebp], 7923 ; 00001ef3H
  0b2ec	c7 85 44 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T95[ebp+4], 0
  0b2f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IALAEKLI@JIANGXI?5SHIP?5ELECTRONICS?5CO?4?0?5L@
  0b2fb	8d 85 40 66 ff
	ff		 lea	 eax, DWORD PTR $T95[ebp]
  0b301	50		 push	 eax
  0b302	8d 8d 50 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29472]
  0b308	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0b30d	c6 45 fc d4	 mov	 BYTE PTR __$EHRec$[ebp+8], 212 ; 000000d4H
  0b311	8d 85 38 66 ff
	ff		 lea	 eax, DWORD PTR $T94[ebp]
  0b317	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DEFAOMGF@Scosche?5Industries@
  0b31c	50		 push	 eax
  0b31d	8d 8d 70 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29504]
  0b323	c7 85 38 66 ff
	ff 21 1f 00 00	 mov	 DWORD PTR $T94[ebp], 7969 ; 00001f21H
  0b32d	c7 85 3c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T94[ebp+4], 0
  0b337	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0b33c	c6 45 fc d5	 mov	 BYTE PTR __$EHRec$[ebp+8], 213 ; 000000d5H
  0b340	8d 85 30 66 ff
	ff		 lea	 eax, DWORD PTR $T93[ebp]
  0b346	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@COMGKDHO@Analogix?5Semiconductor?0?5Inc?4@
  0b34b	50		 push	 eax
  0b34c	8d 8d 90 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29536]
  0b352	c7 85 30 66 ff
	ff 29 1f 00 00	 mov	 DWORD PTR $T93[ebp], 7977 ; 00001f29H
  0b35c	c7 85 34 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T93[ebp+4], 0
  0b366	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0b36b	c6 45 fc d6	 mov	 BYTE PTR __$EHRec$[ebp+8], 214 ; 000000d6H
  0b36f	8d 85 28 66 ff
	ff		 lea	 eax, DWORD PTR $T92[ebp]
  0b375	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MEDMJIF@Chang?5Yang?5Electronics?5Company?5@
  0b37a	50		 push	 eax
  0b37b	8d 8d b0 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29568]
  0b381	c7 85 28 66 ff
	ff 3c 1f 00 00	 mov	 DWORD PTR $T92[ebp], 7996 ; 00001f3cH
  0b38b	c7 85 2c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T92[ebp+4], 0
  0b395	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  0b39a	c6 45 fc d7	 mov	 BYTE PTR __$EHRec$[ebp+8], 215 ; 000000d7H
  0b39e	8d 85 20 66 ff
	ff		 lea	 eax, DWORD PTR $T91[ebp]
  0b3a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GGCBPHPK@Innostor?5Co?4?0?5Ltd?4@
  0b3a9	50		 push	 eax
  0b3aa	8d 8d d0 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29600]
  0b3b0	c7 85 20 66 ff
	ff 75 1f 00 00	 mov	 DWORD PTR $T91[ebp], 8053 ; 00001f75H
  0b3ba	c7 85 24 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T91[ebp+4], 0
  0b3c4	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0b3c9	c6 45 fc d8	 mov	 BYTE PTR __$EHRec$[ebp+8], 216 ; 000000d8H
  0b3cd	8d 85 18 66 ff
	ff		 lea	 eax, DWORD PTR $T90[ebp]
  0b3d3	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HMMGMJCB@Dongguan?5Goldconn?5Precision?5Ele@
  0b3d8	50		 push	 eax
  0b3d9	8d 8d f0 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29632]
  0b3df	c7 85 18 66 ff
	ff 89 1f 00 00	 mov	 DWORD PTR $T90[ebp], 8073 ; 00001f89H
  0b3e9	c7 85 1c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T90[ebp+4], 0
  0b3f3	e8 00 00 00 00	 call	 ??$?0_KAAY0DC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[50],0>
  0b3f8	c6 45 fc d9	 mov	 BYTE PTR __$EHRec$[ebp+8], 217 ; 000000d9H
  0b3fc	8d 85 10 66 ff
	ff		 lea	 eax, DWORD PTR $T89[ebp]
  0b402	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LPIGCLDE@Morning?5Star?5Industrial?5Co?4?0?5Lt@
  0b407	50		 push	 eax
  0b408	8d 8d 10 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29664]
  0b40e	c7 85 10 66 ff
	ff 8a 1f 00 00	 mov	 DWORD PTR $T89[ebp], 8074 ; 00001f8aH
  0b418	c7 85 14 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T89[ebp+4], 0
  0b422	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0b427	c6 45 fc da	 mov	 BYTE PTR __$EHRec$[ebp+8], 218 ; 000000daH
  0b42b	8d 85 08 66 ff
	ff		 lea	 eax, DWORD PTR $T88[ebp]
  0b431	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@FAEGJHDE@Unify?5Software?5and?5Solutions?5Gm@
  0b436	50		 push	 eax
  0b437	8d 8d 30 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29696]
  0b43d	c7 85 08 66 ff
	ff b5 1f 00 00	 mov	 DWORD PTR $T88[ebp], 8117 ; 00001fb5H
  0b447	c7 85 0c 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T88[ebp+4], 0
  0b451	e8 00 00 00 00	 call	 ??$?0_KAAY0CL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[43],0>
  0b456	c6 45 fc db	 mov	 BYTE PTR __$EHRec$[ebp+8], 219 ; 000000dbH
  0b45a	8d 85 00 66 ff
	ff		 lea	 eax, DWORD PTR $T87[ebp]
  0b460	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GMPBKEIC@NXP?5Semiconductors@
  0b465	50		 push	 eax
  0b466	8d 8d 50 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29728]
  0b46c	c7 85 00 66 ff
	ff c9 1f 00 00	 mov	 DWORD PTR $T87[ebp], 8137 ; 00001fc9H
  0b476	c7 85 04 66 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T87[ebp+4], 0
  0b480	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0b485	c6 45 fc dc	 mov	 BYTE PTR __$EHRec$[ebp+8], 220 ; 000000dcH
  0b489	c7 85 f8 65 ff
	ff f5 1f 00 00	 mov	 DWORD PTR $T86[ebp], 8181 ; 00001ff5H
  0b493	c7 85 fc 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T86[ebp+4], 0
  0b49d	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KONADFN@Changzhou?5Wujin?5BEST?5Electronic@
  0b4a2	8d 85 f8 65 ff
	ff		 lea	 eax, DWORD PTR $T86[ebp]
  0b4a8	50		 push	 eax
  0b4a9	8d 8d 70 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29760]
  0b4af	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  0b4b4	c6 45 fc dd	 mov	 BYTE PTR __$EHRec$[ebp+8], 221 ; 000000ddH
  0b4b8	8d 85 f0 65 ff
	ff		 lea	 eax, DWORD PTR $T85[ebp]
  0b4be	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@GOBPPKNF@Belkin?5Electronic?5?$CIChangzhou?$CJ?5C@
  0b4c3	50		 push	 eax
  0b4c4	8d 8d 90 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29792]
  0b4ca	c7 85 f0 65 ff
	ff 0d 20 00 00	 mov	 DWORD PTR $T85[ebp], 8205 ; 0000200dH
  0b4d4	c7 85 f4 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T85[ebp+4], 0
  0b4de	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0b4e3	c6 45 fc de	 mov	 BYTE PTR __$EHRec$[ebp+8], 222 ; 000000deH
  0b4e7	8d 85 e8 65 ff
	ff		 lea	 eax, DWORD PTR $T84[ebp]
  0b4ed	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DHGBCKNB@Freeport?5Resources?5Enterprises?5@
  0b4f2	50		 push	 eax
  0b4f3	8d 8d b0 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29824]
  0b4f9	c7 85 e8 65 ff
	ff 1c 20 00 00	 mov	 DWORD PTR $T84[ebp], 8220 ; 0000201cH
  0b503	c7 85 ec 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T84[ebp+4], 0
  0b50d	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0b512	c6 45 fc df	 mov	 BYTE PTR __$EHRec$[ebp+8], 223 ; 000000dfH
  0b516	8d 85 e0 65 ff
	ff		 lea	 eax, DWORD PTR $T83[ebp]
  0b51c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FBHBCILE@Shenzhen?5Tronixin?5Electronics?5C@
  0b521	50		 push	 eax
  0b522	8d 8d d0 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29856]
  0b528	c7 85 e0 65 ff
	ff 5c 20 00 00	 mov	 DWORD PTR $T83[ebp], 8284 ; 0000205cH
  0b532	c7 85 e4 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T83[ebp+4], 0
  0b53c	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0b541	c6 45 fc e0	 mov	 BYTE PTR __$EHRec$[ebp+8], 224 ; 000000e0H
  0b545	8d 85 d8 65 ff
	ff		 lea	 eax, DWORD PTR $T82[ebp]
  0b54b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OEPJLPBL@Unicorn?5Electronics?5Components?5@
  0b550	50		 push	 eax
  0b551	8d 8d f0 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29888]
  0b557	c7 85 d8 65 ff
	ff 66 20 00 00	 mov	 DWORD PTR $T82[ebp], 8294 ; 00002066H
  0b561	c7 85 dc 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T82[ebp+4], 0
  0b56b	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0b570	c6 45 fc e1	 mov	 BYTE PTR __$EHRec$[ebp+8], 225 ; 000000e1H
  0b574	8d 85 d0 65 ff
	ff		 lea	 eax, DWORD PTR $T81[ebp]
  0b57a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DJALMDKA@CESI?5Technology?5Co?4?0?5Ltd?4@
  0b57f	50		 push	 eax
  0b580	8d 8d 10 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29920]
  0b586	c7 85 d0 65 ff
	ff 7d 20 00 00	 mov	 DWORD PTR $T81[ebp], 8317 ; 0000207dH
  0b590	c7 85 d4 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T81[ebp+4], 0
  0b59a	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0b59f	c6 45 fc e2	 mov	 BYTE PTR __$EHRec$[ebp+8], 226 ; 000000e2H
  0b5a3	8d 85 c8 65 ff
	ff		 lea	 eax, DWORD PTR $T80[ebp]
  0b5a9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JJLIGBFN@Luxshare?9ICT@
  0b5ae	50		 push	 eax
  0b5af	8d 8d 30 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29952]
  0b5b5	c7 85 c8 65 ff
	ff 8e 20 00 00	 mov	 DWORD PTR $T80[ebp], 8334 ; 0000208eH
  0b5bf	c7 85 cc 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T80[ebp+4], 0
  0b5c9	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  0b5ce	c6 45 fc e3	 mov	 BYTE PTR __$EHRec$[ebp+8], 227 ; 000000e3H
  0b5d2	8d 85 c0 65 ff
	ff		 lea	 eax, DWORD PTR $T79[ebp]
  0b5d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CFCNDLPN@CE?5LINK?5LIMITED@
  0b5dd	50		 push	 eax
  0b5de	8d 8d 50 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29984]
  0b5e4	c7 85 c0 65 ff
	ff 95 20 00 00	 mov	 DWORD PTR $T79[ebp], 8341 ; 00002095H
  0b5ee	c7 85 c4 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T79[ebp+4], 0
  0b5f8	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0b5fd	c6 45 fc e4	 mov	 BYTE PTR __$EHRec$[ebp+8], 228 ; 000000e4H
  0b601	8d 85 b8 65 ff
	ff		 lea	 eax, DWORD PTR $T78[ebp]
  0b607	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@DDLAAOCL@Shenzhen?5Microconn?5Investment?5a@
  0b60c	50		 push	 eax
  0b60d	8d 8d 70 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30016]
  0b613	c7 85 b8 65 ff
	ff 96 20 00 00	 mov	 DWORD PTR $T78[ebp], 8342 ; 00002096H
  0b61d	c7 85 bc 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T78[ebp+4], 0
  0b627	e8 00 00 00 00	 call	 ??$?0_KAAY0DI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[56],0>
  0b62c	c6 45 fc e5	 mov	 BYTE PTR __$EHRec$[ebp+8], 229 ; 000000e5H
  0b630	c7 85 b0 65 ff
	ff be 20 00 00	 mov	 DWORD PTR $T77[ebp], 8382 ; 000020beH
  0b63a	c7 85 b4 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T77[ebp+4], 0
  0b644	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HMKPCFOM@BURY?5GmbH?5?$CG?5Co?4?5KG@
  0b649	8d 85 b0 65 ff
	ff		 lea	 eax, DWORD PTR $T77[ebp]
  0b64f	50		 push	 eax
  0b650	8d 8d 90 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30048]
  0b656	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0b65b	c6 45 fc e6	 mov	 BYTE PTR __$EHRec$[ebp+8], 230 ; 000000e6H
  0b65f	8d 85 a8 65 ff
	ff		 lea	 eax, DWORD PTR $T76[ebp]
  0b665	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EIBNNPGD@FENGHUA?5KINGSUN?5CO?4?0?5LTD?4@
  0b66a	50		 push	 eax
  0b66b	8d 8d b0 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30080]
  0b671	c7 85 a8 65 ff
	ff c0 20 00 00	 mov	 DWORD PTR $T76[ebp], 8384 ; 000020c0H
  0b67b	c7 85 ac 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T76[ebp+4], 0
  0b685	e8 00 00 00 00	 call	 ??$?0_KAAY0BK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[26],0>
  0b68a	c6 45 fc e7	 mov	 BYTE PTR __$EHRec$[ebp+8], 231 ; 000000e7H
  0b68e	8d 85 a0 65 ff
	ff		 lea	 eax, DWORD PTR $T75[ebp]
  0b694	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@EMOPPBDG@Sumitomo?5Electric?5Ind?4?0?5Ltd?4?0?5O@
  0b699	50		 push	 eax
  0b69a	8d 8d d0 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30112]
  0b6a0	c7 85 a0 65 ff
	ff c2 20 00 00	 mov	 DWORD PTR $T75[ebp], 8386 ; 000020c2H
  0b6aa	c7 85 a4 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T75[ebp+4], 0
  0b6b4	e8 00 00 00 00	 call	 ??$?0_KAAY0DE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[52],0>
  0b6b9	c6 45 fc e8	 mov	 BYTE PTR __$EHRec$[ebp+8], 232 ; 000000e8H
  0b6bd	8d 85 98 65 ff
	ff		 lea	 eax, DWORD PTR $T74[ebp]
  0b6c3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DAENHNHN@XIMEA?5s?4r?4o?4@
  0b6c8	50		 push	 eax
  0b6c9	8d 8d f0 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30144]
  0b6cf	c7 85 98 65 ff
	ff f7 20 00 00	 mov	 DWORD PTR $T74[ebp], 8439 ; 000020f7H
  0b6d9	c7 85 9c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T74[ebp+4], 0
  0b6e3	e8 00 00 00 00	 call	 ??$?0_KAAY0N@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0N@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[13],0>
  0b6e8	c6 45 fc e9	 mov	 BYTE PTR __$EHRec$[ebp+8], 233 ; 000000e9H
  0b6ec	8d 85 90 65 ff
	ff		 lea	 eax, DWORD PTR $T73[ebp]
  0b6f2	68 00 00 00 00	 push	 OFFSET ??_C@_08ILFGDKBA@Tobii?5AB@
  0b6f7	50		 push	 eax
  0b6f8	8d 8d 10 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30176]
  0b6fe	c7 85 90 65 ff
	ff 04 21 00 00	 mov	 DWORD PTR $T73[ebp], 8452 ; 00002104H
  0b708	c7 85 94 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T73[ebp+4], 0
  0b712	e8 00 00 00 00	 call	 ??$?0_KAAY08$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY08$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[9],0>
  0b717	c6 45 fc ea	 mov	 BYTE PTR __$EHRec$[ebp+8], 234 ; 000000eaH
  0b71b	8d 85 88 65 ff
	ff		 lea	 eax, DWORD PTR $T72[ebp]
  0b721	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GBIKBMAL@VIA?5Labs?0?5Inc?4@
  0b726	50		 push	 eax
  0b727	8d 8d 30 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30208]
  0b72d	c7 85 88 65 ff
	ff 09 21 00 00	 mov	 DWORD PTR $T72[ebp], 8457 ; 00002109H
  0b737	c7 85 8c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T72[ebp+4], 0
  0b741	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0b746	c6 45 fc eb	 mov	 BYTE PTR __$EHRec$[ebp+8], 235 ; 000000ebH
  0b74a	8d 85 80 65 ff
	ff		 lea	 eax, DWORD PTR $T71[ebp]
  0b750	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KNEFPAOB@Dongguan?5Linoya?5Wire?5?$CG?5Cable?5Co@
  0b755	50		 push	 eax
  0b756	8d 8d 50 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30240]
  0b75c	c7 85 80 65 ff
	ff 2c 21 00 00	 mov	 DWORD PTR $T71[ebp], 8492 ; 0000212cH
  0b766	c7 85 84 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T71[ebp+4], 0
  0b770	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0b775	c6 45 fc ec	 mov	 BYTE PTR __$EHRec$[ebp+8], 236 ; 000000ecH
  0b779	8d 85 78 65 ff
	ff		 lea	 eax, DWORD PTR $T70[ebp]
  0b77f	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CNOJBLBI@Amphenol?5AssembleTech?5?$CIXiamen?$CJ?5@
  0b784	50		 push	 eax
  0b785	8d 8d 70 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30272]
  0b78b	c7 85 78 65 ff
	ff 2e 21 00 00	 mov	 DWORD PTR $T70[ebp], 8494 ; 0000212eH
  0b795	c7 85 7c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T70[ebp+4], 0
  0b79f	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0b7a4	c6 45 fc ed	 mov	 BYTE PTR __$EHRec$[ebp+8], 237 ; 000000edH
  0b7a8	8d 85 70 65 ff
	ff		 lea	 eax, DWORD PTR $T69[ebp]
  0b7ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LDDEGFID@Y?5Soft?5Corporation@
  0b7b3	50		 push	 eax
  0b7b4	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30304]
  0b7ba	c7 85 70 65 ff
	ff 4c 21 00 00	 mov	 DWORD PTR $T69[ebp], 8524 ; 0000214cH
  0b7c4	c7 85 74 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T69[ebp+4], 0
  0b7ce	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0b7d3	c6 45 fc ee	 mov	 BYTE PTR __$EHRec$[ebp+8], 238 ; 000000eeH
  0b7d7	c7 85 68 65 ff
	ff 66 21 00 00	 mov	 DWORD PTR $T68[ebp], 8550 ; 00002166H
  0b7e1	c7 85 6c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T68[ebp+4], 0
  0b7eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FBCKNBLM@JVC?5KENWOOD?5Corporation@
  0b7f0	8d 85 68 65 ff
	ff		 lea	 eax, DWORD PTR $T68[ebp]
  0b7f6	50		 push	 eax
  0b7f7	8d 8d b0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30336]
  0b7fd	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0b802	c6 45 fc ef	 mov	 BYTE PTR __$EHRec$[ebp+8], 239 ; 000000efH
  0b806	8d 85 60 65 ff
	ff		 lea	 eax, DWORD PTR $T67[ebp]
  0b80c	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@NEMALCAO@Zhejiang?5Fousine?5Science?5?$CG?5Tech@
  0b811	50		 push	 eax
  0b812	8d 8d d0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30368]
  0b818	c7 85 60 65 ff
	ff 67 21 00 00	 mov	 DWORD PTR $T67[ebp], 8551 ; 00002167H
  0b822	c7 85 64 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T67[ebp+4], 0
  0b82c	e8 00 00 00 00	 call	 ??$?0_KAAY0DA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[48],0>
  0b831	c6 45 fc f0	 mov	 BYTE PTR __$EHRec$[ebp+8], 240 ; 000000f0H
  0b835	8d 85 58 65 ff
	ff		 lea	 eax, DWORD PTR $T66[ebp]
  0b83b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BKHGEKPK@Transcend?5Information?0?5Inc?4@
  0b840	50		 push	 eax
  0b841	8d 8d f0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30400]
  0b847	c7 85 58 65 ff
	ff 74 21 00 00	 mov	 DWORD PTR $T66[ebp], 8564 ; 00002174H
  0b851	c7 85 5c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T66[ebp+4], 0
  0b85b	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0b860	c6 45 fc f1	 mov	 BYTE PTR __$EHRec$[ebp+8], 241 ; 000000f1H
  0b864	8d 85 50 65 ff
	ff		 lea	 eax, DWORD PTR $T65[ebp]
  0b86a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GLPIEJCM@Genesis?5Technology?5USA?0?5Inc?4@
  0b86f	50		 push	 eax
  0b870	8d 8d 10 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30432]
  0b876	c7 85 50 65 ff
	ff a5 21 00 00	 mov	 DWORD PTR $T65[ebp], 8613 ; 000021a5H
  0b880	c7 85 54 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T65[ebp+4], 0
  0b88a	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0b88f	c6 45 fc f2	 mov	 BYTE PTR __$EHRec$[ebp+8], 242 ; 000000f2H
  0b893	8d 85 48 65 ff
	ff		 lea	 eax, DWORD PTR $T64[ebp]
  0b899	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DKOMKBKO@GE?5Intelligent?5Platforms?0?5GmbH@
  0b89e	50		 push	 eax
  0b89f	8d 8d 30 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30464]
  0b8a5	c7 85 48 65 ff
	ff a8 21 00 00	 mov	 DWORD PTR $T64[ebp], 8616 ; 000021a8H
  0b8af	c7 85 4c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T64[ebp+4], 0
  0b8b9	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  0b8be	c6 45 fc f3	 mov	 BYTE PTR __$EHRec$[ebp+8], 243 ; 000000f3H
  0b8c2	8d 85 40 65 ff
	ff		 lea	 eax, DWORD PTR $T63[ebp]
  0b8c8	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LAFBKCJH@Dongguan?5Teconn?5Electronics?5Tec@
  0b8cd	50		 push	 eax
  0b8ce	8d 8d 50 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30496]
  0b8d4	c7 85 40 65 ff
	ff b3 21 00 00	 mov	 DWORD PTR $T63[ebp], 8627 ; 000021b3H
  0b8de	c7 85 44 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T63[ebp+4], 0
  0b8e8	e8 00 00 00 00	 call	 ??$?0_KAAY0DB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[49],0>
  0b8ed	c6 45 fc f4	 mov	 BYTE PTR __$EHRec$[ebp+8], 244 ; 000000f4H
  0b8f1	8d 85 38 65 ff
	ff		 lea	 eax, DWORD PTR $T62[ebp]
  0b8f7	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JOBONOAA@Longsys?5Electronics?5?$CIHK?$CJ?5Co?4?0?5L@
  0b8fc	50		 push	 eax
  0b8fd	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30528]
  0b903	c7 85 38 65 ff
	ff c4 21 00 00	 mov	 DWORD PTR $T62[ebp], 8644 ; 000021c4H
  0b90d	c7 85 3c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T62[ebp+4], 0
  0b917	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0b91c	c6 45 fc f5	 mov	 BYTE PTR __$EHRec$[ebp+8], 245 ; 000000f5H
  0b920	8d 85 30 65 ff
	ff		 lea	 eax, DWORD PTR $T61[ebp]
  0b926	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@FAJGPKNC@Compupack?5Technology?5Co?4?0?5Ltd?4@
  0b92b	50		 push	 eax
  0b92c	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30560]
  0b932	c7 85 30 65 ff
	ff d3 21 00 00	 mov	 DWORD PTR $T61[ebp], 8659 ; 000021d3H
  0b93c	c7 85 34 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T61[ebp+4], 0
  0b946	e8 00 00 00 00	 call	 ??$?0_KAAY0BP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[31],0>
  0b94b	c6 45 fc f6	 mov	 BYTE PTR __$EHRec$[ebp+8], 246 ; 000000f6H
  0b94f	8d 85 28 65 ff
	ff		 lea	 eax, DWORD PTR $T60[ebp]
  0b955	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DBHKFLNC@G?9Max?5Technology?5Co?4?0?5Ltd?4@
  0b95a	50		 push	 eax
  0b95b	8d 8d b0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30592]
  0b961	c7 85 28 65 ff
	ff db 21 00 00	 mov	 DWORD PTR $T60[ebp], 8667 ; 000021dbH
  0b96b	c7 85 2c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+4], 0
  0b975	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0b97a	c6 45 fc f7	 mov	 BYTE PTR __$EHRec$[ebp+8], 247 ; 000000f7H
  0b97e	c7 85 20 65 ff
	ff e7 21 00 00	 mov	 DWORD PTR $T59[ebp], 8679 ; 000021e7H
  0b988	c7 85 24 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+4], 0
  0b992	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EPJIBNCE@Sagemcom?5Broadband?5SAS@
  0b997	8d 85 20 65 ff
	ff		 lea	 eax, DWORD PTR $T59[ebp]
  0b99d	50		 push	 eax
  0b99e	8d 8d d0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30624]
  0b9a4	e8 00 00 00 00	 call	 ??$?0_KAAY0BH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[23],0>
  0b9a9	c6 45 fc f8	 mov	 BYTE PTR __$EHRec$[ebp+8], 248 ; 000000f8H
  0b9ad	8d 85 18 65 ff
	ff		 lea	 eax, DWORD PTR $T58[ebp]
  0b9b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OHNMOHEM@Wuerth?9Elektronik?5eiSos?5GmbH?5?$CG?5@
  0b9b8	50		 push	 eax
  0b9b9	8d 8d f0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30656]
  0b9bf	c7 85 18 65 ff
	ff f7 21 00 00	 mov	 DWORD PTR $T58[ebp], 8695 ; 000021f7H
  0b9c9	c7 85 1c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+4], 0
  0b9d3	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0b9d8	c6 45 fc f9	 mov	 BYTE PTR __$EHRec$[ebp+8], 249 ; 000000f9H
  0b9dc	8d 85 10 65 ff
	ff		 lea	 eax, DWORD PTR $T57[ebp]
  0b9e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BEMCGCHG@Shin?5Shin?5Co?4?0?5Ltd?4@
  0b9e7	50		 push	 eax
  0b9e8	8d 8d 10 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30688]
  0b9ee	c7 85 10 65 ff
	ff 03 22 00 00	 mov	 DWORD PTR $T57[ebp], 8707 ; 00002203H
  0b9f8	c7 85 14 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+4], 0
  0ba02	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0ba07	c6 45 fc fa	 mov	 BYTE PTR __$EHRec$[ebp+8], 250 ; 000000faH
  0ba0b	8d 85 08 65 ff
	ff		 lea	 eax, DWORD PTR $T56[ebp]
  0ba11	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CHMCCAAM@3eYamaichi?5Electronics?5Co?4?0?5Ltd@
  0ba16	50		 push	 eax
  0ba17	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30720]
  0ba1d	c7 85 08 65 ff
	ff 05 22 00 00	 mov	 DWORD PTR $T56[ebp], 8709 ; 00002205H
  0ba27	c7 85 0c 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+4], 0
  0ba31	e8 00 00 00 00	 call	 ??$?0_KAAY0CB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[33],0>
  0ba36	c6 45 fc fb	 mov	 BYTE PTR __$EHRec$[ebp+8], 251 ; 000000fbH
  0ba3a	8d 85 00 65 ff
	ff		 lea	 eax, DWORD PTR $T55[ebp]
  0ba40	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NEPAELKJ@Wiretek?5International?5Investmen@
  0ba45	50		 push	 eax
  0ba46	8d 8d 50 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30752]
  0ba4c	c7 85 00 65 ff
	ff 06 22 00 00	 mov	 DWORD PTR $T55[ebp], 8710 ; 00002206H
  0ba56	c7 85 04 65 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+4], 0
  0ba60	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0ba65	c6 45 fc fc	 mov	 BYTE PTR __$EHRec$[ebp+8], 252 ; 000000fcH
  0ba69	8d 85 f8 64 ff
	ff		 lea	 eax, DWORD PTR $T54[ebp]
  0ba6f	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JPBOIAIN@Fuzhou?5Rockchip?5Electronics?5Co?4@
  0ba74	50		 push	 eax
  0ba75	8d 8d 70 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30784]
  0ba7b	c7 85 f8 64 ff
	ff 07 22 00 00	 mov	 DWORD PTR $T54[ebp], 8711 ; 00002207H
  0ba85	c7 85 fc 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+4], 0
  0ba8f	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0ba94	c6 45 fc fd	 mov	 BYTE PTR __$EHRec$[ebp+8], 253 ; 000000fdH
  0ba98	8d 85 f0 64 ff
	ff		 lea	 eax, DWORD PTR $T53[ebp]
  0ba9e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FFGBANPN@Plugable?5Technologies@
  0baa3	50		 push	 eax
  0baa4	8d 8d 90 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30816]
  0baaa	c7 85 f0 64 ff
	ff 30 22 00 00	 mov	 DWORD PTR $T53[ebp], 8752 ; 00002230H
  0bab4	c7 85 f4 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+4], 0
  0babe	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0bac3	c6 45 fc fe	 mov	 BYTE PTR __$EHRec$[ebp+8], 254 ; 000000feH
  0bac7	8d 85 e8 64 ff
	ff		 lea	 eax, DWORD PTR $T52[ebp]
  0bacd	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJPOBBOH@T?9CONN?5PRECISION?5CORPORATION@
  0bad2	50		 push	 eax
  0bad3	8d 8d b0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30848]
  0bad9	c7 85 e8 64 ff
	ff 34 22 00 00	 mov	 DWORD PTR $T52[ebp], 8756 ; 00002234H
  0bae3	c7 85 ec 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52[ebp+4], 0
  0baed	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0baf2	c6 45 fc ff	 mov	 BYTE PTR __$EHRec$[ebp+8], 255 ; 000000ffH
  0baf6	8d 85 e0 64 ff
	ff		 lea	 eax, DWORD PTR $T51[ebp]
  0bafc	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PEIOBOIA@Granite?5River?5Labs@
  0bb01	50		 push	 eax
  0bb02	8d 8d d0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30880]
  0bb08	c7 85 e0 64 ff
	ff 7f 22 00 00	 mov	 DWORD PTR $T51[ebp], 8831 ; 0000227fH
  0bb12	c7 85 e4 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T51[ebp+4], 0
  0bb1c	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0bb21	c7 45 fc 00 04
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1024 ; 00000400H
  0bb28	c7 85 d8 64 ff
	ff 87 22 00 00	 mov	 DWORD PTR $T50[ebp], 8839 ; 00002287H
  0bb32	c7 85 dc 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp+4], 0
  0bb3c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CALPCKLP@Shenzhen?5Oversea?5Win?5Technology@
  0bb41	8d 85 d8 64 ff
	ff		 lea	 eax, DWORD PTR $T50[ebp]
  0bb47	50		 push	 eax
  0bb48	8d 8d f0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30912]
  0bb4e	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  0bb53	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0bb57	8d 85 d0 64 ff
	ff		 lea	 eax, DWORD PTR $T49[ebp]
  0bb5d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JIBHMNOD@Hotron?5Precision?5Electronic?5Ind@
  0bb62	50		 push	 eax
  0bb63	8d 8d 10 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30944]
  0bb69	c7 85 d0 64 ff
	ff 8a 22 00 00	 mov	 DWORD PTR $T49[ebp], 8842 ; 0000228aH
  0bb73	c7 85 d4 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp+4], 0
  0bb7d	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0bb82	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0bb86	8d 85 c8 64 ff
	ff		 lea	 eax, DWORD PTR $T48[ebp]
  0bb8c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LAOLKJDB@Trigence?5Semiconductor?0?5Inc?4@
  0bb91	50		 push	 eax
  0bb92	8d 8d 30 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30976]
  0bb98	c7 85 c8 64 ff
	ff ab 22 00 00	 mov	 DWORD PTR $T48[ebp], 8875 ; 000022abH
  0bba2	c7 85 cc 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp+4], 0
  0bbac	e8 00 00 00 00	 call	 ??$?0_KAAY0BN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[29],0>
  0bbb1	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0bbb5	8d 85 c0 64 ff
	ff		 lea	 eax, DWORD PTR $T47[ebp]
  0bbbb	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KGLFFKMJ@Shenzhen?5Xinerchang?5Electronics@
  0bbc0	50		 push	 eax
  0bbc1	8d 8d 50 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31008]
  0bbc7	c7 85 c0 64 ff
	ff c8 22 00 00	 mov	 DWORD PTR $T47[ebp], 8904 ; 000022c8H
  0bbd1	c7 85 c4 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T47[ebp+4], 0
  0bbdb	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  0bbe0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0bbe4	8d 85 b8 64 ff
	ff		 lea	 eax, DWORD PTR $T46[ebp]
  0bbea	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DNEMFNPO@Kunshan?5Jiahua?5Electronics?5Co?4?0@
  0bbef	50		 push	 eax
  0bbf0	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31040]
  0bbf6	c7 85 b8 64 ff
	ff 13 23 00 00	 mov	 DWORD PTR $T46[ebp], 8979 ; 00002313H
  0bc00	c7 85 bc 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T46[ebp+4], 0
  0bc0a	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0bc0f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0bc13	8d 85 b0 64 ff
	ff		 lea	 eax, DWORD PTR $T45[ebp]
  0bc19	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CONNOJEO@Avery?5Design?5Systems?0?5Inc?4@
  0bc1e	50		 push	 eax
  0bc1f	8d 8d 90 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31072]
  0bc25	c7 85 b0 64 ff
	ff 15 23 00 00	 mov	 DWORD PTR $T45[ebp], 8981 ; 00002315H
  0bc2f	c7 85 b4 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T45[ebp+4], 0
  0bc39	e8 00 00 00 00	 call	 ??$?0_KAAY0BL@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BL@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[27],0>
  0bc3e	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0bc42	8d 85 a8 64 ff
	ff		 lea	 eax, DWORD PTR $T44[ebp]
  0bc48	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PALMMNGG@Tensorcom?0?5Inc?4@
  0bc4d	50		 push	 eax
  0bc4e	8d 8d b0 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31104]
  0bc54	c7 85 a8 64 ff
	ff 30 23 00 00	 mov	 DWORD PTR $T44[ebp], 9008 ; 00002330H
  0bc5e	c7 85 ac 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T44[ebp+4], 0
  0bc68	e8 00 00 00 00	 call	 ??$?0_KAAY0BA@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BA@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[16],0>
  0bc6d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0bc71	8d 85 a0 64 ff
	ff		 lea	 eax, DWORD PTR $T43[ebp]
  0bc77	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@EBAAAKHK@ZheJiang?5Chunsheng?5Electronics?5@
  0bc7c	50		 push	 eax
  0bc7d	8d 8d d0 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31136]
  0bc83	c7 85 a0 64 ff
	ff 6c 23 00 00	 mov	 DWORD PTR $T43[ebp], 9068 ; 0000236cH
  0bc8d	c7 85 a4 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T43[ebp+4], 0
  0bc97	e8 00 00 00 00	 call	 ??$?0_KAAY0CJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[41],0>
  0bc9c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0bca0	8d 85 98 64 ff
	ff		 lea	 eax, DWORD PTR $T42[ebp]
  0bca6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JOFNJPAE@DOK?5?$CIHK?$CJ?5Trading?5Limited@
  0bcab	50		 push	 eax
  0bcac	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31168]
  0bcb2	c7 85 98 64 ff
	ff aa 23 00 00	 mov	 DWORD PTR $T42[ebp], 9130 ; 000023aaH
  0bcbc	c7 85 9c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T42[ebp+4], 0
  0bcc6	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0bccb	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0bccf	c7 85 90 64 ff
	ff ac 23 00 00	 mov	 DWORD PTR $T41[ebp], 9132 ; 000023acH
  0bcd9	c7 85 94 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T41[ebp+4], 0
  0bce3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OHNJGPJN@Marunix?5Electron?5Limited@
  0bce8	8d 85 90 64 ff
	ff		 lea	 eax, DWORD PTR $T41[ebp]
  0bcee	50		 push	 eax
  0bcef	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31200]
  0bcf5	e8 00 00 00 00	 call	 ??$?0_KAAY0BJ@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BJ@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[25],0>
  0bcfa	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0bcfe	8d 85 88 64 ff
	ff		 lea	 eax, DWORD PTR $T40[ebp]
  0bd04	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CFJNEAJP@BitifEye?5Digital?5Test?5Solutions@
  0bd09	50		 push	 eax
  0bd0a	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31232]
  0bd10	c7 85 88 64 ff
	ff e0 23 00 00	 mov	 DWORD PTR $T40[ebp], 9184 ; 000023e0H
  0bd1a	c7 85 8c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T40[ebp+4], 0
  0bd24	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0bd29	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0bd2d	8d 85 80 64 ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  0bd33	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KMKPCMKD@Shenzhen?5Chuangyitong?5Technolog@
  0bd38	50		 push	 eax
  0bd39	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31264]
  0bd3f	c7 85 80 64 ff
	ff 00 24 00 00	 mov	 DWORD PTR $T39[ebp], 9216 ; 00002400H
  0bd49	c7 85 84 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T39[ebp+4], 0
  0bd53	e8 00 00 00 00	 call	 ??$?0_KAAY0CK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[42],0>
  0bd58	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0bd5c	8d 85 78 64 ff
	ff		 lea	 eax, DWORD PTR $T38[ebp]
  0bd62	68 00 00 00 00	 push	 OFFSET ??_C@_07DEDNHJPJ@WIseKey@
  0bd67	50		 push	 eax
  0bd68	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31296]
  0bd6e	c7 85 78 64 ff
	ff 06 24 00 00	 mov	 DWORD PTR $T38[ebp], 9222 ; 00002406H
  0bd78	c7 85 7c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T38[ebp+4], 0
  0bd82	e8 00 00 00 00	 call	 ??$?0_KAAY07$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY07$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[8],0>
  0bd87	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0bd8b	8d 85 70 64 ff
	ff		 lea	 eax, DWORD PTR $T37[ebp]
  0bd91	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GMFHMCEF@The?5Silanna?5Group?5Pty?4?5Ltd?4@
  0bd96	50		 push	 eax
  0bd97	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31328]
  0bd9d	c7 85 70 64 ff
	ff 1a 24 00 00	 mov	 DWORD PTR $T37[ebp], 9242 ; 0000241aH
  0bda7	c7 85 74 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T37[ebp+4], 0
  0bdb1	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0bdb6	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0bdba	8d 85 68 64 ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  0bdc0	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FKGANIKL@MinebeaMitsumi?5Inc?4@
  0bdc5	50		 push	 eax
  0bdc6	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31360]
  0bdcc	c7 85 68 64 ff
	ff 4c 24 00 00	 mov	 DWORD PTR $T36[ebp], 9292 ; 0000244cH
  0bdd6	c7 85 6c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+4], 0
  0bde0	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0bde5	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  0bde9	8d 85 60 64 ff
	ff		 lea	 eax, DWORD PTR $T35[ebp]
  0bdef	51		 push	 ecx
  0bdf0	50		 push	 eax
  0bdf1	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31392]
  0bdf7	c7 85 60 64 ff
	ff 6b 24 00 00	 mov	 DWORD PTR $T35[ebp], 9323 ; 0000246bH
  0be01	c7 85 64 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T35[ebp+4], 0
  0be0b	e8 00 00 00 00	 call	 ??$?0_KAAY0DK@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0DK@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[58],0>
  0be10	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0be14	8d 85 58 64 ff
	ff		 lea	 eax, DWORD PTR $T34[ebp]
  0be1a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@OBEOLGAD@Suzhou?5Jutze?5Technologies?5Co?4?0?5@
  0be1f	50		 push	 eax
  0be20	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31424]
  0be26	c7 85 58 64 ff
	ff 7a 24 00 00	 mov	 DWORD PTR $T34[ebp], 9338 ; 0000247aH
  0be30	c7 85 5c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T34[ebp+4], 0
  0be3a	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0be3f	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  0be43	8d 85 50 64 ff
	ff		 lea	 eax, DWORD PTR $T33[ebp]
  0be49	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MEIMJIDD@DONGGUAN?5SYNCONN?5PRECISION?5INDU@
  0be4e	50		 push	 eax
  0be4f	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31456]
  0be55	c7 85 50 64 ff
	ff 8b 24 00 00	 mov	 DWORD PTR $T33[ebp], 9355 ; 0000248bH
  0be5f	c7 85 54 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T33[ebp+4], 0
  0be69	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  0be6e	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  0be72	c7 85 48 64 ff
	ff a6 24 00 00	 mov	 DWORD PTR $T32[ebp], 9382 ; 000024a6H
  0be7c	c7 85 4c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T32[ebp+4], 0
  0be86	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IDDOGDKP@Shenzhen?5Pangngai?5Industrial?5Co@
  0be8b	8d 85 48 64 ff
	ff		 lea	 eax, DWORD PTR $T32[ebp]
  0be91	50		 push	 eax
  0be92	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31488]
  0be98	e8 00 00 00 00	 call	 ??$?0_KAAY0CH@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CH@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[39],0>
  0be9d	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  0bea1	8d 85 40 64 ff
	ff		 lea	 eax, DWORD PTR $T31[ebp]
  0bea7	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@JOMBCIJH@Shenzhen?5Deren?5Electronic?5Co?4?0?5@
  0beac	50		 push	 eax
  0bead	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31520]
  0beb3	c7 85 40 64 ff
	ff ce 24 00 00	 mov	 DWORD PTR $T31[ebp], 9422 ; 000024ceH
  0bebd	c7 85 44 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T31[ebp+4], 0
  0bec7	e8 00 00 00 00	 call	 ??$?0_KAAY0CE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[36],0>
  0becc	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  0bed0	8d 85 38 64 ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  0bed6	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ONHDIMLP@ZEN?5FACTORY?5GROUP?5?$CIASIA?$CJ?5LTD?4@
  0bedb	50		 push	 eax
  0bedc	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31552]
  0bee2	c7 85 38 64 ff
	ff ed 24 00 00	 mov	 DWORD PTR $T30[ebp], 9453 ; 000024edH
  0beec	c7 85 3c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T30[ebp+4], 0
  0bef6	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0befb	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  0beff	8d 85 30 64 ff
	ff		 lea	 eax, DWORD PTR $T29[ebp]
  0bf05	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KGBBCJH@Chain?9In?5Electronic?5Co?4?0?5Ltd?4@
  0bf0a	50		 push	 eax
  0bf0b	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31584]
  0bf11	c7 85 30 64 ff
	ff 09 25 00 00	 mov	 DWORD PTR $T29[ebp], 9481 ; 00002509H
  0bf1b	c7 85 34 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T29[ebp+4], 0
  0bf25	e8 00 00 00 00	 call	 ??$?0_KAAY0BO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[30],0>
  0bf2a	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  0bf2e	8d 85 28 64 ff
	ff		 lea	 eax, DWORD PTR $T28[ebp]
  0bf34	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JCAFCPHA@SUZHOU?5XINYA?5ELECTRIC?5COMMUNICA@
  0bf39	50		 push	 eax
  0bf3a	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31616]
  0bf40	c7 85 28 64 ff
	ff 29 25 00 00	 mov	 DWORD PTR $T28[ebp], 9513 ; 00002529H
  0bf4a	c7 85 2c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T28[ebp+4], 0
  0bf54	e8 00 00 00 00	 call	 ??$?0_KAAY0CO@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CO@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[46],0>
  0bf59	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  0bf5d	8d 85 20 64 ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  0bf63	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@CHOFLHOK@SUZHOU?5KELI?5TECHNOLOGY?5DEVELOPM@
  0bf68	50		 push	 eax
  0bf69	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31648]
  0bf6f	c7 85 20 64 ff
	ff 2a 25 00 00	 mov	 DWORD PTR $T27[ebp], 9514 ; 0000252aH
  0bf79	c7 85 24 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+4], 0
  0bf83	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  0bf88	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  0bf8c	8d 85 18 64 ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  0bf92	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BNJPCKEF@TOP?5Exactitude?5Industry?5?$CIShenZh@
  0bf97	50		 push	 eax
  0bf98	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31680]
  0bf9e	c7 85 18 64 ff
	ff 2b 25 00 00	 mov	 DWORD PTR $T26[ebp], 9515 ; 0000252bH
  0bfa8	c7 85 1c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T26[ebp+4], 0
  0bfb2	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  0bfb7	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  0bfbb	8d 85 10 64 ff
	ff		 lea	 eax, DWORD PTR $T25[ebp]
  0bfc1	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FBCGPDBL@ShenZhen?5Hogend?5Precision?5Techn@
  0bfc6	50		 push	 eax
  0bfc7	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31712]
  0bfcd	c7 85 10 64 ff
	ff 35 25 00 00	 mov	 DWORD PTR $T25[ebp], 9525 ; 00002535H
  0bfd7	c7 85 14 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T25[ebp+4], 0
  0bfe1	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  0bfe6	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  0bfea	8d 85 08 64 ff
	ff		 lea	 eax, DWORD PTR $T24[ebp]
  0bff0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PLHJJNHE@Norel?5Systems?5Ltd?4@
  0bff5	50		 push	 eax
  0bff6	8d 8d 30 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31744]
  0bffc	c7 85 08 64 ff
	ff 37 25 00 00	 mov	 DWORD PTR $T24[ebp], 9527 ; 00002537H
  0c006	c7 85 0c 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T24[ebp+4], 0
  0c010	e8 00 00 00 00	 call	 ??$?0_KAAY0BD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[19],0>
  0c015	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  0c019	c7 85 00 64 ff
	ff 54 25 00 00	 mov	 DWORD PTR $T23[ebp], 9556 ; 00002554H
  0c023	c7 85 04 64 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T23[ebp+4], 0
  0c02d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KMBODLJH@ASSA?5ABLOY?5AB@
  0c032	8d 85 00 64 ff
	ff		 lea	 eax, DWORD PTR $T23[ebp]
  0c038	50		 push	 eax
  0c039	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31776]
  0c03f	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0c044	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0c048	8d 85 f8 63 ff
	ff		 lea	 eax, DWORD PTR $T22[ebp]
  0c04e	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NDBIJEKE@SHENGZHEN?5MAYA?5ELECTRONICS?5CREA@
  0c053	50		 push	 eax
  0c054	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31808]
  0c05a	c7 85 f8 63 ff
	ff 62 25 00 00	 mov	 DWORD PTR $T22[ebp], 9570 ; 00002562H
  0c064	c7 85 fc 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T22[ebp+4], 0
  0c06e	e8 00 00 00 00	 call	 ??$?0_KAAY0CN@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CN@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[45],0>
  0c073	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0c077	8d 85 f0 63 ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  0c07d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NMMKCBIB@DongGuan?5LongTao?5Electronic?5Co?4@
  0c082	50		 push	 eax
  0c083	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31840]
  0c089	c7 85 f0 63 ff
	ff 67 25 00 00	 mov	 DWORD PTR $T21[ebp], 9575 ; 00002567H
  0c093	c7 85 f4 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T21[ebp+4], 0
  0c09d	e8 00 00 00 00	 call	 ??$?0_KAAY0CG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[38],0>
  0c0a2	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  0c0a6	8d 85 e8 63 ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  0c0ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MHBLLANG@Weida?5Hi?9Tech?5Co?4?0?5Ltd?4@
  0c0b1	50		 push	 eax
  0c0b2	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31872]
  0c0b8	c7 85 e8 63 ff
	ff 75 25 00 00	 mov	 DWORD PTR $T20[ebp], 9589 ; 00002575H
  0c0c2	c7 85 ec 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T20[ebp+4], 0
  0c0cc	e8 00 00 00 00	 call	 ??$?0_KAAY0BI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[24],0>
  0c0d1	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  0c0d5	8d 85 e0 63 ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  0c0db	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CBMJJLAP@Dongguan?5Wisechamp?5Electronic?5C@
  0c0e0	50		 push	 eax
  0c0e1	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31904]
  0c0e7	c7 85 e0 63 ff
	ff 79 25 00 00	 mov	 DWORD PTR $T19[ebp], 9593 ; 00002579H
  0c0f1	c7 85 e4 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T19[ebp+4], 0
  0c0fb	e8 00 00 00 00	 call	 ??$?0_KAAY0CI@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CI@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[40],0>
  0c100	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  0c104	8d 85 d8 63 ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  0c10a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GGHEMJJH@ALGOLTEK?0?5INC?4@
  0c10f	50		 push	 eax
  0c110	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31936]
  0c116	c7 85 d8 63 ff
	ff a4 25 00 00	 mov	 DWORD PTR $T18[ebp], 9636 ; 000025a4H
  0c120	c7 85 dc 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T18[ebp+4], 0
  0c12a	e8 00 00 00 00	 call	 ??$?0_KAAY0P@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0P@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[15],0>
  0c12f	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  0c133	8d 85 d0 63 ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  0c139	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LNBMPCHG@Top?5Victory?5Investments?5Ltd?4?5?$CIH@
  0c13e	50		 push	 eax
  0c13f	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31968]
  0c145	c7 85 d0 63 ff
	ff aa 25 00 00	 mov	 DWORD PTR $T17[ebp], 9642 ; 000025aaH
  0c14f	c7 85 d4 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+4], 0
  0c159	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0c15e	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  0c162	8d 85 c8 63 ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  0c168	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JCCPCCPC@Corning?5Optical?5Communications?5@
  0c16d	50		 push	 eax
  0c16e	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32000]
  0c174	c7 85 c8 63 ff
	ff cf 25 00 00	 mov	 DWORD PTR $T16[ebp], 9679 ; 000025cfH
  0c17e	c7 85 cc 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp+4], 0
  0c188	e8 00 00 00 00	 call	 ??$?0_KAAY0CD@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CD@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[35],0>
  0c18d	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  0c191	8d 85 c0 63 ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0c197	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BOLFLJP@RICOH?5IMAGING?5COMPANY?0?5LTD?4@
  0c19c	50		 push	 eax
  0c19d	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32032]
  0c1a3	c7 85 c0 63 ff
	ff fb 25 00 00	 mov	 DWORD PTR $T15[ebp], 9723 ; 000025fbH
  0c1ad	c7 85 c4 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp+4], 0
  0c1b7	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0c1bc	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
  0c1c0	c7 85 b8 63 ff
	ff 0e 26 00 00	 mov	 DWORD PTR $T14[ebp], 9742 ; 0000260eH
  0c1ca	c7 85 bc 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+4], 0
  0c1d4	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GLDMKJH@DongGuan?5HYX?5Industrial?5Co?4?0?5Lt@
  0c1d9	8d 85 b8 63 ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0c1df	50		 push	 eax
  0c1e0	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32064]
  0c1e6	e8 00 00 00 00	 call	 ??$?0_KAAY0CC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[34],0>
  0c1eb	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
  0c1ef	8d 85 b0 63 ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  0c1f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HOIKDMEJ@Advanced?5Silicon?5SA@
  0c1fa	50		 push	 eax
  0c1fb	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32096]
  0c201	c7 85 b0 63 ff
	ff 19 26 00 00	 mov	 DWORD PTR $T13[ebp], 9753 ; 00002619H
  0c20b	c7 85 b4 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+4], 0
  0c215	e8 00 00 00 00	 call	 ??$?0_KAAY0BE@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BE@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[20],0>
  0c21a	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  0c21e	8d 85 a8 63 ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0c224	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KCHFFECA@EISST?5Limited@
  0c229	50		 push	 eax
  0c22a	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32128]
  0c230	c7 85 a8 63 ff
	ff 1c 26 00 00	 mov	 DWORD PTR $T12[ebp], 9756 ; 0000261cH
  0c23a	c7 85 ac 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+4], 0
  0c244	e8 00 00 00 00	 call	 ??$?0_KAAY0O@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0O@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[14],0>
  0c249	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  0c24d	8d 85 a0 63 ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  0c253	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FJPCENHK@Winstars?5Technology?5Limited@
  0c258	50		 push	 eax
  0c259	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32160]
  0c25f	c7 85 a0 63 ff
	ff 29 26 00 00	 mov	 DWORD PTR $T11[ebp], 9769 ; 00002629H
  0c269	c7 85 a4 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T11[ebp+4], 0
  0c273	e8 00 00 00 00	 call	 ??$?0_KAAY0BM@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BM@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[28],0>
  0c278	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  0c27c	8d 85 98 63 ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0c282	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DHPDCAEA@YTOP?5Electronics?5Technical?5?$CIKun@
  0c287	50		 push	 eax
  0c288	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32192]
  0c28e	c7 85 98 63 ff
	ff 2b 26 00 00	 mov	 DWORD PTR $T10[ebp], 9771 ; 0000262bH
  0c298	c7 85 9c 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+4], 0
  0c2a2	e8 00 00 00 00	 call	 ??$?0_KAAY0CP@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CP@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[47],0>
  0c2a7	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  0c2ab	8d 85 90 63 ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  0c2b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LEBIHPBN@Innovative?5Logic@
  0c2b6	50		 push	 eax
  0c2b7	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32224]
  0c2bd	c7 85 90 63 ff
	ff 71 26 00 00	 mov	 DWORD PTR $T9[ebp], 9841 ; 00002671H
  0c2c7	c7 85 94 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+4], 0
  0c2d1	e8 00 00 00 00	 call	 ??$?0_KAAY0BB@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BB@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[17],0>
  0c2d6	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  0c2da	8d 85 88 63 ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  0c2e0	68 00 00 00 00	 push	 OFFSET ??_C@_05DJBPEAOA@GoPro@
  0c2e5	50		 push	 eax
  0c2e6	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32256]
  0c2ec	c7 85 88 63 ff
	ff 72 26 00 00	 mov	 DWORD PTR $T8[ebp], 9842 ; 00002672H
  0c2f6	c7 85 8c 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+4], 0
  0c300	e8 00 00 00 00	 call	 ??$?0_KAAY05$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY05$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[6],0>
  0c305	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  0c309	8d 85 80 63 ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0c30f	68 00 00 00 00	 push	 OFFSET ??_C@_09BGJCNJFM@Basler?5AG@
  0c314	50		 push	 eax
  0c315	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32288]
  0c31b	c7 85 80 63 ff
	ff 76 26 00 00	 mov	 DWORD PTR $T7[ebp], 9846 ; 00002676H
  0c325	c7 85 84 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+4], 0
  0c32f	e8 00 00 00 00	 call	 ??$?0_KAAY09$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY09$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[10],0>
  0c334	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  0c338	8d 85 78 63 ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0c33e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IPDEOKJG@Zhejiang?5Senda?5Electronics?5Co?4?0@
  0c343	50		 push	 eax
  0c344	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32320]
  0c34a	c7 85 78 63 ff
	ff b0 26 00 00	 mov	 DWORD PTR $T6[ebp], 9904 ; 000026b0H
  0c354	c7 85 7c 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0
  0c35e	e8 00 00 00 00	 call	 ??$?0_KAAY0CF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0CF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[37],0>
  0c363	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  0c367	c7 85 70 63 ff
	ff bd 26 00 00	 mov	 DWORD PTR $T5[ebp], 9917 ; 000026bdH
  0c371	c7 85 74 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+4], 0
  0c37b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BKLIFGG@Integral?5Memory?5Plc?4@
  0c380	8d 85 70 63 ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0c386	50		 push	 eax
  0c387	8d 4d 90	 lea	 ecx, DWORD PTR $T957[ebp+32352]
  0c38a	e8 00 00 00 00	 call	 ??$?0_KAAY0BF@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BF@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[21],0>
  0c38f	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  0c393	8d 85 68 63 ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0c399	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EBEJIPHO@MITACHI?5CO?4?0?5LTD?4@
  0c39e	50		 push	 eax
  0c39f	8d 4d b0	 lea	 ecx, DWORD PTR $T957[ebp+32384]
  0c3a2	c7 85 68 63 ff
	ff 00 27 00 00	 mov	 DWORD PTR $T4[ebp], 9984 ; 00002700H
  0c3ac	c7 85 6c 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+4], 0
  0c3b6	e8 00 00 00 00	 call	 ??$?0_KAAY0BC@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BC@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[18],0>
  0c3bb	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  0c3bf	8d 85 60 63 ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0c3c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CIMMFDLO@Western?5Digital?0?5HGST@
  0c3ca	50		 push	 eax
  0c3cb	8d 4d d0	 lea	 ecx, DWORD PTR $T957[ebp+32416]
  0c3ce	c7 85 60 63 ff
	ff 0f 27 00 00	 mov	 DWORD PTR $T3[ebp], 9999 ; 0000270fH
  0c3d8	c7 85 64 63 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+4], 0
  0c3e2	e8 00 00 00 00	 call	 ??$?0_KAAY0BG@$$CBD$0A@@?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QA_KAAY0BG@$$CBD@Z ; std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><unsigned __int64,char const (&)[22],0>
  0c3e7	c7 45 fc 30 04
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1072 ; 00000430H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\initializer_list

; 36   : 		: _First(_First_arg), _Last(_Last_arg)

  0c3ee	8d 45 f0	 lea	 eax, DWORD PTR $T957[ebp+32448]
  0c3f1	8d 8d 30 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\res\usb.if

; 1    : static std::map<uint64_t, std::string> const usbNames = {

  0c3f7	50		 push	 eax
  0c3f8	51		 push	 ecx
  0c3f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B
  0c3fe	e8 00 00 00 00	 call	 ??0?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z ; std::map<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::map<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  0c403	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0c40a	8d 85 30 81 ff
	ff		 lea	 eax, DWORD PTR $T957[ebp]
  0c410	68 00 00 00 00	 push	 OFFSET ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  0c415	68 f6 03 00 00	 push	 1014			; 000003f6H
  0c41a	6a 20		 push	 32			; 00000020H
  0c41c	50		 push	 eax
  0c41d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0c422	68 00 00 00 00	 push	 OFFSET ??__FusbNames@@YAXXZ ; `dynamic atexit destructor for 'usbNames''
  0c427	e8 00 00 00 00	 call	 _atexit
  0c42c	83 c4 04	 add	 esp, 4
  0c42f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0c432	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0c439	59		 pop	 ecx
  0c43a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0c43d	33 cd		 xor	 ecx, ebp
  0c43f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0c444	8b e5		 mov	 esp, ebp
  0c446	5d		 pop	 ebp
  0c447	c3		 ret	 0
text$di	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EusbNames@@YAXXZ$1015:
  00000	8d 8d 38 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$0:
  0000b	8d 8d 30 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1016:
  00016	8d 8d 58 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+40]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$1:
  00021	8d 8d 50 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32]
  00027	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1017:
  0002c	8d 8d 78 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+72]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$2:
  00037	8d 8d 70 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+64]
  0003d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1018:
  00042	8d 8d 98 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+104]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$3:
  0004d	8d 8d 90 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+96]
  00053	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1019:
  00058	8d 8d b8 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+136]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$4:
  00063	8d 8d b0 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+128]
  00069	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1020:
  0006e	8d 8d d8 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+168]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$5:
  00079	8d 8d d0 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+160]
  0007f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1021:
  00084	8d 8d f8 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+200]
  0008a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$6:
  0008f	8d 8d f0 81 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+192]
  00095	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1022:
  0009a	8d 8d 18 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+232]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$7:
  000a5	8d 8d 10 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+224]
  000ab	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1023:
  000b0	8d 8d 38 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+264]
  000b6	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$8:
  000bb	8d 8d 30 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+256]
  000c1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1024:
  000c6	8d 8d 58 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+296]
  000cc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$9:
  000d1	8d 8d 50 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+288]
  000d7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1025:
  000dc	8d 8d 78 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+328]
  000e2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$10:
  000e7	8d 8d 70 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+320]
  000ed	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1026:
  000f2	8d 8d 98 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+360]
  000f8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$11:
  000fd	8d 8d 90 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+352]
  00103	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1027:
  00108	8d 8d b8 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+392]
  0010e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$12:
  00113	8d 8d b0 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+384]
  00119	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1028:
  0011e	8d 8d d8 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+424]
  00124	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$13:
  00129	8d 8d d0 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+416]
  0012f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1029:
  00134	8d 8d f8 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+456]
  0013a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$14:
  0013f	8d 8d f0 82 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+448]
  00145	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1030:
  0014a	8d 8d 18 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+488]
  00150	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$15:
  00155	8d 8d 10 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+480]
  0015b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1031:
  00160	8d 8d 38 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+520]
  00166	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$16:
  0016b	8d 8d 30 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+512]
  00171	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1032:
  00176	8d 8d 58 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+552]
  0017c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$17:
  00181	8d 8d 50 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+544]
  00187	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1033:
  0018c	8d 8d 78 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+584]
  00192	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$18:
  00197	8d 8d 70 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+576]
  0019d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1034:
  001a2	8d 8d 98 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+616]
  001a8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$19:
  001ad	8d 8d 90 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+608]
  001b3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1035:
  001b8	8d 8d b8 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+648]
  001be	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$20:
  001c3	8d 8d b0 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+640]
  001c9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1036:
  001ce	8d 8d d8 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+680]
  001d4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$21:
  001d9	8d 8d d0 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+672]
  001df	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1037:
  001e4	8d 8d f8 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+712]
  001ea	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$22:
  001ef	8d 8d f0 83 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+704]
  001f5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1038:
  001fa	8d 8d 18 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+744]
  00200	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$23:
  00205	8d 8d 10 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+736]
  0020b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1039:
  00210	8d 8d 38 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+776]
  00216	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$24:
  0021b	8d 8d 30 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+768]
  00221	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1040:
  00226	8d 8d 58 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+808]
  0022c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$25:
  00231	8d 8d 50 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+800]
  00237	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1041:
  0023c	8d 8d 78 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+840]
  00242	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$26:
  00247	8d 8d 70 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+832]
  0024d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1042:
  00252	8d 8d 98 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+872]
  00258	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$27:
  0025d	8d 8d 90 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+864]
  00263	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1043:
  00268	8d 8d b8 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+904]
  0026e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$28:
  00273	8d 8d b0 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+896]
  00279	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1044:
  0027e	8d 8d d8 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+936]
  00284	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$29:
  00289	8d 8d d0 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+928]
  0028f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1045:
  00294	8d 8d f8 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+968]
  0029a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$30:
  0029f	8d 8d f0 84 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+960]
  002a5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1046:
  002aa	8d 8d 18 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1000]
  002b0	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$31:
  002b5	8d 8d 10 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+992]
  002bb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1047:
  002c0	8d 8d 38 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1032]
  002c6	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$32:
  002cb	8d 8d 30 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1024]
  002d1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1048:
  002d6	8d 8d 58 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1064]
  002dc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$33:
  002e1	8d 8d 50 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1056]
  002e7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1049:
  002ec	8d 8d 78 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1096]
  002f2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$34:
  002f7	8d 8d 70 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1088]
  002fd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1050:
  00302	8d 8d 98 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1128]
  00308	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$35:
  0030d	8d 8d 90 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1120]
  00313	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1051:
  00318	8d 8d b8 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1160]
  0031e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$36:
  00323	8d 8d b0 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1152]
  00329	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1052:
  0032e	8d 8d d8 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1192]
  00334	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$37:
  00339	8d 8d d0 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1184]
  0033f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1053:
  00344	8d 8d f8 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1224]
  0034a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$38:
  0034f	8d 8d f0 85 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1216]
  00355	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1054:
  0035a	8d 8d 18 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1256]
  00360	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$39:
  00365	8d 8d 10 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1248]
  0036b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1055:
  00370	8d 8d 38 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1288]
  00376	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$40:
  0037b	8d 8d 30 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1280]
  00381	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1056:
  00386	8d 8d 58 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1320]
  0038c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$41:
  00391	8d 8d 50 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1312]
  00397	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1057:
  0039c	8d 8d 78 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1352]
  003a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$42:
  003a7	8d 8d 70 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1344]
  003ad	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1058:
  003b2	8d 8d 98 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1384]
  003b8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$43:
  003bd	8d 8d 90 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1376]
  003c3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1059:
  003c8	8d 8d b8 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1416]
  003ce	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$44:
  003d3	8d 8d b0 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1408]
  003d9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1060:
  003de	8d 8d d8 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1448]
  003e4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$45:
  003e9	8d 8d d0 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1440]
  003ef	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1061:
  003f4	8d 8d f8 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1480]
  003fa	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$46:
  003ff	8d 8d f0 86 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1472]
  00405	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1062:
  0040a	8d 8d 18 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1512]
  00410	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$47:
  00415	8d 8d 10 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1504]
  0041b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1063:
  00420	8d 8d 38 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1544]
  00426	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$48:
  0042b	8d 8d 30 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1536]
  00431	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1064:
  00436	8d 8d 58 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1576]
  0043c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$49:
  00441	8d 8d 50 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1568]
  00447	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1065:
  0044c	8d 8d 78 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1608]
  00452	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$50:
  00457	8d 8d 70 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1600]
  0045d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1066:
  00462	8d 8d 98 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1640]
  00468	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$51:
  0046d	8d 8d 90 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1632]
  00473	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1067:
  00478	8d 8d b8 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1672]
  0047e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$52:
  00483	8d 8d b0 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1664]
  00489	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1068:
  0048e	8d 8d d8 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1704]
  00494	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$53:
  00499	8d 8d d0 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1696]
  0049f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1069:
  004a4	8d 8d f8 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1736]
  004aa	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$54:
  004af	8d 8d f0 87 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1728]
  004b5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1070:
  004ba	8d 8d 18 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1768]
  004c0	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$55:
  004c5	8d 8d 10 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1760]
  004cb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1071:
  004d0	8d 8d 38 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1800]
  004d6	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$56:
  004db	8d 8d 30 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1792]
  004e1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1072:
  004e6	8d 8d 58 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1832]
  004ec	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$57:
  004f1	8d 8d 50 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1824]
  004f7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1073:
  004fc	8d 8d 78 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1864]
  00502	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__EusbNames@@YAXXZ$58:
  00507	8d 8d 70 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1856]
  0050d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$59:
  00512	8d 8d 90 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1888]
  00518	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$60:
  0051d	8d 8d b0 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1920]
  00523	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$61:
  00528	8d 8d d0 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1952]
  0052e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$62:
  00533	8d 8d f0 88 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+1984]
  00539	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$63:
  0053e	8d 8d 10 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2016]
  00544	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$64:
  00549	8d 8d 30 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2048]
  0054f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$65:
  00554	8d 8d 50 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2080]
  0055a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$66:
  0055f	8d 8d 70 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2112]
  00565	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$67:
  0056a	8d 8d 90 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2144]
  00570	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$68:
  00575	8d 8d b0 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2176]
  0057b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$69:
  00580	8d 8d d0 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2208]
  00586	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$70:
  0058b	8d 8d f0 89 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2240]
  00591	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$71:
  00596	8d 8d 10 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2272]
  0059c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$72:
  005a1	8d 8d 30 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2304]
  005a7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$73:
  005ac	8d 8d 50 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2336]
  005b2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$74:
  005b7	8d 8d 70 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2368]
  005bd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$75:
  005c2	8d 8d 90 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2400]
  005c8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$76:
  005cd	8d 8d b0 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2432]
  005d3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$77:
  005d8	8d 8d d0 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2464]
  005de	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$78:
  005e3	8d 8d f0 8a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2496]
  005e9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$79:
  005ee	8d 8d 10 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2528]
  005f4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$80:
  005f9	8d 8d 30 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2560]
  005ff	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$81:
  00604	8d 8d 50 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2592]
  0060a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$82:
  0060f	8d 8d 70 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2624]
  00615	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$83:
  0061a	8d 8d 90 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2656]
  00620	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$84:
  00625	8d 8d b0 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2688]
  0062b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$85:
  00630	8d 8d d0 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2720]
  00636	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$86:
  0063b	8d 8d f0 8b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2752]
  00641	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$87:
  00646	8d 8d 10 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2784]
  0064c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$88:
  00651	8d 8d 30 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2816]
  00657	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$89:
  0065c	8d 8d 50 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2848]
  00662	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$90:
  00667	8d 8d 70 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2880]
  0066d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$91:
  00672	8d 8d 90 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2912]
  00678	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$92:
  0067d	8d 8d b0 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2944]
  00683	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$93:
  00688	8d 8d d0 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+2976]
  0068e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$94:
  00693	8d 8d f0 8c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3008]
  00699	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$95:
  0069e	8d 8d 10 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3040]
  006a4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$96:
  006a9	8d 8d 30 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3072]
  006af	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$97:
  006b4	8d 8d 50 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3104]
  006ba	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$98:
  006bf	8d 8d 70 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3136]
  006c5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$99:
  006ca	8d 8d 90 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3168]
  006d0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$100:
  006d5	8d 8d b0 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3200]
  006db	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$101:
  006e0	8d 8d d0 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3232]
  006e6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$102:
  006eb	8d 8d f0 8d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3264]
  006f1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$103:
  006f6	8d 8d 10 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3296]
  006fc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$104:
  00701	8d 8d 30 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3328]
  00707	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$105:
  0070c	8d 8d 50 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3360]
  00712	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$106:
  00717	8d 8d 70 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3392]
  0071d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$107:
  00722	8d 8d 90 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3424]
  00728	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$108:
  0072d	8d 8d b0 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3456]
  00733	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$109:
  00738	8d 8d d0 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3488]
  0073e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$110:
  00743	8d 8d f0 8e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3520]
  00749	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$111:
  0074e	8d 8d 10 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3552]
  00754	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$112:
  00759	8d 8d 30 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3584]
  0075f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$113:
  00764	8d 8d 50 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3616]
  0076a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$114:
  0076f	8d 8d 70 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3648]
  00775	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$115:
  0077a	8d 8d 90 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3680]
  00780	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$116:
  00785	8d 8d b0 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3712]
  0078b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$117:
  00790	8d 8d d0 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3744]
  00796	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$118:
  0079b	8d 8d f0 8f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3776]
  007a1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$119:
  007a6	8d 8d 10 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3808]
  007ac	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$120:
  007b1	8d 8d 30 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3840]
  007b7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$121:
  007bc	8d 8d 50 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3872]
  007c2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$122:
  007c7	8d 8d 70 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3904]
  007cd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$123:
  007d2	8d 8d 90 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3936]
  007d8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$124:
  007dd	8d 8d b0 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+3968]
  007e3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$125:
  007e8	8d 8d d0 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4000]
  007ee	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$126:
  007f3	8d 8d f0 90 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4032]
  007f9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$127:
  007fe	8d 8d 10 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4064]
  00804	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$128:
  00809	8d 8d 30 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4096]
  0080f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$129:
  00814	8d 8d 50 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4128]
  0081a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$130:
  0081f	8d 8d 70 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4160]
  00825	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$131:
  0082a	8d 8d 90 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4192]
  00830	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$132:
  00835	8d 8d b0 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4224]
  0083b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$133:
  00840	8d 8d d0 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4256]
  00846	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$134:
  0084b	8d 8d f0 91 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4288]
  00851	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$135:
  00856	8d 8d 10 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4320]
  0085c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$136:
  00861	8d 8d 30 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4352]
  00867	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$137:
  0086c	8d 8d 50 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4384]
  00872	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$138:
  00877	8d 8d 70 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4416]
  0087d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$139:
  00882	8d 8d 90 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4448]
  00888	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$140:
  0088d	8d 8d b0 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4480]
  00893	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$141:
  00898	8d 8d d0 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4512]
  0089e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$142:
  008a3	8d 8d f0 92 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4544]
  008a9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$143:
  008ae	8d 8d 10 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4576]
  008b4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$144:
  008b9	8d 8d 30 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4608]
  008bf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$145:
  008c4	8d 8d 50 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4640]
  008ca	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$146:
  008cf	8d 8d 70 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4672]
  008d5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$147:
  008da	8d 8d 90 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4704]
  008e0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$148:
  008e5	8d 8d b0 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4736]
  008eb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$149:
  008f0	8d 8d d0 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4768]
  008f6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$150:
  008fb	8d 8d f0 93 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4800]
  00901	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$151:
  00906	8d 8d 10 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4832]
  0090c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$152:
  00911	8d 8d 30 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4864]
  00917	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$153:
  0091c	8d 8d 50 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4896]
  00922	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$154:
  00927	8d 8d 70 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4928]
  0092d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$155:
  00932	8d 8d 90 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4960]
  00938	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$156:
  0093d	8d 8d b0 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+4992]
  00943	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$157:
  00948	8d 8d d0 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5024]
  0094e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$158:
  00953	8d 8d f0 94 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5056]
  00959	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$159:
  0095e	8d 8d 10 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5088]
  00964	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$160:
  00969	8d 8d 30 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5120]
  0096f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$161:
  00974	8d 8d 50 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5152]
  0097a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$162:
  0097f	8d 8d 70 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5184]
  00985	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$163:
  0098a	8d 8d 90 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5216]
  00990	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$164:
  00995	8d 8d b0 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5248]
  0099b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$165:
  009a0	8d 8d d0 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5280]
  009a6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$166:
  009ab	8d 8d f0 95 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5312]
  009b1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$167:
  009b6	8d 8d 10 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5344]
  009bc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$168:
  009c1	8d 8d 30 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5376]
  009c7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$169:
  009cc	8d 8d 50 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5408]
  009d2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$170:
  009d7	8d 8d 70 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5440]
  009dd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$171:
  009e2	8d 8d 90 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5472]
  009e8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$172:
  009ed	8d 8d b0 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5504]
  009f3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$173:
  009f8	8d 8d d0 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5536]
  009fe	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$174:
  00a03	8d 8d f0 96 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5568]
  00a09	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$175:
  00a0e	8d 8d 10 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5600]
  00a14	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$176:
  00a19	8d 8d 30 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5632]
  00a1f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$177:
  00a24	8d 8d 50 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5664]
  00a2a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$178:
  00a2f	8d 8d 70 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5696]
  00a35	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$179:
  00a3a	8d 8d 90 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5728]
  00a40	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$180:
  00a45	8d 8d b0 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5760]
  00a4b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$181:
  00a50	8d 8d d0 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5792]
  00a56	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$182:
  00a5b	8d 8d f0 97 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5824]
  00a61	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$183:
  00a66	8d 8d 10 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5856]
  00a6c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$184:
  00a71	8d 8d 30 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5888]
  00a77	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$185:
  00a7c	8d 8d 50 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5920]
  00a82	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$186:
  00a87	8d 8d 70 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5952]
  00a8d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$187:
  00a92	8d 8d 90 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+5984]
  00a98	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$188:
  00a9d	8d 8d b0 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6016]
  00aa3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$189:
  00aa8	8d 8d d0 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6048]
  00aae	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$190:
  00ab3	8d 8d f0 98 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6080]
  00ab9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$191:
  00abe	8d 8d 10 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6112]
  00ac4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$192:
  00ac9	8d 8d 30 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6144]
  00acf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$193:
  00ad4	8d 8d 50 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6176]
  00ada	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$194:
  00adf	8d 8d 70 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6208]
  00ae5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$195:
  00aea	8d 8d 90 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6240]
  00af0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$196:
  00af5	8d 8d b0 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6272]
  00afb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$197:
  00b00	8d 8d d0 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6304]
  00b06	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$198:
  00b0b	8d 8d f0 99 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6336]
  00b11	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$199:
  00b16	8d 8d 10 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6368]
  00b1c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$200:
  00b21	8d 8d 30 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6400]
  00b27	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$201:
  00b2c	8d 8d 50 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6432]
  00b32	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$202:
  00b37	8d 8d 70 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6464]
  00b3d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$203:
  00b42	8d 8d 90 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6496]
  00b48	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$204:
  00b4d	8d 8d b0 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6528]
  00b53	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$205:
  00b58	8d 8d d0 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6560]
  00b5e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$206:
  00b63	8d 8d f0 9a ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6592]
  00b69	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$207:
  00b6e	8d 8d 10 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6624]
  00b74	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$208:
  00b79	8d 8d 30 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6656]
  00b7f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$209:
  00b84	8d 8d 50 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6688]
  00b8a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$210:
  00b8f	8d 8d 70 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6720]
  00b95	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$211:
  00b9a	8d 8d 90 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6752]
  00ba0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$212:
  00ba5	8d 8d b0 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6784]
  00bab	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$213:
  00bb0	8d 8d d0 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6816]
  00bb6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$214:
  00bbb	8d 8d f0 9b ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6848]
  00bc1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$215:
  00bc6	8d 8d 10 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6880]
  00bcc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$216:
  00bd1	8d 8d 30 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6912]
  00bd7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$217:
  00bdc	8d 8d 50 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6944]
  00be2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$218:
  00be7	8d 8d 70 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+6976]
  00bed	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$219:
  00bf2	8d 8d 90 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7008]
  00bf8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$220:
  00bfd	8d 8d b0 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7040]
  00c03	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$221:
  00c08	8d 8d d0 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7072]
  00c0e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$222:
  00c13	8d 8d f0 9c ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7104]
  00c19	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$223:
  00c1e	8d 8d 10 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7136]
  00c24	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$224:
  00c29	8d 8d 30 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7168]
  00c2f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$225:
  00c34	8d 8d 50 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7200]
  00c3a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$226:
  00c3f	8d 8d 70 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7232]
  00c45	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$227:
  00c4a	8d 8d 90 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7264]
  00c50	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$228:
  00c55	8d 8d b0 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7296]
  00c5b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$229:
  00c60	8d 8d d0 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7328]
  00c66	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$230:
  00c6b	8d 8d f0 9d ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7360]
  00c71	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$231:
  00c76	8d 8d 10 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7392]
  00c7c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$232:
  00c81	8d 8d 30 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7424]
  00c87	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$233:
  00c8c	8d 8d 50 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7456]
  00c92	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$234:
  00c97	8d 8d 70 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7488]
  00c9d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$235:
  00ca2	8d 8d 90 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7520]
  00ca8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$236:
  00cad	8d 8d b0 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7552]
  00cb3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$237:
  00cb8	8d 8d d0 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7584]
  00cbe	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$238:
  00cc3	8d 8d f0 9e ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7616]
  00cc9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$239:
  00cce	8d 8d 10 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7648]
  00cd4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$240:
  00cd9	8d 8d 30 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7680]
  00cdf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$241:
  00ce4	8d 8d 50 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7712]
  00cea	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$242:
  00cef	8d 8d 70 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7744]
  00cf5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$243:
  00cfa	8d 8d 90 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7776]
  00d00	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$244:
  00d05	8d 8d b0 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7808]
  00d0b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$245:
  00d10	8d 8d d0 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7840]
  00d16	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$246:
  00d1b	8d 8d f0 9f ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7872]
  00d21	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$247:
  00d26	8d 8d 10 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7904]
  00d2c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$248:
  00d31	8d 8d 30 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7936]
  00d37	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$249:
  00d3c	8d 8d 50 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+7968]
  00d42	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$250:
  00d47	8d 8d 70 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8000]
  00d4d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$251:
  00d52	8d 8d 90 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8032]
  00d58	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$252:
  00d5d	8d 8d b0 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8064]
  00d63	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$253:
  00d68	8d 8d d0 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8096]
  00d6e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$254:
  00d73	8d 8d f0 a0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8128]
  00d79	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$255:
  00d7e	8d 8d 10 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8160]
  00d84	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$256:
  00d89	8d 8d 30 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8192]
  00d8f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$257:
  00d94	8d 8d 50 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8224]
  00d9a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$258:
  00d9f	8d 8d 70 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8256]
  00da5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$259:
  00daa	8d 8d 90 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8288]
  00db0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$260:
  00db5	8d 8d b0 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8320]
  00dbb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$261:
  00dc0	8d 8d d0 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8352]
  00dc6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$262:
  00dcb	8d 8d f0 a1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8384]
  00dd1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$263:
  00dd6	8d 8d 10 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8416]
  00ddc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$264:
  00de1	8d 8d 30 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8448]
  00de7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$265:
  00dec	8d 8d 50 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8480]
  00df2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$266:
  00df7	8d 8d 70 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8512]
  00dfd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$267:
  00e02	8d 8d 90 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8544]
  00e08	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$268:
  00e0d	8d 8d b0 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8576]
  00e13	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$269:
  00e18	8d 8d d0 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8608]
  00e1e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$270:
  00e23	8d 8d f0 a2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8640]
  00e29	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$271:
  00e2e	8d 8d 10 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8672]
  00e34	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$272:
  00e39	8d 8d 30 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8704]
  00e3f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$273:
  00e44	8d 8d 50 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8736]
  00e4a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$274:
  00e4f	8d 8d 70 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8768]
  00e55	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$275:
  00e5a	8d 8d 90 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8800]
  00e60	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$276:
  00e65	8d 8d b0 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8832]
  00e6b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$277:
  00e70	8d 8d d0 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8864]
  00e76	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$278:
  00e7b	8d 8d f0 a3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8896]
  00e81	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$279:
  00e86	8d 8d 10 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8928]
  00e8c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$280:
  00e91	8d 8d 30 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8960]
  00e97	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$281:
  00e9c	8d 8d 50 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+8992]
  00ea2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$282:
  00ea7	8d 8d 70 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9024]
  00ead	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$283:
  00eb2	8d 8d 90 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9056]
  00eb8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$284:
  00ebd	8d 8d b0 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9088]
  00ec3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$285:
  00ec8	8d 8d d0 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9120]
  00ece	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$286:
  00ed3	8d 8d f0 a4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9152]
  00ed9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$287:
  00ede	8d 8d 10 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9184]
  00ee4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$288:
  00ee9	8d 8d 30 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9216]
  00eef	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$289:
  00ef4	8d 8d 50 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9248]
  00efa	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$290:
  00eff	8d 8d 70 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9280]
  00f05	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$291:
  00f0a	8d 8d 90 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9312]
  00f10	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$292:
  00f15	8d 8d b0 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9344]
  00f1b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$293:
  00f20	8d 8d d0 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9376]
  00f26	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$294:
  00f2b	8d 8d f0 a5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9408]
  00f31	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$295:
  00f36	8d 8d 10 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9440]
  00f3c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$296:
  00f41	8d 8d 30 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9472]
  00f47	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$297:
  00f4c	8d 8d 50 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9504]
  00f52	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$298:
  00f57	8d 8d 70 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9536]
  00f5d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$299:
  00f62	8d 8d 90 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9568]
  00f68	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$300:
  00f6d	8d 8d b0 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9600]
  00f73	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$301:
  00f78	8d 8d d0 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9632]
  00f7e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$302:
  00f83	8d 8d f0 a6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9664]
  00f89	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$303:
  00f8e	8d 8d 10 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9696]
  00f94	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$304:
  00f99	8d 8d 30 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9728]
  00f9f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$305:
  00fa4	8d 8d 50 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9760]
  00faa	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$306:
  00faf	8d 8d 70 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9792]
  00fb5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$307:
  00fba	8d 8d 90 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9824]
  00fc0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$308:
  00fc5	8d 8d b0 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9856]
  00fcb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$309:
  00fd0	8d 8d d0 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9888]
  00fd6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$310:
  00fdb	8d 8d f0 a7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9920]
  00fe1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$311:
  00fe6	8d 8d 10 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9952]
  00fec	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$312:
  00ff1	8d 8d 30 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+9984]
  00ff7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$313:
  00ffc	8d 8d 50 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10016]
  01002	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$314:
  01007	8d 8d 70 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10048]
  0100d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$315:
  01012	8d 8d 90 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10080]
  01018	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$316:
  0101d	8d 8d b0 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10112]
  01023	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$317:
  01028	8d 8d d0 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10144]
  0102e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$318:
  01033	8d 8d f0 a8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10176]
  01039	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$319:
  0103e	8d 8d 10 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10208]
  01044	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$320:
  01049	8d 8d 30 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10240]
  0104f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$321:
  01054	8d 8d 50 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10272]
  0105a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$322:
  0105f	8d 8d 70 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10304]
  01065	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$323:
  0106a	8d 8d 90 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10336]
  01070	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$324:
  01075	8d 8d b0 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10368]
  0107b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$325:
  01080	8d 8d d0 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10400]
  01086	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$326:
  0108b	8d 8d f0 a9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10432]
  01091	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$327:
  01096	8d 8d 10 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10464]
  0109c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$328:
  010a1	8d 8d 30 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10496]
  010a7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$329:
  010ac	8d 8d 50 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10528]
  010b2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$330:
  010b7	8d 8d 70 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10560]
  010bd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$331:
  010c2	8d 8d 90 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10592]
  010c8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$332:
  010cd	8d 8d b0 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10624]
  010d3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$333:
  010d8	8d 8d d0 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10656]
  010de	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$334:
  010e3	8d 8d f0 aa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10688]
  010e9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$335:
  010ee	8d 8d 10 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10720]
  010f4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$336:
  010f9	8d 8d 30 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10752]
  010ff	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$337:
  01104	8d 8d 50 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10784]
  0110a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$338:
  0110f	8d 8d 70 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10816]
  01115	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$339:
  0111a	8d 8d 90 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10848]
  01120	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$340:
  01125	8d 8d b0 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10880]
  0112b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$341:
  01130	8d 8d d0 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10912]
  01136	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$342:
  0113b	8d 8d f0 ab ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10944]
  01141	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$343:
  01146	8d 8d 10 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+10976]
  0114c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$344:
  01151	8d 8d 30 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11008]
  01157	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$345:
  0115c	8d 8d 50 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11040]
  01162	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$346:
  01167	8d 8d 70 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11072]
  0116d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$347:
  01172	8d 8d 90 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11104]
  01178	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$348:
  0117d	8d 8d b0 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11136]
  01183	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$349:
  01188	8d 8d d0 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11168]
  0118e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$350:
  01193	8d 8d f0 ac ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11200]
  01199	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$351:
  0119e	8d 8d 10 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11232]
  011a4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$352:
  011a9	8d 8d 30 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11264]
  011af	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$353:
  011b4	8d 8d 50 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11296]
  011ba	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$354:
  011bf	8d 8d 70 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11328]
  011c5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$355:
  011ca	8d 8d 90 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11360]
  011d0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$356:
  011d5	8d 8d b0 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11392]
  011db	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$357:
  011e0	8d 8d d0 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11424]
  011e6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$358:
  011eb	8d 8d f0 ad ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11456]
  011f1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$359:
  011f6	8d 8d 10 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11488]
  011fc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$360:
  01201	8d 8d 30 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11520]
  01207	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$361:
  0120c	8d 8d 50 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11552]
  01212	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$362:
  01217	8d 8d 70 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11584]
  0121d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$363:
  01222	8d 8d 90 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11616]
  01228	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$364:
  0122d	8d 8d b0 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11648]
  01233	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$365:
  01238	8d 8d d0 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11680]
  0123e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$366:
  01243	8d 8d f0 ae ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11712]
  01249	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$367:
  0124e	8d 8d 10 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11744]
  01254	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$368:
  01259	8d 8d 30 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11776]
  0125f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$369:
  01264	8d 8d 50 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11808]
  0126a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$370:
  0126f	8d 8d 70 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11840]
  01275	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$371:
  0127a	8d 8d 90 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11872]
  01280	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$372:
  01285	8d 8d b0 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11904]
  0128b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$373:
  01290	8d 8d d0 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11936]
  01296	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$374:
  0129b	8d 8d f0 af ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+11968]
  012a1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$375:
  012a6	8d 8d 10 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12000]
  012ac	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$376:
  012b1	8d 8d 30 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12032]
  012b7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$377:
  012bc	8d 8d 50 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12064]
  012c2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$378:
  012c7	8d 8d 70 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12096]
  012cd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$379:
  012d2	8d 8d 90 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12128]
  012d8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$380:
  012dd	8d 8d b0 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12160]
  012e3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$381:
  012e8	8d 8d d0 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12192]
  012ee	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$382:
  012f3	8d 8d f0 b0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12224]
  012f9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$383:
  012fe	8d 8d 10 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12256]
  01304	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$384:
  01309	8d 8d 30 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12288]
  0130f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$385:
  01314	8d 8d 50 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12320]
  0131a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$386:
  0131f	8d 8d 70 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12352]
  01325	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$387:
  0132a	8d 8d 90 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12384]
  01330	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$388:
  01335	8d 8d b0 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12416]
  0133b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$389:
  01340	8d 8d d0 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12448]
  01346	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$390:
  0134b	8d 8d f0 b1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12480]
  01351	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$391:
  01356	8d 8d 10 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12512]
  0135c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$392:
  01361	8d 8d 30 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12544]
  01367	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$393:
  0136c	8d 8d 50 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12576]
  01372	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$394:
  01377	8d 8d 70 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12608]
  0137d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$395:
  01382	8d 8d 90 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12640]
  01388	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$396:
  0138d	8d 8d b0 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12672]
  01393	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$397:
  01398	8d 8d d0 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12704]
  0139e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$398:
  013a3	8d 8d f0 b2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12736]
  013a9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$399:
  013ae	8d 8d 10 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12768]
  013b4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$400:
  013b9	8d 8d 30 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12800]
  013bf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$401:
  013c4	8d 8d 50 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12832]
  013ca	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$402:
  013cf	8d 8d 70 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12864]
  013d5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$403:
  013da	8d 8d 90 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12896]
  013e0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$404:
  013e5	8d 8d b0 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12928]
  013eb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$405:
  013f0	8d 8d d0 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12960]
  013f6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$406:
  013fb	8d 8d f0 b3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+12992]
  01401	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$407:
  01406	8d 8d 10 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13024]
  0140c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$408:
  01411	8d 8d 30 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13056]
  01417	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$409:
  0141c	8d 8d 50 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13088]
  01422	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$410:
  01427	8d 8d 70 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13120]
  0142d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$411:
  01432	8d 8d 90 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13152]
  01438	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$412:
  0143d	8d 8d b0 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13184]
  01443	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$413:
  01448	8d 8d d0 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13216]
  0144e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$414:
  01453	8d 8d f0 b4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13248]
  01459	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$415:
  0145e	8d 8d 10 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13280]
  01464	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$416:
  01469	8d 8d 30 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13312]
  0146f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$417:
  01474	8d 8d 50 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13344]
  0147a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$418:
  0147f	8d 8d 70 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13376]
  01485	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$419:
  0148a	8d 8d 90 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13408]
  01490	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$420:
  01495	8d 8d b0 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13440]
  0149b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$421:
  014a0	8d 8d d0 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13472]
  014a6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$422:
  014ab	8d 8d f0 b5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13504]
  014b1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$423:
  014b6	8d 8d 10 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13536]
  014bc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$424:
  014c1	8d 8d 30 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13568]
  014c7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$425:
  014cc	8d 8d 50 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13600]
  014d2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$426:
  014d7	8d 8d 70 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13632]
  014dd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$427:
  014e2	8d 8d 90 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13664]
  014e8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$428:
  014ed	8d 8d b0 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13696]
  014f3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$429:
  014f8	8d 8d d0 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13728]
  014fe	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$430:
  01503	8d 8d f0 b6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13760]
  01509	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$431:
  0150e	8d 8d 10 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13792]
  01514	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$432:
  01519	8d 8d 30 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13824]
  0151f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$433:
  01524	8d 8d 50 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13856]
  0152a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$434:
  0152f	8d 8d 70 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13888]
  01535	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$435:
  0153a	8d 8d 90 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13920]
  01540	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$436:
  01545	8d 8d b0 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13952]
  0154b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$437:
  01550	8d 8d d0 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+13984]
  01556	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$438:
  0155b	8d 8d f0 b7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14016]
  01561	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$439:
  01566	8d 8d 10 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14048]
  0156c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$440:
  01571	8d 8d 30 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14080]
  01577	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$441:
  0157c	8d 8d 50 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14112]
  01582	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$442:
  01587	8d 8d 70 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14144]
  0158d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$443:
  01592	8d 8d 90 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14176]
  01598	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$444:
  0159d	8d 8d b0 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14208]
  015a3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$445:
  015a8	8d 8d d0 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14240]
  015ae	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$446:
  015b3	8d 8d f0 b8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14272]
  015b9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$447:
  015be	8d 8d 10 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14304]
  015c4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$448:
  015c9	8d 8d 30 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14336]
  015cf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$449:
  015d4	8d 8d 50 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14368]
  015da	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$450:
  015df	8d 8d 70 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14400]
  015e5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$451:
  015ea	8d 8d 90 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14432]
  015f0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$452:
  015f5	8d 8d b0 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14464]
  015fb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$453:
  01600	8d 8d d0 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14496]
  01606	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$454:
  0160b	8d 8d f0 b9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14528]
  01611	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$455:
  01616	8d 8d 10 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14560]
  0161c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$456:
  01621	8d 8d 30 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14592]
  01627	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$457:
  0162c	8d 8d 50 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14624]
  01632	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$458:
  01637	8d 8d 70 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14656]
  0163d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$459:
  01642	8d 8d 90 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14688]
  01648	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$460:
  0164d	8d 8d b0 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14720]
  01653	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$461:
  01658	8d 8d d0 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14752]
  0165e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$462:
  01663	8d 8d f0 ba ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14784]
  01669	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$463:
  0166e	8d 8d 10 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14816]
  01674	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$464:
  01679	8d 8d 30 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14848]
  0167f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$465:
  01684	8d 8d 50 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14880]
  0168a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$466:
  0168f	8d 8d 70 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14912]
  01695	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$467:
  0169a	8d 8d 90 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14944]
  016a0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$468:
  016a5	8d 8d b0 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+14976]
  016ab	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$469:
  016b0	8d 8d d0 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15008]
  016b6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$470:
  016bb	8d 8d f0 bb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15040]
  016c1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$471:
  016c6	8d 8d 10 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15072]
  016cc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$472:
  016d1	8d 8d 30 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15104]
  016d7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$473:
  016dc	8d 8d 50 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15136]
  016e2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$474:
  016e7	8d 8d 70 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15168]
  016ed	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$475:
  016f2	8d 8d 90 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15200]
  016f8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$476:
  016fd	8d 8d b0 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15232]
  01703	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$477:
  01708	8d 8d d0 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15264]
  0170e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$478:
  01713	8d 8d f0 bc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15296]
  01719	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$479:
  0171e	8d 8d 10 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15328]
  01724	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$480:
  01729	8d 8d 30 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15360]
  0172f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$481:
  01734	8d 8d 50 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15392]
  0173a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$482:
  0173f	8d 8d 70 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15424]
  01745	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$483:
  0174a	8d 8d 90 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15456]
  01750	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$484:
  01755	8d 8d b0 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15488]
  0175b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$485:
  01760	8d 8d d0 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15520]
  01766	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$486:
  0176b	8d 8d f0 bd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15552]
  01771	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$487:
  01776	8d 8d 10 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15584]
  0177c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$488:
  01781	8d 8d 30 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15616]
  01787	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$489:
  0178c	8d 8d 50 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15648]
  01792	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$490:
  01797	8d 8d 70 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15680]
  0179d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$491:
  017a2	8d 8d 90 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15712]
  017a8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$492:
  017ad	8d 8d b0 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15744]
  017b3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$493:
  017b8	8d 8d d0 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15776]
  017be	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$494:
  017c3	8d 8d f0 be ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15808]
  017c9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$495:
  017ce	8d 8d 10 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15840]
  017d4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$496:
  017d9	8d 8d 30 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15872]
  017df	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$497:
  017e4	8d 8d 50 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15904]
  017ea	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$498:
  017ef	8d 8d 70 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15936]
  017f5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$499:
  017fa	8d 8d 90 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+15968]
  01800	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$500:
  01805	8d 8d b0 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16000]
  0180b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$501:
  01810	8d 8d d0 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16032]
  01816	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$502:
  0181b	8d 8d f0 bf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16064]
  01821	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$503:
  01826	8d 8d 10 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16096]
  0182c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$504:
  01831	8d 8d 30 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16128]
  01837	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$505:
  0183c	8d 8d 50 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16160]
  01842	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$506:
  01847	8d 8d 70 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16192]
  0184d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$507:
  01852	8d 8d 90 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16224]
  01858	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$508:
  0185d	8d 8d b0 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16256]
  01863	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$509:
  01868	8d 8d d0 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16288]
  0186e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$510:
  01873	8d 8d f0 c0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16320]
  01879	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$511:
  0187e	8d 8d 10 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16352]
  01884	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$512:
  01889	8d 8d 30 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16384]
  0188f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$513:
  01894	8d 8d 50 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16416]
  0189a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$514:
  0189f	8d 8d 70 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16448]
  018a5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$515:
  018aa	8d 8d 90 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16480]
  018b0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$516:
  018b5	8d 8d b0 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16512]
  018bb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$517:
  018c0	8d 8d d0 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16544]
  018c6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$518:
  018cb	8d 8d f0 c1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16576]
  018d1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$519:
  018d6	8d 8d 10 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16608]
  018dc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$520:
  018e1	8d 8d 30 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16640]
  018e7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$521:
  018ec	8d 8d 50 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16672]
  018f2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$522:
  018f7	8d 8d 70 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16704]
  018fd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$523:
  01902	8d 8d 90 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16736]
  01908	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$524:
  0190d	8d 8d b0 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16768]
  01913	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$525:
  01918	8d 8d d0 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16800]
  0191e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$526:
  01923	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16832]
  01929	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$527:
  0192e	8d 8d 10 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16864]
  01934	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$528:
  01939	8d 8d 30 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16896]
  0193f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$529:
  01944	8d 8d 50 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16928]
  0194a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$530:
  0194f	8d 8d 70 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16960]
  01955	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$531:
  0195a	8d 8d 90 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+16992]
  01960	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$532:
  01965	8d 8d b0 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17024]
  0196b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$533:
  01970	8d 8d d0 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17056]
  01976	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$534:
  0197b	8d 8d f0 c3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17088]
  01981	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$535:
  01986	8d 8d 10 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17120]
  0198c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$536:
  01991	8d 8d 30 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17152]
  01997	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$537:
  0199c	8d 8d 50 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17184]
  019a2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$538:
  019a7	8d 8d 70 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17216]
  019ad	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$539:
  019b2	8d 8d 90 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17248]
  019b8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$540:
  019bd	8d 8d b0 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17280]
  019c3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$541:
  019c8	8d 8d d0 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17312]
  019ce	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$542:
  019d3	8d 8d f0 c4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17344]
  019d9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$543:
  019de	8d 8d 10 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17376]
  019e4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$544:
  019e9	8d 8d 30 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17408]
  019ef	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$545:
  019f4	8d 8d 50 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17440]
  019fa	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$546:
  019ff	8d 8d 70 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17472]
  01a05	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$547:
  01a0a	8d 8d 90 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17504]
  01a10	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$548:
  01a15	8d 8d b0 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17536]
  01a1b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$549:
  01a20	8d 8d d0 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17568]
  01a26	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$550:
  01a2b	8d 8d f0 c5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17600]
  01a31	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$551:
  01a36	8d 8d 10 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17632]
  01a3c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$552:
  01a41	8d 8d 30 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17664]
  01a47	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$553:
  01a4c	8d 8d 50 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17696]
  01a52	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$554:
  01a57	8d 8d 70 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17728]
  01a5d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$555:
  01a62	8d 8d 90 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17760]
  01a68	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$556:
  01a6d	8d 8d b0 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17792]
  01a73	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$557:
  01a78	8d 8d d0 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17824]
  01a7e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$558:
  01a83	8d 8d f0 c6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17856]
  01a89	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$559:
  01a8e	8d 8d 10 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17888]
  01a94	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$560:
  01a99	8d 8d 30 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17920]
  01a9f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$561:
  01aa4	8d 8d 50 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17952]
  01aaa	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$562:
  01aaf	8d 8d 70 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+17984]
  01ab5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$563:
  01aba	8d 8d 90 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18016]
  01ac0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$564:
  01ac5	8d 8d b0 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18048]
  01acb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$565:
  01ad0	8d 8d d0 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18080]
  01ad6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$566:
  01adb	8d 8d f0 c7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18112]
  01ae1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$567:
  01ae6	8d 8d 10 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18144]
  01aec	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$568:
  01af1	8d 8d 30 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18176]
  01af7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$569:
  01afc	8d 8d 50 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18208]
  01b02	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$570:
  01b07	8d 8d 70 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18240]
  01b0d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$571:
  01b12	8d 8d 90 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18272]
  01b18	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$572:
  01b1d	8d 8d b0 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18304]
  01b23	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$573:
  01b28	8d 8d d0 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18336]
  01b2e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$574:
  01b33	8d 8d f0 c8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18368]
  01b39	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$575:
  01b3e	8d 8d 10 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18400]
  01b44	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$576:
  01b49	8d 8d 30 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18432]
  01b4f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$577:
  01b54	8d 8d 50 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18464]
  01b5a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$578:
  01b5f	8d 8d 70 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18496]
  01b65	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$579:
  01b6a	8d 8d 90 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18528]
  01b70	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$580:
  01b75	8d 8d b0 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18560]
  01b7b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$581:
  01b80	8d 8d d0 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18592]
  01b86	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$582:
  01b8b	8d 8d f0 c9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18624]
  01b91	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$583:
  01b96	8d 8d 10 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18656]
  01b9c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$584:
  01ba1	8d 8d 30 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18688]
  01ba7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$585:
  01bac	8d 8d 50 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18720]
  01bb2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$586:
  01bb7	8d 8d 70 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18752]
  01bbd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$587:
  01bc2	8d 8d 90 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18784]
  01bc8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$588:
  01bcd	8d 8d b0 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18816]
  01bd3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$589:
  01bd8	8d 8d d0 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18848]
  01bde	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$590:
  01be3	8d 8d f0 ca ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18880]
  01be9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$591:
  01bee	8d 8d 10 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18912]
  01bf4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$592:
  01bf9	8d 8d 30 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18944]
  01bff	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$593:
  01c04	8d 8d 50 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+18976]
  01c0a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$594:
  01c0f	8d 8d 70 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19008]
  01c15	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$595:
  01c1a	8d 8d 90 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19040]
  01c20	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$596:
  01c25	8d 8d b0 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19072]
  01c2b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$597:
  01c30	8d 8d d0 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19104]
  01c36	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$598:
  01c3b	8d 8d f0 cb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19136]
  01c41	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$599:
  01c46	8d 8d 10 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19168]
  01c4c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$600:
  01c51	8d 8d 30 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19200]
  01c57	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$601:
  01c5c	8d 8d 50 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19232]
  01c62	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$602:
  01c67	8d 8d 70 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19264]
  01c6d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$603:
  01c72	8d 8d 90 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19296]
  01c78	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$604:
  01c7d	8d 8d b0 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19328]
  01c83	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$605:
  01c88	8d 8d d0 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19360]
  01c8e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$606:
  01c93	8d 8d f0 cc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19392]
  01c99	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$607:
  01c9e	8d 8d 10 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19424]
  01ca4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$608:
  01ca9	8d 8d 30 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19456]
  01caf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$609:
  01cb4	8d 8d 50 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19488]
  01cba	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$610:
  01cbf	8d 8d 70 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19520]
  01cc5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$611:
  01cca	8d 8d 90 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19552]
  01cd0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$612:
  01cd5	8d 8d b0 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19584]
  01cdb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$613:
  01ce0	8d 8d d0 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19616]
  01ce6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$614:
  01ceb	8d 8d f0 cd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19648]
  01cf1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$615:
  01cf6	8d 8d 10 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19680]
  01cfc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$616:
  01d01	8d 8d 30 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19712]
  01d07	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$617:
  01d0c	8d 8d 50 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19744]
  01d12	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$618:
  01d17	8d 8d 70 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19776]
  01d1d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$619:
  01d22	8d 8d 90 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19808]
  01d28	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$620:
  01d2d	8d 8d b0 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19840]
  01d33	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$621:
  01d38	8d 8d d0 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19872]
  01d3e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$622:
  01d43	8d 8d f0 ce ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19904]
  01d49	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$623:
  01d4e	8d 8d 10 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19936]
  01d54	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$624:
  01d59	8d 8d 30 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+19968]
  01d5f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$625:
  01d64	8d 8d 50 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20000]
  01d6a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$626:
  01d6f	8d 8d 70 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20032]
  01d75	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$627:
  01d7a	8d 8d 90 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20064]
  01d80	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$628:
  01d85	8d 8d b0 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20096]
  01d8b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$629:
  01d90	8d 8d d0 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20128]
  01d96	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$630:
  01d9b	8d 8d f0 cf ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20160]
  01da1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$631:
  01da6	8d 8d 10 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20192]
  01dac	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$632:
  01db1	8d 8d 30 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20224]
  01db7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$633:
  01dbc	8d 8d 50 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20256]
  01dc2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$634:
  01dc7	8d 8d 70 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20288]
  01dcd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$635:
  01dd2	8d 8d 90 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20320]
  01dd8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$636:
  01ddd	8d 8d b0 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20352]
  01de3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$637:
  01de8	8d 8d d0 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20384]
  01dee	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$638:
  01df3	8d 8d f0 d0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20416]
  01df9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$639:
  01dfe	8d 8d 10 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20448]
  01e04	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$640:
  01e09	8d 8d 30 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20480]
  01e0f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$641:
  01e14	8d 8d 50 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20512]
  01e1a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$642:
  01e1f	8d 8d 70 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20544]
  01e25	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$643:
  01e2a	8d 8d 90 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20576]
  01e30	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$644:
  01e35	8d 8d b0 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20608]
  01e3b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$645:
  01e40	8d 8d d0 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20640]
  01e46	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$646:
  01e4b	8d 8d f0 d1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20672]
  01e51	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$647:
  01e56	8d 8d 10 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20704]
  01e5c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$648:
  01e61	8d 8d 30 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20736]
  01e67	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$649:
  01e6c	8d 8d 50 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20768]
  01e72	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$650:
  01e77	8d 8d 70 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20800]
  01e7d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$651:
  01e82	8d 8d 90 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20832]
  01e88	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$652:
  01e8d	8d 8d b0 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20864]
  01e93	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$653:
  01e98	8d 8d d0 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20896]
  01e9e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$654:
  01ea3	8d 8d f0 d2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20928]
  01ea9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$655:
  01eae	8d 8d 10 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20960]
  01eb4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$656:
  01eb9	8d 8d 30 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+20992]
  01ebf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$657:
  01ec4	8d 8d 50 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21024]
  01eca	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$658:
  01ecf	8d 8d 70 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21056]
  01ed5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$659:
  01eda	8d 8d 90 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21088]
  01ee0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$660:
  01ee5	8d 8d b0 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21120]
  01eeb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$661:
  01ef0	8d 8d d0 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21152]
  01ef6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$662:
  01efb	8d 8d f0 d3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21184]
  01f01	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$663:
  01f06	8d 8d 10 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21216]
  01f0c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$664:
  01f11	8d 8d 30 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21248]
  01f17	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$665:
  01f1c	8d 8d 50 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21280]
  01f22	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$666:
  01f27	8d 8d 70 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21312]
  01f2d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$667:
  01f32	8d 8d 90 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21344]
  01f38	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$668:
  01f3d	8d 8d b0 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21376]
  01f43	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$669:
  01f48	8d 8d d0 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21408]
  01f4e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$670:
  01f53	8d 8d f0 d4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21440]
  01f59	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$671:
  01f5e	8d 8d 10 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21472]
  01f64	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$672:
  01f69	8d 8d 30 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21504]
  01f6f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$673:
  01f74	8d 8d 50 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21536]
  01f7a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$674:
  01f7f	8d 8d 70 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21568]
  01f85	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$675:
  01f8a	8d 8d 90 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21600]
  01f90	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$676:
  01f95	8d 8d b0 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21632]
  01f9b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$677:
  01fa0	8d 8d d0 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21664]
  01fa6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$678:
  01fab	8d 8d f0 d5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21696]
  01fb1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$679:
  01fb6	8d 8d 10 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21728]
  01fbc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$680:
  01fc1	8d 8d 30 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21760]
  01fc7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$681:
  01fcc	8d 8d 50 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21792]
  01fd2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$682:
  01fd7	8d 8d 70 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21824]
  01fdd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$683:
  01fe2	8d 8d 90 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21856]
  01fe8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$684:
  01fed	8d 8d b0 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21888]
  01ff3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$685:
  01ff8	8d 8d d0 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21920]
  01ffe	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$686:
  02003	8d 8d f0 d6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21952]
  02009	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$687:
  0200e	8d 8d 10 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+21984]
  02014	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$688:
  02019	8d 8d 30 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22016]
  0201f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$689:
  02024	8d 8d 50 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22048]
  0202a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$690:
  0202f	8d 8d 70 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22080]
  02035	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$691:
  0203a	8d 8d 90 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22112]
  02040	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$692:
  02045	8d 8d b0 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22144]
  0204b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$693:
  02050	8d 8d d0 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22176]
  02056	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$694:
  0205b	8d 8d f0 d7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22208]
  02061	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$695:
  02066	8d 8d 10 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22240]
  0206c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$696:
  02071	8d 8d 30 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22272]
  02077	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$697:
  0207c	8d 8d 50 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22304]
  02082	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$698:
  02087	8d 8d 70 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22336]
  0208d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$699:
  02092	8d 8d 90 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22368]
  02098	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$700:
  0209d	8d 8d b0 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22400]
  020a3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$701:
  020a8	8d 8d d0 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22432]
  020ae	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$702:
  020b3	8d 8d f0 d8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22464]
  020b9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$703:
  020be	8d 8d 10 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22496]
  020c4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$704:
  020c9	8d 8d 30 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22528]
  020cf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$705:
  020d4	8d 8d 50 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22560]
  020da	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$706:
  020df	8d 8d 70 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22592]
  020e5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$707:
  020ea	8d 8d 90 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22624]
  020f0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$708:
  020f5	8d 8d b0 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22656]
  020fb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$709:
  02100	8d 8d d0 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22688]
  02106	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$710:
  0210b	8d 8d f0 d9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22720]
  02111	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$711:
  02116	8d 8d 10 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22752]
  0211c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$712:
  02121	8d 8d 30 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22784]
  02127	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$713:
  0212c	8d 8d 50 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22816]
  02132	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$714:
  02137	8d 8d 70 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22848]
  0213d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$715:
  02142	8d 8d 90 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22880]
  02148	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$716:
  0214d	8d 8d b0 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22912]
  02153	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$717:
  02158	8d 8d d0 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22944]
  0215e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$718:
  02163	8d 8d f0 da ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+22976]
  02169	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$719:
  0216e	8d 8d 10 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23008]
  02174	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$720:
  02179	8d 8d 30 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23040]
  0217f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$721:
  02184	8d 8d 50 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23072]
  0218a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$722:
  0218f	8d 8d 70 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23104]
  02195	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$723:
  0219a	8d 8d 90 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23136]
  021a0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$724:
  021a5	8d 8d b0 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23168]
  021ab	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$725:
  021b0	8d 8d d0 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23200]
  021b6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$726:
  021bb	8d 8d f0 db ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23232]
  021c1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$727:
  021c6	8d 8d 10 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23264]
  021cc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$728:
  021d1	8d 8d 30 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23296]
  021d7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$729:
  021dc	8d 8d 50 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23328]
  021e2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$730:
  021e7	8d 8d 70 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23360]
  021ed	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$731:
  021f2	8d 8d 90 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23392]
  021f8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$732:
  021fd	8d 8d b0 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23424]
  02203	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$733:
  02208	8d 8d d0 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23456]
  0220e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$734:
  02213	8d 8d f0 dc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23488]
  02219	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$735:
  0221e	8d 8d 10 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23520]
  02224	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$736:
  02229	8d 8d 30 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23552]
  0222f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$737:
  02234	8d 8d 50 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23584]
  0223a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$738:
  0223f	8d 8d 70 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23616]
  02245	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$739:
  0224a	8d 8d 90 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23648]
  02250	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$740:
  02255	8d 8d b0 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23680]
  0225b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$741:
  02260	8d 8d d0 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23712]
  02266	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$742:
  0226b	8d 8d f0 dd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23744]
  02271	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$743:
  02276	8d 8d 10 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23776]
  0227c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$744:
  02281	8d 8d 30 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23808]
  02287	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$745:
  0228c	8d 8d 50 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23840]
  02292	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$746:
  02297	8d 8d 70 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23872]
  0229d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$747:
  022a2	8d 8d 90 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23904]
  022a8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$748:
  022ad	8d 8d b0 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23936]
  022b3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$749:
  022b8	8d 8d d0 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+23968]
  022be	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$750:
  022c3	8d 8d f0 de ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24000]
  022c9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$751:
  022ce	8d 8d 10 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24032]
  022d4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$752:
  022d9	8d 8d 30 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24064]
  022df	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$753:
  022e4	8d 8d 50 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24096]
  022ea	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$754:
  022ef	8d 8d 70 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24128]
  022f5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$755:
  022fa	8d 8d 90 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24160]
  02300	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$756:
  02305	8d 8d b0 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24192]
  0230b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$757:
  02310	8d 8d d0 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24224]
  02316	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$758:
  0231b	8d 8d f0 df ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24256]
  02321	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$759:
  02326	8d 8d 10 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24288]
  0232c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$760:
  02331	8d 8d 30 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24320]
  02337	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$761:
  0233c	8d 8d 50 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24352]
  02342	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$762:
  02347	8d 8d 70 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24384]
  0234d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$763:
  02352	8d 8d 90 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24416]
  02358	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$764:
  0235d	8d 8d b0 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24448]
  02363	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$765:
  02368	8d 8d d0 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24480]
  0236e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$766:
  02373	8d 8d f0 e0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24512]
  02379	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$767:
  0237e	8d 8d 10 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24544]
  02384	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$768:
  02389	8d 8d 30 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24576]
  0238f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$769:
  02394	8d 8d 50 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24608]
  0239a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$770:
  0239f	8d 8d 70 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24640]
  023a5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$771:
  023aa	8d 8d 90 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24672]
  023b0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$772:
  023b5	8d 8d b0 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24704]
  023bb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$773:
  023c0	8d 8d d0 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24736]
  023c6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$774:
  023cb	8d 8d f0 e1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24768]
  023d1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$775:
  023d6	8d 8d 10 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24800]
  023dc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$776:
  023e1	8d 8d 30 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24832]
  023e7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$777:
  023ec	8d 8d 50 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24864]
  023f2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$778:
  023f7	8d 8d 70 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24896]
  023fd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$779:
  02402	8d 8d 90 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24928]
  02408	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$780:
  0240d	8d 8d b0 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24960]
  02413	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$781:
  02418	8d 8d d0 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+24992]
  0241e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$782:
  02423	8d 8d f0 e2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25024]
  02429	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$783:
  0242e	8d 8d 10 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25056]
  02434	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$784:
  02439	8d 8d 30 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25088]
  0243f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$785:
  02444	8d 8d 50 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25120]
  0244a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$786:
  0244f	8d 8d 70 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25152]
  02455	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$787:
  0245a	8d 8d 90 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25184]
  02460	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$788:
  02465	8d 8d b0 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25216]
  0246b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$789:
  02470	8d 8d d0 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25248]
  02476	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$790:
  0247b	8d 8d f0 e3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25280]
  02481	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$791:
  02486	8d 8d 10 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25312]
  0248c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$792:
  02491	8d 8d 30 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25344]
  02497	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$793:
  0249c	8d 8d 50 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25376]
  024a2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$794:
  024a7	8d 8d 70 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25408]
  024ad	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$795:
  024b2	8d 8d 90 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25440]
  024b8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$796:
  024bd	8d 8d b0 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25472]
  024c3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$797:
  024c8	8d 8d d0 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25504]
  024ce	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$798:
  024d3	8d 8d f0 e4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25536]
  024d9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$799:
  024de	8d 8d 10 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25568]
  024e4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$800:
  024e9	8d 8d 30 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25600]
  024ef	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$801:
  024f4	8d 8d 50 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25632]
  024fa	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$802:
  024ff	8d 8d 70 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25664]
  02505	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$803:
  0250a	8d 8d 90 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25696]
  02510	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$804:
  02515	8d 8d b0 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25728]
  0251b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$805:
  02520	8d 8d d0 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25760]
  02526	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$806:
  0252b	8d 8d f0 e5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25792]
  02531	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$807:
  02536	8d 8d 10 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25824]
  0253c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$808:
  02541	8d 8d 30 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25856]
  02547	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$809:
  0254c	8d 8d 50 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25888]
  02552	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$810:
  02557	8d 8d 70 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25920]
  0255d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$811:
  02562	8d 8d 90 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25952]
  02568	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$812:
  0256d	8d 8d b0 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+25984]
  02573	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$813:
  02578	8d 8d d0 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26016]
  0257e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$814:
  02583	8d 8d f0 e6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26048]
  02589	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$815:
  0258e	8d 8d 10 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26080]
  02594	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$816:
  02599	8d 8d 30 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26112]
  0259f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$817:
  025a4	8d 8d 50 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26144]
  025aa	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$818:
  025af	8d 8d 70 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26176]
  025b5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$819:
  025ba	8d 8d 90 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26208]
  025c0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$820:
  025c5	8d 8d b0 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26240]
  025cb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$821:
  025d0	8d 8d d0 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26272]
  025d6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$822:
  025db	8d 8d f0 e7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26304]
  025e1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$823:
  025e6	8d 8d 10 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26336]
  025ec	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$824:
  025f1	8d 8d 30 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26368]
  025f7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$825:
  025fc	8d 8d 50 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26400]
  02602	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$826:
  02607	8d 8d 70 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26432]
  0260d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$827:
  02612	8d 8d 90 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26464]
  02618	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$828:
  0261d	8d 8d b0 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26496]
  02623	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$829:
  02628	8d 8d d0 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26528]
  0262e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$830:
  02633	8d 8d f0 e8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26560]
  02639	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$831:
  0263e	8d 8d 10 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26592]
  02644	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$832:
  02649	8d 8d 30 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26624]
  0264f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$833:
  02654	8d 8d 50 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26656]
  0265a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$834:
  0265f	8d 8d 70 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26688]
  02665	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$835:
  0266a	8d 8d 90 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26720]
  02670	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$836:
  02675	8d 8d b0 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26752]
  0267b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$837:
  02680	8d 8d d0 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26784]
  02686	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$838:
  0268b	8d 8d f0 e9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26816]
  02691	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$839:
  02696	8d 8d 10 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26848]
  0269c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$840:
  026a1	8d 8d 30 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26880]
  026a7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$841:
  026ac	8d 8d 50 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26912]
  026b2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$842:
  026b7	8d 8d 70 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26944]
  026bd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$843:
  026c2	8d 8d 90 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+26976]
  026c8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$844:
  026cd	8d 8d b0 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27008]
  026d3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$845:
  026d8	8d 8d d0 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27040]
  026de	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$846:
  026e3	8d 8d f0 ea ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27072]
  026e9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$847:
  026ee	8d 8d 10 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27104]
  026f4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$848:
  026f9	8d 8d 30 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27136]
  026ff	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$849:
  02704	8d 8d 50 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27168]
  0270a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$850:
  0270f	8d 8d 70 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27200]
  02715	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$851:
  0271a	8d 8d 90 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27232]
  02720	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$852:
  02725	8d 8d b0 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27264]
  0272b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$853:
  02730	8d 8d d0 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27296]
  02736	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$854:
  0273b	8d 8d f0 eb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27328]
  02741	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$855:
  02746	8d 8d 10 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27360]
  0274c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$856:
  02751	8d 8d 30 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27392]
  02757	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$857:
  0275c	8d 8d 50 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27424]
  02762	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$858:
  02767	8d 8d 70 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27456]
  0276d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$859:
  02772	8d 8d 90 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27488]
  02778	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$860:
  0277d	8d 8d b0 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27520]
  02783	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$861:
  02788	8d 8d d0 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27552]
  0278e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$862:
  02793	8d 8d f0 ec ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27584]
  02799	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$863:
  0279e	8d 8d 10 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27616]
  027a4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$864:
  027a9	8d 8d 30 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27648]
  027af	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$865:
  027b4	8d 8d 50 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27680]
  027ba	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$866:
  027bf	8d 8d 70 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27712]
  027c5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$867:
  027ca	8d 8d 90 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27744]
  027d0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$868:
  027d5	8d 8d b0 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27776]
  027db	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$869:
  027e0	8d 8d d0 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27808]
  027e6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$870:
  027eb	8d 8d f0 ed ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27840]
  027f1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$871:
  027f6	8d 8d 10 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27872]
  027fc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$872:
  02801	8d 8d 30 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27904]
  02807	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$873:
  0280c	8d 8d 50 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27936]
  02812	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$874:
  02817	8d 8d 70 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+27968]
  0281d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$875:
  02822	8d 8d 90 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28000]
  02828	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$876:
  0282d	8d 8d b0 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28032]
  02833	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$877:
  02838	8d 8d d0 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28064]
  0283e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$878:
  02843	8d 8d f0 ee ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28096]
  02849	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$879:
  0284e	8d 8d 10 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28128]
  02854	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$880:
  02859	8d 8d 30 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28160]
  0285f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$881:
  02864	8d 8d 50 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28192]
  0286a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$882:
  0286f	8d 8d 70 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28224]
  02875	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$883:
  0287a	8d 8d 90 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28256]
  02880	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$884:
  02885	8d 8d b0 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28288]
  0288b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$885:
  02890	8d 8d d0 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28320]
  02896	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$886:
  0289b	8d 8d f0 ef ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28352]
  028a1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$887:
  028a6	8d 8d 10 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28384]
  028ac	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$888:
  028b1	8d 8d 30 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28416]
  028b7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$889:
  028bc	8d 8d 50 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28448]
  028c2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$890:
  028c7	8d 8d 70 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28480]
  028cd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$891:
  028d2	8d 8d 90 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28512]
  028d8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$892:
  028dd	8d 8d b0 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28544]
  028e3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$893:
  028e8	8d 8d d0 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28576]
  028ee	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$894:
  028f3	8d 8d f0 f0 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28608]
  028f9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$895:
  028fe	8d 8d 10 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28640]
  02904	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$896:
  02909	8d 8d 30 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28672]
  0290f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$897:
  02914	8d 8d 50 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28704]
  0291a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$898:
  0291f	8d 8d 70 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28736]
  02925	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$899:
  0292a	8d 8d 90 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28768]
  02930	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$900:
  02935	8d 8d b0 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28800]
  0293b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$901:
  02940	8d 8d d0 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28832]
  02946	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$902:
  0294b	8d 8d f0 f1 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28864]
  02951	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$903:
  02956	8d 8d 10 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28896]
  0295c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$904:
  02961	8d 8d 30 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28928]
  02967	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$905:
  0296c	8d 8d 50 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28960]
  02972	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$906:
  02977	8d 8d 70 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+28992]
  0297d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$907:
  02982	8d 8d 90 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29024]
  02988	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$908:
  0298d	8d 8d b0 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29056]
  02993	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$909:
  02998	8d 8d d0 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29088]
  0299e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$910:
  029a3	8d 8d f0 f2 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29120]
  029a9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$911:
  029ae	8d 8d 10 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29152]
  029b4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$912:
  029b9	8d 8d 30 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29184]
  029bf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$913:
  029c4	8d 8d 50 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29216]
  029ca	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$914:
  029cf	8d 8d 70 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29248]
  029d5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$915:
  029da	8d 8d 90 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29280]
  029e0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$916:
  029e5	8d 8d b0 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29312]
  029eb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$917:
  029f0	8d 8d d0 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29344]
  029f6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$918:
  029fb	8d 8d f0 f3 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29376]
  02a01	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$919:
  02a06	8d 8d 10 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29408]
  02a0c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$920:
  02a11	8d 8d 30 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29440]
  02a17	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$921:
  02a1c	8d 8d 50 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29472]
  02a22	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$922:
  02a27	8d 8d 70 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29504]
  02a2d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$923:
  02a32	8d 8d 90 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29536]
  02a38	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$924:
  02a3d	8d 8d b0 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29568]
  02a43	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$925:
  02a48	8d 8d d0 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29600]
  02a4e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$926:
  02a53	8d 8d f0 f4 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29632]
  02a59	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$927:
  02a5e	8d 8d 10 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29664]
  02a64	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$928:
  02a69	8d 8d 30 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29696]
  02a6f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$929:
  02a74	8d 8d 50 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29728]
  02a7a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$930:
  02a7f	8d 8d 70 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29760]
  02a85	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$931:
  02a8a	8d 8d 90 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29792]
  02a90	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$932:
  02a95	8d 8d b0 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29824]
  02a9b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$933:
  02aa0	8d 8d d0 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29856]
  02aa6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$934:
  02aab	8d 8d f0 f5 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29888]
  02ab1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$935:
  02ab6	8d 8d 10 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29920]
  02abc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$936:
  02ac1	8d 8d 30 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29952]
  02ac7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$937:
  02acc	8d 8d 50 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+29984]
  02ad2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$938:
  02ad7	8d 8d 70 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30016]
  02add	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$939:
  02ae2	8d 8d 90 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30048]
  02ae8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$940:
  02aed	8d 8d b0 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30080]
  02af3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$941:
  02af8	8d 8d d0 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30112]
  02afe	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$942:
  02b03	8d 8d f0 f6 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30144]
  02b09	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$943:
  02b0e	8d 8d 10 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30176]
  02b14	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$944:
  02b19	8d 8d 30 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30208]
  02b1f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$945:
  02b24	8d 8d 50 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30240]
  02b2a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$946:
  02b2f	8d 8d 70 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30272]
  02b35	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$947:
  02b3a	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30304]
  02b40	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$948:
  02b45	8d 8d b0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30336]
  02b4b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$949:
  02b50	8d 8d d0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30368]
  02b56	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$950:
  02b5b	8d 8d f0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30400]
  02b61	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$951:
  02b66	8d 8d 10 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30432]
  02b6c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$952:
  02b71	8d 8d 30 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30464]
  02b77	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$953:
  02b7c	8d 8d 50 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30496]
  02b82	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$954:
  02b87	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30528]
  02b8d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$955:
  02b92	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30560]
  02b98	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$956:
  02b9d	8d 8d b0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30592]
  02ba3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$957:
  02ba8	8d 8d d0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30624]
  02bae	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$958:
  02bb3	8d 8d f0 f8 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30656]
  02bb9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$959:
  02bbe	8d 8d 10 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30688]
  02bc4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$960:
  02bc9	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30720]
  02bcf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$961:
  02bd4	8d 8d 50 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30752]
  02bda	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$962:
  02bdf	8d 8d 70 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30784]
  02be5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$963:
  02bea	8d 8d 90 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30816]
  02bf0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$964:
  02bf5	8d 8d b0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30848]
  02bfb	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$965:
  02c00	8d 8d d0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30880]
  02c06	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$966:
  02c0b	8d 8d f0 f9 ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30912]
  02c11	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$967:
  02c16	8d 8d 10 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30944]
  02c1c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$968:
  02c21	8d 8d 30 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+30976]
  02c27	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$969:
  02c2c	8d 8d 50 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31008]
  02c32	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$970:
  02c37	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31040]
  02c3d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$971:
  02c42	8d 8d 90 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31072]
  02c48	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$972:
  02c4d	8d 8d b0 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31104]
  02c53	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$973:
  02c58	8d 8d d0 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31136]
  02c5e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$974:
  02c63	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31168]
  02c69	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$975:
  02c6e	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31200]
  02c74	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$976:
  02c79	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31232]
  02c7f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$977:
  02c84	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31264]
  02c8a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$978:
  02c8f	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31296]
  02c95	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$979:
  02c9a	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31328]
  02ca0	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$980:
  02ca5	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31360]
  02cab	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$981:
  02cb0	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31392]
  02cb6	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$982:
  02cbb	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31424]
  02cc1	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$983:
  02cc6	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31456]
  02ccc	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$984:
  02cd1	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31488]
  02cd7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$985:
  02cdc	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31520]
  02ce2	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$986:
  02ce7	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31552]
  02ced	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$987:
  02cf2	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31584]
  02cf8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$988:
  02cfd	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31616]
  02d03	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$989:
  02d08	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31648]
  02d0e	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$990:
  02d13	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31680]
  02d19	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$991:
  02d1e	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31712]
  02d24	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$992:
  02d29	8d 8d 30 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31744]
  02d2f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$993:
  02d34	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31776]
  02d3a	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$994:
  02d3f	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31808]
  02d45	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$995:
  02d4a	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31840]
  02d50	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$996:
  02d55	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31872]
  02d5b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$997:
  02d60	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31904]
  02d66	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$998:
  02d6b	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31936]
  02d71	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$999:
  02d76	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+31968]
  02d7c	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1000:
  02d81	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32000]
  02d87	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1001:
  02d8c	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32032]
  02d92	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1002:
  02d97	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32064]
  02d9d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1003:
  02da2	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32096]
  02da8	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1004:
  02dad	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32128]
  02db3	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1005:
  02db8	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32160]
  02dbe	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1006:
  02dc3	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32192]
  02dc9	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1007:
  02dce	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32224]
  02dd4	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1008:
  02dd9	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32256]
  02ddf	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1009:
  02de4	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32288]
  02dea	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1010:
  02def	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T957[ebp+32320]
  02df5	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1011:
  02dfa	8d 4d 90	 lea	 ecx, DWORD PTR $T957[ebp+32352]
  02dfd	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1012:
  02e02	8d 4d b0	 lea	 ecx, DWORD PTR $T957[ebp+32384]
  02e05	e9 00 00 00 00	 jmp	 ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$??__EusbNames@@YAXXZ$1014:
  02e0a	68 00 00 00 00	 push	 OFFSET ??1?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  02e0f	68 f6 03 00 00	 push	 1014			; 000003f6H
  02e14	6a 20		 push	 32			; 00000020H
  02e16	8d 85 30 81 ff
	ff		 lea	 eax, DWORD PTR $T957[ebp]
  02e1c	50		 push	 eax
  02e1d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  02e22	c3		 ret	 0
__ehhandler$??__EusbNames@@YAXXZ:
  02e23	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  02e27	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  02e2a	8b 8a 60 63 ff
	ff		 mov	 ecx, DWORD PTR [edx-40096]
  02e30	33 c8		 xor	 ecx, eax
  02e32	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02e37	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  02e3a	33 c8		 xor	 ecx, eax
  02e3c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02e41	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__EusbNames@@YAXXZ
  02e46	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__EusbNames@@YAXXZ ENDP				; `dynamic initializer for 'usbNames''
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??__FusbNames@@YAXXZ
text$yd	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??__FusbNames@@YAXXZ PROC				; `dynamic atexit destructor for 'usbNames'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__FusbNames@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xtree

; 1167 : 		{	// destroy tree

  00023	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2113 : 		erase(begin(), end());

  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B
  00034	50		 push	 eax
  00035	ff 30		 push	 DWORD PTR [eax]
  00037	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::erase

; 1169 : 		}

  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00047	6a 30		 push	 48			; 00000030H
  00049	ff 35 00 00 00
	00		 push	 DWORD PTR ?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
text$yd	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__FusbNames@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::~_Tree<std::_Tmap_traits<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
__unwindfunclet$??__FusbNames@@YAXXZ$1:
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?usbNames@@3V?$map@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@B
  0000f	e9 00 00 00 00	 jmp	 ??1?$_Tree_comp_alloc@V?$_Tmap_traits@_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@_K@2@V?$allocator@U?$pair@$$CB_KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
__ehhandler$??__FusbNames@@YAXXZ:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__FusbNames@@YAXXZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__FusbNames@@YAXXZ ENDP				; `dynamic atexit destructor for 'usbNames''
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h
;	COMDAT ?PushBackDetails@USB@@IAAXPBDZZ
_TEXT	SEGMENT
$T2 = -2096						; size = 24
_buffer$ = -2072					; size = 2048
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_format$ = 12						; size = 4
?PushBackDetails@USB@@IAAXPBDZZ PROC			; USB::PushBackDetails, COMDAT

; 128  :     {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?PushBackDetails@USB@@IAAXPBDZZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 24 08 00
	00		 sub	 esp, 2084		; 00000824H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	8b 73 08	 mov	 esi, DWORD PTR _this$[ebx]

; 129  :         char buffer[2048] = { 0 };

  00043	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	68 00 08 00 00	 push	 2048			; 00000800H
  0004e	6a 00		 push	 0
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memset
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00059	8d 43 10	 lea	 eax, DWORD PTR _format$[ebx+4]
  0005c	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  00061	50		 push	 eax
  00062	51		 push	 ecx
  00063	ff 73 0c	 push	 DWORD PTR _format$[ebx]
  00066	8d 8d e8 f7 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006c	e8 00 00 00 00	 call	 __vsnprintf_l
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h

; 135  :         Log(LOG_DEBUG,__LINE__,"-- USB.PushBackDets, %s", buffer);

  00074	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GFKFEIAL@?9?9?5USB?4PushBackDets?0?5?$CFs@
  00080	68 87 00 00 00	 push	 135			; 00000087H
  00085	6a 10		 push	 16			; 00000010H
  00087	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0008c	8d 8d e8 f7 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00092	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0

; 1785 : 		_Myres(0)

  0009c	c7 85 e4 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  000a6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h

; 135  :         Log(LOG_DEBUG,__LINE__,"-- USB.PushBackDets, %s", buffer);

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  000ac	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000b6	c7 85 e4 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000c0	c6 85 d0 f7 ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
$LL210@PushBackDe:

; 462  : 		return (__builtin_strlen(_First));

  000c7	8a 01		 mov	 al, BYTE PTR [ecx]
  000c9	41		 inc	 ecx
  000ca	84 c0		 test	 al, al
  000cc	75 f9		 jne	 SHORT $LL210@PushBackDe
  000ce	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000d0	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	50		 push	 eax
  000d8	8d 8d d0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000de	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h

; 136  :         usbDevDetails.push_back(buffer);

  000e3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  000ea	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  000f0	39 86 14 02 00
	00		 cmp	 DWORD PTR [esi+532], eax

; 917  : 		if (_Has_unused_capacity())

  000f6	74 3c		 je	 SHORT $LN37@PushBackDe
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000f8	0f 10 85 d0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000ff	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00102	f3 0f 7e 85 e0
	f7 ff ff	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  0010a	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0010f	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00114	89 85 e4 f7 ff
	ff		 mov	 DWORD PTR $T2[ebp+20], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  0011a	83 86 10 02 00
	00 18		 add	 DWORD PTR [esi+528], 24	; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00121	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0012b	c6 85 d0 f7 ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  00132	eb 19		 jmp	 SHORT $LN36@PushBackDe
$LN37@PushBackDe:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00134	8d 8d d0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0013a	51		 push	 ecx
  0013b	50		 push	 eax
  0013c	8d 8e 0c 02 00
	00		 lea	 ecx, DWORD PTR [esi+524]
  00142	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00147	8b 85 e4 f7 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+20]
$LN36@PushBackDe:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h

; 136  :         usbDevDetails.push_back(buffer);

  0014d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00154	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00157	72 2d		 jb	 SHORT $LN195@PushBackDe
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00159	8b 8d d0 f7 ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0015f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00162	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00164	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0016a	72 10		 jb	 SHORT $LN194@PushBackDe

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0016c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0016f	83 c2 23	 add	 edx, 35			; 00000023H
  00172	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00174	83 c0 fc	 add	 eax, -4			; fffffffcH
  00177	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0017a	77 42		 ja	 SHORT $LN214@PushBackDe
$LN194@PushBackDe:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0017c	52		 push	 edx
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00183	83 c4 08	 add	 esp, 8
$LN195@PushBackDe:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00186	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00190	c7 85 e4 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0019a	c6 85 d0 f7 ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.h

; 137  :     }

  001a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ab	59		 pop	 ecx
  001ac	5e		 pop	 esi
  001ad	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b0	33 cd		 xor	 ecx, ebp
  001b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	8b e3		 mov	 esp, ebx
  001bc	5b		 pop	 ebx
  001bd	c3		 ret	 0
$LN214@PushBackDe:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001be	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN212@PushBackDe:
  001c3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PushBackDetails@USB@@IAAXPBDZZ$0:
  00000	8d 8d d0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?PushBackDetails@USB@@IAAXPBDZZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 f7 ff
	ff		 mov	 ecx, DWORD PTR [edx-2096]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PushBackDetails@USB@@IAAXPBDZZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PushBackDetails@USB@@IAAXPBDZZ ENDP			; USB::PushBackDetails
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_nBytes$1$ = -320					; size = 4
_nBytesReturned$ = -316					; size = 4
$T2 = -312						; size = 24
_stringDescReqBuf$ = -288				; size = 267
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hHubDevice$ = 8					; size = 4
_ConnectionIndex$ = 12					; size = 4
_DescriptorIndex$ = 16					; size = 1
_LanguageID$ = 20					; size = 2
?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z PROC ; USB::GetStringDescriptor
; _this$dead$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 75 08	 mov	 esi, DWORD PTR _hHubDevice$[ebp]

; 215  :     BOOL    success;
; 216  :     ULONG   nBytes = 0;
; 217  :     ULONG   nBytesReturned = 0;
; 218  : 
; 219  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetStrDesc");

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OBKJMAF@?$DO?$DO?5USB?4GetStrDesc@
  00036	68 db 00 00 00	 push	 219			; 000000dbH
  0003b	6a 10		 push	 16			; 00000010H
  0003d	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nBytesReturned$[ebp], 0
  00047	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  : 
; 221  :     UCHAR   stringDescReqBuf[sizeof(USB_DESCRIPTOR_REQUEST) + MAXIMUM_USB_STRING_LENGTH];
; 222  : 
; 223  :     PSTRING_DESCRIPTOR_NODE stringDescNode = NULL;
; 224  : 
; 225  :     nBytes = sizeof(stringDescReqBuf);
; 226  : 
; 227  :     PUSB_DESCRIPTOR_REQUEST stringDescReq = (PUSB_DESCRIPTOR_REQUEST)stringDescReqBuf;
; 228  :     PUSB_STRING_DESCRIPTOR stringDesc = (PUSB_STRING_DESCRIPTOR)(stringDescReq + 1);
; 229  : 
; 230  :     // Zero fill the entire request structure
; 231  :     //
; 232  :     memset(stringDescReq, 0, nBytes);

  0004f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$[ebp]
  00055	68 0b 01 00 00	 push	 267			; 0000010bH
  0005a	6a 00		 push	 0
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _memset

; 233  : 
; 234  :     // Indicate the port from which the descriptor will be requested
; 235  :     //
; 236  :     stringDescReq->ConnectionIndex = ConnectionIndex;

  00062	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  : 
; 238  :     //
; 239  :     // USBHUB uses URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE to process this
; 240  :     // IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION request.
; 241  :     //
; 242  :     // USBD will automatically initialize these fields:
; 243  :     //     bmRequest = 0x80
; 244  :     //     bRequest  = 0x06
; 245  :     //
; 246  :     // We must inititialize these fields:
; 247  :     //     wValue    = Descriptor Type (high) and Descriptor Index (low byte)
; 248  :     //     wIndex    = Zero (or Language ID for String Descriptors)
; 249  :     //     wLength   = Length of descriptor buffer
; 250  :     //
; 251  :     stringDescReq->SetupPacket.wValue = (USB_STRING_DESCRIPTOR_TYPE << 8)
; 252  :         | DescriptorIndex;
; 253  : 
; 254  :     stringDescReq->SetupPacket.wIndex = LanguageID;

  00068	66 8b 5d 14	 mov	 bx, WORD PTR _LanguageID$[ebp]
  0006c	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  00071	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _stringDescReqBuf$[ebp], eax
  00077	8a 45 10	 mov	 al, BYTE PTR _DescriptorIndex$[ebp]
  0007a	0f b6 c0	 movzx	 eax, al
  0007d	66 0b c1	 or	 ax, cx
  00080	66 89 9d e8 fe
	ff ff		 mov	 WORD PTR _stringDescReqBuf$[ebp+8], bx
  00087	66 89 85 e6 fe
	ff ff		 mov	 WORD PTR _stringDescReqBuf$[ebp+6], ax

; 255  : 
; 256  :     stringDescReq->SetupPacket.wLength = (USHORT)(nBytes - sizeof(USB_DESCRIPTOR_REQUEST));

  0008e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH

; 257  : 
; 258  :     // Now issue the get descriptor request.
; 259  :     //
; 260  :     success = DeviceIoControl(hHubDevice,

  00093	6a 00		 push	 0
  00095	66 89 85 ea fe
	ff ff		 mov	 WORD PTR _stringDescReqBuf$[ebp+10], ax
  0009c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _nBytesReturned$[ebp]
  000a2	50		 push	 eax
  000a3	68 0b 01 00 00	 push	 267			; 0000010bH
  000a8	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$[ebp]
  000ae	50		 push	 eax
  000af	68 0b 01 00 00	 push	 267			; 0000010bH
  000b4	50		 push	 eax
  000b5	68 10 04 22 00	 push	 2229264			; 00220410H
  000ba	56		 push	 esi
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 261  :         IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION,
; 262  :         stringDescReq,
; 263  :         nBytes,
; 264  :         stringDescReq,
; 265  :         nBytes,
; 266  :         &nBytesReturned,
; 267  :         NULL);
; 268  : 
; 269  :     //
; 270  :     // Do some sanity checks on the return from the get descriptor request.
; 271  :     //
; 272  : 
; 273  :     if (!success)

  000c1	85 c0		 test	 eax, eax
  000c3	75 1b		 jne	 SHORT $LN2@GetStringD

; 274  :     {
; 275  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, DeviceIoControl False");

  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@MLNPNNOJ@?$DM?$DM?5USB?4GetStrDesc?0?5DeviceIoCont@
  000ca	68 13 01 00 00	 push	 275			; 00000113H
  000cf	6a 10		 push	 16			; 00000010H
  000d1	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 276  :         return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	e9 19 02 00 00	 jmp	 $LN1@GetStringD
$LN2@GetStringD:

; 277  :     }
; 278  : 
; 279  :     if (nBytesReturned < 2)

  000e0	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _nBytesReturned$[ebp]
  000e6	83 f8 02	 cmp	 eax, 2
  000e9	73 1c		 jae	 SHORT $LN3@GetStringD

; 280  :     {
; 281  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Bytes Ret %u", nBytesReturned);

  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKPBCDKN@?$DM?$DM?5USB?4GetStrDesc?0?5Bytes?5Ret?5?$CFu@
  000f1	68 19 01 00 00	 push	 281			; 00000119H
  000f6	6a 10		 push	 16			; 00000010H
  000f8	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000fd	83 c4 10	 add	 esp, 16			; 00000010H

; 282  :         return NULL;

  00100	33 c0		 xor	 eax, eax
  00102	e9 f2 01 00 00	 jmp	 $LN1@GetStringD
$LN3@GetStringD:

; 283  :     }
; 284  : 
; 285  :     if (stringDesc->bDescriptorType != USB_STRING_DESCRIPTOR_TYPE)

  00107	8a 8d ed fe ff
	ff		 mov	 cl, BYTE PTR _stringDescReqBuf$[ebp+13]
  0010d	80 f9 03	 cmp	 cl, 3
  00110	74 1f		 je	 SHORT $LN4@GetStringD

; 286  :     {
; 287  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Inv DescriptorTp %d", stringDesc->bDescriptorType);

  00112	0f b6 c1	 movzx	 eax, cl
  00115	50		 push	 eax
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@ELGGMNKC@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Descript@
  0011b	68 1f 01 00 00	 push	 287			; 0000011fH
  00120	6a 10		 push	 16			; 00000010H
  00122	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00127	83 c4 10	 add	 esp, 16			; 00000010H

; 288  :         return NULL;

  0012a	33 c0		 xor	 eax, eax
  0012c	e9 c8 01 00 00	 jmp	 $LN1@GetStringD
$LN4@GetStringD:

; 289  :     }
; 290  : 
; 291  :     if (stringDesc->bLength != nBytesReturned - sizeof(USB_DESCRIPTOR_REQUEST))

  00131	8d 48 f4	 lea	 ecx, DWORD PTR [eax-12]
  00134	0f b6 85 ec fe
	ff ff		 movzx	 eax, BYTE PTR _stringDescReqBuf$[ebp+12]
  0013b	3b c1		 cmp	 eax, ecx
  0013d	74 1d		 je	 SHORT $LN5@GetStringD

; 292  :     {
; 293  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Inv Sz %d <> %d", (int)stringDesc->bLength, nBytesReturned - sizeof(USB_DESCRIPTOR_REQUEST));

  0013f	51		 push	 ecx
  00140	50		 push	 eax
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CHKNKAPD@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Sz?5?$CFd?5?$DM?$DO@
  00146	68 25 01 00 00	 push	 293			; 00000125H
  0014b	6a 10		 push	 16			; 00000010H
  0014d	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00152	83 c4 14	 add	 esp, 20			; 00000014H

; 294  :         return NULL;

  00155	33 c0		 xor	 eax, eax
  00157	e9 9d 01 00 00	 jmp	 $LN1@GetStringD
$LN5@GetStringD:

; 295  :     }
; 296  : 
; 297  :     if (stringDesc->bLength % 2 != 0)

  0015c	a8 01		 test	 al, 1
  0015e	74 1c		 je	 SHORT $LN6@GetStringD

; 298  :     {
; 299  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Odd Sz %d", (int)stringDesc->bLength);

  00160	50		 push	 eax
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ILBIFDNN@?$DM?$DM?5USB?4GetStrDesc?0?5Odd?5Sz?5?$CFd@
  00166	68 2b 01 00 00	 push	 299			; 0000012bH
  0016b	6a 10		 push	 16			; 00000010H
  0016d	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00172	83 c4 10	 add	 esp, 16			; 00000010H

; 300  :         return NULL;

  00175	33 c0		 xor	 eax, eax
  00177	e9 7d 01 00 00	 jmp	 $LN1@GetStringD
$LN6@GetStringD:

; 301  :     }
; 302  : 
; 303  :     //
; 304  :     // Looks good, allocate some (zero filled) space for the string descriptor
; 305  :     // node and copy the string descriptor to it.
; 306  :     //
; 307  : 
; 308  :     stringDescNode = (PSTRING_DESCRIPTOR_NODE)malloc(sizeof(STRING_DESCRIPTOR_NODE) + stringDesc->bLength);

  0017c	83 c0 08	 add	 eax, 8
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 _malloc
  00185	8b f0		 mov	 esi, eax
  00187	83 c4 04	 add	 esp, 4

; 309  : 
; 310  :     if (stringDescNode == NULL)

  0018a	85 f6		 test	 esi, esi
  0018c	75 1b		 jne	 SHORT $LN7@GetStringD

; 311  :     {
; 312  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, new DescNode null");

  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BKJLPKEL@?$DM?$DM?5USB?4GetStrDesc?0?5new?5DescNode@
  00193	68 38 01 00 00	 push	 312			; 00000138H
  00198	6a 10		 push	 16			; 00000010H
  0019a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 313  :         return NULL;

  001a2	33 c0		 xor	 eax, eax
  001a4	e9 50 01 00 00	 jmp	 $LN1@GetStringD
$LN7@GetStringD:

; 314  :     }
; 315  : 
; 316  :     memset(stringDescNode, 0x00, sizeof(STRING_DESCRIPTOR_NODE) + stringDesc->bLength);

  001a9	0f b6 85 ec fe
	ff ff		 movzx	 eax, BYTE PTR _stringDescReqBuf$[ebp+12]
  001b0	83 c0 08	 add	 eax, 8
  001b3	50		 push	 eax
  001b4	6a 00		 push	 0
  001b6	56		 push	 esi
  001b7	e8 00 00 00 00	 call	 _memset

; 317  : 
; 318  :     stringDescNode->DescriptorIndex = DescriptorIndex;

  001bc	8a 45 10	 mov	 al, BYTE PTR _DescriptorIndex$[ebp]

; 319  :     stringDescNode->LanguageID = LanguageID;
; 320  : 
; 321  :     memcpy(stringDescNode->StringDescriptor, stringDesc, stringDesc->bLength);

  001bf	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c5	88 46 04	 mov	 BYTE PTR [esi+4], al
  001c8	66 89 5e 06	 mov	 WORD PTR [esi+6], bx
  001cc	0f b6 85 ec fe
	ff ff		 movzx	 eax, BYTE PTR _stringDescReqBuf$[ebp+12]
  001d3	50		 push	 eax
  001d4	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$[ebp+12]
  001da	50		 push	 eax
  001db	57		 push	 edi
  001dc	e8 00 00 00 00	 call	 _memcpy
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 322  : 
; 323  :     if (LanguageID)

  001e4	66 85 db	 test	 bx, bx
  001e7	0f 84 f5 00 00
	00		 je	 $LN10@GetStringD

; 324  :     {
; 325  :         nBytes = WideCharToMultiByte(

  001ed	6a 00		 push	 0
  001ef	6a 00		 push	 0
  001f1	68 0b 01 00 00	 push	 267			; 0000010bH
  001f6	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$[ebp]
  001fc	50		 push	 eax
  001fd	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00200	8d 5e 0a	 lea	 ebx, DWORD PTR [esi+10]
  00203	83 e8 02	 sub	 eax, 2
  00206	99		 cdq
  00207	2b c2		 sub	 eax, edx
  00209	d1 f8		 sar	 eax, 1
  0020b	50		 push	 eax
  0020c	53		 push	 ebx
  0020d	6a 00		 push	 0
  0020f	6a 00		 push	 0
  00211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  00217	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _nBytes$1$[ebp], eax

; 326  :             CP_ACP,     // CodePage
; 327  :             0,          // CodePage
; 328  :             stringDescNode->StringDescriptor->bString,
; 329  :             (stringDescNode->StringDescriptor->bLength - 2) / 2,
; 330  :             (char *)stringDescReqBuf,
; 331  :             sizeof(USB_DESCRIPTOR_REQUEST) + MAXIMUM_USB_STRING_LENGTH,
; 332  :             NULL,       // lpDefaultChar
; 333  :             NULL);      // pUsedDefaultChar
; 334  :         if (!nBytes)

  0021d	85 c0		 test	 eax, eax
  0021f	0f 85 95 00 00
	00		 jne	 $LN9@GetStringD

; 336  :             Log(LOG_DEBUG, __LINE__, "-- USB.GetStrDesc, WideCharToMultiByte %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0022b	8b d0		 mov	 edx, eax
  0022d	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00233	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  00238	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0023f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00243	72 02		 jb	 SHORT $LN20@GetStringD
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00245	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@GetStringD:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 336  :             Log(LOG_DEBUG, __LINE__, "-- USB.GetStrDesc, WideCharToMultiByte %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  00247	50		 push	 eax
  00248	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NJJDPDGO@?9?9?5USB?4GetStrDesc?0?5WideCharToMu@
  0024d	68 50 01 00 00	 push	 336			; 00000150H
  00252	6a 10		 push	 16			; 00000010H
  00254	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00259	83 c4 10	 add	 esp, 16			; 00000010H
  0025c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00263	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp+20]
  00269	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0026c	72 2f		 jb	 SHORT $LN68@GetStringD
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00274	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00275	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00277	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0027d	72 14		 jb	 SHORT $LN67@GetStringD

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0027f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00282	83 c2 23	 add	 edx, 35			; 00000023H
  00285	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00287	83 c0 fc	 add	 eax, -4			; fffffffcH
  0028a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0028d	0f 87 84 00 00
	00		 ja	 $LN86@GetStringD
$LN67@GetStringD:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00293	52		 push	 edx
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0029a	83 c4 08	 add	 esp, 8
$LN68@GetStringD:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0029d	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002a7	c7 85 dc fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002b1	c6 85 c8 fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 338  :         else

  002b8	eb 28		 jmp	 SHORT $LN10@GetStringD
$LN9@GetStringD:

; 339  :         {
; 340  :             memset(stringDescNode->StringDescriptor->bString, 0x00, (stringDescNode->StringDescriptor->bLength - 2));

  002ba	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  002bd	83 e8 02	 sub	 eax, 2
  002c0	50		 push	 eax
  002c1	6a 00		 push	 0
  002c3	53		 push	 ebx
  002c4	e8 00 00 00 00	 call	 _memset
  002c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 341  :             memcpy(stringDescNode->StringDescriptor->bString, stringDescReqBuf, nBytes);

  002cc	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$[ebp]
  002d2	ff b5 c0 fe ff
	ff		 push	 DWORD PTR _nBytes$1$[ebp]
  002d8	50		 push	 eax
  002d9	53		 push	 ebx
  002da	e8 00 00 00 00	 call	 _memcpy
  002df	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@GetStringD:

; 342  :         }
; 343  :     }
; 344  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, DescNode 0x%p", stringDescNode);

  002e2	56		 push	 esi
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LADAJLND@?$DM?$DM?5USB?4GetStrDesc?0?5DescNode?50x?$CF@
  002e8	68 58 01 00 00	 push	 344			; 00000158H
  002ed	6a 10		 push	 16			; 00000010H
  002ef	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  002f4	83 c4 10	 add	 esp, 16			; 00000010H

; 345  :     return stringDescNode;

  002f7	8b c6		 mov	 eax, esi
$LN1@GetStringD:

; 346  : }

  002f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00303	59		 pop	 ecx
  00304	5f		 pop	 edi
  00305	5e		 pop	 esi
  00306	5b		 pop	 ebx
  00307	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030a	33 cd		 xor	 ecx, ebp
  0030c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00311	8b e5		 mov	 esp, ebp
  00313	5d		 pop	 ebp
  00314	c2 10 00	 ret	 16			; 00000010H
$LN86@GetStringD:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00317	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN84@GetStringD:
  0031c	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z$0:
  00000	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a bc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-324]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z ENDP ; USB::GetStringDescriptor
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_DeviceDesc$ = 8					; size = 4
_ConfigDesc$ = 12					; size = 4
?AreThereStringDescriptors@USB@@IAEHPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z PROC ; USB::AreThereStringDescriptors
; _this$dead$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 350  :     PUCHAR descEnd = NULL;
; 351  :     //    PUSB_COMMON_DESCRIPTOR commonDesc = NULL;
; 352  :     PUCHAR commonDesc = NULL;
; 353  : 
; 354  :     Log(LOG_DEBUG, __LINE__, ">> USB.AreThrStrDesc");

  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IPAKKGGO@?$DO?$DO?5USB?4AreThrStrDesc@
  0000a	68 62 01 00 00	 push	 354			; 00000162H
  0000f	6a 10		 push	 16			; 00000010H
  00011	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 355  : 
; 356  :     //
; 357  :     // Check Device Descriptor strings
; 358  :     //
; 359  :     if (DeviceDesc->iManufacturer || DeviceDesc->iProduct || DeviceDesc->iSerialNumber)

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _DeviceDesc$[ebp]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  0001f	84 d2		 test	 dl, dl
  00021	0f 85 c5 00 00
	00		 jne	 $LN7@AreThereSt
  00027	38 51 0f	 cmp	 BYTE PTR [ecx+15], dl
  0002a	0f 85 bc 00 00
	00		 jne	 $LN7@AreThereSt
  00030	38 51 10	 cmp	 BYTE PTR [ecx+16], dl
  00033	0f 85 b3 00 00
	00		 jne	 $LN7@AreThereSt

; 362  :         return TRUE;
; 363  :     }
; 364  : 
; 365  :     //
; 366  :     // Check the Configuration and Interface Descriptor strings
; 367  :     //
; 368  :     descEnd = (PUCHAR)ConfigDesc + ConfigDesc->wTotalLength;

  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _ConfigDesc$[ebp]
  0003c	0f b7 79 02	 movzx	 edi, WORD PTR [ecx+2]
  00040	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00043	03 f9		 add	 edi, ecx

; 369  : 
; 370  :     //    (USB_COMMON_DESCRIPTOR far *)commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 371  :     commonDesc = (PUCHAR)ConfigDesc;
; 372  : 
; 373  :     while ((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR) < descEnd &&

  00045	3b c7		 cmp	 eax, edi
  00047	73 64		 jae	 SHORT $LN3@AreThereSt
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@AreThereSt:
  00050	8a 11		 mov	 dl, BYTE PTR [ecx]
  00052	0f b6 f2	 movzx	 esi, dl
  00055	03 f1		 add	 esi, ecx
  00057	3b f7		 cmp	 esi, edi
  00059	77 52		 ja	 SHORT $LN3@AreThereSt

; 374  :         (PUCHAR)commonDesc + ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength <= descEnd)
; 375  :     {
; 376  :         switch (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bDescriptorType)

  0005b	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  0005f	83 e8 02	 sub	 eax, 2
  00062	74 34		 je	 SHORT $LN8@AreThereSt
  00064	83 e8 02	 sub	 eax, 2
  00067	75 3b		 jne	 SHORT $LN24@AreThereSt

; 386  :                 return TRUE;
; 387  :             }
; 388  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 389  :             continue;
; 390  : 
; 391  :         case USB_INTERFACE_DESCRIPTOR_TYPE:
; 392  :             //                if (commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR) &&
; 393  :             //                    commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR2))
; 394  :             if (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength != sizeof(USB_INTERFACE_DESCRIPTOR))

  00069	80 fa 09	 cmp	 dl, 9
  0006c	75 3f		 jne	 SHORT $LN3@AreThereSt

; 395  :             {
; 396  :                 break;
; 397  :             }
; 398  :             if (((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->iInterface)

  0006e	8a 41 08	 mov	 al, BYTE PTR [ecx+8]
  00071	84 c0		 test	 al, al
  00073	74 2f		 je	 SHORT $LN24@AreThereSt

; 399  :             {
; 400  :                 Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Interface %d", (int)((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->iInterface);

  00075	0f b6 c0	 movzx	 eax, al
  00078	50		 push	 eax
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NAENOJMA@?$DM?$DM?5USB?4AreThrStrDesc?0?5Interface@
  0007e	68 90 01 00 00	 push	 400			; 00000190H
  00083	6a 10		 push	 16			; 00000010H
  00085	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0008a	83 c4 10	 add	 esp, 16			; 00000010H

; 415  : }

  0008d	b8 01 00 00 00	 mov	 eax, 1
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
$LN8@AreThereSt:

; 377  :         {
; 378  :         case USB_CONFIGURATION_DESCRIPTOR_TYPE:
; 379  :             if (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength != sizeof(USB_CONFIGURATION_DESCRIPTOR))

  00098	80 fa 09	 cmp	 dl, 9
  0009b	75 10		 jne	 SHORT $LN3@AreThereSt

; 380  :             {
; 381  :                 break;
; 382  :             }
; 383  :             if (((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc)->iConfiguration)

  0009d	8a 41 06	 mov	 al, BYTE PTR [ecx+6]
  000a0	84 c0		 test	 al, al
  000a2	75 25		 jne	 SHORT $LN23@AreThereSt
$LN24@AreThereSt:

; 369  : 
; 370  :     //    (USB_COMMON_DESCRIPTOR far *)commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 371  :     commonDesc = (PUCHAR)ConfigDesc;
; 372  : 
; 373  :     while ((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR) < descEnd &&

  000a4	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000a7	8b ce		 mov	 ecx, esi
  000a9	3b c7		 cmp	 eax, edi
  000ab	72 a3		 jb	 SHORT $LL2@AreThereSt
$LN3@AreThereSt:

; 401  :                 return TRUE;
; 402  :             }
; 403  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 404  :             continue;
; 405  : 
; 406  :         default:
; 407  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 408  :             continue;
; 409  :         }
; 410  :         break;
; 411  :     }
; 412  : 
; 413  :     Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Ret False");

  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JFAJNON@?$DM?$DM?5USB?4AreThrStrDesc?0?5Ret?5False@
  000b2	68 9d 01 00 00	 push	 413			; 0000019dH
  000b7	6a 10		 push	 16			; 00000010H
  000b9	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 414  :     return FALSE;

  000c1	33 c0		 xor	 eax, eax

; 415  : }

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
$LN23@AreThereSt:

; 384  :             {
; 385  :                 Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Cfg %d", (int)((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc)->iConfiguration);

  000c9	0f b6 c0	 movzx	 eax, al
  000cc	50		 push	 eax
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DEJJKGAD@?$DM?$DM?5USB?4AreThrStrDesc?0?5Cfg?5?$CFd@
  000d2	68 81 01 00 00	 push	 385			; 00000181H
  000d7	6a 10		 push	 16			; 00000010H
  000d9	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000de	83 c4 10	 add	 esp, 16			; 00000010H

; 415  : }

  000e1	b8 01 00 00 00	 mov	 eax, 1
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN7@AreThereSt:

; 360  :     {
; 361  :         Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Manufact %d, Prod %d, SN %d", (int)DeviceDesc->iManufacturer, (int)DeviceDesc->iProduct, (int)DeviceDesc->iSerialNumber);

  000ec	0f b6 41 10	 movzx	 eax, BYTE PTR [ecx+16]
  000f0	50		 push	 eax
  000f1	0f b6 41 0f	 movzx	 eax, BYTE PTR [ecx+15]
  000f5	50		 push	 eax
  000f6	0f b6 c2	 movzx	 eax, dl
  000f9	50		 push	 eax
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KIEGOLFL@?$DM?$DM?5USB?4AreThrStrDesc?0?5Manufact?5@
  000ff	68 69 01 00 00	 push	 361			; 00000169H
  00104	6a 10		 push	 16			; 00000010H
  00106	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0010b	83 c4 18	 add	 esp, 24			; 00000018H

; 415  : }

  0010e	b8 01 00 00 00	 mov	 eax, 1
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
?AreThereStringDescriptors@USB@@IAEHPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z ENDP ; USB::AreThereStringDescriptors
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
tv416 = -12						; size = 4
_numLanguageIDs$1$ = -8					; size = 4
_supportedLanguagesString$1$ = -4			; size = 4
_hHubDevice$ = 8					; size = 4
_languageIDs$1$ = 12					; size = 4
_ConnectionIndex$ = 12					; size = 4
_descEnd$1$ = 16					; size = 4
_DeviceDesc$ = 16					; size = 4
_ConfigDesc$ = 20					; size = 4
?GetAllStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z PROC ; USB::GetAllStringDescriptors
; _this$dead$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 419  :     ULONG                   numLanguageIDs = 0;
; 420  :     USHORT                  *languageIDs = NULL;
; 421  : 
; 422  :     PUCHAR                  descEnd = NULL;
; 423  :     //    PUSB_COMMON_DESCRIPTOR  commonDesc = NULL;
; 424  :     PUCHAR  commonDesc = NULL;
; 425  : 
; 426  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetAllStrDescs");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PLIGAJPI@?$DO?$DO?5USB?4GetAllStrDescs@
  0000e	68 aa 01 00 00	 push	 426			; 000001aaH
  00013	6a 10		 push	 16			; 00000010H
  00015	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 427  : 
; 428  :     //
; 429  :     // Get the array of supported Language IDs, which is returned
; 430  :     // in String Descriptor 0
; 431  :     //
; 432  :     PSTRING_DESCRIPTOR_NODE supportedLanguagesString = GetStringDescriptor(hHubDevice, ConnectionIndex, 0, 0);

  0001a	8b 7d 0c	 mov	 edi, DWORD PTR _ConnectionIndex$[ebp]
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	8b 5d 08	 mov	 ebx, DWORD PTR _hHubDevice$[ebp]
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	57		 push	 edi
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?GetStringDescriptor@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEG@Z ; USB::GetStringDescriptor
  0002e	8b c8		 mov	 ecx, eax
  00030	89 4d fc	 mov	 DWORD PTR _supportedLanguagesString$1$[ebp], ecx

; 433  :     if (supportedLanguagesString == NULL)

  00033	85 c9		 test	 ecx, ecx
  00035	75 1f		 jne	 SHORT $LN6@GetAllStri

; 434  :     {
; 435  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetAllStrDescs, SuppLangsStr null");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@HBMGBPGH@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@
  0003c	68 b3 01 00 00	 push	 435			; 000001b3H
  00041	6a 10		 push	 16			; 00000010H
  00043	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 436  :         return NULL;

  0004b	33 c0		 xor	 eax, eax

; 537  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 10 00	 ret	 16			; 00000010H
$LN6@GetAllStri:

; 437  :     }
; 438  : 
; 439  :     numLanguageIDs = (supportedLanguagesString->StringDescriptor->bLength - 2) / 2;

  00056	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]

; 440  : 
; 441  :     languageIDs = (USHORT*)&supportedLanguagesString->StringDescriptor->bString[0];

  0005a	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0005d	83 e8 02	 sub	 eax, 2
  00060	89 4d 0c	 mov	 DWORD PTR _languageIDs$1$[ebp], ecx
  00063	99		 cdq
  00064	2b c2		 sub	 eax, edx

; 442  : 
; 443  :     PSTRING_DESCRIPTOR_NODE stringDescNodeTail = supportedLanguagesString;

  00066	8b 55 fc	 mov	 edx, DWORD PTR _supportedLanguagesString$1$[ebp]
  00069	8b f0		 mov	 esi, eax

; 444  : 
; 445  :     //
; 446  :     // Get the Device Descriptor strings
; 447  :     //
; 448  :     if (DeviceDesc->iManufacturer)

  0006b	8b 45 10	 mov	 eax, DWORD PTR _DeviceDesc$[ebp]
  0006e	d1 fe		 sar	 esi, 1
  00070	89 75 f8	 mov	 DWORD PTR _numLanguageIDs$1$[ebp], esi
  00073	8a 58 0e	 mov	 bl, BYTE PTR [eax+14]
  00076	89 5d f4	 mov	 DWORD PTR tv416[ebp], ebx
  00079	84 db		 test	 bl, bl
  0007b	8b 5d 08	 mov	 ebx, DWORD PTR _hHubDevice$[ebp]
  0007e	74 15		 je	 SHORT $LN7@GetAllStri

; 449  :     {
; 450  :         stringDescNodeTail = GetStringDescriptors(hHubDevice,

  00080	52		 push	 edx
  00081	51		 push	 ecx
  00082	56		 push	 esi
  00083	ff 75 f4	 push	 DWORD PTR tv416[ebp]
  00086	57		 push	 edi
  00087	53		 push	 ebx
  00088	e8 00 00 00 00	 call	 ?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z ; USB::GetStringDescriptors
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _languageIDs$1$[ebp]
  00090	8b d0		 mov	 edx, eax
  00092	8b 45 10	 mov	 eax, DWORD PTR _DeviceDesc$[ebp]
$LN7@GetAllStri:

; 451  :             ConnectionIndex,
; 452  :             DeviceDesc->iManufacturer,
; 453  :             numLanguageIDs,
; 454  :             languageIDs,
; 455  :             stringDescNodeTail);
; 456  :     }
; 457  : 
; 458  :     if (DeviceDesc->iProduct)

  00095	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  00098	84 c0		 test	 al, al
  0009a	74 0d		 je	 SHORT $LN8@GetAllStri

; 459  :     {
; 460  :         stringDescNodeTail = GetStringDescriptors(hHubDevice,

  0009c	52		 push	 edx
  0009d	51		 push	 ecx
  0009e	56		 push	 esi
  0009f	50		 push	 eax
  000a0	57		 push	 edi
  000a1	53		 push	 ebx
  000a2	e8 00 00 00 00	 call	 ?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z ; USB::GetStringDescriptors
  000a7	8b d0		 mov	 edx, eax
$LN8@GetAllStri:

; 461  :             ConnectionIndex,
; 462  :             DeviceDesc->iProduct,
; 463  :             numLanguageIDs,
; 464  :             languageIDs,
; 465  :             stringDescNodeTail);
; 466  :     }
; 467  : 
; 468  :     if (DeviceDesc->iSerialNumber)

  000a9	8b 45 10	 mov	 eax, DWORD PTR _DeviceDesc$[ebp]
  000ac	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  000af	84 c0		 test	 al, al
  000b1	74 0f		 je	 SHORT $LN9@GetAllStri

; 469  :     {
; 470  :         stringDescNodeTail = GetStringDescriptors(hHubDevice,

  000b3	52		 push	 edx
  000b4	ff 75 0c	 push	 DWORD PTR _languageIDs$1$[ebp]
  000b7	56		 push	 esi
  000b8	50		 push	 eax
  000b9	57		 push	 edi
  000ba	53		 push	 ebx
  000bb	e8 00 00 00 00	 call	 ?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z ; USB::GetStringDescriptors
  000c0	8b d0		 mov	 edx, eax
$LN9@GetAllStri:

; 471  :             ConnectionIndex,
; 472  :             DeviceDesc->iSerialNumber,
; 473  :             numLanguageIDs,
; 474  :             languageIDs,
; 475  :             stringDescNodeTail);
; 476  :     }
; 477  : 
; 478  :     //
; 479  :     // Get the Configuration and Interface Descriptor strings
; 480  :     //
; 481  :     descEnd = (PUCHAR)ConfigDesc + ConfigDesc->wTotalLength;

  000c2	8b 75 14	 mov	 esi, DWORD PTR _ConfigDesc$[ebp]
  000c5	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]
  000c9	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000cc	03 ce		 add	 ecx, esi
  000ce	89 4d 10	 mov	 DWORD PTR _descEnd$1$[ebp], ecx

; 482  :     //    commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 483  :     commonDesc = (PUCHAR)ConfigDesc;
; 484  : 
; 485  :     while ((DWORD)((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR)) < (DWORD)descEnd &&

  000d1	3b c1		 cmp	 eax, ecx
  000d3	73 52		 jae	 SHORT $LN22@GetAllStri
$LL2@GetAllStri:
  000d5	8a 0e		 mov	 cl, BYTE PTR [esi]
  000d7	0f b6 c1	 movzx	 eax, cl
  000da	03 c6		 add	 eax, esi
  000dc	3b 45 10	 cmp	 eax, DWORD PTR _descEnd$1$[ebp]
  000df	77 46		 ja	 SHORT $LN22@GetAllStri

; 486  :         (DWORD)((PUCHAR)commonDesc + ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength) <= (DWORD)descEnd)
; 487  :     {
; 488  :         switch (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bDescriptorType)

  000e1	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  000e5	83 e8 02	 sub	 eax, 2
  000e8	74 0f		 je	 SHORT $LN10@GetAllStri
  000ea	83 e8 02	 sub	 eax, 2
  000ed	75 2b		 jne	 SHORT $LN24@GetAllStri

; 496  :             {
; 497  :                 stringDescNodeTail = GetStringDescriptors(
; 498  :                     hHubDevice,
; 499  :                     ConnectionIndex,
; 500  :                     ((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc)->iConfiguration,
; 501  :                     numLanguageIDs,
; 502  :                     languageIDs,
; 503  :                     stringDescNodeTail);
; 504  :             }
; 505  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 506  :             continue;
; 507  : 
; 508  :         case USB_INTERFACE_DESCRIPTOR_TYPE:
; 509  :             //                if (commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR) &&
; 510  :             //                    commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR2))
; 511  :             if (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength != sizeof(USB_INTERFACE_DESCRIPTOR))

  000ef	80 f9 09	 cmp	 cl, 9
  000f2	75 33		 jne	 SHORT $LN22@GetAllStri

; 512  :             {
; 513  :                 break;
; 514  :             }
; 515  :             if (((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->iInterface)

  000f4	8a 46 08	 mov	 al, BYTE PTR [esi+8]

; 516  :             {
; 517  :                 stringDescNodeTail = GetStringDescriptors(
; 518  :                     hHubDevice,
; 519  :                     ConnectionIndex,
; 520  :                     ((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->iInterface,
; 521  :                     numLanguageIDs,
; 522  :                     languageIDs,
; 523  :                     stringDescNodeTail);
; 524  :             }
; 525  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 526  :             continue;

  000f7	eb 08		 jmp	 SHORT $LN30@GetAllStri
$LN10@GetAllStri:

; 489  :         {
; 490  :         case USB_CONFIGURATION_DESCRIPTOR_TYPE:
; 491  :             if (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength != sizeof(USB_CONFIGURATION_DESCRIPTOR))

  000f9	80 f9 09	 cmp	 cl, 9
  000fc	75 29		 jne	 SHORT $LN22@GetAllStri

; 492  :             {
; 493  :                 break;
; 494  :             }
; 495  :             if (((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc)->iConfiguration)

  000fe	8a 46 06	 mov	 al, BYTE PTR [esi+6]
$LN30@GetAllStri:

; 482  :     //    commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 483  :     commonDesc = (PUCHAR)ConfigDesc;
; 484  : 
; 485  :     while ((DWORD)((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR)) < (DWORD)descEnd &&

  00101	b1 09		 mov	 cl, 9
  00103	84 c0		 test	 al, al
  00105	74 13		 je	 SHORT $LN24@GetAllStri
  00107	52		 push	 edx
  00108	ff 75 0c	 push	 DWORD PTR _languageIDs$1$[ebp]
  0010b	ff 75 f8	 push	 DWORD PTR _numLanguageIDs$1$[ebp]
  0010e	50		 push	 eax
  0010f	57		 push	 edi
  00110	53		 push	 ebx
  00111	e8 00 00 00 00	 call	 ?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z ; USB::GetStringDescriptors
  00116	8a 0e		 mov	 cl, BYTE PTR [esi]
  00118	8b d0		 mov	 edx, eax
$LN24@GetAllStri:
  0011a	0f b6 c1	 movzx	 eax, cl
  0011d	03 f0		 add	 esi, eax
  0011f	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00122	3b 45 10	 cmp	 eax, DWORD PTR _descEnd$1$[ebp]
  00125	72 ae		 jb	 SHORT $LL2@GetAllStri
$LN22@GetAllStri:

; 527  : 
; 528  :         default:
; 529  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 530  :             continue;
; 531  :         }
; 532  :         break;
; 533  :     }
; 534  : 
; 535  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetAllStrDescs, SuppLangsStr 0x%p", supportedLanguagesString);

  00127	8b 5d fc	 mov	 ebx, DWORD PTR _supportedLanguagesString$1$[ebp]
  0012a	53		 push	 ebx
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JNLDFNAC@?$DM?$DM?5USB?4GetAllStrDescs?0?5SuppLang@
  00130	68 17 02 00 00	 push	 535			; 00000217H
  00135	6a 10		 push	 16			; 00000010H
  00137	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0013c	83 c4 10	 add	 esp, 16			; 00000010H

; 536  :     return supportedLanguagesString;

  0013f	8b c3		 mov	 eax, ebx

; 537  : }

  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 10 00	 ret	 16			; 00000010H
?GetAllStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z ENDP ; USB::GetAllStringDescriptors
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_nBytes$ = -20						; size = 4
_driverKeyName$ = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
_Hub$ = 8						; size = 4
_ConnectionIndex$ = 12					; size = 4
?GetDriverKeyName@USB@@IAEPADPAXK@Z PROC		; USB::GetDriverKeyName
; _this$dead$ = ecx

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _Hub$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 541  :     BOOL                                success;
; 542  :     ULONG                               nBytes = 0;
; 543  :     USB_NODE_CONNECTION_DRIVERKEY_NAME  driverKeyName;
; 544  :     PUSB_NODE_CONNECTION_DRIVERKEY_NAME driverKeyNameW = NULL;
; 545  :     PCHAR                               driverKeyNameA = NULL;
; 546  : 
; 547  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetDrvKeyName");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GLJHIDAC@?$DO?$DO?5USB?4GetDrvKeyName@
  0001b	68 23 02 00 00	 push	 547			; 00000223H
  00020	6a 10		 push	 16			; 00000010H
  00022	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0
  00029	33 ff		 xor	 edi, edi
  0002b	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 548  : 
; 549  :     // Get the length of the name of the driver key of the device attached to
; 550  :     // the specified port.
; 551  :     //
; 552  :     memset(&driverKeyName, 0, sizeof(driverKeyName));
; 553  :     driverKeyName.ConnectionIndex = ConnectionIndex;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	66 89 7d f8	 mov	 WORD PTR _driverKeyName$[ebp+8], di
  0003d	66 0f d6 45 f0	 movq	 QWORD PTR _driverKeyName$[ebp], xmm0
  00042	89 45 f0	 mov	 DWORD PTR _driverKeyName$[ebp], eax

; 554  : 
; 555  :     success = DeviceIoControl(Hub,

  00045	8d 45 ec	 lea	 eax, DWORD PTR _nBytes$[ebp]
  00048	57		 push	 edi
  00049	50		 push	 eax
  0004a	6a 0a		 push	 10			; 0000000aH
  0004c	8d 45 f0	 lea	 eax, DWORD PTR _driverKeyName$[ebp]
  0004f	50		 push	 eax
  00050	6a 0a		 push	 10			; 0000000aH
  00052	50		 push	 eax
  00053	68 20 04 22 00	 push	 2229280			; 00220420H
  00058	53		 push	 ebx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 556  :         IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME,
; 557  :         &driverKeyName,
; 558  :         sizeof(driverKeyName),
; 559  :         &driverKeyName,
; 560  :         sizeof(driverKeyName),
; 561  :         &nBytes,
; 562  :         NULL);
; 563  : 
; 564  :     if (success)

  0005f	85 c0		 test	 eax, eax
  00061	74 71		 je	 SHORT $LN5@GetDriverK

; 565  :     {
; 566  :         // Allocate space to hold the driver key name
; 567  :         //
; 568  :         nBytes = driverKeyName.ActualLength;

  00063	8b 45 f4	 mov	 eax, DWORD PTR _driverKeyName$[ebp+4]
  00066	89 45 ec	 mov	 DWORD PTR _nBytes$[ebp], eax

; 569  : 
; 570  :         if (nBytes > sizeof(driverKeyName))

  00069	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0006c	76 66		 jbe	 SHORT $LN5@GetDriverK

; 571  :         {
; 572  :             driverKeyNameW = (struct _USB_NODE_CONNECTION_DRIVERKEY_NAME *)malloc(nBytes);

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _malloc
  00074	83 c4 04	 add	 esp, 4
  00077	8b f0		 mov	 esi, eax

; 573  :             if (driverKeyNameW)

  00079	ff 75 ec	 push	 DWORD PTR _nBytes$[ebp]
  0007c	85 f6		 test	 esi, esi
  0007e	74 40		 je	 SHORT $LN4@GetDriverK

; 574  :             {
; 575  :                 memset(driverKeyNameW, 0x00, nBytes);

  00080	57		 push	 edi
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 _memset

; 576  : 
; 577  :                 // Get the name of the driver key of the device attached to
; 578  :                 // the specified port.
; 579  :                 //
; 580  :                 driverKeyNameW->ConnectionIndex = ConnectionIndex;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	89 06		 mov	 DWORD PTR [esi], eax

; 581  : 
; 582  :                 success = DeviceIoControl(Hub,

  0008f	8d 45 ec	 lea	 eax, DWORD PTR _nBytes$[ebp]
  00092	57		 push	 edi
  00093	50		 push	 eax
  00094	8b 45 ec	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00097	50		 push	 eax
  00098	56		 push	 esi
  00099	50		 push	 eax
  0009a	56		 push	 esi
  0009b	68 20 04 22 00	 push	 2229280			; 00220420H
  000a0	53		 push	 ebx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 583  :                     IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME,
; 584  :                     driverKeyNameW,
; 585  :                     nBytes,
; 586  :                     driverKeyNameW,
; 587  :                     nBytes,
; 588  :                     &nBytes,
; 589  :                     NULL);
; 590  : 
; 591  :                 if (success)

  000a7	85 c0		 test	 eax, eax
  000a9	74 0a		 je	 SHORT $LN6@GetDriverK

; 592  :                 {
; 593  :                     // Convert the driver key name
; 594  :                     //
; 595  :                     driverKeyNameA = WideStrToMultiStr(driverKeyNameW->DriverKeyName);

  000ab	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000ae	e8 00 00 00 00	 call	 ?WideStrToMultiStr@@YAPADPA_W@Z ; WideStrToMultiStr
  000b3	8b f8		 mov	 edi, eax
$LN6@GetDriverK:

; 596  :                 }
; 597  :                 free(driverKeyNameW);

  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 _free
  000bb	83 c4 04	 add	 esp, 4

; 598  :             }
; 599  :             else

  000be	eb 14		 jmp	 SHORT $LN5@GetDriverK
$LN4@GetDriverK:

; 600  :             {
; 601  :                 Log(LOG_DEBUG, __LINE__, "-- USB.GetDriverKeyName, new KeyNameW (%u) null", nBytes);

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@OGKODAJE@?9?9?5USB?4GetDriverKeyName?0?5new?5Ke@
  000c5	68 59 02 00 00	 push	 601			; 00000259H
  000ca	6a 10		 push	 16			; 00000010H
  000cc	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@GetDriverK:

; 602  :             }
; 603  :         }
; 604  :     }
; 605  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetDrvKeyName, AName %s", driverKeyNameA);

  000d4	57		 push	 edi
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PGCNCFEB@?$DM?$DM?5USB?4GetDrvKeyName?0?5AName?5?$CFs@
  000da	68 5d 02 00 00	 push	 605			; 0000025dH
  000df	6a 10		 push	 16			; 00000010H
  000e1	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 606  :     return driverKeyNameA;
; 607  : }

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	8b c7		 mov	 eax, edi
  000ee	33 cd		 xor	 ecx, ebp
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?GetDriverKeyName@USB@@IAEPADPAXK@Z ENDP		; USB::GetDriverKeyName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_nBytes$ = -20						; size = 4
_extHubName$ = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
_Hub$ = 8						; size = 4
_ConnectionIndex$ = 12					; size = 4
?GetExternalHubName@USB@@IAEPADPAXK@Z PROC		; USB::GetExternalHubName
; _this$dead$ = ecx

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _Hub$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 611  :     BOOL                        success;
; 612  :     ULONG                       nBytes = 0;
; 613  :     USB_NODE_CONNECTION_NAME    extHubName;
; 614  :     PUSB_NODE_CONNECTION_NAME   extHubNameW = NULL;
; 615  :     PCHAR                       extHubNameA = NULL;
; 616  : 
; 617  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetExternHub");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BDIOPGJF@?$DO?$DO?5USB?4GetExternHub@
  0001b	68 69 02 00 00	 push	 617			; 00000269H
  00020	6a 10		 push	 16			; 00000010H
  00022	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0
  00029	33 ff		 xor	 edi, edi
  0002b	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 618  : 
; 619  :     // Get the length of the name of the external hub attached to the
; 620  :     // specified port.
; 621  :     //
; 622  :     memset(&extHubName, 0, sizeof(extHubName));
; 623  :     extHubName.ConnectionIndex = ConnectionIndex;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	66 89 7d f8	 mov	 WORD PTR _extHubName$[ebp+8], di
  0003d	66 0f d6 45 f0	 movq	 QWORD PTR _extHubName$[ebp], xmm0
  00042	89 45 f0	 mov	 DWORD PTR _extHubName$[ebp], eax

; 624  : 
; 625  :     success = DeviceIoControl(Hub,

  00045	8d 45 ec	 lea	 eax, DWORD PTR _nBytes$[ebp]
  00048	57		 push	 edi
  00049	50		 push	 eax
  0004a	6a 0a		 push	 10			; 0000000aH
  0004c	8d 45 f0	 lea	 eax, DWORD PTR _extHubName$[ebp]
  0004f	50		 push	 eax
  00050	6a 0a		 push	 10			; 0000000aH
  00052	50		 push	 eax
  00053	68 14 04 22 00	 push	 2229268			; 00220414H
  00058	53		 push	 ebx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 626  :         IOCTL_USB_GET_NODE_CONNECTION_NAME,
; 627  :         &extHubName,
; 628  :         sizeof(extHubName),
; 629  :         &extHubName,
; 630  :         sizeof(extHubName),
; 631  :         &nBytes,
; 632  :         NULL);
; 633  : 
; 634  :     if (success)

  0005f	85 c0		 test	 eax, eax
  00061	74 71		 je	 SHORT $LN5@GetExterna

; 635  :     {
; 636  :         // Allocate space to hold the external hub name
; 637  :         //
; 638  :         nBytes = extHubName.ActualLength;

  00063	8b 45 f4	 mov	 eax, DWORD PTR _extHubName$[ebp+4]
  00066	89 45 ec	 mov	 DWORD PTR _nBytes$[ebp], eax

; 639  : 
; 640  :         if (nBytes > sizeof(extHubName))

  00069	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0006c	76 66		 jbe	 SHORT $LN5@GetExterna

; 641  :         {
; 642  :             extHubNameW = (struct _USB_NODE_CONNECTION_NAME *)malloc(nBytes);

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _malloc
  00074	83 c4 04	 add	 esp, 4
  00077	8b f0		 mov	 esi, eax

; 643  :             if (extHubNameW)

  00079	ff 75 ec	 push	 DWORD PTR _nBytes$[ebp]
  0007c	85 f6		 test	 esi, esi
  0007e	74 40		 je	 SHORT $LN4@GetExterna

; 644  :             {
; 645  :                 memset(extHubNameW, 0x00, nBytes);

  00080	57		 push	 edi
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 _memset

; 646  : 
; 647  :                 // Get the name of the external hub attached to the specified port
; 648  :                 //
; 649  :                 extHubNameW->ConnectionIndex = ConnectionIndex;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	89 06		 mov	 DWORD PTR [esi], eax

; 650  : 
; 651  :                 success = DeviceIoControl(Hub,

  0008f	8d 45 ec	 lea	 eax, DWORD PTR _nBytes$[ebp]
  00092	57		 push	 edi
  00093	50		 push	 eax
  00094	8b 45 ec	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00097	50		 push	 eax
  00098	56		 push	 esi
  00099	50		 push	 eax
  0009a	56		 push	 esi
  0009b	68 14 04 22 00	 push	 2229268			; 00220414H
  000a0	53		 push	 ebx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 652  :                     IOCTL_USB_GET_NODE_CONNECTION_NAME,
; 653  :                     extHubNameW,
; 654  :                     nBytes,
; 655  :                     extHubNameW,
; 656  :                     nBytes,
; 657  :                     &nBytes,
; 658  :                     NULL);
; 659  : 
; 660  :                 if (success)

  000a7	85 c0		 test	 eax, eax
  000a9	74 0a		 je	 SHORT $LN6@GetExterna

; 661  :                 {
; 662  :                     // Convert the External Hub name
; 663  :                     //
; 664  :                     extHubNameA = WideStrToMultiStr(extHubNameW->NodeName);

  000ab	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000ae	e8 00 00 00 00	 call	 ?WideStrToMultiStr@@YAPADPA_W@Z ; WideStrToMultiStr
  000b3	8b f8		 mov	 edi, eax
$LN6@GetExterna:

; 665  :                 }
; 666  :                 free(extHubNameW);

  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 _free
  000bb	83 c4 04	 add	 esp, 4

; 667  :             }
; 668  :             else

  000be	eb 14		 jmp	 SHORT $LN5@GetExterna
$LN4@GetExterna:

; 669  :             {
; 670  :                 Log(LOG_DEBUG, __LINE__, "-- USB.GetExtHubName, new extHubNameW (%u) null", nBytes);

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HJNGPFIB@?9?9?5USB?4GetExtHubName?0?5new?5extHu@
  000c5	68 9e 02 00 00	 push	 670			; 0000029eH
  000ca	6a 10		 push	 16			; 00000010H
  000cc	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@GetExterna:

; 671  :             }
; 672  :         }
; 673  :     }
; 674  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetExternHub, HubName %s", extHubNameA);

  000d4	57		 push	 edi
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IMMCIHAH@?$DM?$DM?5USB?4GetExternHub?0?5HubName?5?$CFs@
  000da	68 a2 02 00 00	 push	 674			; 000002a2H
  000df	6a 10		 push	 16			; 00000010H
  000e1	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 675  :     return extHubNameA;
; 676  : }

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	8b c7		 mov	 eax, edi
  000ee	33 cd		 xor	 ecx, ebp
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?GetExternalHubName@USB@@IAEPADPAXK@Z ENDP		; USB::GetExternalHubName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_nBytes$1 = -1596					; size = 4
_nBytes$2 = -1596					; size = 4
_connectionInfo$1$ = -1592				; size = 4
_index$1$ = -1588					; size = 4
_hHubDevice$GSCopy$1$ = -1584				; size = 4
_this$GSCopy$1$ = -1580					; size = 4
$T3 = -1576						; size = 4
_extHubNameA$1$ = -1576					; size = 4
_info$1$ = -1576					; size = 4
tv1408 = -1572						; size = 4
_deviceDesc$1$ = -1568					; size = 4
_configDesc$1$ = -1564					; size = 4
_nBytes$4 = -1560					; size = 4
tv1407 = -1556						; size = 4
_driverKeyName$5 = -1552				; size = 10
_extHubName$6 = -1540					; size = 10
_deviceSpeed$ = -1528					; size = 5
_leafName$ = -1520					; size = 512
_deviceInfo$ = -1008					; size = 1000
__$ArrayPad$ = -4					; size = 4
_hHubDevice$ = 8					; size = 4
_NumPorts$ = 12						; size = 4
?EnumerateHubPorts@USB@@IAEXPAXK@Z PROC			; USB::EnumerateHubPorts
; _this$ = ecx

; 679  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 3c 06 00
	00		 sub	 esp, 1596		; 0000063cH
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 38 06
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1596], eax
  0001a	8b 45 08	 mov	 eax, DWORD PTR _hHubDevice$[ebp]
  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	57		 push	 edi

; 680  :     ULONG       index = 0;
; 681  :     BOOL        success;
; 682  : 
; 683  :     PUSB_NODE_CONNECTION_INFORMATION_EX connectionInfo = NULL;
; 684  :     PUSB_DESCRIPTOR_REQUEST             configDesc = NULL;
; 685  :     PSTRING_DESCRIPTOR_NODE             stringDescs = NULL;
; 686  :     PSTRING_DESCRIPTOR_NODE				Next = NULL;
; 687  :     PUSBDEVICEINFO                      info = NULL;
; 688  : 
; 689  :     PCHAR driverKeyName = NULL;
; 690  :     PCHAR deviceDesc = NULL;
; 691  :     CHAR  leafName[512] = { 0 };

  00020	68 00 02 00 00	 push	 512			; 00000200H
  00025	89 44 24 1c	 mov	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1612], eax
  00029	8b f9		 mov	 edi, ecx
  0002b	8d 44 24 5c	 lea	 eax, DWORD PTR _leafName$[esp+1612]
  0002f	89 7c 24 20	 mov	 DWORD PTR _this$GSCopy$1$[esp+1612], edi
  00033	6a 00		 push	 0
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 692  :     char deviceSpeed[5] = { 0 };

  0003e	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR _deviceSpeed$[esp+1608], 0

; 693  :     char deviceInfo[1000] = { 0 };

  00046	8d 84 24 58 02
	00 00		 lea	 eax, DWORD PTR _deviceInfo$[esp+1608]
  0004d	c6 44 24 54 00	 mov	 BYTE PTR _deviceSpeed$[esp+1612], 0
  00052	68 e8 03 00 00	 push	 1000			; 000003e8H
  00057	6a 00		 push	 0
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 694  : 
; 695  :     Log(LOG_DEBUG, __LINE__, ">> USB.EnumHubPorts");

  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPBFJJJ@?$DO?$DO?5USB?4EnumHubPorts@
  00067	68 b7 02 00 00	 push	 695			; 000002b7H
  0006c	6a 10		 push	 16			; 00000010H
  0006e	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 696  : 
; 697  :     NestedLevel++;

  00073	ff 47 08	 inc	 DWORD PTR [edi+8]

; 698  :     // Loop over all ports of the hub.
; 699  :     //
; 700  :     // Port indices are 1 based, not 0 based.
; 701  :     //
; 702  : 
; 703  :     // for (index=1; index <= NumPorts; index++)
; 704  :     for (index = 1; index <= NumPorts; index++)

  00076	bb 01 00 00 00	 mov	 ebx, 1
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _NumPorts$[ebp]
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00084	89 5c 24 14	 mov	 DWORD PTR _index$1$[esp+1608], ebx
  00088	3b cb		 cmp	 ecx, ebx
  0008a	0f 82 2a 07 00
	00		 jb	 $LN3@EnumerateH
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__DeviceIoControl@32
  00095	89 44 24 24	 mov	 DWORD PTR tv1408[esp+1608], eax
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__wsprintfA
  0009e	89 44 24 34	 mov	 DWORD PTR tv1407[esp+1608], eax
$LL4@EnumerateH:

; 705  :     {
; 706  :         ULONG nBytes = 0;
; 707  : 
; 708  :         // Allocate space to hold the connection info for this port.
; 709  :         // For now, allocate it big enough to hold info for 30 pipes.
; 710  :         //
; 711  :         // Endpoint numbers are 0-15.  Endpoint number 0 is the standard
; 712  :         // control endpoint which is not explicitly listed in the Configuration
; 713  :         // Descriptor.  There can be an IN endpoint and an OUT endpoint at
; 714  :         // endpoint numbers 1-15 so there can be a maximum of 30 endpoints
; 715  :         // per device configuration.
; 716  :         //
; 717  :         // Should probably size this dynamically at some point.
; 718  :         //
; 719  :         nBytes = sizeof(USB_NODE_CONNECTION_INFORMATION_EX) +
; 720  :             sizeof(USB_PIPE_INFO) * 30;
; 721  : 
; 722  :         connectionInfo = (PUSB_NODE_CONNECTION_INFORMATION_EX)malloc(nBytes);

  000a2	68 6d 01 00 00	 push	 365			; 0000016dH
  000a7	c7 44 24 34 6d
	01 00 00	 mov	 DWORD PTR _nBytes$4[esp+1612], 365 ; 0000016dH
  000af	e8 00 00 00 00	 call	 _malloc
  000b4	83 c4 04	 add	 esp, 4
  000b7	8b f0		 mov	 esi, eax
  000b9	89 74 24 10	 mov	 DWORD PTR _connectionInfo$1$[esp+1608], esi

; 723  :         if (connectionInfo)

  000bd	ff 74 24 30	 push	 DWORD PTR _nBytes$4[esp+1608]
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 24 07 00
	00		 je	 $LN11@EnumerateH

; 724  :         {
; 725  :             memset(connectionInfo, 0x00, nBytes);

  000c9	6a 00		 push	 0
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 _memset
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 726  : 
; 727  :             //
; 728  :             // Now query USBHUB for the USB_NODE_CONNECTION_INFORMATION_EX structure
; 729  :             // for this port.  This will tell us if a device is attached to this
; 730  :             // port, among other things.
; 731  :             //
; 732  :             connectionInfo->ConnectionIndex = index;

  000d4	89 1e		 mov	 DWORD PTR [esi], ebx

; 733  : 
; 734  :             success = DeviceIoControl(hHubDevice,

  000d6	8d 44 24 30	 lea	 eax, DWORD PTR _nBytes$4[esp+1608]
  000da	6a 00		 push	 0
  000dc	50		 push	 eax
  000dd	8b 44 24 38	 mov	 eax, DWORD PTR _nBytes$4[esp+1616]
  000e1	50		 push	 eax
  000e2	56		 push	 esi
  000e3	50		 push	 eax
  000e4	56		 push	 esi
  000e5	68 48 04 22 00	 push	 2229320			; 00220448H
  000ea	ff 74 24 34	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1636]
  000ee	ff 54 24 44	 call	 DWORD PTR tv1408[esp+1640]

; 735  :                 IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX,
; 736  :                 connectionInfo,
; 737  :                 nBytes,
; 738  :                 connectionInfo,
; 739  :                 nBytes,
; 740  :                 &nBytes,
; 741  :                 NULL);
; 742  : 
; 743  :             if (!success)

  000f2	85 c0		 test	 eax, eax
  000f4	75 0e		 jne	 SHORT $LN13@EnumerateH

; 744  :             {
; 745  :                 free(connectionInfo);

  000f6	56		 push	 esi
  000f7	e8 00 00 00 00	 call	 _free
  000fc	83 c4 04	 add	 esp, 4

; 746  :                 continue;

  000ff	e9 a5 06 00 00	 jmp	 $LN2@EnumerateH
$LN13@EnumerateH:

; 752  :             continue;
; 753  :         }
; 754  : 
; 755  :         // Update the count of connected devices
; 756  :         //
; 757  :         if (connectionInfo->ConnectionStatus == DeviceConnected)

  00104	8b 46 1f	 mov	 eax, DWORD PTR [esi+31]
  00107	83 f8 01	 cmp	 eax, 1
  0010a	75 06		 jne	 SHORT $LN14@EnumerateH

; 758  :         {
; 759  :             ulTotalDevicesConnected++;

  0010c	ff 47 04	 inc	 DWORD PTR [edi+4]
  0010f	8b 46 1f	 mov	 eax, DWORD PTR [esi+31]
$LN14@EnumerateH:

; 760  :         }
; 761  : 
; 762  :         // If there is a device connected, get the Device Description
; 763  :         //
; 764  :         deviceDesc = NULL;

  00112	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _deviceDesc$1$[esp+1608], 0

; 765  :         if (connectionInfo->ConnectionStatus != NoDeviceConnected)

  0011a	85 c0		 test	 eax, eax
  0011c	0f 84 f9 00 00
	00		 je	 $LN16@EnumerateH

; 547  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetDrvKeyName");

  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GLJHIDAC@?$DO?$DO?5USB?4GetDrvKeyName@
  00127	68 23 02 00 00	 push	 547			; 00000223H
  0012c	6a 10		 push	 16			; 00000010H
  0012e	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _nBytes$2[esp+1620], 0
  00136	33 ff		 xor	 edi, edi
  00138	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 548  : 
; 549  :     // Get the length of the name of the driver key of the device attached to
; 550  :     // the specified port.
; 551  :     //
; 552  :     memset(&driverKeyName, 0, sizeof(driverKeyName));

  00140	66 89 7c 24 40	 mov	 WORD PTR _driverKeyName$5[esp+1616], di

; 554  : 
; 555  :     success = DeviceIoControl(Hub,

  00145	8d 44 24 0c	 lea	 eax, DWORD PTR _nBytes$2[esp+1608]
  00149	0f 57 c0	 xorps	 xmm0, xmm0

; 548  : 
; 549  :     // Get the length of the name of the driver key of the device attached to
; 550  :     // the specified port.
; 551  :     //
; 552  :     memset(&driverKeyName, 0, sizeof(driverKeyName));

  0014c	66 0f d6 44 24
	38		 movq	 QWORD PTR _driverKeyName$5[esp+1608], xmm0

; 553  :     driverKeyName.ConnectionIndex = ConnectionIndex;

  00152	89 5c 24 38	 mov	 DWORD PTR _driverKeyName$5[esp+1608], ebx

; 554  : 
; 555  :     success = DeviceIoControl(Hub,

  00156	57		 push	 edi
  00157	50		 push	 eax
  00158	6a 0a		 push	 10			; 0000000aH
  0015a	8d 44 24 44	 lea	 eax, DWORD PTR _driverKeyName$5[esp+1620]
  0015e	50		 push	 eax
  0015f	6a 0a		 push	 10			; 0000000aH
  00161	50		 push	 eax
  00162	68 20 04 22 00	 push	 2229280			; 00220420H
  00167	ff 74 24 34	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1636]
  0016b	ff 54 24 44	 call	 DWORD PTR tv1408[esp+1640]

; 556  :         IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME,
; 557  :         &driverKeyName,
; 558  :         sizeof(driverKeyName),
; 559  :         &driverKeyName,
; 560  :         sizeof(driverKeyName),
; 561  :         &nBytes,
; 562  :         NULL);
; 563  : 
; 564  :     if (success)

  0016f	85 c0		 test	 eax, eax
  00171	74 78		 je	 SHORT $LN50@EnumerateH

; 565  :     {
; 566  :         // Allocate space to hold the driver key name
; 567  :         //
; 568  :         nBytes = driverKeyName.ActualLength;

  00173	8b 44 24 3c	 mov	 eax, DWORD PTR _driverKeyName$5[esp+1612]
  00177	89 44 24 0c	 mov	 DWORD PTR _nBytes$2[esp+1608], eax

; 569  : 
; 570  :         if (nBytes > sizeof(driverKeyName))

  0017b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017e	76 6b		 jbe	 SHORT $LN50@EnumerateH

; 571  :         {
; 572  :             driverKeyNameW = (struct _USB_NODE_CONNECTION_DRIVERKEY_NAME *)malloc(nBytes);

  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 _malloc
  00186	83 c4 04	 add	 esp, 4
  00189	8b f0		 mov	 esi, eax

; 573  :             if (driverKeyNameW)

  0018b	ff 74 24 0c	 push	 DWORD PTR _nBytes$2[esp+1608]
  0018f	85 f6		 test	 esi, esi
  00191	74 40		 je	 SHORT $LN49@EnumerateH

; 574  :             {
; 575  :                 memset(driverKeyNameW, 0x00, nBytes);

  00193	57		 push	 edi
  00194	56		 push	 esi
  00195	e8 00 00 00 00	 call	 _memset
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  : 
; 577  :                 // Get the name of the driver key of the device attached to
; 578  :                 // the specified port.
; 579  :                 //
; 580  :                 driverKeyNameW->ConnectionIndex = ConnectionIndex;

  0019d	89 1e		 mov	 DWORD PTR [esi], ebx

; 581  : 
; 582  :                 success = DeviceIoControl(Hub,

  0019f	8d 44 24 0c	 lea	 eax, DWORD PTR _nBytes$2[esp+1608]
  001a3	57		 push	 edi
  001a4	50		 push	 eax
  001a5	8b 44 24 14	 mov	 eax, DWORD PTR _nBytes$2[esp+1616]
  001a9	50		 push	 eax
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	56		 push	 esi
  001ad	68 20 04 22 00	 push	 2229280			; 00220420H
  001b2	ff 74 24 34	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1636]
  001b6	ff 54 24 44	 call	 DWORD PTR tv1408[esp+1640]

; 583  :                     IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME,
; 584  :                     driverKeyNameW,
; 585  :                     nBytes,
; 586  :                     driverKeyNameW,
; 587  :                     nBytes,
; 588  :                     &nBytes,
; 589  :                     NULL);
; 590  : 
; 591  :                 if (success)

  001ba	85 c0		 test	 eax, eax
  001bc	74 0a		 je	 SHORT $LN51@EnumerateH

; 592  :                 {
; 593  :                     // Convert the driver key name
; 594  :                     //
; 595  :                     driverKeyNameA = WideStrToMultiStr(driverKeyNameW->DriverKeyName);

  001be	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  001c1	e8 00 00 00 00	 call	 ?WideStrToMultiStr@@YAPADPA_W@Z ; WideStrToMultiStr
  001c6	8b f8		 mov	 edi, eax
$LN51@EnumerateH:

; 596  :                 }
; 597  :                 free(driverKeyNameW);

  001c8	56		 push	 esi
  001c9	e8 00 00 00 00	 call	 _free
  001ce	83 c4 04	 add	 esp, 4

; 598  :             }
; 599  :             else

  001d1	eb 14		 jmp	 SHORT $LN251@EnumerateH
$LN49@EnumerateH:

; 600  :             {
; 601  :                 Log(LOG_DEBUG, __LINE__, "-- USB.GetDriverKeyName, new KeyNameW (%u) null", nBytes);

  001d3	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@OGKODAJE@?9?9?5USB?4GetDriverKeyName?0?5new?5Ke@
  001d8	68 59 02 00 00	 push	 601			; 00000259H
  001dd	6a 10		 push	 16			; 00000010H
  001df	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001e4	83 c4 10	 add	 esp, 16			; 00000010H
$LN251@EnumerateH:

; 602  :             }
; 603  :         }
; 604  :     }
; 605  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetDrvKeyName, AName %s", driverKeyNameA);

  001e7	8b 74 24 10	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1608]
$LN50@EnumerateH:
  001eb	57		 push	 edi
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PGCNCFEB@?$DM?$DM?5USB?4GetDrvKeyName?0?5AName?5?$CFs@
  001f1	68 5d 02 00 00	 push	 605			; 0000025dH
  001f6	6a 10		 push	 16			; 00000010H
  001f8	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001fd	83 c4 10	 add	 esp, 16			; 00000010H

; 766  :         {
; 767  :             driverKeyName = GetDriverKeyName(hHubDevice,
; 768  :                 index);
; 769  : 
; 770  :             if (driverKeyName)

  00200	85 ff		 test	 edi, edi
  00202	74 17		 je	 SHORT $LN16@EnumerateH

; 771  :             {
; 772  :                 deviceDesc = DriverNameToDeviceDesc(driverKeyName);

  00204	8b 4c 24 1c	 mov	 ecx, DWORD PTR _this$GSCopy$1$[esp+1608]
  00208	57		 push	 edi
  00209	e8 00 00 00 00	 call	 ?DriverNameToDeviceDesc@USB@@IAEPADPAD@Z ; USB::DriverNameToDeviceDesc

; 773  :                 free(driverKeyName);

  0020e	57		 push	 edi
  0020f	89 44 24 2c	 mov	 DWORD PTR _deviceDesc$1$[esp+1612], eax
  00213	e8 00 00 00 00	 call	 _free
  00218	83 c4 04	 add	 esp, 4
$LN16@EnumerateH:

; 774  :             }
; 775  :         }
; 776  : 
; 777  :         // If there is a device connected to the port, try to retrieve the
; 778  :         // Configuration Descriptor from the device.
; 779  :         //
; 780  :         if (connectionInfo->ConnectionStatus == DeviceConnected)

  0021b	83 7e 1f 01	 cmp	 DWORD PTR [esi+31], 1
  0021f	0f 85 23 01 00
	00		 jne	 $LN17@EnumerateH

; 781  :         {
; 782  :             configDesc = GetConfigDescriptor(hHubDevice, index, 0);

  00225	51		 push	 ecx
  00226	53		 push	 ebx
  00227	ff 74 24 20	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1616]
  0022b	e8 00 00 00 00	 call	 ?GetConfigDescriptor@USB@@IAEPAU_USB_DESCRIPTOR_REQUEST@@PAXKE@Z ; USB::GetConfigDescriptor
  00230	89 44 24 2c	 mov	 DWORD PTR _configDesc$1$[esp+1608], eax

; 787  :         }
; 788  : 
; 789  :         if (configDesc != NULL &&

  00234	85 c0		 test	 eax, eax
  00236	0f 84 14 01 00
	00		 je	 $LN19@EnumerateH

; 354  :     Log(LOG_DEBUG, __LINE__, ">> USB.AreThrStrDesc");

  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IPAKKGGO@?$DO?$DO?5USB?4AreThrStrDesc@
  00241	68 62 01 00 00	 push	 354			; 00000162H
  00246	6a 10		 push	 16			; 00000010H

; 787  :         }
; 788  : 
; 789  :         if (configDesc != NULL &&

  00248	8d 58 0c	 lea	 ebx, DWORD PTR [eax+12]

; 354  :     Log(LOG_DEBUG, __LINE__, ">> USB.AreThrStrDesc");

  0024b	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 355  : 
; 356  :     //
; 357  :     // Check Device Descriptor strings
; 358  :     //
; 359  :     if (DeviceDesc->iManufacturer || DeviceDesc->iProduct || DeviceDesc->iSerialNumber)

  00250	8a 4e 12	 mov	 cl, BYTE PTR [esi+18]
  00253	83 c4 0c	 add	 esp, 12			; 0000000cH
  00256	84 c9		 test	 cl, cl
  00258	0f 85 b2 00 00
	00		 jne	 $LN59@EnumerateH
  0025e	38 4e 13	 cmp	 BYTE PTR [esi+19], cl
  00261	0f 85 a9 00 00
	00		 jne	 $LN59@EnumerateH
  00267	38 4e 14	 cmp	 BYTE PTR [esi+20], cl
  0026a	0f 85 a0 00 00
	00		 jne	 $LN59@EnumerateH

; 362  :         return TRUE;
; 363  :     }
; 364  : 
; 365  :     //
; 366  :     // Check the Configuration and Interface Descriptor strings
; 367  :     //
; 368  :     descEnd = (PUCHAR)ConfigDesc + ConfigDesc->wTotalLength;

  00270	0f b7 7b 02	 movzx	 edi, WORD PTR [ebx+2]
  00274	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00277	03 fb		 add	 edi, ebx

; 369  : 
; 370  :     //    (USB_COMMON_DESCRIPTOR far *)commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 371  :     commonDesc = (PUCHAR)ConfigDesc;

  00279	8b cb		 mov	 ecx, ebx

; 372  : 
; 373  :     while ((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR) < descEnd &&

  0027b	3b c7		 cmp	 eax, edi
  0027d	73 5d		 jae	 SHORT $LN55@EnumerateH
  0027f	90		 npad	 1
$LL54@EnumerateH:
  00280	8a 11		 mov	 dl, BYTE PTR [ecx]
  00282	0f b6 f2	 movzx	 esi, dl
  00285	03 f1		 add	 esi, ecx
  00287	3b f7		 cmp	 esi, edi
  00289	77 4d		 ja	 SHORT $LN248@EnumerateH

; 374  :         (PUCHAR)commonDesc + ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength <= descEnd)
; 375  :     {
; 376  :         switch (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bDescriptorType)

  0028b	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  0028f	83 e8 02	 sub	 eax, 2
  00292	74 2f		 je	 SHORT $LN60@EnumerateH
  00294	83 e8 02	 sub	 eax, 2
  00297	75 36		 jne	 SHORT $LN220@EnumerateH

; 387  :             }
; 388  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 389  :             continue;
; 390  : 
; 391  :         case USB_INTERFACE_DESCRIPTOR_TYPE:
; 392  :             //                if (commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR) &&
; 393  :             //                    commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR2))
; 394  :             if (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength != sizeof(USB_INTERFACE_DESCRIPTOR))

  00299	80 fa 09	 cmp	 dl, 9
  0029c	75 3a		 jne	 SHORT $LN248@EnumerateH

; 395  :             {
; 396  :                 break;
; 397  :             }
; 398  :             if (((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->iInterface)

  0029e	8a 41 08	 mov	 al, BYTE PTR [ecx+8]
  002a1	84 c0		 test	 al, al
  002a3	74 2a		 je	 SHORT $LN220@EnumerateH

; 399  :             {
; 400  :                 Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Interface %d", (int)((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->iInterface);

  002a5	0f b6 c0	 movzx	 eax, al
  002a8	50		 push	 eax
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NAENOJMA@?$DM?$DM?5USB?4AreThrStrDesc?0?5Interface@
  002ae	68 90 01 00 00	 push	 400			; 00000190H
  002b3	6a 10		 push	 16			; 00000010H
  002b5	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 401  :                 return TRUE;

  002ba	8b 74 24 20	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1624]
  002be	83 c4 10	 add	 esp, 16			; 00000010H
  002c1	eb 6f		 jmp	 SHORT $LN235@EnumerateH
$LN60@EnumerateH:

; 377  :         {
; 378  :         case USB_CONFIGURATION_DESCRIPTOR_TYPE:
; 379  :             if (((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength != sizeof(USB_CONFIGURATION_DESCRIPTOR))

  002c3	80 fa 09	 cmp	 dl, 9
  002c6	75 10		 jne	 SHORT $LN248@EnumerateH

; 380  :             {
; 381  :                 break;
; 382  :             }
; 383  :             if (((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc)->iConfiguration)

  002c8	8a 41 06	 mov	 al, BYTE PTR [ecx+6]
  002cb	84 c0		 test	 al, al
  002cd	75 23		 jne	 SHORT $LN218@EnumerateH
$LN220@EnumerateH:

; 372  : 
; 373  :     while ((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR) < descEnd &&

  002cf	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  002d2	8b ce		 mov	 ecx, esi
  002d4	3b c7		 cmp	 eax, edi
  002d6	72 a8		 jb	 SHORT $LL54@EnumerateH
$LN248@EnumerateH:

; 402  :             }
; 403  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 404  :             continue;
; 405  : 
; 406  :         default:
; 407  :             (PUCHAR)commonDesc += ((PUSB_COMMON_DESCRIPTOR)commonDesc)->bLength;
; 408  :             continue;
; 409  :         }
; 410  :         break;
; 411  :     }
; 412  : 
; 413  :     Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Ret False");

  002d8	8b 74 24 10	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1608]
$LN55@EnumerateH:
  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JFAJNON@?$DM?$DM?5USB?4AreThrStrDesc?0?5Ret?5False@
  002e1	68 9d 01 00 00	 push	 413			; 0000019dH
  002e6	6a 10		 push	 16			; 00000010H
  002e8	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  002ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 414  :     return FALSE;

  002f0	eb 5e		 jmp	 SHORT $LN19@EnumerateH
$LN218@EnumerateH:

; 384  :             {
; 385  :                 Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Cfg %d", (int)((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc)->iConfiguration);

  002f2	0f b6 c0	 movzx	 eax, al
  002f5	50		 push	 eax
  002f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DEJJKGAD@?$DM?$DM?5USB?4AreThrStrDesc?0?5Cfg?5?$CFd@
  002fb	68 81 01 00 00	 push	 385			; 00000181H
  00300	6a 10		 push	 16			; 00000010H
  00302	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 386  :                 return TRUE;

  00307	8b 74 24 20	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1624]
  0030b	83 c4 10	 add	 esp, 16			; 00000010H
  0030e	eb 22		 jmp	 SHORT $LN235@EnumerateH
$LN59@EnumerateH:

; 360  :     {
; 361  :         Log(LOG_DEBUG, __LINE__, "<< USB.AreThrStrDesc, Manufact %d, Prod %d, SN %d", (int)DeviceDesc->iManufacturer, (int)DeviceDesc->iProduct, (int)DeviceDesc->iSerialNumber);

  00310	0f b6 46 14	 movzx	 eax, BYTE PTR [esi+20]
  00314	50		 push	 eax
  00315	0f b6 46 13	 movzx	 eax, BYTE PTR [esi+19]
  00319	50		 push	 eax
  0031a	0f b6 c1	 movzx	 eax, cl
  0031d	50		 push	 eax
  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KIEGOLFL@?$DM?$DM?5USB?4AreThrStrDesc?0?5Manufact?5@
  00323	68 69 01 00 00	 push	 361			; 00000169H
  00328	6a 10		 push	 16			; 00000010H
  0032a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0032f	83 c4 18	 add	 esp, 24			; 00000018H
$LN235@EnumerateH:

; 790  :             AreThereStringDescriptors(&connectionInfo->DeviceDescriptor,
; 791  :             (PUSB_CONFIGURATION_DESCRIPTOR)(configDesc + 1)))
; 792  :         {
; 793  :             stringDescs = GetAllStringDescriptors(hHubDevice, index,

  00332	53		 push	 ebx
  00333	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00336	50		 push	 eax
  00337	ff 74 24 1c	 push	 DWORD PTR _index$1$[esp+1616]
  0033b	ff 74 24 24	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1620]
  0033f	e8 00 00 00 00	 call	 ?GetAllStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKPAU_USB_DEVICE_DESCRIPTOR@@PAU_USB_CONFIGURATION_DESCRIPTOR@@@Z ; USB::GetAllStringDescriptors
  00344	8b d8		 mov	 ebx, eax

; 794  :                 &connectionInfo->DeviceDescriptor,
; 795  :                 (PUSB_CONFIGURATION_DESCRIPTOR)(configDesc + 1));
; 796  :         }
; 797  :         else

  00346	eb 0a		 jmp	 SHORT $LN20@EnumerateH
$LN17@EnumerateH:

; 783  :         }
; 784  :         else
; 785  :         {
; 786  :             configDesc = NULL;

  00348	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _configDesc$1$[esp+1608], 0
$LN19@EnumerateH:

; 798  :         {
; 799  :             stringDescs = NULL;

  00350	33 db		 xor	 ebx, ebx
$LN20@EnumerateH:

; 800  :         }
; 801  : 
; 802  :         // If the device connected to the port is an external hub, get the
; 803  :         // name of the external hub and recursively enumerate it.
; 804  :         //
; 805  :         if (connectionInfo->DeviceIsHub)

  00352	80 7e 18 00	 cmp	 BYTE PTR [esi+24], 0
  00356	0f 84 fc 01 00
	00		 je	 $LN22@EnumerateH

; 617  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetExternHub");

  0035c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BDIOPGJF@?$DO?$DO?5USB?4GetExternHub@
  00361	68 69 02 00 00	 push	 617			; 00000269H
  00366	33 ff		 xor	 edi, edi
  00368	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _nBytes$1[esp+1616], 0
  00370	6a 10		 push	 16			; 00000010H
  00372	89 7c 24 2c	 mov	 DWORD PTR _extHubNameA$1$[esp+1620], edi
  00376	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 623  :     extHubName.ConnectionIndex = ConnectionIndex;

  0037b	8b 44 24 20	 mov	 eax, DWORD PTR _index$1$[esp+1620]
  0037f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00382	0f 57 c0	 xorps	 xmm0, xmm0

; 618  : 
; 619  :     // Get the length of the name of the external hub attached to the
; 620  :     // specified port.
; 621  :     //
; 622  :     memset(&extHubName, 0, sizeof(extHubName));

  00385	66 89 7c 24 4c	 mov	 WORD PTR _extHubName$6[esp+1616], di
  0038a	66 0f d6 44 24
	44		 movq	 QWORD PTR _extHubName$6[esp+1608], xmm0

; 623  :     extHubName.ConnectionIndex = ConnectionIndex;

  00390	89 44 24 44	 mov	 DWORD PTR _extHubName$6[esp+1608], eax

; 624  : 
; 625  :     success = DeviceIoControl(Hub,

  00394	8d 44 24 0c	 lea	 eax, DWORD PTR _nBytes$1[esp+1608]
  00398	57		 push	 edi
  00399	50		 push	 eax
  0039a	6a 0a		 push	 10			; 0000000aH
  0039c	8d 44 24 50	 lea	 eax, DWORD PTR _extHubName$6[esp+1620]
  003a0	50		 push	 eax
  003a1	6a 0a		 push	 10			; 0000000aH
  003a3	50		 push	 eax
  003a4	68 14 04 22 00	 push	 2229268			; 00220414H
  003a9	ff 74 24 34	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1636]
  003ad	ff 54 24 44	 call	 DWORD PTR tv1408[esp+1640]

; 626  :         IOCTL_USB_GET_NODE_CONNECTION_NAME,
; 627  :         &extHubName,
; 628  :         sizeof(extHubName),
; 629  :         &extHubName,
; 630  :         sizeof(extHubName),
; 631  :         &nBytes,
; 632  :         NULL);
; 633  : 
; 634  :     if (success)

  003b1	85 c0		 test	 eax, eax
  003b3	0f 84 80 00 00
	00		 je	 $LN73@EnumerateH

; 635  :     {
; 636  :         // Allocate space to hold the external hub name
; 637  :         //
; 638  :         nBytes = extHubName.ActualLength;

  003b9	8b 44 24 48	 mov	 eax, DWORD PTR _extHubName$6[esp+1612]
  003bd	89 44 24 0c	 mov	 DWORD PTR _nBytes$1[esp+1608], eax

; 639  : 
; 640  :         if (nBytes > sizeof(extHubName))

  003c1	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  003c4	76 73		 jbe	 SHORT $LN73@EnumerateH

; 641  :         {
; 642  :             extHubNameW = (struct _USB_NODE_CONNECTION_NAME *)malloc(nBytes);

  003c6	50		 push	 eax
  003c7	e8 00 00 00 00	 call	 _malloc
  003cc	83 c4 04	 add	 esp, 4
  003cf	8b f0		 mov	 esi, eax

; 643  :             if (extHubNameW)

  003d1	ff 74 24 0c	 push	 DWORD PTR _nBytes$1[esp+1608]
  003d5	85 f6		 test	 esi, esi
  003d7	74 48		 je	 SHORT $LN72@EnumerateH

; 644  :             {
; 645  :                 memset(extHubNameW, 0x00, nBytes);

  003d9	57		 push	 edi
  003da	56		 push	 esi
  003db	e8 00 00 00 00	 call	 _memset

; 646  : 
; 647  :                 // Get the name of the external hub attached to the specified port
; 648  :                 //
; 649  :                 extHubNameW->ConnectionIndex = ConnectionIndex;

  003e0	8b 44 24 20	 mov	 eax, DWORD PTR _index$1$[esp+1620]
  003e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e7	89 06		 mov	 DWORD PTR [esi], eax

; 650  : 
; 651  :                 success = DeviceIoControl(Hub,

  003e9	8d 44 24 0c	 lea	 eax, DWORD PTR _nBytes$1[esp+1608]
  003ed	57		 push	 edi
  003ee	50		 push	 eax
  003ef	8b 44 24 14	 mov	 eax, DWORD PTR _nBytes$1[esp+1616]
  003f3	50		 push	 eax
  003f4	56		 push	 esi
  003f5	50		 push	 eax
  003f6	56		 push	 esi
  003f7	68 14 04 22 00	 push	 2229268			; 00220414H
  003fc	ff 74 24 34	 push	 DWORD PTR _hHubDevice$GSCopy$1$[esp+1636]
  00400	ff 54 24 44	 call	 DWORD PTR tv1408[esp+1640]

; 652  :                     IOCTL_USB_GET_NODE_CONNECTION_NAME,
; 653  :                     extHubNameW,
; 654  :                     nBytes,
; 655  :                     extHubNameW,
; 656  :                     nBytes,
; 657  :                     &nBytes,
; 658  :                     NULL);
; 659  : 
; 660  :                 if (success)

  00404	85 c0		 test	 eax, eax
  00406	74 0e		 je	 SHORT $LN74@EnumerateH

; 661  :                 {
; 662  :                     // Convert the External Hub name
; 663  :                     //
; 664  :                     extHubNameA = WideStrToMultiStr(extHubNameW->NodeName);

  00408	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0040b	e8 00 00 00 00	 call	 ?WideStrToMultiStr@@YAPADPA_W@Z ; WideStrToMultiStr
  00410	8b f8		 mov	 edi, eax
  00412	89 44 24 20	 mov	 DWORD PTR _extHubNameA$1$[esp+1608], eax
$LN74@EnumerateH:

; 665  :                 }
; 666  :                 free(extHubNameW);

  00416	56		 push	 esi
  00417	e8 00 00 00 00	 call	 _free
  0041c	83 c4 04	 add	 esp, 4

; 667  :             }
; 668  :             else

  0041f	eb 14		 jmp	 SHORT $LN252@EnumerateH
$LN72@EnumerateH:

; 669  :             {
; 670  :                 Log(LOG_DEBUG, __LINE__, "-- USB.GetExtHubName, new extHubNameW (%u) null", nBytes);

  00421	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HJNGPFIB@?9?9?5USB?4GetExtHubName?0?5new?5extHu@
  00426	68 9e 02 00 00	 push	 670			; 0000029eH
  0042b	6a 10		 push	 16			; 00000010H
  0042d	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00432	83 c4 10	 add	 esp, 16			; 00000010H
$LN252@EnumerateH:

; 671  :             }
; 672  :         }
; 673  :     }
; 674  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetExternHub, HubName %s", extHubNameA);

  00435	8b 74 24 10	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1608]
$LN73@EnumerateH:
  00439	57		 push	 edi
  0043a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IMMCIHAH@?$DM?$DM?5USB?4GetExternHub?0?5HubName?5?$CFs@
  0043f	68 a2 02 00 00	 push	 674			; 000002a2H
  00444	6a 10		 push	 16			; 00000010H
  00446	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0044b	83 c4 10	 add	 esp, 16			; 00000010H

; 806  :         {
; 807  :             PCHAR extHubName = GetExternalHubName(hHubDevice, index);
; 808  :             if (extHubName != NULL)

  0044e	85 ff		 test	 edi, edi
  00450	0f 84 02 01 00
	00		 je	 $LN22@EnumerateH

; 809  :             {
; 810  :                 wsprintf(leafName, "%s[Port%lu] ", UsbViewIndent[NestedLevel], index);

  00456	8b 44 24 1c	 mov	 eax, DWORD PTR _this$GSCopy$1$[esp+1608]
  0045a	ff 74 24 14	 push	 DWORD PTR _index$1$[esp+1608]
  0045e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00461	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?UsbViewIndent@@3PAPADA[eax*4]
  00468	8d 44 24 60	 lea	 eax, DWORD PTR _leafName$[esp+1616]
  0046c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DMKPCFDB@?$CFs?$FLPort?$CFlu?$FN?5@
  00471	50		 push	 eax
  00472	ff 54 24 44	 call	 DWORD PTR tv1407[esp+1624]

; 811  :                 strcat(leafName, ConnectionStatuses[connectionInfo->ConnectionStatus]);

  00476	8b 46 1f	 mov	 eax, DWORD PTR [esi+31]
  00479	83 c4 10	 add	 esp, 16			; 00000010H
  0047c	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?ConnectionStatuses@@3PAPADA[eax*4]
  00483	8b f2		 mov	 esi, edx
$LL237@EnumerateH:
  00485	8a 02		 mov	 al, BYTE PTR [edx]
  00487	42		 inc	 edx
  00488	84 c0		 test	 al, al
  0048a	75 f9		 jne	 SHORT $LL237@EnumerateH
  0048c	8d 7c 24 58	 lea	 edi, DWORD PTR _leafName$[esp+1608]
  00490	2b d6		 sub	 edx, esi
  00492	4f		 dec	 edi
$LL238@EnumerateH:
  00493	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00496	47		 inc	 edi
  00497	84 c0		 test	 al, al
  00499	75 f8		 jne	 SHORT $LL238@EnumerateH
  0049b	8b ca		 mov	 ecx, edx
  0049d	c1 e9 02	 shr	 ecx, 2
  004a0	f3 a5		 rep movsd
  004a2	8b ca		 mov	 ecx, edx
  004a4	83 e1 03	 and	 ecx, 3
  004a7	f3 a4		 rep movsb

; 812  :                 if (deviceDesc)

  004a9	8b 4c 24 28	 mov	 ecx, DWORD PTR _deviceDesc$1$[esp+1608]
  004ad	85 c9		 test	 ecx, ecx
  004af	74 45		 je	 SHORT $LN23@EnumerateH

; 813  :                 {
; 814  :                     strcat(leafName, " : ");

  004b1	8d 7c 24 58	 lea	 edi, DWORD PTR _leafName$[esp+1608]
  004b5	4f		 dec	 edi
$LL239@EnumerateH:
  004b6	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  004b9	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  004bc	84 c0		 test	 al, al
  004be	75 f6		 jne	 SHORT $LL239@EnumerateH
  004c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03MCPBMLDJ@?5?3?5@

; 815  :                     strcat(leafName, deviceDesc);

  004c5	8b d1		 mov	 edx, ecx
  004c7	89 07		 mov	 DWORD PTR [edi], eax
  004c9	8b f2		 mov	 esi, edx
  004cb	0f 1f 44 00 00	 npad	 5
$LL240@EnumerateH:
  004d0	8a 02		 mov	 al, BYTE PTR [edx]
  004d2	42		 inc	 edx
  004d3	84 c0		 test	 al, al
  004d5	75 f9		 jne	 SHORT $LL240@EnumerateH
  004d7	8d 7c 24 58	 lea	 edi, DWORD PTR _leafName$[esp+1608]
  004db	2b d6		 sub	 edx, esi
  004dd	4f		 dec	 edi
  004de	66 90		 npad	 2
$LL241@EnumerateH:
  004e0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  004e3	47		 inc	 edi
  004e4	84 c0		 test	 al, al
  004e6	75 f8		 jne	 SHORT $LL241@EnumerateH
  004e8	8b ca		 mov	 ecx, edx
  004ea	c1 e9 02	 shr	 ecx, 2
  004ed	f3 a5		 rep movsd
  004ef	8b ca		 mov	 ecx, edx
  004f1	83 e1 03	 and	 ecx, 3
  004f4	f3 a4		 rep movsb
$LN23@EnumerateH:

; 816  :                 }
; 817  :                 USBTraceInfo(leafName, extHubName);

  004f6	8b 7c 24 20	 mov	 edi, DWORD PTR _extHubNameA$1$[esp+1608]
  004fa	8d 4c 24 58	 lea	 ecx, DWORD PTR _leafName$[esp+1608]
  004fe	8b d7		 mov	 edx, edi
  00500	e8 00 00 00 00	 call	 ?USBTraceInfo@@YAXPAD0@Z ; USBTraceInfo

; 818  : 
; 819  :                 EnumerateHub(extHubName,

  00505	ff 74 24 28	 push	 DWORD PTR _deviceDesc$1$[esp+1608]
  00509	8b 4c 24 30	 mov	 ecx, DWORD PTR _configDesc$1$[esp+1612]
  0050d	8b 74 24 14	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1612]
  00511	53		 push	 ebx
  00512	51		 push	 ecx
  00513	56		 push	 esi
  00514	57		 push	 edi
  00515	8b 7c 24 30	 mov	 edi, DWORD PTR _this$GSCopy$1$[esp+1628]
  00519	8b cf		 mov	 ecx, edi
  0051b	e8 00 00 00 00	 call	 ?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z ; USB::EnumerateHub

; 820  :                     connectionInfo,
; 821  :                     configDesc,
; 822  :                     stringDescs,
; 823  :                     deviceDesc);
; 824  : 
; 825  :                 if (configDesc != NULL)

  00520	8b 44 24 2c	 mov	 eax, DWORD PTR _configDesc$1$[esp+1608]
  00524	85 c0		 test	 eax, eax
  00526	74 09		 je	 SHORT $LN24@EnumerateH

; 826  :                     free(configDesc);

  00528	50		 push	 eax
  00529	e8 00 00 00 00	 call	 _free
  0052e	83 c4 04	 add	 esp, 4
$LN24@EnumerateH:

; 827  : 
; 828  :                 if (connectionInfo != NULL)
; 829  :                     free(connectionInfo);

  00531	56		 push	 esi
  00532	e8 00 00 00 00	 call	 _free
  00537	83 c4 04	 add	 esp, 4

; 830  : 
; 831  :                 while (stringDescs != NULL)

  0053a	85 db		 test	 ebx, ebx
  0053c	0f 84 63 02 00
	00		 je	 $LN250@EnumerateH
$LL5@EnumerateH:

; 832  :                 {
; 833  :                     Next = stringDescs->Next;

  00542	8b 33		 mov	 esi, DWORD PTR [ebx]

; 834  :                     free(stringDescs);

  00544	53		 push	 ebx
  00545	e8 00 00 00 00	 call	 _free
  0054a	83 c4 04	 add	 esp, 4

; 835  :                     stringDescs = Next;

  0054d	8b de		 mov	 ebx, esi
  0054f	85 f6		 test	 esi, esi
  00551	75 ef		 jne	 SHORT $LL5@EnumerateH

; 836  :                 }
; 837  : 
; 838  :                 // On to the next port
; 839  :                 //
; 840  :                 continue;

  00553	e9 4d 02 00 00	 jmp	 $LN250@EnumerateH
$LN22@EnumerateH:

; 841  :             }
; 842  :         }
; 843  : 
; 844  :         // Allocate some space for a USBDEVICEINFO structure to hold the
; 845  :         // hub info, hub name, and connection info pointers.  GPTR zero
; 846  :         // initializes the structure for us.
; 847  :         //
; 848  :         info = (PUSBDEVICEINFO)malloc(sizeof(USBDEVICEINFO));

  00558	6a 14		 push	 20			; 00000014H
  0055a	e8 00 00 00 00	 call	 _malloc
  0055f	83 c4 04	 add	 esp, 4
  00562	89 44 24 20	 mov	 DWORD PTR _info$1$[esp+1608], eax

; 849  :         if (info)

  00566	85 c0		 test	 eax, eax
  00568	0f 84 fe 01 00
	00		 je	 $LN26@EnumerateH

; 850  :         {
; 851  :             memset(info, 0x00, sizeof(USBDEVICEINFO));
; 852  : 
; 853  :             info->ConnectionInfo = connectionInfo;
; 854  :             info->ConfigDesc = configDesc;
; 855  :             info->StringDescs = stringDescs;
; 856  : 
; 857  :             wsprintf(leafName, "[Port%lu] ", index);

  0056e	ff 74 24 14	 push	 DWORD PTR _index$1$[esp+1608]
  00572	8b 4c 24 30	 mov	 ecx, DWORD PTR _configDesc$1$[esp+1612]
  00576	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0057c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00583	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00586	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00589	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  0058c	8d 44 24 5c	 lea	 eax, DWORD PTR _leafName$[esp+1612]
  00590	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KFNJHJLN@?$FLPort?$CFlu?$FN?5@
  00595	50		 push	 eax
  00596	ff 54 24 40	 call	 DWORD PTR tv1407[esp+1620]

; 858  :             strcat(leafName, ConnectionStatuses[connectionInfo->ConnectionStatus]);

  0059a	8b 46 1f	 mov	 eax, DWORD PTR [esi+31]
  0059d	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a0	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?ConnectionStatuses@@3PAPADA[eax*4]
  005a7	8b f2		 mov	 esi, edx
  005a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL242@EnumerateH:
  005b0	8a 02		 mov	 al, BYTE PTR [edx]
  005b2	42		 inc	 edx
  005b3	84 c0		 test	 al, al
  005b5	75 f9		 jne	 SHORT $LL242@EnumerateH
  005b7	8d 7c 24 58	 lea	 edi, DWORD PTR _leafName$[esp+1608]
  005bb	2b d6		 sub	 edx, esi
  005bd	4f		 dec	 edi
  005be	66 90		 npad	 2
$LL243@EnumerateH:
  005c0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  005c3	47		 inc	 edi
  005c4	84 c0		 test	 al, al
  005c6	75 f8		 jne	 SHORT $LL243@EnumerateH
  005c8	8b ca		 mov	 ecx, edx
  005ca	c1 e9 02	 shr	 ecx, 2
  005cd	f3 a5		 rep movsd
  005cf	8b ca		 mov	 ecx, edx
  005d1	83 e1 03	 and	 ecx, 3

; 859  :             if (deviceDesc)

  005d4	83 7c 24 28 00	 cmp	 DWORD PTR _deviceDesc$1$[esp+1608], 0
  005d9	f3 a4		 rep movsb
  005db	74 16		 je	 SHORT $LN27@EnumerateH

; 860  :             {
; 861  :                 strcat(leafName, " : ");

  005dd	8d 7c 24 58	 lea	 edi, DWORD PTR _leafName$[esp+1608]
  005e1	4f		 dec	 edi
$LL244@EnumerateH:
  005e2	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  005e5	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  005e8	84 c0		 test	 al, al
  005ea	75 f6		 jne	 SHORT $LL244@EnumerateH
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03MCPBMLDJ@?5?3?5@
  005f1	89 07		 mov	 DWORD PTR [edi], eax
$LN27@EnumerateH:

; 862  :             }
; 863  : 
; 864  :             memset(deviceInfo, 0x00, sizeof(deviceInfo));

  005f3	68 e8 03 00 00	 push	 1000			; 000003e8H
  005f8	8d 84 24 5c 02
	00 00		 lea	 eax, DWORD PTR _deviceInfo$[esp+1612]
  005ff	6a 00		 push	 0
  00601	50		 push	 eax
  00602	e8 00 00 00 00	 call	 _memset

; 865  :             if (info->ConnectionInfo->ConnectionStatus == DeviceConnected)

  00607	8b 74 24 2c	 mov	 esi, DWORD PTR _info$1$[esp+1620]
  0060b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0060e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00611	83 78 1f 01	 cmp	 DWORD PTR [eax+31], 1
  00615	0f 85 21 01 00
	00		 jne	 $LN28@EnumerateH

; 866  :             {
; 867  :                 PSTRING_DESCRIPTOR_NODE pDescNode = NULL;
; 868  : 
; 869  :                 //get speed of device - Low/Full/High
; 870  :                 memset(deviceSpeed, 0x0, 5);

  0061b	c6 44 24 54 00	 mov	 BYTE PTR _deviceSpeed$[esp+1612], 0

; 871  :                 strcpy(deviceSpeed, "???");

  00620	c7 44 24 50 3f
	3f 3f 00	 mov	 DWORD PTR _deviceSpeed$[esp+1608], 4144959 ; 003f3f3fH

; 872  : 
; 873  :                 if (info->ConnectionInfo->Speed == UsbHighSpeed)

  00628	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0062b	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0062e	3c 02		 cmp	 al, 2
  00630	75 10		 jne	 SHORT $LN30@EnumerateH

; 874  :                 {
; 875  :                     strcpy(deviceSpeed, "HIGH");

  00632	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04PKDHFCJF@HIGH@
  00637	89 44 24 50	 mov	 DWORD PTR _deviceSpeed$[esp+1608], eax
  0063b	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04PKDHFCJF@HIGH@+4
  00640	eb 20		 jmp	 SHORT $LN253@EnumerateH
$LN30@EnumerateH:

; 876  :                 }
; 877  :                 else if (info->ConnectionInfo->Speed == UsbLowSpeed)

  00642	84 c0		 test	 al, al
  00644	75 0a		 jne	 SHORT $LN32@EnumerateH

; 878  :                 {
; 879  :                     strcpy(deviceSpeed, "LOW");

  00646	c7 44 24 50 4c
	4f 57 00	 mov	 DWORD PTR _deviceSpeed$[esp+1608], 5721932 ; 00574f4cH
  0064e	eb 16		 jmp	 SHORT $LN34@EnumerateH
$LN32@EnumerateH:

; 880  :                 }
; 881  :                 else if (info->ConnectionInfo->Speed == UsbFullSpeed)

  00650	3c 01		 cmp	 al, 1
  00652	75 12		 jne	 SHORT $LN34@EnumerateH

; 882  :                 {
; 883  :                     strcpy(deviceSpeed, "FULL");

  00654	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04DHPBCODG@FULL@
  00659	89 44 24 50	 mov	 DWORD PTR _deviceSpeed$[esp+1608], eax
  0065d	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04DHPBCODG@FULL@+4
$LN253@EnumerateH:

; 884  :                 }
; 885  : 
; 886  :                 if (info->ConnectionInfo->DeviceDescriptor.iSerialNumber)

  00662	88 44 24 54	 mov	 BYTE PTR _deviceSpeed$[esp+1612], al
$LN34@EnumerateH:
  00666	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00669	8a 4a 14	 mov	 cl, BYTE PTR [edx+20]
  0066c	84 c9		 test	 cl, cl
  0066e	74 28		 je	 SHORT $LN35@EnumerateH

; 887  :                 {
; 888  :                     pDescNode = info->StringDescs;

  00670	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 889  :                     while (pDescNode)

  00673	85 c0		 test	 eax, eax
  00675	74 12		 je	 SHORT $LN38@EnumerateH
$LL7@EnumerateH:

; 890  :                     {
; 891  :                         if (pDescNode->DescriptorIndex == info->ConnectionInfo->DeviceDescriptor.iSerialNumber)

  00677	38 48 04	 cmp	 BYTE PTR [eax+4], cl
  0067a	74 06		 je	 SHORT $LN219@EnumerateH

; 892  :                             break;
; 893  :                         pDescNode = pDescNode->Next;

  0067c	8b 00		 mov	 eax, DWORD PTR [eax]
  0067e	85 c0		 test	 eax, eax
  00680	75 f5		 jne	 SHORT $LL7@EnumerateH
$LN219@EnumerateH:

; 894  :                     }
; 895  :                     // Modified to fix the SCR 3176
; 896  :                     if (pDescNode)
; 897  :                         _snprintf(deviceInfo, sizeof(deviceInfo) - 1, "%s [VID:%.4X PID:%.4X SN:%s Spd: %s]", deviceDesc,

  00682	8d 78 0a	 lea	 edi, DWORD PTR [eax+10]
  00685	85 c0		 test	 eax, eax
  00687	75 05		 jne	 SHORT $LN39@EnumerateH
$LN38@EnumerateH:

; 898  :                             info->ConnectionInfo->DeviceDescriptor.idVendor,
; 899  :                             info->ConnectionInfo->DeviceDescriptor.idProduct,
; 900  :                             (char const* )pDescNode->StringDescriptor->bString, deviceSpeed);
; 901  :                     else
; 902  :                         _snprintf(deviceInfo, sizeof(deviceInfo) - 1, "%s [VID:%.4X PID:%.4X SN:%s Spd: %s]", deviceDesc,

  00689	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@CGBIAJFO@Not?5Initialized@
$LN39@EnumerateH:

; 903  :                             info->ConnectionInfo->DeviceDescriptor.idVendor,
; 904  :                             info->ConnectionInfo->DeviceDescriptor.idProduct,
; 905  :                             "Not Initialized", deviceSpeed);
; 906  :                 }
; 907  :                 else

  0068e	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  00692	0f b7 52 0c	 movzx	 edx, WORD PTR [edx+12]
  00696	eb 15		 jmp	 SHORT $LN36@EnumerateH
$LN35@EnumerateH:

; 908  :                     _snprintf(deviceInfo, sizeof(deviceInfo) - 1, "%s [VID:%.4X PID:%.4X SN:%s Spd: %s]", deviceDesc,

  00698	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0069c	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_09CFCBFJND@Not?5Found@
  006a1	89 44 24 20	 mov	 DWORD PTR $T3[esp+1608], eax
  006a5	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  006a9	8b 54 24 20	 mov	 edx, DWORD PTR $T3[esp+1608]
$LN36@EnumerateH:

; 909  :                         info->ConnectionInfo->DeviceDescriptor.idVendor,
; 910  :                         info->ConnectionInfo->DeviceDescriptor.idProduct,
; 911  :                         "Not Found", deviceSpeed);
; 912  : 
; 913  :                 Log(LOG_MESSAGE, __LINE__, "%s%s%s", UsbViewIndent[NestedLevel], leafName, deviceInfo);

  006ad	8d 4c 24 50	 lea	 ecx, DWORD PTR _deviceSpeed$[esp+1608]
  006b1	0f b7 c0	 movzx	 eax, ax
  006b4	51		 push	 ecx
  006b5	57		 push	 edi
  006b6	50		 push	 eax
  006b7	0f b7 c2	 movzx	 eax, dx
  006ba	50		 push	 eax
  006bb	ff 74 24 38	 push	 DWORD PTR _deviceDesc$1$[esp+1624]
  006bf	8d 84 24 6c 02
	00 00		 lea	 eax, DWORD PTR _deviceInfo$[esp+1628]
  006c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LGIDNAEF@?$CFs?5?$FLVID?3?$CF?44X?5PID?3?$CF?44X?5SN?3?$CFs?5Spd@
  006cb	68 e7 03 00 00	 push	 999			; 000003e7H
  006d0	50		 push	 eax
  006d1	e8 00 00 00 00	 call	 __snprintf
  006d6	8b 7c 24 3c	 mov	 edi, DWORD PTR _this$GSCopy$1$[esp+1640]
  006da	8d 84 24 78 02
	00 00		 lea	 eax, DWORD PTR _deviceInfo$[esp+1640]
  006e1	50		 push	 eax
  006e2	8d 44 24 7c	 lea	 eax, DWORD PTR _leafName$[esp+1644]
  006e6	50		 push	 eax
  006e7	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  006ea	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?UsbViewIndent@@3PAPADA[eax*4]
  006f1	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
  006f6	68 91 03 00 00	 push	 913			; 00000391H
  006fb	6a 01		 push	 1
  006fd	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 914  : 
; 915  :                 PushBackDetails(deviceInfo);

  00702	8d 84 24 90 02
	00 00		 lea	 eax, DWORD PTR _deviceInfo$[esp+1664]
  00709	50		 push	 eax
  0070a	57		 push	 edi
  0070b	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 916  :                 if (info->ConnectionInfo)

  00710	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00713	83 c4 40	 add	 esp, 64			; 00000040H
  00716	85 c0		 test	 eax, eax
  00718	74 0b		 je	 SHORT $LN40@EnumerateH

; 917  :                     ConnectionInfo(info->ConnectionInfo, info->StringDescs);

  0071a	ff 76 10	 push	 DWORD PTR [esi+16]
  0071d	8b cf		 mov	 ecx, edi
  0071f	50		 push	 eax
  00720	e8 00 00 00 00	 call	 ?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::ConnectionInfo
$LN40@EnumerateH:

; 918  :                 if (info->ConfigDesc)

  00725	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00728	85 c0		 test	 eax, eax
  0072a	74 37		 je	 SHORT $LN29@EnumerateH

; 919  :                     ConfigDesc((PUSB_CONFIGURATION_DESCRIPTOR)(info->ConfigDesc + 1), info->StringDescs);

  0072c	ff 76 10	 push	 DWORD PTR [esi+16]
  0072f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00732	8b cf		 mov	 ecx, edi
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 ?ConfigDesc@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::ConfigDesc

; 920  :             }
; 921  :             else

  0073a	eb 27		 jmp	 SHORT $LN29@EnumerateH
$LN28@EnumerateH:

; 922  :             {
; 923  :                 Log(LOG_MESSAGE, __LINE__, "%s%s", UsbViewIndent[NestedLevel], leafName);

  0073c	8d 44 24 58	 lea	 eax, DWORD PTR _leafName$[esp+1608]
  00740	50		 push	 eax
  00741	8b 44 24 20	 mov	 eax, DWORD PTR _this$GSCopy$1$[esp+1612]
  00745	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00748	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?UsbViewIndent@@3PAPADA[eax*4]
  0074f	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
  00754	68 9b 03 00 00	 push	 923			; 0000039bH
  00759	6a 01		 push	 1
  0075b	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00760	83 c4 14	 add	 esp, 20			; 00000014H
$LN29@EnumerateH:

; 924  :             }
; 925  :             free(info);

  00763	56		 push	 esi
  00764	e8 00 00 00 00	 call	 _free
  00769	83 c4 04	 add	 esp, 4
$LN26@EnumerateH:

; 926  :             info = NULL;
; 927  :         }   //END: if(info)
; 928  : 
; 929  :         if (configDesc != NULL)

  0076c	8b 44 24 2c	 mov	 eax, DWORD PTR _configDesc$1$[esp+1608]
  00770	85 c0		 test	 eax, eax
  00772	74 09		 je	 SHORT $LN42@EnumerateH

; 930  :             free(configDesc);

  00774	50		 push	 eax
  00775	e8 00 00 00 00	 call	 _free
  0077a	83 c4 04	 add	 esp, 4
$LN42@EnumerateH:

; 931  : 
; 932  :         if (connectionInfo != NULL)
; 933  :             free(connectionInfo);

  0077d	8b 74 24 10	 mov	 esi, DWORD PTR _connectionInfo$1$[esp+1608]
  00781	56		 push	 esi
  00782	e8 00 00 00 00	 call	 _free
  00787	83 c4 04	 add	 esp, 4

; 934  : 
; 935  :         while (stringDescs != NULL)

  0078a	85 db		 test	 ebx, ebx
  0078c	74 13		 je	 SHORT $LN249@EnumerateH
  0078e	66 90		 npad	 2
$LL9@EnumerateH:

; 936  :         {
; 937  :             Next = stringDescs->Next;

  00790	8b 33		 mov	 esi, DWORD PTR [ebx]

; 938  :             free(stringDescs);

  00792	53		 push	 ebx
  00793	e8 00 00 00 00	 call	 _free
  00798	83 c4 04	 add	 esp, 4

; 939  :             stringDescs = Next;

  0079b	8b de		 mov	 ebx, esi
  0079d	85 f6		 test	 esi, esi
  0079f	75 ef		 jne	 SHORT $LL9@EnumerateH
$LN249@EnumerateH:

; 698  :     // Loop over all ports of the hub.
; 699  :     //
; 700  :     // Port indices are 1 based, not 0 based.
; 701  :     //
; 702  : 
; 703  :     // for (index=1; index <= NumPorts; index++)
; 704  :     for (index = 1; index <= NumPorts; index++)

  007a1	8b 7c 24 1c	 mov	 edi, DWORD PTR _this$GSCopy$1$[esp+1608]
$LN250@EnumerateH:
  007a5	8b 5c 24 14	 mov	 ebx, DWORD PTR _index$1$[esp+1608]
$LN2@EnumerateH:
  007a9	43		 inc	 ebx
  007aa	89 5c 24 14	 mov	 DWORD PTR _index$1$[esp+1608], ebx
  007ae	3b 5d 0c	 cmp	 ebx, DWORD PTR _NumPorts$[ebp]
  007b1	0f 86 eb f8 ff
	ff		 jbe	 $LL4@EnumerateH
  007b7	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
$LN3@EnumerateH:

; 940  :         }
; 941  :     }
; 942  : 
; 943  :     if (NestedLevel)			// only for prevent bugs

  007ba	85 c0		 test	 eax, eax
  007bc	74 04		 je	 SHORT $LN44@EnumerateH

; 944  :         NestedLevel--;

  007be	48		 dec	 eax
  007bf	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN44@EnumerateH:

; 945  : 
; 946  :     Log(LOG_DEBUG, __LINE__, "<< USB.EnumHubPorts");

  007c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LMILCJOE@?$DM?$DM?5USB?4EnumHubPorts@
  007c7	68 b2 03 00 00	 push	 946			; 000003b2H
  007cc	6a 10		 push	 16			; 00000010H
  007ce	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 947  : }

  007d3	8b 8c 24 50 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1620]
  007da	83 c4 0c	 add	 esp, 12			; 0000000cH
  007dd	5f		 pop	 edi
  007de	5e		 pop	 esi
  007df	5b		 pop	 ebx
  007e0	33 cc		 xor	 ecx, esp
  007e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007e7	8b e5		 mov	 esp, ebp
  007e9	5d		 pop	 ebp
  007ea	c2 08 00	 ret	 8
$LN11@EnumerateH:

; 747  :             }
; 748  :         }
; 749  :         else
; 750  :         {
; 751  :             Log(LOG_DEBUG, __LINE__, "-- USB.EnumHubPorts, new Port %d ConnInfo (%u) null", index, nBytes);

  007ed	53		 push	 ebx
  007ee	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@EKAJALEI@?9?9?5USB?4EnumHubPorts?0?5new?5Port?5?$CF@
  007f3	68 ef 02 00 00	 push	 751			; 000002efH
  007f8	6a 10		 push	 16			; 00000010H
  007fa	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  007ff	83 c4 14	 add	 esp, 20			; 00000014H

; 934  : 
; 935  :         while (stringDescs != NULL)

  00802	eb a5		 jmp	 SHORT $LN2@EnumerateH
?EnumerateHubPorts@USB@@IAEXPAXK@Z ENDP			; USB::EnumerateHubPorts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_devInst$ = -12						; size = 4
_devInstNext$ = -8					; size = 4
_len$ = -4						; size = 4
_DriverName$ = 8					; size = 4
?DriverNameToDeviceDesc@USB@@IAEPADPAD@Z PROC		; USB::DriverNameToDeviceDesc
; _this$ = ecx

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx

; 951  :     DEVINST     devInst = 0;
; 952  :     DEVINST     devInstNext = 0;
; 953  :     CONFIGRET   cr = 0;
; 954  :     ULONG       walkDone = 0;
; 955  :     ULONG       len = 0;
; 956  : 
; 957  :     Log(LOG_DEBUG, __LINE__, ">> USB.DrvName2DevDesc, Drv %s", DriverName);

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _DriverName$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	53		 push	 ebx
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KMJAGKHH@?$DO?$DO?5USB?4DrvName2DevDesc?0?5Drv?5?$CFs@
  00015	68 bd 03 00 00	 push	 957			; 000003bdH
  0001a	6a 10		 push	 16			; 00000010H
  0001c	8b f1		 mov	 esi, ecx
  0001e	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _devInst$[esp+40], 0
  00026	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _devInstNext$[esp+40], 0
  0002e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _len$[esp+40], 0
  00036	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 958  : 
; 959  :     // Get Root DevNode
; 960  :     //
; 961  :     cr = (*lpfnCM_Locate_DevNodeA)(&devInst, NULL, 0);

  0003b	8b 86 28 02 00
	00		 mov	 eax, DWORD PTR [esi+552]
  00041	8d 4c 24 1c	 lea	 ecx, DWORD PTR _devInst$[esp+40]
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	51		 push	 ecx
  0004d	ff d0		 call	 eax

; 962  :     if (cr != CR_SUCCESS)

  0004f	85 c0		 test	 eax, eax
  00051	74 20		 je	 SHORT $LN28@DriverName

; 963  :     {
; 964  :         Log(LOG_DEBUG, __LINE__, "<< USB.DrvName2DevDesc, LocateDevNote %u", cr);

  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PHHANNLH@?$DM?$DM?5USB?4DrvName2DevDesc?0?5LocateD@
  00059	68 c4 03 00 00	 push	 964			; 000003c4H
  0005e	6a 10		 push	 16			; 00000010H
  00060	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00065	83 c4 10	 add	 esp, 16			; 00000010H

; 1044 :     return NULL;
; 1045 : }

  00068	33 c0		 xor	 eax, eax
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN28@DriverName:
  00073	8b 4c 24 0c	 mov	 ecx, DWORD PTR _devInst$[esp+24]
  00077	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL2@DriverName:

; 965  :         return NULL;
; 966  :     }
; 967  : 
; 968  :     // Do a depth first search for the DevNode with a matching
; 969  :     // DriverName value
; 970  :     //
; 971  :     while (!walkDone)
; 972  :     {
; 973  :         // Get the DriverName value
; 974  :         //
; 975  :         len = sizeof(buf);
; 976  :         cr = (*lpfnCM_Get_DevNode_Registry_PropertyA)(devInst,

  00080	8b 86 24 02 00
	00		 mov	 eax, DWORD PTR [esi+548]
  00086	8d 54 24 14	 lea	 edx, DWORD PTR _len$[esp+24]
  0008a	6a 00		 push	 0
  0008c	52		 push	 edx
  0008d	57		 push	 edi
  0008e	6a 00		 push	 0
  00090	6a 0a		 push	 10			; 0000000aH
  00092	51		 push	 ecx
  00093	c7 44 24 2c 00
	02 00 00	 mov	 DWORD PTR _len$[esp+48], 512 ; 00000200H
  0009b	ff d0		 call	 eax

; 977  :             CM_DRP_DRIVER,
; 978  :             NULL,
; 979  :             buf,
; 980  :             &len,
; 981  :             0);
; 982  : 
; 983  :         // If the DriverName value matches, return the DeviceDescription
; 984  :         //
; 985  :         if (cr == CR_SUCCESS && strcmp(DriverName, buf) == 0)

  0009d	85 c0		 test	 eax, eax
  0009f	75 2d		 jne	 SHORT $LN23@DriverName
  000a1	8b c7		 mov	 eax, edi
  000a3	8b cb		 mov	 ecx, ebx
$LL31@DriverName:
  000a5	8a 11		 mov	 dl, BYTE PTR [ecx]
  000a7	3a 10		 cmp	 dl, BYTE PTR [eax]
  000a9	75 1a		 jne	 SHORT $LN32@DriverName
  000ab	84 d2		 test	 dl, dl
  000ad	74 12		 je	 SHORT $LN33@DriverName
  000af	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000b2	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000b5	75 0e		 jne	 SHORT $LN32@DriverName
  000b7	83 c1 02	 add	 ecx, 2
  000ba	83 c0 02	 add	 eax, 2
  000bd	84 d2		 test	 dl, dl
  000bf	75 e4		 jne	 SHORT $LL31@DriverName
$LN33@DriverName:
  000c1	33 c0		 xor	 eax, eax
  000c3	eb 05		 jmp	 SHORT $LN34@DriverName
$LN32@DriverName:
  000c5	1b c0		 sbb	 eax, eax
  000c7	83 c8 01	 or	 eax, 1
$LN34@DriverName:
  000ca	85 c0		 test	 eax, eax
  000cc	74 76		 je	 SHORT $LN20@DriverName
$LN23@DriverName:

; 1003 :                 return NULL;
; 1004 :             }
; 1005 :         }
; 1006 : 
; 1007 :         // This DevNode didn't match, go down a level to the first child.
; 1008 :         //
; 1009 :         cr = (*lpfnCM_Get_Child)(&devInstNext, devInst, 0);

  000ce	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  000d4	8d 4c 24 10	 lea	 ecx, DWORD PTR _devInstNext$[esp+24]
  000d8	6a 00		 push	 0
  000da	ff 74 24 10	 push	 DWORD PTR _devInst$[esp+28]
  000de	51		 push	 ecx
  000df	ff d0		 call	 eax

; 1010 :         if (cr == CR_SUCCESS)

  000e1	85 c0		 test	 eax, eax
  000e3	74 52		 je	 SHORT $LN19@DriverName

; 1011 :         {
; 1012 :             devInst = devInstNext;
; 1013 :             continue;
; 1014 :         }
; 1015 : 
; 1016 :         // Can't go down any further, go across to the next sibling.  If
; 1017 :         // there are no more siblings, go back up until there is a sibling.
; 1018 :         // If we can't go up any further, we're back at the root and we're
; 1019 :         // done.
; 1020 :         //
; 1021 :         for (;;)
; 1022 :         {
; 1023 :             cr = (*lpfnCM_Get_Sibling)(&devInstNext, devInst, 0);

  000e5	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]
  000eb	8d 4c 24 10	 lea	 ecx, DWORD PTR _devInstNext$[esp+24]
  000ef	6a 00		 push	 0
  000f1	ff 74 24 10	 push	 DWORD PTR _devInst$[esp+28]
  000f5	51		 push	 ecx
  000f6	ff d0		 call	 eax

; 1024 :             if (cr == CR_SUCCESS)

  000f8	85 c0		 test	 eax, eax
  000fa	74 3b		 je	 SHORT $LN19@DriverName
  000fc	0f 1f 40 00	 npad	 4
$LL4@DriverName:

; 1027 :                 break;
; 1028 :             }
; 1029 : 
; 1030 :             cr = (*lpfnCM_Get_Parent)(&devInstNext, devInst, 0);

  00100	8b 86 18 02 00
	00		 mov	 eax, DWORD PTR [esi+536]
  00106	8d 4c 24 10	 lea	 ecx, DWORD PTR _devInstNext$[esp+24]
  0010a	6a 00		 push	 0
  0010c	ff 74 24 10	 push	 DWORD PTR _devInst$[esp+28]
  00110	51		 push	 ecx
  00111	ff d0		 call	 eax

; 1031 :             if (cr == CR_SUCCESS)

  00113	85 c0		 test	 eax, eax
  00115	0f 85 8d 00 00
	00		 jne	 $LN3@DriverName

; 1032 :             {
; 1033 :                 devInst = devInstNext;

  0011b	8b 44 24 10	 mov	 eax, DWORD PTR _devInstNext$[esp+24]
  0011f	8b 8e 1c 02 00
	00		 mov	 ecx, DWORD PTR [esi+540]
  00125	6a 00		 push	 0
  00127	50		 push	 eax
  00128	89 44 24 14	 mov	 DWORD PTR _devInst$[esp+32], eax
  0012c	8d 44 24 18	 lea	 eax, DWORD PTR _devInstNext$[esp+32]
  00130	50		 push	 eax
  00131	ff d1		 call	 ecx
  00133	85 c0		 test	 eax, eax
  00135	75 c9		 jne	 SHORT $LL4@DriverName
$LN19@DriverName:

; 1025 :             {
; 1026 :                 devInst = devInstNext;

  00137	8b 4c 24 10	 mov	 ecx, DWORD PTR _devInstNext$[esp+24]
  0013b	89 4c 24 0c	 mov	 DWORD PTR _devInst$[esp+24], ecx
  0013f	e9 3c ff ff ff	 jmp	 $LL2@DriverName
$LN20@DriverName:

; 986  :         {
; 987  :             len = sizeof(buf);
; 988  :             cr = (*lpfnCM_Get_DevNode_Registry_PropertyA)(devInst,

  00144	8b 86 24 02 00
	00		 mov	 eax, DWORD PTR [esi+548]
  0014a	8d 4c 24 14	 lea	 ecx, DWORD PTR _len$[esp+24]
  0014e	6a 00		 push	 0
  00150	51		 push	 ecx
  00151	57		 push	 edi
  00152	6a 00		 push	 0
  00154	6a 01		 push	 1
  00156	ff 74 24 20	 push	 DWORD PTR _devInst$[esp+44]
  0015a	c7 44 24 2c 00
	02 00 00	 mov	 DWORD PTR _len$[esp+48], 512 ; 00000200H
  00162	ff d0		 call	 eax

; 989  :                 CM_DRP_DEVICEDESC,
; 990  :                 NULL,
; 991  :                 buf,
; 992  :                 &len,
; 993  :                 0);
; 994  : 
; 995  :             if (cr == CR_SUCCESS)

  00164	85 c0		 test	 eax, eax
  00166	75 20		 jne	 SHORT $LN9@DriverName

; 996  :             {
; 997  :                 Log(LOG_DEBUG, __LINE__, "<< USB.DrvName2DevDesc, ret %s", buf);

  00168	57		 push	 edi
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GGDOIMOO@?$DM?$DM?5USB?4DrvName2DevDesc?0?5ret?5?$CFs@
  0016e	68 e5 03 00 00	 push	 997			; 000003e5H
  00173	6a 10		 push	 16			; 00000010H
  00175	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0017a	83 c4 10	 add	 esp, 16			; 00000010H

; 998  :                 return buf;

  0017d	8b c7		 mov	 eax, edi

; 1044 :     return NULL;
; 1045 : }

  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 04 00	 ret	 4
$LN9@DriverName:

; 999  :             }
; 1000 :             else
; 1001 :             {
; 1002 :                 Log(LOG_DEBUG, __LINE__, "<< USB.DrvName2DevDesc, GetDevNodeRegProps %u", cr);

  00188	50		 push	 eax
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@BAPAALJK@?$DM?$DM?5USB?4DrvName2DevDesc?0?5GetDevN@
  0018e	68 ea 03 00 00	 push	 1002			; 000003eaH
  00193	6a 10		 push	 16			; 00000010H
  00195	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0019a	83 c4 10	 add	 esp, 16			; 00000010H

; 1044 :     return NULL;
; 1045 : }

  0019d	33 c0		 xor	 eax, eax
  0019f	5f		 pop	 edi
  001a0	5e		 pop	 esi
  001a1	5b		 pop	 ebx
  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c2 04 00	 ret	 4
$LN3@DriverName:

; 1034 :             }
; 1035 :             else
; 1036 :             {
; 1037 :                 walkDone = 1;
; 1038 :                 break;
; 1039 :             }
; 1040 :         }
; 1041 :     }
; 1042 : 
; 1043 :     Log(LOG_DEBUG, __LINE__, "<< USB.DrvName2DevDesc, Ret Null");

  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OFAOPKJL@?$DM?$DM?5USB?4DrvName2DevDesc?0?5Ret?5Nul@
  001ad	68 13 04 00 00	 push	 1043			; 00000413H
  001b2	6a 10		 push	 16			; 00000010H
  001b4	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1044 :     return NULL;
; 1045 : }

  001bc	33 c0		 xor	 eax, eax
  001be	5f		 pop	 edi
  001bf	5e		 pop	 esi
  001c0	5b		 pop	 ebx
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c2 04 00	 ret	 4
?DriverNameToDeviceDesc@USB@@IAEPADPAD@Z ENDP		; USB::DriverNameToDeviceDesc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_this$GSCopy$1$ = -572					; size = 4
_nBytes$ = -568						; size = 4
_hHubDevice$1$ = -564					; size = 4
_HubName$GSCopy$1$ = -560				; size = 4
_info$1$ = -556						; size = 4
_deviceName$2 = -552					; size = 24
_leafName$3 = -528					; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_HubName$ = 8						; size = 4
_ConnectionInfo$ = 12					; size = 4
_ConfigDesc$ = 16					; size = 4
_StringDescs$ = 20					; size = 4
_DeviceDesc$ = 24					; size = 4
?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z PROC ; USB::EnumerateHub
; _this$ = ecx

; 1048 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 02 00
	00		 sub	 esp, 560		; 00000230H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d c4 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 45 08	 mov	 eax, DWORD PTR _HubName$[ebp]
  00037	8b 7d 0c	 mov	 edi, DWORD PTR _ConnectionInfo$[ebp]
  0003a	8b 5d 18	 mov	 ebx, DWORD PTR _DeviceDesc$[ebp]

; 1049 :     HANDLE          hHubDevice = NULL;
; 1050 :     ULONG           nBytes = 0;
; 1051 : 
; 1052 :     Log(LOG_DEBUG, __LINE__, ">> USB.EnumHub");

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JENLAABL@?$DO?$DO?5USB?4EnumHub@
  00042	68 1c 04 00 00	 push	 1052			; 0000041cH
  00047	6a 10		 push	 16			; 00000010H
  00049	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _HubName$GSCopy$1$[ebp], eax
  0004f	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _nBytes$[ebp], 0
  00059	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1053 : 
; 1054 :     // Allocate some space for a USBDEVICEINFO structure to hold the
; 1055 :     // hub info, hub name, and connection info pointers.  GPTR zero
; 1056 :     // initializes the structure for us.
; 1057 :     //
; 1058 :     PUSBDEVICEINFO info = (PUSBDEVICEINFO)malloc(sizeof(USBDEVICEINFO));

  0005e	6a 14		 push	 20			; 00000014H
  00060	e8 00 00 00 00	 call	 _malloc
  00065	8b f0		 mov	 esi, eax
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	89 b5 d4 fd ff
	ff		 mov	 DWORD PTR _info$1$[ebp], esi

; 1059 :     if (info)

  00070	85 f6		 test	 esi, esi
  00072	0f 84 e1 02 00
	00		 je	 $LN2@EnumerateH

; 1060 :     {
; 1061 :         memset(info, 0x00, sizeof(USBDEVICEINFO));
; 1062 : 
; 1063 :         // Keep copies of the Hub Name, Connection Info, and Configuration
; 1064 :         // Descriptor pointers
; 1065 :         //
; 1066 :         info->HubName = HubName;

  00078	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _HubName$GSCopy$1$[ebp]
  0007e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00084	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1067 :         info->ConnectionInfo = ConnectionInfo;
; 1068 :         info->ConfigDesc = ConfigDesc;

  00087	8b 45 10	 mov	 eax, DWORD PTR _ConfigDesc$[ebp]
  0008a	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1069 :         info->StringDescs = StringDescs;

  0008d	8b 45 14	 mov	 eax, DWORD PTR _StringDescs$[ebp]

; 1070 : 
; 1071 :         // Allocate some space for a USB_NODE_INFORMATION structure for this Hub,
; 1072 :         //
; 1073 :         info->HubInfo = (PUSB_NODE_INFORMATION)malloc(sizeof(USB_NODE_INFORMATION));

  00090	6a 4c		 push	 76			; 0000004cH
  00092	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00095	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00098	e8 00 00 00 00	 call	 _malloc
  0009d	83 c4 04	 add	 esp, 4
  000a0	89 06		 mov	 DWORD PTR [esi], eax

; 1074 :         if (info->HubInfo)

  000a2	6a 4c		 push	 76			; 0000004cH
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 8e 02 00
	00		 je	 $LN4@EnumerateH

; 1075 :         {
; 1076 :             memset(info->HubInfo, 0x00, sizeof(USB_NODE_INFORMATION));

  000ac	6a 00		 push	 0
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _memset
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  000b7	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _deviceName$2[ebp+16], 0

; 1785 : 		_Myres(0)

  000c1	c7 85 ec fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _deviceName$2[ebp+20], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000cb	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _deviceName$2[ebp]

; 3976 : 		_My_data._Mysize = 0;

  000d1	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _deviceName$2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000db	c7 85 ec fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _deviceName$2[ebp+20], 15 ; 0000000fH

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000e5	6a 04		 push	 4
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDIODIA@?2?2?4?2@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000ec	c6 85 d8 fd ff
	ff 00		 mov	 BYTE PTR _deviceName$2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000f3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1078 :             std::string deviceName{ "\\\\.\\" };

  000f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2527 : 		return (append(_Ptr));

  000ff	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _deviceName$2[ebp]
  00105	ff b5 d0 fd ff
	ff		 push	 DWORD PTR _HubName$GSCopy$1$[ebp]
  0010b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00110	83 bd ec fd ff
	ff 10		 cmp	 DWORD PTR _deviceName$2[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00117	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _deviceName$2[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1081 :             hHubDevice = CreateFile(deviceName.c_str(),

  0011d	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0011f	0f 43 85 d8 fd
	ff ff		 cmovae	 eax, DWORD PTR _deviceName$2[ebp]
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1081 :             hHubDevice = CreateFile(deviceName.c_str(),

  00126	6a 00		 push	 0
  00128	6a 03		 push	 3
  0012a	6a 00		 push	 0
  0012c	6a 02		 push	 2
  0012e	68 00 00 00 40	 push	 1073741824		; 40000000H
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0013a	89 85 cc fd ff
	ff		 mov	 DWORD PTR _hHubDevice$1$[ebp], eax

; 1082 :                 GENERIC_WRITE,
; 1083 :                 FILE_SHARE_WRITE,
; 1084 :                 NULL,
; 1085 :                 OPEN_EXISTING,
; 1086 :                 0,
; 1087 :                 NULL);
; 1088 : 
; 1089 :             if (hHubDevice != INVALID_HANDLE_VALUE)

  00140	83 f8 ff	 cmp	 eax, -1
  00143	0f 84 6d 01 00
	00		 je	 $LN6@EnumerateH

; 1090 :             {
; 1091 :                 //
; 1092 :                 // Now query USBHUB for the USB_NODE_INFORMATION structure for this hub.
; 1093 :                 // This will tell us the number of downstream ports to enumerate, among
; 1094 :                 // other things.
; 1095 :                 //
; 1096 :                 BOOL success = DeviceIoControl(hHubDevice,

  00149	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014b	8d 95 c8 fd ff
	ff		 lea	 edx, DWORD PTR _nBytes$[ebp]
  00151	6a 00		 push	 0
  00153	52		 push	 edx
  00154	6a 4c		 push	 76			; 0000004cH
  00156	51		 push	 ecx
  00157	6a 4c		 push	 76			; 0000004cH
  00159	51		 push	 ecx
  0015a	68 08 04 22 00	 push	 2229256			; 00220408H
  0015f	50		 push	 eax
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1097 :                     IOCTL_USB_GET_NODE_INFORMATION,
; 1098 :                     info->HubInfo,
; 1099 :                     sizeof(USB_NODE_INFORMATION),
; 1100 :                     info->HubInfo,
; 1101 :                     sizeof(USB_NODE_INFORMATION),
; 1102 :                     &nBytes,
; 1103 :                     NULL);
; 1104 : 
; 1105 :                 if (success)

  00166	85 c0		 test	 eax, eax
  00168	0f 84 3b 01 00
	00		 je	 $LN133@EnumerateH

; 1106 :                 {
; 1107 :                     // Build the leaf name from the port number and the device description
; 1108 :                     //
; 1109 :                     CHAR leafName[512] = { 0 };

  0016e	68 00 02 00 00	 push	 512			; 00000200H
  00173	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _leafName$3[ebp]
  00179	6a 00		 push	 0
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _memset
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1110 :                     if (ConnectionInfo)

  00184	85 ff		 test	 edi, edi
  00186	74 77		 je	 SHORT $LN8@EnumerateH

; 1111 :                     {
; 1112 :                         wsprintf(leafName, "[Port%lu] ", ConnectionInfo->ConnectionIndex);

  00188	ff 37		 push	 DWORD PTR [edi]
  0018a	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _leafName$3[ebp]
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KFNJHJLN@?$FLPort?$CFlu?$FN?5@
  00195	50		 push	 eax
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 1113 :                         strcat(leafName, ConnectionStatuses[ConnectionInfo->ConnectionStatus]);

  0019c	8b 47 1f	 mov	 eax, DWORD PTR [edi+31]
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a2	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?ConnectionStatuses@@3PAPADA[eax*4]
  001a9	8b f2		 mov	 esi, edx
  001ab	0f 1f 44 00 00	 npad	 5
$LL126@EnumerateH:
  001b0	8a 02		 mov	 al, BYTE PTR [edx]
  001b2	42		 inc	 edx
  001b3	84 c0		 test	 al, al
  001b5	75 f9		 jne	 SHORT $LL126@EnumerateH
  001b7	8d bd f0 fd ff
	ff		 lea	 edi, DWORD PTR _leafName$3[ebp]
  001bd	2b d6		 sub	 edx, esi
  001bf	4f		 dec	 edi
$LL127@EnumerateH:
  001c0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  001c3	47		 inc	 edi
  001c4	84 c0		 test	 al, al
  001c6	75 f8		 jne	 SHORT $LL127@EnumerateH
  001c8	8b ca		 mov	 ecx, edx
  001ca	c1 e9 02	 shr	 ecx, 2
  001cd	f3 a5		 rep movsd
  001cf	8b ca		 mov	 ecx, edx
  001d1	83 e1 03	 and	 ecx, 3
  001d4	f3 a4		 rep movsb

; 1114 :                         strcat(leafName, " :  ");

  001d6	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _leafName$3[ebp]
  001dc	49		 dec	 ecx
  001dd	0f 1f 00	 npad	 3
$LL128@EnumerateH:
  001e0	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  001e3	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  001e6	84 c0		 test	 al, al
  001e8	75 f6		 jne	 SHORT $LL128@EnumerateH
  001ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04MKEDFNGB@?5?3?5?5@
  001ef	8b b5 d4 fd ff
	ff		 mov	 esi, DWORD PTR _info$1$[ebp]
  001f5	89 01		 mov	 DWORD PTR [ecx], eax
  001f7	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04MKEDFNGB@?5?3?5?5@+4
  001fc	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN8@EnumerateH:

; 1115 :                     }
; 1116 : 
; 1117 :                     if (DeviceDesc != NULL)

  001ff	85 db		 test	 ebx, ebx
  00201	74 33		 je	 SHORT $LN9@EnumerateH

; 1118 :                         strcat(leafName, DeviceDesc);

  00203	8b f3		 mov	 esi, ebx
$LL129@EnumerateH:
  00205	8a 03		 mov	 al, BYTE PTR [ebx]
  00207	43		 inc	 ebx
  00208	84 c0		 test	 al, al
  0020a	75 f9		 jne	 SHORT $LL129@EnumerateH
  0020c	8d bd f0 fd ff
	ff		 lea	 edi, DWORD PTR _leafName$3[ebp]
  00212	2b de		 sub	 ebx, esi
  00214	4f		 dec	 edi
$LL130@EnumerateH:
  00215	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00218	47		 inc	 edi
  00219	84 c0		 test	 al, al
  0021b	75 f8		 jne	 SHORT $LL130@EnumerateH
  0021d	8b cb		 mov	 ecx, ebx
  0021f	c1 e9 02	 shr	 ecx, 2
  00222	f3 a5		 rep movsd
  00224	8b cb		 mov	 ecx, ebx
  00226	83 e1 03	 and	 ecx, 3
  00229	f3 a4		 rep movsb
  0022b	8b b5 d4 fd ff
	ff		 mov	 esi, DWORD PTR _info$1$[ebp]
  00231	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]

; 1119 :                     else

  00234	eb 36		 jmp	 SHORT $LN10@EnumerateH
$LN9@EnumerateH:

; 1120 :                         strcat(leafName, info->HubName);

  00236	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00239	8b d3		 mov	 edx, ebx
  0023b	8b f3		 mov	 esi, ebx
  0023d	0f 1f 00	 npad	 3
$LL131@EnumerateH:
  00240	8a 02		 mov	 al, BYTE PTR [edx]
  00242	42		 inc	 edx
  00243	84 c0		 test	 al, al
  00245	75 f9		 jne	 SHORT $LL131@EnumerateH
  00247	8d bd f0 fd ff
	ff		 lea	 edi, DWORD PTR _leafName$3[ebp]
  0024d	2b d6		 sub	 edx, esi
  0024f	4f		 dec	 edi
$LL132@EnumerateH:
  00250	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00253	47		 inc	 edi
  00254	84 c0		 test	 al, al
  00256	75 f8		 jne	 SHORT $LL132@EnumerateH
  00258	8b ca		 mov	 ecx, edx
  0025a	c1 e9 02	 shr	 ecx, 2
  0025d	f3 a5		 rep movsd
  0025f	8b ca		 mov	 ecx, edx
  00261	83 e1 03	 and	 ecx, 3
  00264	f3 a4		 rep movsb
  00266	8b b5 d4 fd ff
	ff		 mov	 esi, DWORD PTR _info$1$[ebp]
$LN10@EnumerateH:

; 1121 : 
; 1122 :                     // Now recursively enumerate the ports of this hub.
; 1123 :                     //
; 1124 :                     PushBackDetails(info->HubName);

  0026c	53		 push	 ebx
  0026d	8b 9d c4 fd ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00273	53		 push	 ebx
  00274	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1125 :                     HubInfo(&info->HubInfo->u.HubInformation);

  00279	8b 06		 mov	 eax, DWORD PTR [esi]
  0027b	83 c4 08	 add	 esp, 8
  0027e	83 c0 04	 add	 eax, 4
  00281	8b cb		 mov	 ecx, ebx
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 ?HubInfo@USB@@IAEXPAU_USB_HUB_INFORMATION@@@Z ; USB::HubInfo

; 1126 :                     EnumerateHubPorts(hHubDevice,

  00289	8b 06		 mov	 eax, DWORD PTR [esi]
  0028b	8b cb		 mov	 ecx, ebx
  0028d	8b bd cc fd ff
	ff		 mov	 edi, DWORD PTR _hHubDevice$1$[ebp]
  00293	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  00297	50		 push	 eax
  00298	57		 push	 edi
  00299	e8 00 00 00 00	 call	 ?EnumerateHubPorts@USB@@IAEXPAXK@Z ; USB::EnumerateHubPorts

; 1127 :                         info->HubInfo->u.HubInformation.HubDescriptor.bNumberOfPorts);
; 1128 : 
; 1129 :                     wPortsNumber += info->HubInfo->u.HubInformation.HubDescriptor.bNumberOfPorts;

  0029e	8b 06		 mov	 eax, DWORD PTR [esi]
  002a0	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  002a4	66 01 03	 add	 WORD PTR [ebx], ax
  002a7	eb 06		 jmp	 SHORT $LN7@EnumerateH
$LN133@EnumerateH:

; 1097 :                     IOCTL_USB_GET_NODE_INFORMATION,
; 1098 :                     info->HubInfo,
; 1099 :                     sizeof(USB_NODE_INFORMATION),
; 1100 :                     info->HubInfo,
; 1101 :                     sizeof(USB_NODE_INFORMATION),
; 1102 :                     &nBytes,
; 1103 :                     NULL);
; 1104 : 
; 1105 :                 if (success)

  002a9	8b bd cc fd ff
	ff		 mov	 edi, DWORD PTR _hHubDevice$1$[ebp]
$LN7@EnumerateH:

; 1130 :                 }
; 1131 :                 CloseHandle(hHubDevice);

  002af	57		 push	 edi
  002b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN6@EnumerateH:

; 1132 :             }
; 1133 :             //
; 1134 :             // Clean up any stuff that got allocated
; 1135 :             //
; 1136 :             free(HubName);

  002b6	ff b5 d0 fd ff
	ff		 push	 DWORD PTR _HubName$GSCopy$1$[ebp]
  002bc	e8 00 00 00 00	 call	 _free

; 1137 : 
; 1138 :             if (info->HubInfo != NULL)

  002c1	8b 06		 mov	 eax, DWORD PTR [esi]
  002c3	83 c4 04	 add	 esp, 4
  002c6	85 c0		 test	 eax, eax
  002c8	74 09		 je	 SHORT $LN11@EnumerateH

; 1139 :                 free(info->HubInfo);

  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 _free
  002d0	83 c4 04	 add	 esp, 4
$LN11@EnumerateH:

; 1140 :         }

  002d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002da	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _deviceName$2[ebp+20]
  002e0	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  002e3	72 2f		 jb	 SHORT $LN111@EnumerateH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e5	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _deviceName$2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  002eb	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002ec	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  002ee	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002f4	72 14		 jb	 SHORT $LN110@EnumerateH

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  002f6	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002f9	83 c2 23	 add	 edx, 35			; 00000023H
  002fc	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002fe	83 c0 fc	 add	 eax, -4			; fffffffcH
  00301	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00304	0f 87 97 00 00
	00		 ja	 $LN137@EnumerateH
$LN110@EnumerateH:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0030a	52		 push	 edx
  0030b	51		 push	 ecx
  0030c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00311	83 c4 08	 add	 esp, 8
$LN111@EnumerateH:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1145 :         free(info);

  00314	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00315	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _deviceName$2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0031f	c7 85 ec fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _deviceName$2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00329	c6 85 d8 fd ff
	ff 00		 mov	 BYTE PTR _deviceName$2[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1145 :         free(info);

  00330	e8 00 00 00 00	 call	 _free
  00335	83 c4 04	 add	 esp, 4

; 1146 :     }
; 1147 :     else

  00338	eb 35		 jmp	 SHORT $LN3@EnumerateH
$LN4@EnumerateH:

; 1141 :         else
; 1142 :         {
; 1143 :             Log(LOG_DEBUG, __LINE__, "-- USB.EnumHub, new HubInfo (%u) null", sizeof(USB_NODE_INFORMATION));

  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FMONKKAG@?9?9?5USB?4EnumHub?0?5new?5HubInfo?5?$CI?$CFu@
  0033f	68 77 04 00 00	 push	 1143			; 00000477H
  00344	6a 10		 push	 16			; 00000010H
  00346	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0034b	83 c4 10	 add	 esp, 16			; 00000010H

; 1145 :         free(info);

  0034e	56		 push	 esi
  0034f	e8 00 00 00 00	 call	 _free
  00354	83 c4 04	 add	 esp, 4

; 1146 :     }
; 1147 :     else

  00357	eb 16		 jmp	 SHORT $LN3@EnumerateH
$LN2@EnumerateH:

; 1148 :     {
; 1149 :         Log(LOG_DEBUG, __LINE__, "-- USB.EnumHub, new Info (%u) null", sizeof(USBDEVICEINFO));

  00359	6a 14		 push	 20			; 00000014H
  0035b	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EDMNKMD@?9?9?5USB?4EnumHub?0?5new?5Info?5?$CI?$CFu?$CJ?5n@
  00360	68 7d 04 00 00	 push	 1149			; 0000047dH
  00365	6a 10		 push	 16			; 00000010H
  00367	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0036c	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@EnumerateH:

; 1150 :     }
; 1151 :     Log(LOG_DEBUG, __LINE__, "<< USB.EnumHub");

  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NNDDHFCH@?$DM?$DM?5USB?4EnumHub@
  00374	68 7f 04 00 00	 push	 1151			; 0000047fH
  00379	6a 10		 push	 16			; 00000010H
  0037b	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00380	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1153 : }

  00383	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00386	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038d	59		 pop	 ecx
  0038e	5f		 pop	 edi
  0038f	5e		 pop	 esi
  00390	5b		 pop	 ebx
  00391	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00394	33 cd		 xor	 ecx, ebp
  00396	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039b	8b e5		 mov	 esp, ebp
  0039d	5d		 pop	 ebp
  0039e	c2 14 00	 ret	 20			; 00000014H
$LN137@EnumerateH:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN135@EnumerateH:
  003a6	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z$0:
  00000	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _deviceName$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-576]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EnumerateHub@USB@@IAEXPADPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_USB_DESCRIPTOR_REQUEST@@PAU_STRING_DESCRIPTOR_NODE@@0@Z ENDP ; USB::EnumerateHub
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_nBytes$ = -16						; size = 4
_rootHubName$ = -12					; size = 6
__$ArrayPad$ = -4					; size = 4
_HostController$ = 8					; size = 4
?GetRootHubName@USB@@IAEPADPAX@Z PROC			; USB::GetRootHubName
; _this$dead$ = ecx

; 1156 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 10	 mov	 DWORD PTR __$ArrayPad$[esp+20], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _HostController$[ebp]
  00018	56		 push	 esi
  00019	57		 push	 edi

; 1157 :     BOOL                success;
; 1158 :     ULONG               nBytes = 0;
; 1159 :     USB_ROOT_HUB_NAME   rootHubName;
; 1160 :     PUSB_ROOT_HUB_NAME  rootHubNameW = NULL;
; 1161 :     PCHAR               rootHubNameA = NULL;
; 1162 : 
; 1163 :     Log(LOG_DEBUG, __LINE__, ">> USB.GetRootHub");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMOMHHM@?$DO?$DO?5USB?4GetRootHub@
  0001f	68 8b 04 00 00	 push	 1163			; 0000048bH
  00024	6a 10		 push	 16			; 00000010H
  00026	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _nBytes$[esp+44], 0
  0002e	33 ff		 xor	 edi, edi
  00030	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1164 : 
; 1165 :     memset(&rootHubName, 0x00, sizeof(rootHubName));

  00038	33 c0		 xor	 eax, eax
  0003a	89 44 24 14	 mov	 DWORD PTR _rootHubName$[esp+32], eax
  0003e	66 89 44 24 18	 mov	 WORD PTR _rootHubName$[esp+36], ax

; 1166 : 
; 1167 :     // Get the length of the name of the Root Hub attached to the
; 1168 :     // Host Controller
; 1169 :     //
; 1170 :     success = DeviceIoControl(HostController,

  00043	50		 push	 eax
  00044	8d 44 24 14	 lea	 eax, DWORD PTR _nBytes$[esp+36]
  00048	50		 push	 eax
  00049	6a 06		 push	 6
  0004b	8d 44 24 20	 lea	 eax, DWORD PTR _rootHubName$[esp+44]
  0004f	50		 push	 eax
  00050	57		 push	 edi
  00051	57		 push	 edi
  00052	68 08 04 22 00	 push	 2229256			; 00220408H
  00057	53		 push	 ebx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1171 :         IOCTL_USB_GET_ROOT_HUB_NAME,
; 1172 :         0,
; 1173 :         0,
; 1174 :         &rootHubName,
; 1175 :         sizeof(rootHubName),
; 1176 :         &nBytes,
; 1177 :         NULL);
; 1178 :     if (success)

  0005e	85 c0		 test	 eax, eax
  00060	74 55		 je	 SHORT $LN3@GetRootHub

; 1179 :     {
; 1180 :         // Allocate space to hold the Root Hub name
; 1181 :         //
; 1182 :         nBytes = rootHubName.ActualLength;

  00062	8b 44 24 14	 mov	 eax, DWORD PTR _rootHubName$[esp+32]

; 1183 : 
; 1184 :         rootHubNameW = (struct _USB_ROOT_HUB_NAME *)malloc(nBytes);

  00066	50		 push	 eax
  00067	89 44 24 14	 mov	 DWORD PTR _nBytes$[esp+36], eax
  0006b	e8 00 00 00 00	 call	 _malloc
  00070	8b f0		 mov	 esi, eax
  00072	83 c4 04	 add	 esp, 4

; 1185 :         if (rootHubNameW)

  00075	85 f6		 test	 esi, esi
  00077	74 3e		 je	 SHORT $LN3@GetRootHub

; 1186 :         {
; 1187 :             memset(rootHubNameW, 0x00, nBytes);

  00079	ff 74 24 10	 push	 DWORD PTR _nBytes$[esp+32]
  0007d	57		 push	 edi
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _memset
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1188 : 
; 1189 :             // Get the name of the Root Hub attached to the Host Controller
; 1190 :             //
; 1191 :             success = DeviceIoControl(HostController,

  00087	8d 44 24 10	 lea	 eax, DWORD PTR _nBytes$[esp+32]
  0008b	57		 push	 edi
  0008c	50		 push	 eax
  0008d	ff 74 24 18	 push	 DWORD PTR _nBytes$[esp+40]
  00091	56		 push	 esi
  00092	57		 push	 edi
  00093	57		 push	 edi
  00094	68 08 04 22 00	 push	 2229256			; 00220408H
  00099	53		 push	 ebx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1192 :                 IOCTL_USB_GET_ROOT_HUB_NAME,
; 1193 :                 NULL,
; 1194 :                 0,
; 1195 :                 rootHubNameW,
; 1196 :                 nBytes,
; 1197 :                 &nBytes,
; 1198 :                 NULL);
; 1199 : 
; 1200 :             if (success)

  000a0	85 c0		 test	 eax, eax
  000a2	74 0a		 je	 SHORT $LN4@GetRootHub

; 1201 :             {
; 1202 :                 // Convert the Root Hub name
; 1203 :                 //
; 1204 :                 rootHubNameA = WideStrToMultiStr(rootHubNameW->RootHubName);

  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000a7	e8 00 00 00 00	 call	 ?WideStrToMultiStr@@YAPADPA_W@Z ; WideStrToMultiStr
  000ac	8b f8		 mov	 edi, eax
$LN4@GetRootHub:

; 1205 :             }
; 1206 :             free(rootHubNameW);

  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 _free
  000b4	83 c4 04	 add	 esp, 4
$LN3@GetRootHub:

; 1207 :         }
; 1208 :     }
; 1209 :     Log(LOG_DEBUG, __LINE__, "<< USB.GetRootHub, HubName %s", rootHubNameA);

  000b7	57		 push	 edi
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MFMFEBEJ@?$DM?$DM?5USB?4GetRootHub?0?5HubName?5?$CFs@
  000bd	68 b9 04 00 00	 push	 1209			; 000004b9H
  000c2	6a 10		 push	 16			; 00000010H
  000c4	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1210 :     return rootHubNameA;
; 1211 : }

  000c9	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+48]
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	8b c7		 mov	 eax, edi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	33 cc		 xor	 ecx, esp
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 04 00	 ret	 4
?GetRootHubName@USB@@IAEPADPAX@Z ENDP			; USB::GetRootHubName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_nBytes$ = -16						; size = 4
_driverKeyName$ = -12					; size = 6
__$ArrayPad$ = -4					; size = 4
_HCD$ = 8						; size = 4
?GetHCDDriverKeyName@USB@@IAEPADPAX@Z PROC		; USB::GetHCDDriverKeyName
; _this$dead$ = ecx

; 1214 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 10	 mov	 DWORD PTR __$ArrayPad$[esp+20], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _HCD$[ebp]
  00018	56		 push	 esi
  00019	57		 push	 edi

; 1215 :     BOOL                    success;
; 1216 :     ULONG                   nBytes = 0;
; 1217 :     USB_HCD_DRIVERKEY_NAME  driverKeyName;
; 1218 :     PUSB_HCD_DRIVERKEY_NAME driverKeyNameW = NULL;
; 1219 :     PCHAR                   driverKeyNameA = NULL;
; 1220 : 
; 1221 :     Log(LOG_DEBUG, __LINE__, ">> USB.GetHCDDrvKeyName");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LFJMJGOI@?$DO?$DO?5USB?4GetHCDDrvKeyName@
  0001f	68 c5 04 00 00	 push	 1221			; 000004c5H
  00024	6a 10		 push	 16			; 00000010H
  00026	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _nBytes$[esp+44], 0
  0002e	33 ff		 xor	 edi, edi
  00030	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1222 : 
; 1223 :     // Get the length of the name of the driver key of the HCD
; 1224 :     //
; 1225 :     memset(&driverKeyName, 0, sizeof(driverKeyName));

  00038	33 c0		 xor	 eax, eax
  0003a	89 44 24 14	 mov	 DWORD PTR _driverKeyName$[esp+32], eax
  0003e	66 89 44 24 18	 mov	 WORD PTR _driverKeyName$[esp+36], ax

; 1226 :     success = DeviceIoControl(HCD,

  00043	50		 push	 eax
  00044	8d 44 24 14	 lea	 eax, DWORD PTR _nBytes$[esp+36]
  00048	50		 push	 eax
  00049	6a 06		 push	 6
  0004b	8d 44 24 20	 lea	 eax, DWORD PTR _driverKeyName$[esp+44]
  0004f	50		 push	 eax
  00050	6a 06		 push	 6
  00052	50		 push	 eax
  00053	68 24 04 22 00	 push	 2229284			; 00220424H
  00058	53		 push	 ebx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1227 :         IOCTL_GET_HCD_DRIVERKEY_NAME,
; 1228 :         &driverKeyName,
; 1229 :         sizeof(driverKeyName),
; 1230 :         &driverKeyName,
; 1231 :         sizeof(driverKeyName),
; 1232 :         &nBytes,
; 1233 :         NULL);
; 1234 :     if (success)

  0005f	85 c0		 test	 eax, eax
  00061	74 5b		 je	 SHORT $LN4@GetHCDDriv

; 1235 :     {
; 1236 : 
; 1237 :         // Allocate space to hold the driver key name
; 1238 :         //
; 1239 :         nBytes = driverKeyName.ActualLength;

  00063	8b 44 24 14	 mov	 eax, DWORD PTR _driverKeyName$[esp+32]
  00067	89 44 24 10	 mov	 DWORD PTR _nBytes$[esp+32], eax

; 1240 : 
; 1241 :         if (nBytes > sizeof(driverKeyName))

  0006b	83 f8 06	 cmp	 eax, 6
  0006e	76 4e		 jbe	 SHORT $LN4@GetHCDDriv

; 1242 :         {
; 1243 :             driverKeyNameW = (struct _USB_HCD_DRIVERKEY_NAME *)malloc(nBytes);

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _malloc
  00076	8b f0		 mov	 esi, eax
  00078	83 c4 04	 add	 esp, 4

; 1244 :             if (driverKeyNameW)

  0007b	85 f6		 test	 esi, esi
  0007d	74 3f		 je	 SHORT $LN4@GetHCDDriv

; 1245 :             {
; 1246 :                 memset(driverKeyNameW, 0x00, nBytes);

  0007f	ff 74 24 10	 push	 DWORD PTR _nBytes$[esp+32]
  00083	57		 push	 edi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 _memset
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1247 : 
; 1248 :                 // Get the name of the driver key of the device attached to
; 1249 :                 // the specified port.
; 1250 :                 //
; 1251 :                 success = DeviceIoControl(HCD,

  0008d	8d 44 24 10	 lea	 eax, DWORD PTR _nBytes$[esp+32]
  00091	57		 push	 edi
  00092	50		 push	 eax
  00093	8b 44 24 18	 mov	 eax, DWORD PTR _nBytes$[esp+40]
  00097	50		 push	 eax
  00098	56		 push	 esi
  00099	50		 push	 eax
  0009a	56		 push	 esi
  0009b	68 24 04 22 00	 push	 2229284			; 00220424H
  000a0	53		 push	 ebx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1252 :                     IOCTL_GET_HCD_DRIVERKEY_NAME,
; 1253 :                     driverKeyNameW,
; 1254 :                     nBytes,
; 1255 :                     driverKeyNameW,
; 1256 :                     nBytes,
; 1257 :                     &nBytes,
; 1258 :                     NULL);
; 1259 : 
; 1260 :                 if (success)

  000a7	85 c0		 test	 eax, eax
  000a9	74 0a		 je	 SHORT $LN5@GetHCDDriv

; 1261 :                 {
; 1262 :                     // Convert the driver key name
; 1263 :                     //
; 1264 :                     driverKeyNameA = WideStrToMultiStr(driverKeyNameW->DriverKeyName);

  000ab	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000ae	e8 00 00 00 00	 call	 ?WideStrToMultiStr@@YAPADPA_W@Z ; WideStrToMultiStr
  000b3	8b f8		 mov	 edi, eax
$LN5@GetHCDDriv:

; 1265 :                 }
; 1266 :                 free(driverKeyNameW);

  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 _free
  000bb	83 c4 04	 add	 esp, 4
$LN4@GetHCDDriv:

; 1267 :             }
; 1268 :         }
; 1269 :     }
; 1270 :     Log(LOG_DEBUG, __LINE__, "<< USB.GetHCDDrvKeyName, DrvKeyName %s", driverKeyNameA);

  000be	57		 push	 edi
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GAKGEKMO@?$DM?$DM?5USB?4GetHCDDrvKeyName?0?5DrvKey@
  000c4	68 f6 04 00 00	 push	 1270			; 000004f6H
  000c9	6a 10		 push	 16			; 00000010H
  000cb	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1271 :     return driverKeyNameA;
; 1272 : }

  000d0	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+48]
  000d4	83 c4 10	 add	 esp, 16			; 00000010H
  000d7	8b c7		 mov	 eax, edi
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	33 cc		 xor	 ecx, esp
  000de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
?GetHCDDriverKeyName@USB@@IAEPADPAX@Z ENDP		; USB::GetHCDDriverKeyName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_hHubDevice$GSCopy$1$ = -332				; size = 4
_i$1$ = -328						; size = 4
_nBytesReturned$2 = -324				; size = 4
_LanguageID$1$ = -320					; size = 4
_nBytes$1$ = -320					; size = 4
tv603 = -314						; size = 4
$T3 = -312						; size = 24
_stringDescReqBuf$4 = -288				; size = 267
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hHubDevice$ = 8					; size = 4
_ConnectionIndex$ = 12					; size = 4
_DescriptorIndex$ = 16					; size = 1
_NumLanguageIDs$ = 20					; size = 4
_LanguageIDs$ = 24					; size = 4
_StringDescNodeTail$ = 28				; size = 4
?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z PROC ; USB::GetStringDescriptors
; _this$dead$ = ecx

; 1275 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 08	 mov	 eax, DWORD PTR _hHubDevice$[ebp]
  00031	8b 75 1c	 mov	 esi, DWORD PTR _StringDescNodeTail$[ebp]

; 1276 :     ULONG i;
; 1277 : 
; 1278 :     Log(LOG_DEBUG, __LINE__, ">> USB.GetStrDescs");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HEHGMECG@?$DO?$DO?5USB?4GetStrDescs@
  00039	68 fe 04 00 00	 push	 1278			; 000004feH
  0003e	6a 10		 push	 16			; 00000010H
  00040	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _hHubDevice$GSCopy$1$[ebp], eax
  00046	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1279 : 
; 1280 :     for (i = 0; i < NumLanguageIDs; i++)

  0004e	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00058	83 7d 14 00	 cmp	 DWORD PTR _NumLanguageIDs$[ebp], 0
  0005c	0f 86 22 03 00
	00		 jbe	 $LN94@GetStringD
  00062	0f b6 7d 10	 movzx	 edi, BYTE PTR _DescriptorIndex$[ebp]
  00066	b8 00 03 00 00	 mov	 eax, 768		; 00000300H
  0006b	66 0b f8	 or	 di, ax
  0006e	66 89 bd c6 fe
	ff ff		 mov	 WORD PTR tv603[ebp], di
  00075	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@GetStringD:

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  00080	8b 45 18	 mov	 eax, DWORD PTR _LanguageIDs$[ebp]

; 219  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetStrDesc");

  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OBKJMAF@?$DO?$DO?5USB?4GetStrDesc@
  00088	68 db 00 00 00	 push	 219			; 000000dbH
  0008d	6a 10		 push	 16			; 00000010H

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  0008f	0f b7 18	 movzx	 ebx, WORD PTR [eax]
  00092	89 9d c0 fe ff
	ff		 mov	 DWORD PTR _LanguageID$1$[ebp], ebx

; 217  :     ULONG   nBytesReturned = 0;

  00098	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nBytesReturned$2[ebp], 0

; 218  : 
; 219  :     Log(LOG_DEBUG, __LINE__, ">> USB.GetStrDesc");

  000a2	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  : 
; 221  :     UCHAR   stringDescReqBuf[sizeof(USB_DESCRIPTOR_REQUEST) + MAXIMUM_USB_STRING_LENGTH];
; 222  : 
; 223  :     PSTRING_DESCRIPTOR_NODE stringDescNode = NULL;
; 224  : 
; 225  :     nBytes = sizeof(stringDescReqBuf);
; 226  : 
; 227  :     PUSB_DESCRIPTOR_REQUEST stringDescReq = (PUSB_DESCRIPTOR_REQUEST)stringDescReqBuf;
; 228  :     PUSB_STRING_DESCRIPTOR stringDesc = (PUSB_STRING_DESCRIPTOR)(stringDescReq + 1);
; 229  : 
; 230  :     // Zero fill the entire request structure
; 231  :     //
; 232  :     memset(stringDescReq, 0, nBytes);

  000aa	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$4[ebp]
  000b0	68 0b 01 00 00	 push	 267			; 0000010bH
  000b5	6a 00		 push	 0
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _memset

; 233  : 
; 234  :     // Indicate the port from which the descriptor will be requested
; 235  :     //
; 236  :     stringDescReq->ConnectionIndex = ConnectionIndex;

  000bd	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c3	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _stringDescReqBuf$4[ebp], eax

; 237  : 
; 238  :     //
; 239  :     // USBHUB uses URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE to process this
; 240  :     // IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION request.
; 241  :     //
; 242  :     // USBD will automatically initialize these fields:
; 243  :     //     bmRequest = 0x80
; 244  :     //     bRequest  = 0x06
; 245  :     //
; 246  :     // We must inititialize these fields:
; 247  :     //     wValue    = Descriptor Type (high) and Descriptor Index (low byte)
; 248  :     //     wIndex    = Zero (or Language ID for String Descriptors)
; 249  :     //     wLength   = Length of descriptor buffer
; 250  :     //
; 251  :     stringDescReq->SetupPacket.wValue = (USB_STRING_DESCRIPTOR_TYPE << 8)
; 252  :         | DescriptorIndex;
; 253  : 
; 254  :     stringDescReq->SetupPacket.wIndex = LanguageID;
; 255  : 
; 256  :     stringDescReq->SetupPacket.wLength = (USHORT)(nBytes - sizeof(USB_DESCRIPTOR_REQUEST));

  000c9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000ce	66 89 85 ea fe
	ff ff		 mov	 WORD PTR _stringDescReqBuf$4[ebp+10], ax

; 257  : 
; 258  :     // Now issue the get descriptor request.
; 259  :     //
; 260  :     success = DeviceIoControl(hHubDevice,

  000d5	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _nBytesReturned$2[ebp]
  000db	66 89 bd e6 fe
	ff ff		 mov	 WORD PTR _stringDescReqBuf$4[ebp+6], di
  000e2	6a 00		 push	 0
  000e4	50		 push	 eax
  000e5	68 0b 01 00 00	 push	 267			; 0000010bH
  000ea	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$4[ebp]
  000f0	66 89 9d e8 fe
	ff ff		 mov	 WORD PTR _stringDescReqBuf$4[ebp+8], bx
  000f7	50		 push	 eax
  000f8	68 0b 01 00 00	 push	 267			; 0000010bH
  000fd	50		 push	 eax
  000fe	68 10 04 22 00	 push	 2229264			; 00220410H
  00103	ff b5 b4 fe ff
	ff		 push	 DWORD PTR _hHubDevice$GSCopy$1$[ebp]
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 261  :         IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION,
; 262  :         stringDescReq,
; 263  :         nBytes,
; 264  :         stringDescReq,
; 265  :         nBytes,
; 266  :         &nBytesReturned,
; 267  :         NULL);
; 268  : 
; 269  :     //
; 270  :     // Do some sanity checks on the return from the get descriptor request.
; 271  :     //
; 272  : 
; 273  :     if (!success)

  0010f	85 c0		 test	 eax, eax
  00111	75 1f		 jne	 SHORT $LN8@GetStringD

; 274  :     {
; 275  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, DeviceIoControl False");

  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@MLNPNNOJ@?$DM?$DM?5USB?4GetStrDesc?0?5DeviceIoCont@
  00118	68 13 01 00 00	 push	 275			; 00000113H
  0011d	6a 10		 push	 16			; 00000010H
  0011f	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  00127	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 276  :         return NULL;

  0012d	e9 38 02 00 00	 jmp	 $LN5@GetStringD
$LN8@GetStringD:

; 277  :     }
; 278  : 
; 279  :     if (nBytesReturned < 2)

  00132	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _nBytesReturned$2[ebp]
  00138	83 f8 02	 cmp	 eax, 2
  0013b	73 1d		 jae	 SHORT $LN9@GetStringD

; 280  :     {
; 281  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Bytes Ret %u", nBytesReturned);

  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKPBCDKN@?$DM?$DM?5USB?4GetStrDesc?0?5Bytes?5Ret?5?$CFu@
  00143	68 19 01 00 00	 push	 281			; 00000119H
  00148	6a 10		 push	 16			; 00000010H
  0014a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  0014f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 282  :         return NULL;

  00155	e9 0d 02 00 00	 jmp	 $LN97@GetStringD
$LN9@GetStringD:

; 283  :     }
; 284  : 
; 285  :     if (stringDesc->bDescriptorType != USB_STRING_DESCRIPTOR_TYPE)

  0015a	8a 8d ed fe ff
	ff		 mov	 cl, BYTE PTR _stringDescReqBuf$4[ebp+13]
  00160	80 f9 03	 cmp	 cl, 3
  00163	74 20		 je	 SHORT $LN10@GetStringD

; 286  :     {
; 287  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Inv DescriptorTp %d", stringDesc->bDescriptorType);

  00165	0f b6 c1	 movzx	 eax, cl
  00168	50		 push	 eax
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@ELGGMNKC@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Descript@
  0016e	68 1f 01 00 00	 push	 287			; 0000011fH
  00173	6a 10		 push	 16			; 00000010H
  00175	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  0017a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 288  :         return NULL;

  00180	e9 e2 01 00 00	 jmp	 $LN97@GetStringD
$LN10@GetStringD:

; 289  :     }
; 290  : 
; 291  :     if (stringDesc->bLength != nBytesReturned - sizeof(USB_DESCRIPTOR_REQUEST))

  00185	8d 48 f4	 lea	 ecx, DWORD PTR [eax-12]
  00188	0f b6 85 ec fe
	ff ff		 movzx	 eax, BYTE PTR _stringDescReqBuf$4[ebp+12]
  0018f	3b c1		 cmp	 eax, ecx
  00191	74 21		 je	 SHORT $LN11@GetStringD

; 292  :     {
; 293  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Inv Sz %d <> %d", (int)stringDesc->bLength, nBytesReturned - sizeof(USB_DESCRIPTOR_REQUEST));

  00193	51		 push	 ecx
  00194	50		 push	 eax
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CHKNKAPD@?$DM?$DM?5USB?4GetStrDesc?0?5Inv?5Sz?5?$CFd?5?$DM?$DO@
  0019a	68 25 01 00 00	 push	 293			; 00000125H
  0019f	6a 10		 push	 16			; 00000010H
  001a1	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001a6	83 c4 14	 add	 esp, 20			; 00000014H

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  001a9	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 294  :         return NULL;

  001af	e9 b6 01 00 00	 jmp	 $LN5@GetStringD
$LN11@GetStringD:

; 295  :     }
; 296  : 
; 297  :     if (stringDesc->bLength % 2 != 0)

  001b4	a8 01		 test	 al, 1
  001b6	74 1d		 je	 SHORT $LN12@GetStringD

; 298  :     {
; 299  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, Odd Sz %d", (int)stringDesc->bLength);

  001b8	50		 push	 eax
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ILBIFDNN@?$DM?$DM?5USB?4GetStrDesc?0?5Odd?5Sz?5?$CFd@
  001be	68 2b 01 00 00	 push	 299			; 0000012bH
  001c3	6a 10		 push	 16			; 00000010H
  001c5	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  001ca	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 300  :         return NULL;

  001d0	e9 92 01 00 00	 jmp	 $LN97@GetStringD
$LN12@GetStringD:

; 301  :     }
; 302  : 
; 303  :     //
; 304  :     // Looks good, allocate some (zero filled) space for the string descriptor
; 305  :     // node and copy the string descriptor to it.
; 306  :     //
; 307  : 
; 308  :     stringDescNode = (PSTRING_DESCRIPTOR_NODE)malloc(sizeof(STRING_DESCRIPTOR_NODE) + stringDesc->bLength);

  001d5	83 c0 08	 add	 eax, 8
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 _malloc
  001de	8b f8		 mov	 edi, eax
  001e0	83 c4 04	 add	 esp, 4

; 309  : 
; 310  :     if (stringDescNode == NULL)

  001e3	85 ff		 test	 edi, edi
  001e5	75 22		 jne	 SHORT $LN13@GetStringD

; 311  :     {
; 312  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, new DescNode null");

  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BKJLPKEL@?$DM?$DM?5USB?4GetStrDesc?0?5new?5DescNode@
  001ec	68 38 01 00 00	 push	 312			; 00000138H
  001f1	6a 10		 push	 16			; 00000010H
  001f3	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  001f8	89 3e		 mov	 DWORD PTR [esi], edi

; 312  :         Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, new DescNode null");

  001fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 313  :         return NULL;

  001fd	66 8b bd c6 fe
	ff ff		 mov	 di, WORD PTR tv603[ebp]
  00204	e9 61 01 00 00	 jmp	 $LN5@GetStringD
$LN13@GetStringD:

; 314  :     }
; 315  : 
; 316  :     memset(stringDescNode, 0x00, sizeof(STRING_DESCRIPTOR_NODE) + stringDesc->bLength);

  00209	0f b6 85 ec fe
	ff ff		 movzx	 eax, BYTE PTR _stringDescReqBuf$4[ebp+12]
  00210	83 c0 08	 add	 eax, 8
  00213	50		 push	 eax
  00214	6a 00		 push	 0
  00216	57		 push	 edi
  00217	e8 00 00 00 00	 call	 _memset

; 317  : 
; 318  :     stringDescNode->DescriptorIndex = DescriptorIndex;

  0021c	8a 45 10	 mov	 al, BYTE PTR _DescriptorIndex$[ebp]
  0021f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00222	88 47 04	 mov	 BYTE PTR [edi+4], al

; 319  :     stringDescNode->LanguageID = LanguageID;

  00225	66 89 5f 06	 mov	 WORD PTR [edi+6], bx

; 320  : 
; 321  :     memcpy(stringDescNode->StringDescriptor, stringDesc, stringDesc->bLength);

  00229	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0022c	0f b6 85 ec fe
	ff ff		 movzx	 eax, BYTE PTR _stringDescReqBuf$4[ebp+12]
  00233	50		 push	 eax
  00234	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$4[ebp+12]
  0023a	50		 push	 eax
  0023b	53		 push	 ebx
  0023c	e8 00 00 00 00	 call	 _memcpy
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH

; 322  : 
; 323  :     if (LanguageID)

  00244	66 83 bd c0 fe
	ff ff 00	 cmp	 WORD PTR _LanguageID$1$[ebp], 0
  0024c	0f 84 f8 00 00
	00		 je	 $LN16@GetStringD

; 324  :     {
; 325  :         nBytes = WideCharToMultiByte(

  00252	6a 00		 push	 0
  00254	6a 00		 push	 0
  00256	68 0b 01 00 00	 push	 267			; 0000010bH
  0025b	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$4[ebp]
  00261	50		 push	 eax
  00262	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00265	8d 4f 0a	 lea	 ecx, DWORD PTR [edi+10]
  00268	83 e8 02	 sub	 eax, 2
  0026b	99		 cdq
  0026c	2b c2		 sub	 eax, edx
  0026e	d1 f8		 sar	 eax, 1
  00270	50		 push	 eax
  00271	51		 push	 ecx
  00272	6a 00		 push	 0
  00274	6a 00		 push	 0
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0027c	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _nBytes$1$[ebp], eax

; 326  :             CP_ACP,     // CodePage
; 327  :             0,          // CodePage
; 328  :             stringDescNode->StringDescriptor->bString,
; 329  :             (stringDescNode->StringDescriptor->bLength - 2) / 2,
; 330  :             (char *)stringDescReqBuf,
; 331  :             sizeof(USB_DESCRIPTOR_REQUEST) + MAXIMUM_USB_STRING_LENGTH,
; 332  :             NULL,       // lpDefaultChar
; 333  :             NULL);      // pUsedDefaultChar
; 334  :         if (!nBytes)

  00282	85 c0		 test	 eax, eax
  00284	0f 85 95 00 00
	00		 jne	 $LN15@GetStringD

; 336  :             Log(LOG_DEBUG, __LINE__, "-- USB.GetStrDesc, WideCharToMultiByte %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00290	8b d0		 mov	 edx, eax
  00292	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00298	e8 00 00 00 00	 call	 ?win_error_code_to_str@dgi@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; dgi::win_error_code_to_str
  0029d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002a4	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  002a8	72 02		 jb	 SHORT $LN26@GetStringD
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  002aa	8b 00		 mov	 eax, DWORD PTR [eax]
$LN26@GetStringD:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 336  :             Log(LOG_DEBUG, __LINE__, "-- USB.GetStrDesc, WideCharToMultiByte %s", dgi::win_error_code_to_str(GetLastError()).c_str());

  002ac	50		 push	 eax
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NJJDPDGO@?9?9?5USB?4GetStrDesc?0?5WideCharToMu@
  002b2	68 50 01 00 00	 push	 336			; 00000150H
  002b7	6a 10		 push	 16			; 00000010H
  002b9	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  002be	83 c4 10	 add	 esp, 16			; 00000010H
  002c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002c8	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR $T3[ebp+20]
  002ce	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  002d1	72 2f		 jb	 SHORT $LN74@GetStringD
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002d3	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  002d9	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002da	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  002dc	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002e2	72 14		 jb	 SHORT $LN73@GetStringD

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  002e4	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002e7	83 c2 23	 add	 edx, 35			; 00000023H
  002ea	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ec	83 c0 fc	 add	 eax, -4			; fffffffcH
  002ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002f2	0f 87 c1 00 00
	00		 ja	 $LN70@GetStringD
$LN73@GetStringD:

; 207  : 	::operator delete(_Ptr, _Bytes);

  002f8	52		 push	 edx
  002f9	51		 push	 ecx
  002fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ff	83 c4 08	 add	 esp, 8
$LN74@GetStringD:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00302	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0030c	c7 85 dc fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00316	c6 85 c8 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 338  :         else

  0031d	eb 2b		 jmp	 SHORT $LN16@GetStringD
$LN15@GetStringD:

; 339  :         {
; 340  :             memset(stringDescNode->StringDescriptor->bString, 0x00, (stringDescNode->StringDescriptor->bLength - 2));

  0031f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00322	8d 5f 0a	 lea	 ebx, DWORD PTR [edi+10]
  00325	83 e8 02	 sub	 eax, 2
  00328	50		 push	 eax
  00329	6a 00		 push	 0
  0032b	53		 push	 ebx
  0032c	e8 00 00 00 00	 call	 _memset
  00331	83 c4 0c	 add	 esp, 12			; 0000000cH

; 341  :             memcpy(stringDescNode->StringDescriptor->bString, stringDescReqBuf, nBytes);

  00334	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _stringDescReqBuf$4[ebp]
  0033a	ff b5 c0 fe ff
	ff		 push	 DWORD PTR _nBytes$1$[ebp]
  00340	50		 push	 eax
  00341	53		 push	 ebx
  00342	e8 00 00 00 00	 call	 _memcpy
  00347	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@GetStringD:

; 342  :         }
; 343  :     }
; 344  :     Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDesc, DescNode 0x%p", stringDescNode);

  0034a	57		 push	 edi
  0034b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LADAJLND@?$DM?$DM?5USB?4GetStrDesc?0?5DescNode?50x?$CF@
  00350	68 58 01 00 00	 push	 344			; 00000158H
  00355	6a 10		 push	 16			; 00000010H
  00357	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1281 :     {
; 1282 :         StringDescNodeTail->Next = GetStringDescriptor(hHubDevice,

  0035c	89 3e		 mov	 DWORD PTR [esi], edi

; 1283 :             ConnectionIndex,
; 1284 :             DescriptorIndex,
; 1285 :             *LanguageIDs);
; 1286 : 
; 1287 :         if (StringDescNodeTail->Next)
; 1288 :         {
; 1289 :             StringDescNodeTail = StringDescNodeTail->Next;

  0035e	8b f7		 mov	 esi, edi
  00360	66 8b bd c6 fe
	ff ff		 mov	 di, WORD PTR tv603[ebp]
$LN97@GetStringD:

; 1290 :         }
; 1291 : 
; 1292 :         LanguageIDs++;

  00367	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@GetStringD:

; 1279 : 
; 1280 :     for (i = 0; i < NumLanguageIDs; i++)

  0036a	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]

; 1290 :         }
; 1291 : 
; 1292 :         LanguageIDs++;

  00370	83 45 18 02	 add	 DWORD PTR _LanguageIDs$[ebp], 2
  00374	40		 inc	 eax
  00375	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  0037b	3b 45 14	 cmp	 eax, DWORD PTR _NumLanguageIDs$[ebp]
  0037e	0f 82 fc fc ff
	ff		 jb	 $LL4@GetStringD
$LN94@GetStringD:

; 1293 :     }
; 1294 : 
; 1295 :     Log(LOG_DEBUG, __LINE__, "<< USB.GetStrDescs, StrDescNodeTail 0x%p", StringDescNodeTail);

  00384	56		 push	 esi
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OCOKNHIB@?$DM?$DM?5USB?4GetStrDescs?0?5StrDescNode@
  0038a	68 0f 05 00 00	 push	 1295			; 0000050fH
  0038f	6a 10		 push	 16			; 00000010H
  00391	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00396	83 c4 10	 add	 esp, 16			; 00000010H

; 1296 :     return StringDescNodeTail;

  00399	8b c6		 mov	 eax, esi

; 1297 : }

  0039b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0039e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003a5	59		 pop	 ecx
  003a6	5f		 pop	 edi
  003a7	5e		 pop	 esi
  003a8	5b		 pop	 ebx
  003a9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ac	33 cd		 xor	 ecx, ebp
  003ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b3	8b e5		 mov	 esp, ebp
  003b5	5d		 pop	 ebp
  003b6	c2 18 00	 ret	 24			; 00000018H
$LN70@GetStringD:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003b9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@GetStringD:
  003be	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z$0:
  00000	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a ac fe ff
	ff		 mov	 ecx, DWORD PTR [edx-340]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetStringDescriptors@USB@@IAEPAU_STRING_DESCRIPTOR_NODE@@PAXKEKPAGPAU2@@Z ENDP ; USB::GetStringDescriptors
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_hHubDevice$GSCopy$1$ = -36				; size = 4
_nBytesReturned$ = -32					; size = 4
_configDescReqBuf$ = -28				; size = 21
__$ArrayPad$ = -4					; size = 4
_hHubDevice$ = 8					; size = 4
_ConnectionIndex$ = 12					; size = 4
_DescriptorIndex$dead$ = 16				; size = 1
?GetConfigDescriptor@USB@@IAEPAU_USB_DESCRIPTOR_REQUEST@@PAXKE@Z PROC ; USB::GetConfigDescriptor
; _this$dead$ = ecx

; 1300 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _hHubDevice$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1301 :     UCHAR   configDescReqBuf[sizeof(USB_DESCRIPTOR_REQUEST) + sizeof(USB_CONFIGURATION_DESCRIPTOR)];
; 1302 : 
; 1303 :     Log(LOG_DEBUG, __LINE__, ">> USB.GetCfgDesc");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NBPLLDOB@?$DO?$DO?5USB?4GetCfgDesc@
  0001b	68 17 05 00 00	 push	 1303			; 00000517H
  00020	6a 10		 push	 16			; 00000010H
  00022	89 5d dc	 mov	 DWORD PTR _hHubDevice$GSCopy$1$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1304 : 
; 1305 :     // Request the Configuration Descriptor the first time using our
; 1306 :     // local buffer, which is just big enough for the Cofiguration
; 1307 :     // Descriptor itself.
; 1308 :     //
; 1309 :     ULONG nBytes = sizeof(configDescReqBuf);
; 1310 : 
; 1311 :     PUSB_DESCRIPTOR_REQUEST configDescReq = (PUSB_DESCRIPTOR_REQUEST)configDescReqBuf;
; 1312 :     PUSB_CONFIGURATION_DESCRIPTOR configDesc = (PUSB_CONFIGURATION_DESCRIPTOR)(configDescReq + 1);
; 1313 : 
; 1314 :     // Zero fill the entire request structure
; 1315 :     //
; 1316 :     memset(configDescReq, 0x00, nBytes);
; 1317 : 
; 1318 :     // Indicate the port from which the descriptor will be requested
; 1319 :     //
; 1320 :     configDescReq->ConnectionIndex = ConnectionIndex;

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _configDescReqBuf$[ebp+16], 0
  0003a	0f 11 45 e4	 movups	 XMMWORD PTR _configDescReqBuf$[ebp], xmm0
  0003e	89 45 e4	 mov	 DWORD PTR _configDescReqBuf$[ebp], eax

; 1321 : 
; 1322 :     //
; 1323 :     // USBHUB uses URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE to process this
; 1324 :     // IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION request.
; 1325 :     //
; 1326 :     // USBD will automatically initialize these fields:
; 1327 :     //     bmRequest = 0x80
; 1328 :     //     bRequest  = 0x06
; 1329 :     //
; 1330 :     // We must inititialize these fields:
; 1331 :     //     wValue    = Descriptor Type (high) and Descriptor Index (low byte)
; 1332 :     //     wIndex    = Zero (or Language ID for String Descriptors)
; 1333 :     //     wLength   = Length of descriptor buffer
; 1334 :     //
; 1335 :     configDescReq->SetupPacket.wValue = (USB_CONFIGURATION_DESCRIPTOR_TYPE << 8)

  00041	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00046	66 89 45 ea	 mov	 WORD PTR _configDescReqBuf$[ebp+6], ax

; 1336 :         | DescriptorIndex;
; 1337 : 
; 1338 :     configDescReq->SetupPacket.wLength = (USHORT)(nBytes - sizeof(USB_DESCRIPTOR_REQUEST));

  0004a	b8 09 00 00 00	 mov	 eax, 9

; 1339 : 
; 1340 :     // Now issue the get descriptor request.
; 1341 :     //
; 1342 :     ULONG   nBytesReturned = 0;
; 1343 :     BOOL success = DeviceIoControl(hHubDevice,

  0004f	6a 00		 push	 0
  00051	66 89 45 ee	 mov	 WORD PTR _configDescReqBuf$[ebp+10], ax
  00055	8d 45 e0	 lea	 eax, DWORD PTR _nBytesReturned$[ebp]
  00058	50		 push	 eax
  00059	6a 15		 push	 21			; 00000015H
  0005b	8d 45 e4	 lea	 eax, DWORD PTR _configDescReqBuf$[ebp]
  0005e	c6 45 f8 00	 mov	 BYTE PTR _configDescReqBuf$[ebp+20], 0
  00062	50		 push	 eax
  00063	6a 15		 push	 21			; 00000015H
  00065	50		 push	 eax
  00066	68 10 04 22 00	 push	 2229264			; 00220410H
  0006b	53		 push	 ebx
  0006c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nBytesReturned$[ebp], 0
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1344 :         IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION,
; 1345 :         configDescReq,
; 1346 :         nBytes,
; 1347 :         configDescReq,
; 1348 :         nBytes,
; 1349 :         &nBytesReturned,
; 1350 :         NULL);
; 1351 : 
; 1352 :     if (!success)

  00079	85 c0		 test	 eax, eax
  0007b	75 29		 jne	 SHORT $LN2@GetConfigD

; 1353 :     {
; 1354 :         Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, DeviceIoControl False");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JPCNJMBL@?$DM?$DM?5USB?4GetCfgDesc?0?5DeviceIoCont@
  00082	68 4a 05 00 00	 push	 1354			; 0000054aH
  00087	6a 10		 push	 16			; 00000010H
  00089	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1355 :         return NULL;

  00091	33 c0		 xor	 eax, eax

; 1441 :     return configDescReq;
; 1442 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetConfigD:

; 1356 :     }
; 1357 : 
; 1358 :     if (nBytes != nBytesReturned)

  000a6	8b 45 e0	 mov	 eax, DWORD PTR _nBytesReturned$[ebp]
  000a9	83 f8 15	 cmp	 eax, 21			; 00000015H
  000ac	74 2c		 je	 SHORT $LN3@GetConfigD

; 1359 :     {
; 1360 :         Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, Bytes %u <> BytesRet %u", nBytes, nBytesReturned);

  000ae	50		 push	 eax
  000af	6a 15		 push	 21			; 00000015H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@CHLLBENA@?$DM?$DM?5USB?4GetCfgDesc?0?5Bytes?5?$CFu?5?$DM?$DO?5@
  000b6	68 50 05 00 00	 push	 1360			; 00000550H
  000bb	6a 10		 push	 16			; 00000010H
  000bd	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000c2	83 c4 14	 add	 esp, 20			; 00000014H

; 1361 :         return NULL;

  000c5	33 c0		 xor	 eax, eax

; 1441 :     return configDescReq;
; 1442 : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cd	33 cd		 xor	 ecx, ebp
  000cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetConfigD:

; 1362 :     }
; 1363 : 
; 1364 :     if (configDesc->wTotalLength < sizeof(USB_CONFIGURATION_DESCRIPTOR))

  000da	66 8b 45 f2	 mov	 ax, WORD PTR _configDescReqBuf$[ebp+14]
  000de	66 83 f8 09	 cmp	 ax, 9
  000e2	73 2f		 jae	 SHORT $LN4@GetConfigD

; 1365 :     {
; 1366 :         Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, Total %d < Sz struct %d", configDesc->wTotalLength, sizeof(USB_CONFIGURATION_DESCRIPTOR));

  000e4	6a 09		 push	 9
  000e6	0f b7 c0	 movzx	 eax, ax
  000e9	50		 push	 eax
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LLJEBADN@?$DM?$DM?5USB?4GetCfgDesc?0?5Total?5?$CFd?5?$DM?5S@
  000ef	68 56 05 00 00	 push	 1366			; 00000556H
  000f4	6a 10		 push	 16			; 00000010H
  000f6	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000fb	83 c4 14	 add	 esp, 20			; 00000014H

; 1367 :         return NULL;

  000fe	33 c0		 xor	 eax, eax

; 1441 :     return configDescReq;
; 1442 : }

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00106	33 cd		 xor	 ecx, ebp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 0c 00	 ret	 12			; 0000000cH
$LN4@GetConfigD:

; 1368 :     }
; 1369 : 
; 1370 :     // Now request the entire Configuration Descriptor using a dynamically
; 1371 :     // allocated buffer which is sized big enough to hold the entire descriptor
; 1372 :     //
; 1373 :     nBytes = sizeof(USB_DESCRIPTOR_REQUEST) + configDesc->wTotalLength;

  00113	0f b7 d8	 movzx	 ebx, ax
  00116	8d 7b 0c	 lea	 edi, DWORD PTR [ebx+12]

; 1374 : 
; 1375 :     configDescReq = (PUSB_DESCRIPTOR_REQUEST)malloc(nBytes);

  00119	57		 push	 edi
  0011a	e8 00 00 00 00	 call	 _malloc
  0011f	83 c4 04	 add	 esp, 4
  00122	8b f0		 mov	 esi, eax

; 1376 :     if (configDescReq)

  00124	57		 push	 edi
  00125	85 f6		 test	 esi, esi
  00127	0f 84 b9 00 00
	00		 je	 $LN5@GetConfigD

; 1377 :     {
; 1378 :         memset(configDescReq, 0x00, nBytes);

  0012d	6a 00		 push	 0
  0012f	56		 push	 esi
  00130	e8 00 00 00 00	 call	 _memset

; 1379 : 
; 1380 :         configDesc = (PUSB_CONFIGURATION_DESCRIPTOR)(configDescReq + 1);
; 1381 : 
; 1382 :         // Indicate the port from which the descriptor will be requested
; 1383 :         //
; 1384 :         configDescReq->ConnectionIndex = ConnectionIndex;

  00135	8b 45 0c	 mov	 eax, DWORD PTR _ConnectionIndex$[ebp]
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013b	89 06		 mov	 DWORD PTR [esi], eax

; 1385 : 
; 1386 :         //
; 1387 :         // USBHUB uses URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE to process this
; 1388 :         // IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION request.
; 1389 :         //
; 1390 :         // USBD will automatically initialize these fields:
; 1391 :         //     bmRequest = 0x80
; 1392 :         //     bRequest  = 0x06
; 1393 :         //
; 1394 :         // We must inititialize these fields:
; 1395 :         //     wValue    = Descriptor Type (high) and Descriptor Index (low byte)
; 1396 :         //     wIndex    = Zero (or Language ID for String Descriptors)
; 1397 :         //     wLength   = Length of descriptor buffer
; 1398 :         //
; 1399 :         configDescReq->SetupPacket.wValue = (USB_CONFIGURATION_DESCRIPTOR_TYPE << 8)

  0013d	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00142	66 89 46 06	 mov	 WORD PTR [esi+6], ax

; 1400 :             | DescriptorIndex;
; 1401 : 
; 1402 :         configDescReq->SetupPacket.wLength = (USHORT)(nBytes - sizeof(USB_DESCRIPTOR_REQUEST));

  00146	8d 47 f4	 lea	 eax, DWORD PTR [edi-12]
  00149	66 89 46 0a	 mov	 WORD PTR [esi+10], ax

; 1403 : 
; 1404 :         // Now issue the get descriptor request.
; 1405 :         //
; 1406 :         success = DeviceIoControl(hHubDevice,

  0014d	8d 45 e0	 lea	 eax, DWORD PTR _nBytesReturned$[ebp]
  00150	6a 00		 push	 0
  00152	50		 push	 eax
  00153	57		 push	 edi
  00154	56		 push	 esi
  00155	57		 push	 edi
  00156	56		 push	 esi
  00157	68 10 04 22 00	 push	 2229264			; 00220410H
  0015c	ff 75 dc	 push	 DWORD PTR _hHubDevice$GSCopy$1$[ebp]
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 1407 :             IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION,
; 1408 :             configDescReq,
; 1409 :             nBytes,
; 1410 :             configDescReq,
; 1411 :             nBytes,
; 1412 :             &nBytesReturned,
; 1413 :             NULL);
; 1414 : 
; 1415 :         if (!success)

  00165	85 c0		 test	 eax, eax
  00167	75 2f		 jne	 SHORT $LN7@GetConfigD

; 1416 :         {
; 1417 :             Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, Req DeviceIoControl False");

  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@FDNPACDH@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5DeviceIo@
  0016e	68 89 05 00 00	 push	 1417			; 00000589H
  00173	6a 10		 push	 16			; 00000010H
  00175	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1418 :             free(configDescReq);

  0017a	56		 push	 esi
  0017b	e8 00 00 00 00	 call	 _free
  00180	83 c4 10	 add	 esp, 16			; 00000010H

; 1419 :             return NULL;

  00183	33 c0		 xor	 eax, eax

; 1441 :     return configDescReq;
; 1442 : }

  00185	5f		 pop	 edi
  00186	5e		 pop	 esi
  00187	5b		 pop	 ebx
  00188	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018b	33 cd		 xor	 ecx, ebp
  0018d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c2 0c 00	 ret	 12			; 0000000cH
$LN7@GetConfigD:

; 1420 :         }
; 1421 : 
; 1422 :         if (nBytes != nBytesReturned)

  00198	8b 45 e0	 mov	 eax, DWORD PTR _nBytesReturned$[ebp]
  0019b	3b f8		 cmp	 edi, eax
  0019d	74 31		 je	 SHORT $LN8@GetConfigD

; 1423 :         {
; 1424 :             Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, Req Bytes %u <> BytesRet %u", nBytes, nBytesReturned);

  0019f	50		 push	 eax
  001a0	57		 push	 edi
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@JDNANMP@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Bytes?5?$CFu@
  001a6	68 90 05 00 00	 push	 1424			; 00000590H
$LN11@GetConfigD:

; 1441 :     return configDescReq;
; 1442 : }

  001ab	6a 10		 push	 16			; 00000010H
  001ad	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001b2	56		 push	 esi
  001b3	e8 00 00 00 00	 call	 _free
  001b8	83 c4 18	 add	 esp, 24			; 00000018H
  001bb	33 c0		 xor	 eax, eax
  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c3	33 cd		 xor	 ecx, ebp
  001c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 0c 00	 ret	 12			; 0000000cH
$LN8@GetConfigD:

; 1425 :             free(configDescReq);
; 1426 :             return NULL;
; 1427 :         }
; 1428 : 
; 1429 :         if (configDesc->wTotalLength != (nBytes - sizeof(USB_DESCRIPTOR_REQUEST)))

  001d0	0f b7 46 0e	 movzx	 eax, WORD PTR [esi+14]
  001d4	3b c3		 cmp	 eax, ebx
  001d6	74 22		 je	 SHORT $LN6@GetConfigD

; 1430 :         {
; 1431 :             Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, Req Total %d < Sz %d", configDesc->wTotalLength, (nBytes - sizeof(USB_DESCRIPTOR_REQUEST)));

  001d8	53		 push	 ebx
  001d9	50		 push	 eax
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LMLHDIHD@?$DM?$DM?5USB?4GetCfgDesc?0?5Req?5Total?5?$CFd@
  001df	68 97 05 00 00	 push	 1431			; 00000597H

; 1432 :             free(configDescReq);
; 1433 :             return NULL;

  001e4	eb c5		 jmp	 SHORT $LN11@GetConfigD
$LN5@GetConfigD:

; 1434 :         }
; 1435 :     }
; 1436 :     else
; 1437 :     {
; 1438 :         Log(LOG_DEBUG, __LINE__, "-- USB.GetCfgDescriptor, new Buf (%u) null", nBytes);

  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LPDCGPEM@?9?9?5USB?4GetCfgDescriptor?0?5new?5Bu@
  001eb	68 9e 05 00 00	 push	 1438			; 0000059eH
  001f0	6a 10		 push	 16			; 00000010H
  001f2	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001f7	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@GetConfigD:

; 1439 :     }
; 1440 :     Log(LOG_DEBUG, __LINE__, "<< USB.GetCfgDesc, 0x%p", configDescReq);

  001fa	56		 push	 esi
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HCFMPAHC@?$DM?$DM?5USB?4GetCfgDesc?0?50x?$CFp@
  00200	68 a0 05 00 00	 push	 1440			; 000005a0H
  00205	6a 10		 push	 16			; 00000010H
  00207	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1441 :     return configDescReq;
; 1442 : }

  0020c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020f	83 c4 10	 add	 esp, 16			; 00000010H
  00212	8b c6		 mov	 eax, esi
  00214	33 cd		 xor	 ecx, ebp
  00216	5f		 pop	 edi
  00217	5e		 pop	 esi
  00218	5b		 pop	 ebx
  00219	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021e	8b e5		 mov	 esp, ebp
  00220	5d		 pop	 ebp
  00221	c2 0c 00	 ret	 12			; 0000000cH
?GetConfigDescriptor@USB@@IAEPAU_USB_DESCRIPTOR_REQUEST@@PAXKE@Z ENDP ; USB::GetConfigDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_HubInfo$ = 8						; size = 4
?HubInfo@USB@@IAEXPAU_USB_HUB_INFORMATION@@@Z PROC	; USB::HubInfo
; _this$ = ecx

; 1451 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi

; 1452 :     Log(LOG_DEBUG, __LINE__, ">> USB.HubInfo");

  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GOACPFJP@?$DO?$DO?5USB?4HubInfo@
  0000f	68 ac 05 00 00	 push	 1452			; 000005acH
  00014	6a 10		 push	 16			; 00000010H
  00016	8b f9		 mov	 edi, ecx
  00018	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1453 : 
; 1454 :     PushBackDetails("> Hub Power: %s", HubInfo->HubIsBusPowered ? "Bus Power" : "Self Power");

  0001d	8b 75 08	 mov	 esi, DWORD PTR _HubInfo$[ebp]
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@JDJFLKOD@Self?5Power@
  00028	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09GDHNALJA@Bus?5Power@
  0002d	80 7e 47 00	 cmp	 BYTE PTR [esi+71], 0
  00031	0f 44 c1	 cmove	 eax, ecx
  00034	50		 push	 eax
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KPNNFMHH@?$DO?5Hub?5Power?3?5?$CFs@
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1455 :     PushBackDetails("> Number of Ports: %d", HubInfo->HubDescriptor.bNumberOfPorts);

  00040	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IOHBDCFM@?$DO?5Number?5of?5Ports?3?5?$CFd@
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1456 : 
; 1457 :     uint16_t const wHubChar = HubInfo->HubDescriptor.wHubCharacteristics;
; 1458 : 
; 1459 :     switch (wHubChar & 0x0003)

  00053	0f b7 5e 03	 movzx	 ebx, WORD PTR [esi+3]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	8b c3		 mov	 eax, ebx
  0005c	83 e0 03	 and	 eax, 3
  0005f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@HubInfo[eax*4]
$LN8@HubInfo:

; 1460 :     {
; 1461 :     case 0x0000:
; 1462 :         PushBackDetails("> Power switching: Ganged");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CEEHKAND@?$DO?5Power?5switching?3?5Ganged@

; 1463 :         break;

  0006b	eb 0c		 jmp	 SHORT $LN19@HubInfo
$LN9@HubInfo:

; 1464 : 
; 1465 :     case 0x0001:
; 1466 :         PushBackDetails("> Power switching: Individual");

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BHNNAPDB@?$DO?5Power?5switching?3?5Individual@

; 1467 :         break;

  00072	eb 05		 jmp	 SHORT $LN19@HubInfo
$LN10@HubInfo:

; 1468 : 
; 1469 :     case 0x0002:
; 1470 :     case 0x0003:
; 1471 :         PushBackDetails("> Power switching: None");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FICFFJGB@?$DO?5Power?5switching?3?5None@
$LN19@HubInfo:

; 1472 :         break;
; 1473 :     }
; 1474 : 
; 1475 :     switch (wHubChar & 0x0004)

  00079	57		 push	 edi
  0007a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0007f	83 c4 08	 add	 esp, 8
$LN2@HubInfo:
  00082	f6 c3 04	 test	 bl, 4

; 1476 :     {
; 1477 :     case 0x0000:
; 1478 :         PushBackDetails("> Compound device: No");
; 1479 :         break;
; 1480 : 
; 1481 :     case 0x0004:
; 1482 :         PushBackDetails("> Compound device: Yes");
; 1483 :         break;
; 1484 :     }
; 1485 : 
; 1486 :     switch (wHubChar & 0x0018)

  00085	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BH@CFBEDMDO@?$DO?5Compound?5device?3?5Yes@
  0008a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@FBGEODEL@?$DO?5Compound?5device?3?5No@
  0008f	0f 45 c1	 cmovne	 eax, ecx
  00092	50		 push	 eax
  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00099	83 c4 08	 add	 esp, 8
  0009c	83 e3 18	 and	 ebx, 24			; 00000018H
  0009f	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@HubInfo[ebx]
  000a6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@HubInfo[eax*4]
$LN13@HubInfo:

; 1487 :     {
; 1488 :     case 0x0000:
; 1489 :         PushBackDetails("> Over-current Protection: Global");

  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ELIAJJDL@?$DO?5Over?9current?5Protection?3?5Glob@

; 1490 :         break;

  000b2	eb 0c		 jmp	 SHORT $LN20@HubInfo
$LN14@HubInfo:

; 1491 : 
; 1492 :     case 0x0008:
; 1493 :         PushBackDetails("> Over-current Protection: Individual");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MEGDLCFA@?$DO?5Over?9current?5Protection?3?5Indi@

; 1494 :         break;

  000b9	eb 05		 jmp	 SHORT $LN20@HubInfo
$LN15@HubInfo:

; 1495 : 
; 1496 :     case 0x0010:
; 1497 :     case 0x0018:
; 1498 :         PushBackDetails("> No Over-current Protection (Bus Power Only)");

  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FGJIHOLC@?$DO?5No?5Over?9current?5Protection?5?$CIB@
$LN20@HubInfo:

; 1499 :         break;
; 1500 :     }
; 1501 :     Log(LOG_DEBUG, __LINE__, "<< USB.HubInfo");

  000c0	57		 push	 edi
  000c1	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  000c6	83 c4 08	 add	 esp, 8
$LN6@HubInfo:
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CHOKIAKD@?$DM?$DM?5USB?4HubInfo@
  000ce	68 dd 05 00 00	 push	 1501			; 000005ddH
  000d3	6a 10		 push	 16			; 00000010H
  000d5	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1502 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
  000e6	66 90		 npad	 2
$LN22@HubInfo:
  000e8	00 00 00 00	 DD	 $LN8@HubInfo
  000ec	00 00 00 00	 DD	 $LN9@HubInfo
  000f0	00 00 00 00	 DD	 $LN10@HubInfo
  000f4	00 00 00 00	 DD	 $LN10@HubInfo
$LN23@HubInfo:
  000f8	00 00 00 00	 DD	 $LN13@HubInfo
  000fc	00 00 00 00	 DD	 $LN14@HubInfo
  00100	00 00 00 00	 DD	 $LN15@HubInfo
  00104	00 00 00 00	 DD	 $LN6@HubInfo
$LN18@HubInfo:
  00108	00		 DB	 0
  00109	03		 DB	 3
  0010a	03		 DB	 3
  0010b	03		 DB	 3
  0010c	03		 DB	 3
  0010d	03		 DB	 3
  0010e	03		 DB	 3
  0010f	03		 DB	 3
  00110	01		 DB	 1
  00111	03		 DB	 3
  00112	03		 DB	 3
  00113	03		 DB	 3
  00114	03		 DB	 3
  00115	03		 DB	 3
  00116	03		 DB	 3
  00117	03		 DB	 3
  00118	02		 DB	 2
  00119	03		 DB	 3
  0011a	03		 DB	 3
  0011b	03		 DB	 3
  0011c	03		 DB	 3
  0011d	03		 DB	 3
  0011e	03		 DB	 3
  0011f	03		 DB	 3
  00120	02		 DB	 2
?HubInfo@USB@@IAEXPAU_USB_HUB_INFORMATION@@@Z ENDP	; USB::HubInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ConnectInfo$ = 8					; size = 4
_StringDescs$ = 12					; size = 4
?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z PROC ; USB::ConnectionInfo
; _this$ = ecx

; 1546 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _ConnectInfo$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _StringDescs$[ebp]

; 1547 :     Log(LOG_DEBUG, __LINE__, ">> USB.ConnInfo");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IJBIPHPI@?$DO?$DO?5USB?4ConnInfo@
  00038	68 0b 06 00 00	 push	 1547			; 0000060bH
  0003d	6a 10		 push	 16			; 00000010H
  0003f	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1548 : 
; 1549 :     if (!ConnectInfo)

  00047	85 ff		 test	 edi, edi
  00049	75 0f		 jne	 SHORT $LN4@Connection

; 1550 :     {
; 1551 :         Log(LOG_DEBUG, __LINE__, "<< USB.ConnInfo, Input null");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GIKFEJKI@?$DM?$DM?5USB?4ConnInfo?0?5Input?5null@
  00050	68 0f 06 00 00	 push	 1551			; 0000060fH

; 1552 :         return;

  00055	e9 84 02 00 00	 jmp	 $LN98@Connection
$LN4@Connection:

; 1553 :     }
; 1554 : 
; 1555 :     if (ConnectInfo->ConnectionStatus == NoDeviceConnected)

  0005a	83 7f 1f 00	 cmp	 DWORD PTR [edi+31], 0
  0005e	75 13		 jne	 SHORT $LN5@Connection

; 1556 :     {
; 1557 :         PushBackDetails("> ConnectionStatus: NoDeviceConnected");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KIPJNEMD@?$DO?5ConnectionStatus?3?5NoDeviceCon@
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0006b	83 c4 08	 add	 esp, 8

; 1558 :     }
; 1559 :     else

  0006e	e9 61 02 00 00	 jmp	 $LN14@Connection
$LN5@Connection:

; 1560 :     {
; 1561 :         PushBackDetails("> Device Descriptor:");

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EPIIACIH@?$DO?5Device?5Descriptor?3@
  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1562 :         PushBackDetails("> bcdUSB: 0x % 04X", ConnectInfo->DeviceDescriptor.bcdUSB);

  0007e	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EBICGGCH@?$DO?5bcdUSB?3?50x?5?$CF?504X@
  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1563 :         PushBackDetails(">   bDeviceClass: 0x%02X", ConnectInfo->DeviceDescriptor.bDeviceClass);

  0008e	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00092	83 c4 14	 add	 esp, 20			; 00000014H
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BBNICMHO@?$DO?5?5?5bDeviceClass?3?50x?$CF02X@
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1564 :         PushBackDetails(">   bDeviceSubClass: 0x%02X", ConnectInfo->DeviceDescriptor.bDeviceSubClass);

  000a1	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IBBMEPAK@?$DO?5?5?5bDeviceSubClass?3?50x?$CF02X@
  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1565 :         PushBackDetails(">   bDeviceProtocol: 0x%02X", ConnectInfo->DeviceDescriptor.bDeviceProtocol);

  000b4	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	50		 push	 eax
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DONCAOLL@?$DO?5?5?5bDeviceProtocol?3?50x?$CF02X@
  000c1	56		 push	 esi
  000c2	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1566 :         PushBackDetails(">   bMaxPacketSize0: 0x%02X (%d)", ConnectInfo->DeviceDescriptor.bMaxPacketSize0, ConnectInfo->DeviceDescriptor.bMaxPacketSize0);

  000c7	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	50		 push	 eax
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KJHHAJF@?$DO?5?5?5bMaxPacketSize0?3?50x?$CF02X?5?$CI?$CFd@
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1567 :         PushBackDetails(">   idVendor: 0x%04X (%s)", ConnectInfo->DeviceDescriptor.idVendor, GetVendorString(ConnectInfo->DeviceDescriptor.idVendor).c_str());

  000db	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  000df	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000e2	99		 cdq
  000e3	52		 push	 edx
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?GetVendorString@USB@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z ; USB::GetVendorString
  000ea	83 c4 18	 add	 esp, 24			; 00000018H
  000ed	8b c8		 mov	 ecx, eax
  000ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000f6	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  000fa	72 02		 jb	 SHORT $LN24@Connection
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000fc	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN24@Connection:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1567 :         PushBackDetails(">   idVendor: 0x%04X (%s)", ConnectInfo->DeviceDescriptor.idVendor, GetVendorString(ConnectInfo->DeviceDescriptor.idVendor).c_str());

  000fe	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FCNKAGPN@?$DO?5?5?5idVendor?3?50x?$CF04X?5?$CI?$CFs?$CJ@
  00109	56		 push	 esi
  0010a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0010f	83 c4 10	 add	 esp, 16			; 00000010H
  00112	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00119	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  0011c	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0011f	72 2c		 jb	 SHORT $LN72@Connection
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00121	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00124	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00125	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00127	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0012d	72 14		 jb	 SHORT $LN71@Connection

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0012f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00132	83 c2 23	 add	 edx, 35			; 00000023H
  00135	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	83 c0 fc	 add	 eax, -4			; fffffffcH
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	0f 87 c3 01 00
	00		 ja	 $LN101@Connection
$LN71@Connection:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00143	52		 push	 edx
  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014a	83 c4 08	 add	 esp, 8
$LN72@Connection:
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1568 :         PushBackDetails(">   idProduct: 0x%04X", ConnectInfo->DeviceDescriptor.idProduct);

  0014d	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FEBFICPG@?$DO?5?5?5idProduct?3?50x?$CF04X@
  00157	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00158	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0015f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00166	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp

; 1568 :         PushBackDetails(">   idProduct: 0x%04X", ConnectInfo->DeviceDescriptor.idProduct);

  0016a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1569 :         PushBackDetails(">   bcdDevice: 0x%04X", ConnectInfo->DeviceDescriptor.bcdDevice);

  0016f	0f b7 47 10	 movzx	 eax, WORD PTR [edi+16]
  00173	83 c4 0c	 add	 esp, 12			; 0000000cH
  00176	50		 push	 eax
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IFDGHCDF@?$DO?5?5?5bcdDevice?3?50x?$CF04X@
  0017c	56		 push	 esi
  0017d	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1570 :         PushBackDetails(">   iManufacturer: 0x%02X", ConnectInfo->DeviceDescriptor.iManufacturer);

  00182	0f b6 47 12	 movzx	 eax, BYTE PTR [edi+18]
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH
  00189	50		 push	 eax
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IFOFIIGL@?$DO?5?5?5iManufacturer?3?50x?$CF02X@
  0018f	56		 push	 esi
  00190	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1571 : 
; 1572 :         if (ConnectInfo->DeviceDescriptor.iManufacturer)

  00195	8a 47 12	 mov	 al, BYTE PTR [edi+18]
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019b	84 c0		 test	 al, al
  0019d	74 09		 je	 SHORT $LN7@Connection

; 1573 :         {
; 1574 :             StringDescriptor(ConnectInfo->DeviceDescriptor.iManufacturer, StringDescs);

  0019f	53		 push	 ebx
  001a0	50		 push	 eax
  001a1	8b ce		 mov	 ecx, esi
  001a3	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN7@Connection:

; 1575 :         }
; 1576 : 
; 1577 :         PushBackDetails(">   iProduct: 0x%02X", ConnectInfo->DeviceDescriptor.iProduct);

  001a8	0f b6 47 13	 movzx	 eax, BYTE PTR [edi+19]
  001ac	50		 push	 eax
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JLHEPLOO@?$DO?5?5?5iProduct?3?50x?$CF02X@
  001b2	56		 push	 esi
  001b3	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1578 : 
; 1579 :         if (ConnectInfo->DeviceDescriptor.iProduct)

  001b8	8a 47 13	 mov	 al, BYTE PTR [edi+19]
  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001be	84 c0		 test	 al, al
  001c0	74 09		 je	 SHORT $LN8@Connection

; 1580 :         {
; 1581 :             StringDescriptor(ConnectInfo->DeviceDescriptor.iProduct, StringDescs);

  001c2	53		 push	 ebx
  001c3	50		 push	 eax
  001c4	8b ce		 mov	 ecx, esi
  001c6	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN8@Connection:

; 1582 :         }
; 1583 : 
; 1584 :         PushBackDetails(">   iSerialNumber: 0x%02X", ConnectInfo->DeviceDescriptor.iSerialNumber);

  001cb	0f b6 47 14	 movzx	 eax, BYTE PTR [edi+20]
  001cf	50		 push	 eax
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LAPCHIKM@?$DO?5?5?5iSerialNumber?3?50x?$CF02X@
  001d5	56		 push	 esi
  001d6	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1585 : 
; 1586 :         if (ConnectInfo->DeviceDescriptor.iSerialNumber)

  001db	8a 47 14	 mov	 al, BYTE PTR [edi+20]
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e1	84 c0		 test	 al, al
  001e3	74 09		 je	 SHORT $LN9@Connection

; 1587 :         {
; 1588 :             StringDescriptor(ConnectInfo->DeviceDescriptor.iSerialNumber, StringDescs);

  001e5	53		 push	 ebx
  001e6	50		 push	 eax
  001e7	8b ce		 mov	 ecx, esi
  001e9	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN9@Connection:

; 1589 :         }
; 1590 : 
; 1591 :         PushBackDetails(">   bNumConfigurations: 0x%02X", ConnectInfo->DeviceDescriptor.bNumConfigurations);

  001ee	0f b6 47 15	 movzx	 eax, BYTE PTR [edi+21]
  001f2	50		 push	 eax
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EFEAMJPP@?$DO?5?5?5bNumConfigurations?3?50x?$CF02X@
  001f8	56		 push	 esi
  001f9	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1592 :         PushBackDetails(">   ConnectionStatus: %s", ConnectionStatuses[ConnectInfo->ConnectionStatus]);

  001fe	8b 47 1f	 mov	 eax, DWORD PTR [edi+31]
  00201	83 c4 0c	 add	 esp, 12			; 0000000cH
  00204	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?ConnectionStatuses@@3PAPADA[eax*4]
  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@POKCFGAN@?$DO?5?5?5ConnectionStatus?3?5?$CFs@
  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1593 :         PushBackDetails(">   Current Config Value: 0x%02X", ConnectInfo->CurrentConfigurationValue);

  00216	0f b6 47 16	 movzx	 eax, BYTE PTR [edi+22]
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	50		 push	 eax
  0021e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CNIJGGK@?$DO?5?5?5Current?5Config?5Value?3?50x?$CF02@
  00223	56		 push	 esi
  00224	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1594 : 
; 1595 :         switch (ConnectInfo->Speed)

  00229	0f b6 47 17	 movzx	 eax, BYTE PTR [edi+23]
  0022d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00230	83 e8 00	 sub	 eax, 0
  00233	74 1f		 je	 SHORT $LN10@Connection
  00235	83 e8 01	 sub	 eax, 1
  00238	74 13		 je	 SHORT $LN11@Connection
  0023a	83 e8 01	 sub	 eax, 1
  0023d	74 07		 je	 SHORT $LN12@Connection

; 1606 :         default:
; 1607 :             PushBackDetails(">   Device Bus Speed: Unknown");

  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IIJPBIOD@?$DO?5?5?5Device?5Bus?5Speed?3?5Unknown@
  00244	eb 13		 jmp	 SHORT $LN99@Connection
$LN12@Connection:

; 1603 :         case UsbHighSpeed:
; 1604 :             PushBackDetails(">   Device Bus Speed: High");

  00246	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OEKHLNNJ@?$DO?5?5?5Device?5Bus?5Speed?3?5High@

; 1605 :             break;

  0024b	eb 0c		 jmp	 SHORT $LN99@Connection
$LN11@Connection:

; 1599 :             break;
; 1600 :         case UsbFullSpeed:
; 1601 :             PushBackDetails(">   Device Bus Speed: Full");

  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CJGBMBHK@?$DO?5?5?5Device?5Bus?5Speed?3?5Full@

; 1602 :             break;

  00252	eb 05		 jmp	 SHORT $LN99@Connection
$LN10@Connection:

; 1596 :         {
; 1597 :         case UsbLowSpeed:
; 1598 :             PushBackDetails(">   Device Bus Speed: Low");

  00254	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CLDGMCFC@?$DO?5?5?5Device?5Bus?5Speed?3?5Low@
$LN99@Connection:

; 1608 :         }
; 1609 : 
; 1610 :         PushBackDetails(">   Device Address: 0x%02X", ConnectInfo->DeviceAddress);

  00259	56		 push	 esi
  0025a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0025f	0f b7 47 19	 movzx	 eax, WORD PTR [edi+25]
  00263	83 c4 08	 add	 esp, 8
  00266	50		 push	 eax
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DEBOODEI@?$DO?5?5?5Device?5Address?3?50x?$CF02X@
  0026c	56		 push	 esi
  0026d	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00272	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1611 :         PushBackDetails(">   Open Pipes: %02lu", ConnectInfo->NumberOfOpenPipes);

  00275	ff 77 1b	 push	 DWORD PTR [edi+27]
  00278	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MHCPFALG@?$DO?5?5?5Open?5Pipes?3?5?$CF02lu@
  0027d	56		 push	 esi
  0027e	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1612 : 
; 1613 :         if (ConnectInfo->NumberOfOpenPipes)

  00283	8b 5f 1b	 mov	 ebx, DWORD PTR [edi+27]
  00286	83 c4 0c	 add	 esp, 12			; 0000000cH
  00289	85 db		 test	 ebx, ebx
  0028b	74 47		 je	 SHORT $LN14@Connection

; 1629 :     Log(LOG_DEBUG, __LINE__, ">> USB.PipeInfo, %u", NumPipes);

  0028d	53		 push	 ebx
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MPHLOHIN@?$DO?$DO?5USB?4PipeInfo?0?5?$CFu@
  00293	68 5d 06 00 00	 push	 1629			; 0000065dH
  00298	6a 10		 push	 16			; 00000010H
  0029a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0029f	83 c4 10	 add	 esp, 16			; 00000010H

; 1630 :     for (i = 0; i < NumPipes; i++)

  002a2	85 db		 test	 ebx, ebx
  002a4	74 1a		 je	 SHORT $LN89@Connection

; 1621 : 
; 1622 : // PipeInfo()
; 1623 : // NumPipes - Number of pipe for we info should be displayed.
; 1624 : // PipeInfo - Info about the pipes.
; 1625 : VOID USB::PipeInfo(ULONG NumPipes, USB_PIPE_INFO *PipeInfo)
; 1626 : {
; 1627 :     ULONG i;
; 1628 : 
; 1629 :     Log(LOG_DEBUG, __LINE__, ">> USB.PipeInfo, %u", NumPipes);

  002a6	83 c7 23	 add	 edi, 35			; 00000023H
  002a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL90@Connection:

; 1631 :     {
; 1632 :         EndpointDescriptor(&PipeInfo[i].EndpointDescriptor);

  002b0	57		 push	 edi
  002b1	8b ce		 mov	 ecx, esi
  002b3	e8 00 00 00 00	 call	 ?EndpointDescriptor@USB@@IAEXPAU_USB_ENDPOINT_DESCRIPTOR@@@Z ; USB::EndpointDescriptor
  002b8	83 c7 0b	 add	 edi, 11			; 0000000bH
  002bb	83 eb 01	 sub	 ebx, 1
  002be	75 f0		 jne	 SHORT $LL90@Connection
$LN89@Connection:

; 1633 :     }
; 1634 :     Log(LOG_DEBUG, __LINE__, "<< USB.PipeInfo");

  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KIDKADGJ@?$DM?$DM?5USB?4PipeInfo@
  002c5	68 62 06 00 00	 push	 1634			; 00000662H
  002ca	6a 10		 push	 16			; 00000010H
  002cc	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  002d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@Connection:

; 1614 :         {
; 1615 :             PipeInfo(ConnectInfo->NumberOfOpenPipes, ConnectInfo->PipeList);
; 1616 :         }
; 1617 :     }
; 1618 : 
; 1619 :     Log(LOG_DEBUG, __LINE__, "<< USB.ConnInfo");

  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KGDOGDAK@?$DM?$DM?5USB?4ConnInfo@
  002d9	68 53 06 00 00	 push	 1619			; 00000653H
$LN98@Connection:

; 1620 : }

  002de	6a 10		 push	 16			; 00000010H
  002e0	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  002e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f2	59		 pop	 ecx
  002f3	5f		 pop	 edi
  002f4	5e		 pop	 esi
  002f5	5b		 pop	 ebx
  002f6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f9	33 cd		 xor	 ecx, ebp
  002fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00300	8b e5		 mov	 esp, ebp
  00302	5d		 pop	 ebp
  00303	c2 08 00	 ret	 8
$LN101@Connection:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00306	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@Connection:
  0030b	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConnectionInfo@USB@@IAEXPAU_USB_NODE_CONNECTION_INFORMATION_EX@@PAU_STRING_DESCRIPTOR_NODE@@@Z ENDP ; USB::ConnectionInfo
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_NumPipes$ = 8						; size = 4
_PipeInfo$ = 12						; size = 4
?PipeInfo@USB@@IAEXKPAU_USB_PIPE_INFO@@@Z PROC		; USB::PipeInfo
; _this$ = ecx

; 1626 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1627 :     ULONG i;
; 1628 : 
; 1629 :     Log(LOG_DEBUG, __LINE__, ">> USB.PipeInfo, %u", NumPipes);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _NumPipes$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	53		 push	 ebx
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MPHLOHIN@?$DO?$DO?5USB?4PipeInfo?0?5?$CFu@
  00010	68 5d 06 00 00	 push	 1629			; 0000065dH
  00015	6a 10		 push	 16			; 00000010H
  00017	8b f1		 mov	 esi, ecx
  00019	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 1630 :     for (i = 0; i < NumPipes; i++)

  00021	85 db		 test	 ebx, ebx
  00023	0f 84 e3 00 00
	00		 je	 $LN3@PipeInfo

; 1627 :     ULONG i;
; 1628 : 
; 1629 :     Log(LOG_DEBUG, __LINE__, ">> USB.PipeInfo, %u", NumPipes);

  00029	8b 7d 0c	 mov	 edi, DWORD PTR _PipeInfo$[ebp]
  0002c	83 c7 03	 add	 edi, 3
  0002f	90		 npad	 1
$LL4@PipeInfo:

; 1804 :     Log(LOG_DEBUG, __LINE__, ">> USB.EndpointDesc");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BNJCNLHH@?$DO?$DO?5USB?4EndpointDesc@
  00035	68 0c 07 00 00	 push	 1804			; 0000070cH
  0003a	6a 10		 push	 16			; 00000010H
  0003c	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1805 : 
; 1806 :     PushBackDetails("> Endpoint Descriptor:");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NNPPCJHP@?$DO?5Endpoint?5Descriptor?3@
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1807 : 
; 1808 :     if (USB_ENDPOINT_DIRECTION_IN(EndpointDesc->bEndpointAddress))

  0004f	8a 4f ff	 mov	 cl, BYTE PTR [edi-1]

; 1809 :     {
; 1810 :         PushBackDetails(">   bEndpointAddress: 0x%02X IN", EndpointDesc->bEndpointAddress);
; 1811 :     }
; 1812 :     else
; 1813 :     {
; 1814 :         PushBackDetails(">   bEndpointAddress: 0x%02X OUT", EndpointDesc->bEndpointAddress);
; 1815 :     }
; 1816 : 
; 1817 :     switch (EndpointDesc->bmAttributes & 0x03)

  00052	0f b6 c1	 movzx	 eax, cl
  00055	84 c9		 test	 cl, cl
  00057	50		 push	 eax
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CA@IMJGHBI@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5IN@
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CB@PIKLNKCM@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5OU@
  00062	0f 48 c1	 cmovs	 eax, ecx
  00065	50		 push	 eax
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0006c	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0006f	83 c4 14	 add	 esp, 20			; 00000014H
  00072	83 e0 03	 and	 eax, 3
  00075	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@PipeInfo[eax*4]
$LN11@PipeInfo:

; 1818 :     {
; 1819 :     case 0x00:
; 1820 :         PushBackDetails(">   Transfer Type: Control");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ICIOMPJC@?$DO?5?5?5Transfer?5Type?3?5Control@

; 1821 :         break;

  00081	eb 13		 jmp	 SHORT $LN23@PipeInfo
$LN12@PipeInfo:

; 1822 : 
; 1823 :     case 0x01:
; 1824 :         PushBackDetails(">   Transfer Type: Isochronous");

  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DMDNFJME@?$DO?5?5?5Transfer?5Type?3?5Isochronous@

; 1825 :         break;

  00088	eb 0c		 jmp	 SHORT $LN23@PipeInfo
$LN13@PipeInfo:

; 1826 : 
; 1827 :     case 0x02:
; 1828 :         PushBackDetails(">   Transfer Type: Bulk");

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@ELEHNLID@?$DO?5?5?5Transfer?5Type?3?5Bulk@

; 1829 :         break;

  0008f	eb 05		 jmp	 SHORT $LN23@PipeInfo
$LN14@PipeInfo:

; 1830 : 
; 1831 :     case 0x03:
; 1832 :         PushBackDetails(">   Transfer Type: Interrupt");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MOOEBEKA@?$DO?5?5?5Transfer?5Type?3?5Interrupt@
$LN23@PipeInfo:

; 1833 :         break;
; 1834 : 
; 1835 :     }
; 1836 : 
; 1837 :     PushBackDetails(">   wMaxPacketSize: 0x%04X (%d)", EndpointDesc->wMaxPacketSize, EndpointDesc->wMaxPacketSize);

  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0009c	83 c4 08	 add	 esp, 8
$LN7@PipeInfo:
  0009f	0f b7 47 01	 movzx	 eax, WORD PTR [edi+1]
  000a3	50		 push	 eax
  000a4	50		 push	 eax
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OFHICAPC@?$DO?5?5?5wMaxPacketSize?3?50x?$CF04X?5?$CI?$CFd?$CJ@
  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  000b0	83 c4 10	 add	 esp, 16			; 00000010H

; 1838 : 
; 1839 :     if (EndpointDesc->bLength == sizeof(USB_ENDPOINT_DESCRIPTOR))

  000b3	80 7f fd 07	 cmp	 BYTE PTR [edi-3], 7
  000b7	75 0a		 jne	 SHORT $LN15@PipeInfo

; 1840 :     {
; 1841 :         PushBackDetails(">   bInterval: 0x%02X", EndpointDesc->bInterval);

  000b9	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  000bc	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BG@LPGMHCMJ@?$DO?5?5?5bInterval?3?50x?$CF02X@

; 1842 :     }
; 1843 :     else

  000c1	eb 1b		 jmp	 SHORT $LN17@PipeInfo
$LN15@PipeInfo:

; 1844 :     {
; 1845 :         PUSB_ENDPOINT_DESCRIPTOR2 endpointDesc2 = (PUSB_ENDPOINT_DESCRIPTOR2)EndpointDesc;
; 1846 :         if (endpointDesc2)
; 1847 :         {
; 1848 :             PushBackDetails(">   wInterval: 0x%04X", endpointDesc2->wInterval);

  000c3	0f b7 47 03	 movzx	 eax, WORD PTR [edi+3]
  000c7	50		 push	 eax
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HBLIDDIE@?$DO?5?5?5wInterval?3?50x?$CF04X@
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1849 :             PushBackDetails(">   bSyncAddress: 0x%02X", endpointDesc2->bSyncAddress);

  000d3	8a 47 05	 mov	 al, BYTE PTR [edi+5]
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BJ@CECFOBBD@?$DO?5?5?5bSyncAddress?3?50x?$CF02X@
$LN17@PipeInfo:

; 1850 :         }
; 1851 :     }
; 1852 : 
; 1853 :     Log(LOG_DEBUG, __LINE__, "<< USB.EndpointDesc");

  000de	0f b6 c0	 movzx	 eax, al
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KDOIKLAK@?$DM?$DM?5USB?4EndpointDesc@
  000f1	68 3d 07 00 00	 push	 1853			; 0000073dH
  000f6	6a 10		 push	 16			; 00000010H
  000f8	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1630 :     for (i = 0; i < NumPipes; i++)

  00100	83 c7 0b	 add	 edi, 11			; 0000000bH
  00103	83 eb 01	 sub	 ebx, 1
  00106	0f 85 24 ff ff
	ff		 jne	 $LL4@PipeInfo
$LN3@PipeInfo:

; 1631 :     {
; 1632 :         EndpointDescriptor(&PipeInfo[i].EndpointDescriptor);
; 1633 :     }
; 1634 :     Log(LOG_DEBUG, __LINE__, "<< USB.PipeInfo");

  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KIDKADGJ@?$DM?$DM?5USB?4PipeInfo@
  00111	68 62 06 00 00	 push	 1634			; 00000662H
  00116	6a 10		 push	 16			; 00000010H
  00118	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1635 : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	59		 pop	 ecx
  00124	5d		 pop	 ebp
  00125	c2 08 00	 ret	 8
$LN25@PipeInfo:
  00128	00 00 00 00	 DD	 $LN11@PipeInfo
  0012c	00 00 00 00	 DD	 $LN12@PipeInfo
  00130	00 00 00 00	 DD	 $LN13@PipeInfo
  00134	00 00 00 00	 DD	 $LN14@PipeInfo
?PipeInfo@USB@@IAEXKPAU_USB_PIPE_INFO@@@Z ENDP		; USB::PipeInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_StringDescs$GSCopy$1$ = -1048				; size = 4
_descEnd$1$ = -1044					; size = 4
_displayUnknown$1$ = -1040				; size = 4
_i$1$ = -1033						; size = 1
_format$1 = -1032					; size = 1024
__$ArrayPad$ = -4					; size = 4
_ConfigDesc$ = 8					; size = 4
_StringDescs$ = 12					; size = 4
?ConfigDesc@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z PROC ; USB::ConfigDesc
; _this$ = ecx

; 1641 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 04 00
	00		 sub	 esp, 1052		; 0000041cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _StringDescs$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _ConfigDesc$[ebp]
  0001b	57		 push	 edi

; 1642 :     PUCHAR                  descEnd = nullptr;
; 1643 :     PUSB_COMMON_DESCRIPTOR  commonDesc = nullptr;
; 1644 :     UCHAR                   bInterfaceClass;
; 1645 :     UCHAR                   bInterfaceSubClass;
; 1646 : 
; 1647 :     Log(LOG_DEBUG, __LINE__, ">> USB.ConnDesc");

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BANBJKNP@?$DO?$DO?5USB?4ConnDesc@
  00021	68 6f 06 00 00	 push	 1647			; 0000066fH
  00026	6a 10		 push	 16			; 00000010H
  00028	8b f9		 mov	 edi, ecx
  0002a	89 9d e8 fb ff
	ff		 mov	 DWORD PTR _StringDescs$GSCopy$1$[ebp], ebx
  00030	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1648 : 
; 1649 :     if (!ConfigDesc)

  00038	85 f6		 test	 esi, esi
  0003a	75 0f		 jne	 SHORT $LN6@ConfigDesc

; 1650 :     {
; 1651 :         Log(LOG_DEBUG, __LINE__, "<< USB.ConnDesc, Input null");

  0003c	b8 73 06 00 00	 mov	 eax, 1651		; 00000673H
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BM@HNNAHBOO@?$DM?$DM?5USB?4ConnDesc?0?5Input?5null@

; 1652 :         return;

  00046	e9 c3 04 00 00	 jmp	 $LN1@ConfigDesc
$LN6@ConfigDesc:

; 1653 :     }
; 1654 : 
; 1655 :     bInterfaceClass = 0;
; 1656 : 
; 1657 :     descEnd = (PUCHAR)ConfigDesc + ConfigDesc->wTotalLength;

  0004b	0f b7 56 02	 movzx	 edx, WORD PTR [esi+2]
  0004f	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00052	03 d6		 add	 edx, esi
  00054	89 95 ec fb ff
	ff		 mov	 DWORD PTR _descEnd$1$[ebp], edx

; 1658 : 
; 1659 :     commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 1660 : 
; 1661 :     while ((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR) < descEnd &&

  0005a	3b c2		 cmp	 eax, edx
  0005c	0f 83 a2 04 00
	00		 jae	 $LN56@ConfigDesc
$LL2@ConfigDesc:
  00062	8a 0e		 mov	 cl, BYTE PTR [esi]
  00064	0f b6 c1	 movzx	 eax, cl
  00067	03 c6		 add	 eax, esi
  00069	3b c2		 cmp	 eax, edx
  0006b	0f 87 93 04 00
	00		 ja	 $LN56@ConfigDesc

; 1662 :         (PUCHAR)commonDesc + commonDesc->bLength <= descEnd)
; 1663 :     {
; 1664 :         BOOL displayUnknown = FALSE;
; 1665 : 
; 1666 :         switch (commonDesc->bDescriptorType)

  00071	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00075	83 c0 fe	 add	 eax, -2			; fffffffeH
  00078	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _displayUnknown$1$[ebp], 0
  00082	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00085	0f 87 3c 03 00
	00		 ja	 $LN15@ConfigDesc
  0008b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN66@ConfigDesc[eax]
  00092	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN69@ConfigDesc[eax*4]
$LN7@ConfigDesc:

; 1667 :         {
; 1668 :         case USB_CONFIGURATION_DESCRIPTOR_TYPE:
; 1669 :             if (commonDesc->bLength != sizeof(USB_CONFIGURATION_DESCRIPTOR))

  00099	80 f9 09	 cmp	 cl, 9
  0009c	0f 85 25 03 00
	00		 jne	 $LN15@ConfigDesc

; 1733 :     Log(LOG_DEBUG, __LINE__, ">> USB.CfgDesc");

  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KMFKJDAO@?$DO?$DO?5USB?4CfgDesc@
  000a7	68 c5 06 00 00	 push	 1733			; 000006c5H
  000ac	6a 10		 push	 16			; 00000010H
  000ae	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1734 : 
; 1735 :     PushBackDetails("> Configuration Descriptor:");

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PCIMCBFD@?$DO?5Configuration?5Descriptor?3@
  000bb	57		 push	 edi
  000bc	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1736 :     PushBackDetails(">   wTotalLength: 0x%04X", ConfigDesc->wTotalLength);

  000c1	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JBGKFDNL@?$DO?5?5?5wTotalLength?3?50x?$CF04X@
  000cb	57		 push	 edi
  000cc	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1737 :     PushBackDetails(">   bNumInterfaces: 0x%02X", ConfigDesc->bNumInterfaces);

  000d1	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  000d5	83 c4 14	 add	 esp, 20			; 00000014H
  000d8	50		 push	 eax
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNHEPBEN@?$DO?5?5?5bNumInterfaces?3?50x?$CF02X@
  000de	57		 push	 edi
  000df	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1738 :     PushBackDetails(">   bConfigurationValue: 0x%02X", ConfigDesc->bConfigurationValue);

  000e4	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KHMLNGHE@?$DO?5?5?5bConfigurationValue?3?50x?$CF02X@
  000f1	57		 push	 edi
  000f2	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1739 :     PushBackDetails(">   iConfiguration: 0x%02X", ConfigDesc->iConfiguration);

  000f7	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	50		 push	 eax
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MGNBONG@?$DO?5?5?5iConfiguration?3?50x?$CF02X@
  00104	57		 push	 edi
  00105	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1740 : 
; 1741 :     if (ConfigDesc->iConfiguration)

  0010a	8a 46 06	 mov	 al, BYTE PTR [esi+6]
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00110	84 c0		 test	 al, al
  00112	74 09		 je	 SHORT $LN20@ConfigDesc

; 1742 :     {
; 1743 :         StringDescriptor(ConfigDesc->iConfiguration, StringDescs);

  00114	53		 push	 ebx
  00115	50		 push	 eax
  00116	8b cf		 mov	 ecx, edi
  00118	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN20@ConfigDesc:

; 1744 :     }
; 1745 : 
; 1746 :     PushBackDetails(">   bmAttributes: 0x%02X (%s)", ConfigDesc->bmAttributes,

  0011d	8a 4e 07	 mov	 cl, BYTE PTR [esi+7]
  00120	84 c9		 test	 cl, cl
  00122	79 07		 jns	 SHORT $LN24@ConfigDesc
  00124	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@KJBOJHIH@Bus?5Powered@
  00129	eb 1c		 jmp	 SHORT $LN23@ConfigDesc
$LN24@ConfigDesc:
  0012b	f6 c1 40	 test	 cl, 64			; 00000040H
  0012e	74 07		 je	 SHORT $LN22@ConfigDesc
  00130	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@BBGKMOEA@Self?5Powered@
  00135	eb 10		 jmp	 SHORT $LN23@ConfigDesc
$LN22@ConfigDesc:
  00137	f6 c1 20	 test	 cl, 32			; 00000020H
  0013a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@CEMJPFOE@Remote?5Wakeup@
  0013f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01OGPIMHDM@?$DP@
  00144	0f 44 c2	 cmove	 eax, edx
$LN23@ConfigDesc:
  00147	50		 push	 eax
  00148	0f b6 c1	 movzx	 eax, cl
  0014b	50		 push	 eax
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GBBHCHCO@?$DO?5?5?5bmAttributes?3?50x?$CF02X?5?$CI?$CFs?$CJ@
  00151	57		 push	 edi
  00152	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1747 :         (ConfigDesc->bmAttributes & 0x80 ? "Bus Powered" :
; 1748 :         (ConfigDesc->bmAttributes & 0x40 ? "Self Powered" :
; 1749 :             (ConfigDesc->bmAttributes & 0x20 ? "Remote Wakeup" : "?"))));
; 1750 :     PushBackDetails(">   MaxPower: 0x%02X (%d mA)", ConfigDesc->MaxPower, (ConfigDesc->MaxPower * 2));

  00157	0f b6 4e 08	 movzx	 ecx, BYTE PTR [esi+8]
  0015b	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  0015e	50		 push	 eax
  0015f	51		 push	 ecx
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BADCCJC@?$DO?5?5?5MaxPower?3?50x?$CF02X?5?$CI?$CFd?5mA?$CJ@
  00165	57		 push	 edi
  00166	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1751 : 
; 1752 :     Log(LOG_DEBUG, __LINE__, "<< USB.CfgDesc");

  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OFLCOGDC@?$DM?$DM?5USB?4CfgDesc@
  00170	68 d8 06 00 00	 push	 1752			; 000006d8H
  00175	6a 10		 push	 16			; 00000010H
  00177	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1670 :             {
; 1671 :                 displayUnknown = TRUE;
; 1672 :                 break;
; 1673 :             }
; 1674 :             ConfigurationDescriptor((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc, StringDescs);
; 1675 :             break;

  0017c	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _displayUnknown$1$[ebp]

; 1752 :     Log(LOG_DEBUG, __LINE__, "<< USB.CfgDesc");

  00182	83 c4 2c	 add	 esp, 44			; 0000002cH

; 1670 :             {
; 1671 :                 displayUnknown = TRUE;
; 1672 :                 break;
; 1673 :             }
; 1674 :             ConfigurationDescriptor((PUSB_CONFIGURATION_DESCRIPTOR)commonDesc, StringDescs);
; 1675 :             break;

  00185	e9 42 02 00 00	 jmp	 $LN4@ConfigDesc
$LN9@ConfigDesc:

; 1676 : 
; 1677 :         case USB_INTERFACE_DESCRIPTOR_TYPE:
; 1678 :             if ((commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR)) &&

  0018a	80 f9 09	 cmp	 cl, 9
  0018d	74 09		 je	 SHORT $LN10@ConfigDesc
  0018f	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00192	0f 85 2f 02 00
	00		 jne	 $LN15@ConfigDesc
$LN10@ConfigDesc:

; 1758 :     Log(LOG_DEBUG, __LINE__, ">> USB.InterfaceDesc");

  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FGFFFEAJ@?$DO?$DO?5USB?4InterfaceDesc@
  0019d	68 de 06 00 00	 push	 1758			; 000006deH
  001a2	6a 10		 push	 16			; 00000010H
  001a4	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1759 : 
; 1760 :     PushBackDetails("> Interface Descriptor:");

  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FGHPJGGP@?$DO?5Interface?5Descriptor?3@
  001b1	57		 push	 edi
  001b2	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1761 :     PushBackDetails(">   bInterfaceNumber: 0x%02X", InterfaceDesc->bInterfaceNumber);

  001b7	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  001bb	50		 push	 eax
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONGOLDBE@?$DO?5?5?5bInterfaceNumber?3?50x?$CF02X@
  001c1	57		 push	 edi
  001c2	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1762 :     PushBackDetails(">   bAlternateSetting: 0x%02X", InterfaceDesc->bAlternateSetting);

  001c7	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  001cb	83 c4 14	 add	 esp, 20			; 00000014H
  001ce	50		 push	 eax
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JANOLKEO@?$DO?5?5?5bAlternateSetting?3?50x?$CF02X@
  001d4	57		 push	 edi
  001d5	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1763 :     PushBackDetails(">   bNumEndpoints: 0x%02X", InterfaceDesc->bNumEndpoints);

  001da	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e1	50		 push	 eax
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EHJBAMGD@?$DO?5?5?5bNumEndpoints?3?50x?$CF02X@
  001e7	57		 push	 edi
  001e8	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1764 :     PushBackDetails(">   bInterfaceClass: 0x%02X (%s)", InterfaceDesc->bInterfaceClass,

  001ed	8a 4e 05	 mov	 cl, BYTE PTR [esi+5]
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f3	80 f9 01	 cmp	 cl, 1
  001f6	75 07		 jne	 SHORT $LN35@ConfigDesc
  001f8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KKCMAPLJ@Audio@
  001fd	eb 1c		 jmp	 SHORT $LN34@ConfigDesc
$LN35@ConfigDesc:
  001ff	80 f9 03	 cmp	 cl, 3
  00202	75 07		 jne	 SHORT $LN33@ConfigDesc
  00204	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03GLEFGMHP@HID@
  00209	eb 10		 jmp	 SHORT $LN34@ConfigDesc
$LN33@ConfigDesc:
  0020b	80 f9 09	 cmp	 cl, 9
  0020e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03IFOKPDKP@Hub@
  00213	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01OGPIMHDM@?$DP@
  00218	0f 45 c2	 cmovne	 eax, edx
$LN34@ConfigDesc:
  0021b	50		 push	 eax
  0021c	0f b6 c1	 movzx	 eax, cl
  0021f	50		 push	 eax
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KPEKNPLO@?$DO?5?5?5bInterfaceClass?3?50x?$CF02X?5?$CI?$CFs@
  00225	57		 push	 edi
  00226	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1765 :         (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_AUDIO ? "Audio" :
; 1766 :         (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_HUMAN_INTERFACE ? "HID" :
; 1767 :             (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_HUB ? "Hub" : "?"))));
; 1768 : 
; 1769 :     if (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_AUDIO)

  0022b	8a 46 06	 mov	 al, BYTE PTR [esi+6]
  0022e	83 c4 10	 add	 esp, 16			; 00000010H
  00231	80 7e 05 01	 cmp	 BYTE PTR [esi+5], 1
  00235	75 3a		 jne	 SHORT $LN27@ConfigDesc

; 1770 :     {
; 1771 :         PushBackDetails(">   bInterfaceSubClass: 0x%02X (%s)", InterfaceDesc->bInterfaceSubClass,

  00237	3c 01		 cmp	 al, 1
  00239	75 07		 jne	 SHORT $LN39@ConfigDesc
  0023b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0O@FIEMGMDK@Audio?5Control@
  00240	eb 1a		 jmp	 SHORT $LN38@ConfigDesc
$LN39@ConfigDesc:
  00242	3c 02		 cmp	 al, 2
  00244	75 07		 jne	 SHORT $LN37@ConfigDesc
  00246	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BA@CCICINDB@Audio?5Streaming@
  0024b	eb 0f		 jmp	 SHORT $LN38@ConfigDesc
$LN37@ConfigDesc:
  0024d	3c 03		 cmp	 al, 3
  0024f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0P@ODBCJCKO@MIDI?5Streaming@
  00254	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01OGPIMHDM@?$DP@
  00259	0f 45 ca	 cmovne	 ecx, edx
$LN38@ConfigDesc:
  0025c	51		 push	 ecx
  0025d	0f b6 c0	 movzx	 eax, al
  00260	50		 push	 eax
  00261	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@PEKAFJHJ@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X?5@
  00266	57		 push	 edi
  00267	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0026c	83 c4 10	 add	 esp, 16			; 00000010H

; 1772 :             (InterfaceDesc->bInterfaceSubClass == USB_AUDIO_SUBCLASS_AUDIOCONTROL ? "Audio Control" :
; 1773 :             (InterfaceDesc->bInterfaceSubClass == USB_AUDIO_SUBCLASS_AUDIOSTREAMING ? "Audio Streaming" :
; 1774 :                 (InterfaceDesc->bInterfaceSubClass == USB_AUDIO_SUBCLASS_MIDISTREAMING ? "MIDI Streaming" : "?"))));
; 1775 :     }
; 1776 :     else

  0026f	eb 12		 jmp	 SHORT $LN28@ConfigDesc
$LN27@ConfigDesc:

; 1777 :     {
; 1778 :         PushBackDetails(">   bInterfaceSubClass: 0x%02X", InterfaceDesc->bInterfaceSubClass);

  00271	0f b6 c0	 movzx	 eax, al
  00274	50		 push	 eax
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MCCALMMN@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X@
  0027a	57		 push	 edi
  0027b	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00280	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@ConfigDesc:

; 1779 :     }
; 1780 : 
; 1781 :     PushBackDetails(">   bInterfaceProtocol: 0x%02X", InterfaceDesc->bInterfaceProtocol);

  00283	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  00287	50		 push	 eax
  00288	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HNOOPNHM@?$DO?5?5?5bInterfaceProtocol?3?50x?$CF02X@
  0028d	57		 push	 edi
  0028e	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1782 :     PushBackDetails(">   iInterface: 0x%02X", InterfaceDesc->iInterface);

  00293	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	50		 push	 eax
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JAJKJCLD@?$DO?5?5?5iInterface?3?50x?$CF02X@
  002a0	57		 push	 edi
  002a1	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1783 : 
; 1784 :     if (InterfaceDesc->iInterface)

  002a6	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  002a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ac	84 c0		 test	 al, al
  002ae	74 09		 je	 SHORT $LN29@ConfigDesc

; 1785 :     {
; 1786 :         StringDescriptor(InterfaceDesc->iInterface, StringDescs);

  002b0	53		 push	 ebx
  002b1	50		 push	 eax
  002b2	8b cf		 mov	 ecx, edi
  002b4	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN29@ConfigDesc:

; 1787 :     }
; 1788 : 
; 1789 :     if (InterfaceDesc->bLength == sizeof(USB_INTERFACE_DESCRIPTOR2))

  002b9	80 3e 0b	 cmp	 BYTE PTR [esi], 11	; 0000000bH
  002bc	75 13		 jne	 SHORT $LN31@ConfigDesc

; 1790 :     {
; 1791 :         PUSB_INTERFACE_DESCRIPTOR2 interfaceDesc2 = (PUSB_INTERFACE_DESCRIPTOR2)InterfaceDesc;
; 1792 :         if (interfaceDesc2)
; 1793 :         {
; 1794 :             PushBackDetails(">   wNumClasses: 0x%04X", interfaceDesc2->wNumClasses);

  002be	0f b7 46 09	 movzx	 eax, WORD PTR [esi+9]
  002c2	50		 push	 eax
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MFPCCAIN@?$DO?5?5?5wNumClasses?3?50x?$CF04X@
  002c8	57		 push	 edi
  002c9	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  002ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@ConfigDesc:

; 1795 :         }
; 1796 :     }
; 1797 : 
; 1798 :     Log(LOG_DEBUG, __LINE__, "<< USB.InterfaceDesc");

  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HIFPCDPI@?$DM?$DM?5USB?4InterfaceDesc@
  002d6	68 06 07 00 00	 push	 1798			; 00000706H
  002db	6a 10		 push	 16			; 00000010H
  002dd	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1679 :                 (commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR2)))
; 1680 :             {
; 1681 :                 displayUnknown = TRUE;
; 1682 :                 break;
; 1683 :             }
; 1684 :             bInterfaceClass = ((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->bInterfaceClass;
; 1685 :             bInterfaceSubClass = ((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->bInterfaceSubClass;
; 1686 : 
; 1687 :             InterfaceDescriptor((PUSB_INTERFACE_DESCRIPTOR)commonDesc, StringDescs);
; 1688 :             break;

  002e2	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _displayUnknown$1$[ebp]

; 1798 :     Log(LOG_DEBUG, __LINE__, "<< USB.InterfaceDesc");

  002e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1679 :                 (commonDesc->bLength != sizeof(USB_INTERFACE_DESCRIPTOR2)))
; 1680 :             {
; 1681 :                 displayUnknown = TRUE;
; 1682 :                 break;
; 1683 :             }
; 1684 :             bInterfaceClass = ((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->bInterfaceClass;
; 1685 :             bInterfaceSubClass = ((PUSB_INTERFACE_DESCRIPTOR)commonDesc)->bInterfaceSubClass;
; 1686 : 
; 1687 :             InterfaceDescriptor((PUSB_INTERFACE_DESCRIPTOR)commonDesc, StringDescs);
; 1688 :             break;

  002eb	e9 dc 00 00 00	 jmp	 $LN4@ConfigDesc
$LN11@ConfigDesc:

; 1689 : 
; 1690 :         case USB_ENDPOINT_DESCRIPTOR_TYPE:
; 1691 :             if ((commonDesc->bLength != sizeof(USB_ENDPOINT_DESCRIPTOR)) &&

  002f0	80 f9 07	 cmp	 cl, 7
  002f3	74 09		 je	 SHORT $LN12@ConfigDesc
  002f5	80 f9 09	 cmp	 cl, 9
  002f8	0f 85 c9 00 00
	00		 jne	 $LN15@ConfigDesc
$LN12@ConfigDesc:

; 1692 :                 (commonDesc->bLength != sizeof(USB_ENDPOINT_DESCRIPTOR2)))
; 1693 :             {
; 1694 :                 displayUnknown = TRUE;
; 1695 :                 break;
; 1696 :             }
; 1697 :             EndpointDescriptor((PUSB_ENDPOINT_DESCRIPTOR)commonDesc);

  002fe	56		 push	 esi
  002ff	8b cf		 mov	 ecx, edi
  00301	e8 00 00 00 00	 call	 ?EndpointDescriptor@USB@@IAEXPAU_USB_ENDPOINT_DESCRIPTOR@@@Z ; USB::EndpointDescriptor

; 1698 :             break;

  00306	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _displayUnknown$1$[ebp]
  0030c	e9 bb 00 00 00	 jmp	 $LN4@ConfigDesc
$LN13@ConfigDesc:

; 1699 : 
; 1700 :         case USB_HID_DESCRIPTOR_TYPE:
; 1701 :             if (commonDesc->bLength < sizeof(USB_HID_DESCRIPTOR))

  00311	80 f9 09	 cmp	 cl, 9
  00314	0f 82 ad 00 00
	00		 jb	 $LN15@ConfigDesc

; 1859 :     Log(LOG_DEBUG, __LINE__, ">> USB.HidDesc");

  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IBOMINBP@?$DO?$DO?5USB?4HidDesc@
  0031f	68 43 07 00 00	 push	 1859			; 00000743H
  00324	6a 10		 push	 16			; 00000010H
  00326	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1860 : 
; 1861 :     PushBackDetails("> HID Descriptor:");

  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FKMEKGFJ@?$DO?5HID?5Descriptor?3@
  00333	57		 push	 edi
  00334	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1862 : 
; 1863 :     PushBackDetails(">   bcdHID: 0x%04X", HidDesc->bcdHID);

  00339	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0033d	50		 push	 eax
  0033e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JNJCPDHI@?$DO?5?5?5bcdHID?3?50x?$CF04X@
  00343	57		 push	 edi
  00344	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1864 :     PushBackDetails(">   bCountryCode: 0x%02X", HidDesc->bCountryCode);

  00349	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  0034d	83 c4 14	 add	 esp, 20			; 00000014H
  00350	50		 push	 eax
  00351	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CKIDJFBI@?$DO?5?5?5bCountryCode?3?50x?$CF02X@
  00356	57		 push	 edi
  00357	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1865 :     PushBackDetails(">   bNumDescriptors: 0x%02X", HidDesc->bNumDescriptors);

  0035c	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  00360	83 c4 0c	 add	 esp, 12			; 0000000cH
  00363	50		 push	 eax
  00364	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MKJBFMNP@?$DO?5?5?5bNumDescriptors?3?50x?$CF02X@
  00369	57		 push	 edi
  0036a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1866 : 
; 1867 :     for (uint8_t i = 0; i < HidDesc->bNumDescriptors; i++)

  0036f	32 db		 xor	 bl, bl
  00371	83 c4 0c	 add	 esp, 12			; 0000000cH
  00374	38 5e 05	 cmp	 BYTE PTR [esi+5], bl
  00377	76 32		 jbe	 SHORT $LN43@ConfigDesc
  00379	0f 1f 80 00 00
	00 00		 npad	 7
$LL44@ConfigDesc:

; 1868 :     {
; 1869 :         PushBackDetails(">   %.3i, bDescriptorType: 0x%02X, wDescriptorLength: 0x%04X", i,

  00380	0f b6 cb	 movzx	 ecx, bl
  00383	8d 04 4e	 lea	 eax, DWORD PTR [esi+ecx*2]
  00386	0f b7 44 01 07	 movzx	 eax, WORD PTR [ecx+eax+7]
  0038b	50		 push	 eax
  0038c	8d 04 4e	 lea	 eax, DWORD PTR [esi+ecx*2]
  0038f	0f b6 44 01 06	 movzx	 eax, BYTE PTR [ecx+eax+6]
  00394	50		 push	 eax
  00395	51		 push	 ecx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@JAEDHMBE@?$DO?5?5?5?$CF?43i?0?5bDescriptorType?3?50x?$CF0@
  0039b	57		 push	 edi
  0039c	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  003a1	fe c3		 inc	 bl
  003a3	83 c4 14	 add	 esp, 20			; 00000014H
  003a6	3a 5e 05	 cmp	 bl, BYTE PTR [esi+5]
  003a9	72 d5		 jb	 SHORT $LL44@ConfigDesc
$LN43@ConfigDesc:

; 1870 :             HidDesc->OptionalDescriptors[i].bDescriptorType, HidDesc->OptionalDescriptors[i].wDescriptorLength);
; 1871 :     }
; 1872 : 
; 1873 :     Log(LOG_DEBUG, __LINE__, "<< USB.HidDesc");

  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MIAEPICD@?$DM?$DM?5USB?4HidDesc@
  003b0	68 51 07 00 00	 push	 1873			; 00000751H
  003b5	6a 10		 push	 16			; 00000010H
  003b7	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1702 :             {
; 1703 :                 displayUnknown = TRUE;
; 1704 :                 break;
; 1705 :             }
; 1706 :             HidDescriptor((PUSB_HID_DESCRIPTOR)commonDesc);
; 1707 :             break;

  003bc	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _displayUnknown$1$[ebp]

; 1873 :     Log(LOG_DEBUG, __LINE__, "<< USB.HidDesc");

  003c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1702 :             {
; 1703 :                 displayUnknown = TRUE;
; 1704 :                 break;
; 1705 :             }
; 1706 :             HidDescriptor((PUSB_HID_DESCRIPTOR)commonDesc);
; 1707 :             break;

  003c5	eb 05		 jmp	 SHORT $LN4@ConfigDesc
$LN15@ConfigDesc:

; 1708 : 
; 1709 :         default:
; 1710 :             //if(bInterfaceClass==USB_DEVICE_CLASS_AUDIO)
; 1711 :             //    displayUnknown = !AudioDescriptor((PUSB_AUDIO_COMMON_DESCRIPTOR)commonDesc,bInterfaceSubClass);
; 1712 :             //else
; 1713 :             displayUnknown = TRUE;
; 1714 :             break;
; 1715 :         }
; 1716 : 
; 1717 :         if (displayUnknown)

  003c7	b8 01 00 00 00	 mov	 eax, 1
$LN4@ConfigDesc:
  003cc	85 c0		 test	 eax, eax
  003ce	0f 84 0d 01 00
	00		 je	 $LN16@ConfigDesc

; 1914 :     Log(LOG_DEBUG, __LINE__, ">> USB.UnknownDesc");

  003d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LEEGFGLN@?$DO?$DO?5USB?4UnknownDesc@
  003d9	68 7a 07 00 00	 push	 1914			; 0000077aH
  003de	6a 10		 push	 16			; 00000010H
  003e0	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  003e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1915 : 
; 1916 :     PushBackDetails("> Unknown Descriptor:");

  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FBFGEGLK@?$DO?5Unknown?5Descriptor?3@
  003ed	57		 push	 edi
  003ee	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1917 :     PushBackDetails(">   bDescriptorType: 0x%02X", CommonDesc->bDescriptorType);

  003f3	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  003f7	50		 push	 eax
  003f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HOMJLHIG@?$DO?5?5?5bDescriptorType?3?50x?$CF02X@
  003fd	57		 push	 edi
  003fe	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1918 :     PushBackDetails(">   bLength: 0x%02X", CommonDesc->bLength);

  00403	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00406	83 c4 14	 add	 esp, 20			; 00000014H
  00409	50		 push	 eax
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PKPADJND@?$DO?5?5?5bLength?3?50x?$CF02X@
  0040f	57		 push	 edi
  00410	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00415	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1919 : 
; 1920 :     uint8_t i = 0;
; 1921 :     char format[1024] = { 0 };

  00418	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _format$1[ebp]
  0041e	32 db		 xor	 bl, bl
  00420	88 9d f7 fb ff
	ff		 mov	 BYTE PTR _i$1$[ebp], bl
  00426	68 00 04 00 00	 push	 1024			; 00000400H
  0042b	6a 00		 push	 0
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 _memset
  00433	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1922 :     for (; i < CommonDesc->bLength; i++)

  00436	38 1e		 cmp	 BYTE PTR [esi], bl
  00438	0f 86 7a 00 00
	00		 jbe	 $LN48@ConfigDesc
  0043e	66 90		 npad	 2
$LL49@ConfigDesc:

; 1923 :     {
; 1924 :         _snprintf(format, sizeof(format) - 1, "%s.%02X", format, ((uint8_t*)CommonDesc)[i]);

  00440	0f b6 db	 movzx	 ebx, bl
  00443	0f b6 04 33	 movzx	 eax, BYTE PTR [ebx+esi]
  00447	50		 push	 eax
  00448	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _format$1[ebp]
  0044e	50		 push	 eax
  0044f	68 00 00 00 00	 push	 OFFSET ??_C@_07GHOKFMCD@?$CFs?4?$CF02X@
  00454	68 ff 03 00 00	 push	 1023			; 000003ffH
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 __snprintf

; 1925 : 
; 1926 :         if (i % 16 == 15)

  0045f	83 e3 0f	 and	 ebx, 15			; 0000000fH
  00462	83 c4 14	 add	 esp, 20			; 00000014H
  00465	80 fb 0f	 cmp	 bl, 15			; 0000000fH
  00468	75 3c		 jne	 SHORT $LN47@ConfigDesc

; 1927 :         {
; 1928 :             PushBackDetails(format);

  0046a	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _format$1[ebp]
  00470	50		 push	 eax
  00471	57		 push	 edi
  00472	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1929 :             memset(format, 0x00, sizeof(format));

  00477	68 00 04 00 00	 push	 1024			; 00000400H
  0047c	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _format$1[ebp]
  00482	6a 00		 push	 0
  00484	50		 push	 eax
  00485	e8 00 00 00 00	 call	 _memset
  0048a	83 c4 14	 add	 esp, 20			; 00000014H

; 1930 :             _snprintf(format, sizeof(format) - 1, ">   ");

  0048d	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _format$1[ebp]
  00493	68 00 00 00 00	 push	 OFFSET ??_C@_04CKDHMDHJ@?$DO?5?5?5@
  00498	68 ff 03 00 00	 push	 1023			; 000003ffH
  0049d	50		 push	 eax
  0049e	e8 00 00 00 00	 call	 __snprintf
  004a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@ConfigDesc:

; 1922 :     for (; i < CommonDesc->bLength; i++)

  004a6	8a 9d f7 fb ff
	ff		 mov	 bl, BYTE PTR _i$1$[ebp]
  004ac	fe c3		 inc	 bl
  004ae	88 9d f7 fb ff
	ff		 mov	 BYTE PTR _i$1$[ebp], bl
  004b4	3a 1e		 cmp	 bl, BYTE PTR [esi]
  004b6	72 88		 jb	 SHORT $LL49@ConfigDesc
$LN48@ConfigDesc:

; 1931 :         }
; 1932 :     }
; 1933 : 
; 1934 :     if (i % 16 != 0)

  004b8	f6 c3 0f	 test	 bl, 15			; 0000000fH
  004bb	74 10		 je	 SHORT $LN51@ConfigDesc

; 1935 :     {
; 1936 :         PushBackDetails(format);

  004bd	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _format$1[ebp]
  004c3	50		 push	 eax
  004c4	57		 push	 edi
  004c5	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  004ca	83 c4 08	 add	 esp, 8
$LN51@ConfigDesc:

; 1937 :     }
; 1938 : 
; 1939 :     Log(LOG_DEBUG, __LINE__, "<< USB.UnknownDesc");

  004cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MFCGDLMP@?$DM?$DM?5USB?4UnknownDesc@
  004d2	68 93 07 00 00	 push	 1939			; 00000793H
  004d7	6a 10		 push	 16			; 00000010H
  004d9	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  004de	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@ConfigDesc:

; 1718 :         {
; 1719 :             UnknownDescriptor(commonDesc);
; 1720 :         }
; 1721 : 
; 1722 :         if (commonDesc->bLength == 0x00)

  004e1	8a 06		 mov	 al, BYTE PTR [esi]
  004e3	84 c0		 test	 al, al
  004e5	74 1d		 je	 SHORT $LN56@ConfigDesc

; 1658 : 
; 1659 :     commonDesc = (PUSB_COMMON_DESCRIPTOR)ConfigDesc;
; 1660 : 
; 1661 :     while ((PUCHAR)commonDesc + sizeof(USB_COMMON_DESCRIPTOR) < descEnd &&

  004e7	8b 95 ec fb ff
	ff		 mov	 edx, DWORD PTR _descEnd$1$[ebp]
  004ed	8b 9d e8 fb ff
	ff		 mov	 ebx, DWORD PTR _StringDescs$GSCopy$1$[ebp]

; 1723 :             break;  //no more data
; 1724 : 
; 1725 :         commonDesc += commonDesc->bLength;

  004f3	0f b6 c0	 movzx	 eax, al
  004f6	8d 34 46	 lea	 esi, DWORD PTR [esi+eax*2]
  004f9	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  004fc	3b c2		 cmp	 eax, edx
  004fe	0f 82 5e fb ff
	ff		 jb	 $LL2@ConfigDesc
$LN56@ConfigDesc:

; 1726 :     }
; 1727 :     Log(LOG_DEBUG, __LINE__, "<< USB.ConnDesc");

  00504	b8 bf 06 00 00	 mov	 eax, 1727		; 000006bfH
  00509	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BA@DPPHAOCN@?$DM?$DM?5USB?4ConnDesc@
$LN1@ConfigDesc:

; 1728 : }

  0050e	51		 push	 ecx
  0050f	50		 push	 eax
  00510	6a 10		 push	 16			; 00000010H
  00512	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00517	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0051a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0051d	33 cd		 xor	 ecx, ebp
  0051f	5f		 pop	 edi
  00520	5e		 pop	 esi
  00521	5b		 pop	 ebx
  00522	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00527	8b e5		 mov	 esp, ebp
  00529	5d		 pop	 ebp
  0052a	c2 08 00	 ret	 8
  0052d	0f 1f 00	 npad	 3
$LN69@ConfigDesc:
  00530	00 00 00 00	 DD	 $LN7@ConfigDesc
  00534	00 00 00 00	 DD	 $LN9@ConfigDesc
  00538	00 00 00 00	 DD	 $LN11@ConfigDesc
  0053c	00 00 00 00	 DD	 $LN13@ConfigDesc
  00540	00 00 00 00	 DD	 $LN15@ConfigDesc
$LN66@ConfigDesc:
  00544	00		 DB	 0
  00545	04		 DB	 4
  00546	01		 DB	 1
  00547	02		 DB	 2
  00548	04		 DB	 4
  00549	04		 DB	 4
  0054a	04		 DB	 4
  0054b	04		 DB	 4
  0054c	04		 DB	 4
  0054d	04		 DB	 4
  0054e	04		 DB	 4
  0054f	04		 DB	 4
  00550	04		 DB	 4
  00551	04		 DB	 4
  00552	04		 DB	 4
  00553	04		 DB	 4
  00554	04		 DB	 4
  00555	04		 DB	 4
  00556	04		 DB	 4
  00557	04		 DB	 4
  00558	04		 DB	 4
  00559	04		 DB	 4
  0055a	04		 DB	 4
  0055b	04		 DB	 4
  0055c	04		 DB	 4
  0055d	04		 DB	 4
  0055e	04		 DB	 4
  0055f	04		 DB	 4
  00560	04		 DB	 4
  00561	04		 DB	 4
  00562	04		 DB	 4
  00563	03		 DB	 3
?ConfigDesc@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ENDP ; USB::ConfigDesc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_ConfigDesc$ = 8					; size = 4
_StringDescs$ = 12					; size = 4
?ConfigurationDescriptor@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z PROC ; USB::ConfigurationDescriptor
; _this$ = ecx

; 1732 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1733 :     Log(LOG_DEBUG, __LINE__, ">> USB.CfgDesc");

  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KMFKJDAO@?$DO?$DO?5USB?4CfgDesc@
  0000a	68 c5 06 00 00	 push	 1733			; 000006c5H
  0000f	6a 10		 push	 16			; 00000010H
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1734 : 
; 1735 :     PushBackDetails("> Configuration Descriptor:");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PCIMCBFD@?$DO?5Configuration?5Descriptor?3@
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1736 :     PushBackDetails(">   wTotalLength: 0x%04X", ConfigDesc->wTotalLength);

  00026	8b 7d 08	 mov	 edi, DWORD PTR _ConfigDesc$[ebp]
  00029	0f b7 47 02	 movzx	 eax, WORD PTR [edi+2]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JBGKFDNL@?$DO?5?5?5wTotalLength?3?50x?$CF04X@
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1737 :     PushBackDetails(">   bNumInterfaces: 0x%02X", ConfigDesc->bNumInterfaces);

  00039	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  0003d	83 c4 14	 add	 esp, 20			; 00000014H
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNHEPBEN@?$DO?5?5?5bNumInterfaces?3?50x?$CF02X@
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1738 :     PushBackDetails(">   bConfigurationValue: 0x%02X", ConfigDesc->bConfigurationValue);

  0004c	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KHMLNGHE@?$DO?5?5?5bConfigurationValue?3?50x?$CF02X@
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1739 :     PushBackDetails(">   iConfiguration: 0x%02X", ConfigDesc->iConfiguration);

  0005f	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MGNBONG@?$DO?5?5?5iConfiguration?3?50x?$CF02X@
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1740 : 
; 1741 :     if (ConfigDesc->iConfiguration)

  00072	8a 47 06	 mov	 al, BYTE PTR [edi+6]
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	84 c0		 test	 al, al
  0007a	74 0b		 je	 SHORT $LN2@Configurat

; 1742 :     {
; 1743 :         StringDescriptor(ConfigDesc->iConfiguration, StringDescs);

  0007c	ff 75 0c	 push	 DWORD PTR _StringDescs$[ebp]
  0007f	8b ce		 mov	 ecx, esi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN2@Configurat:

; 1744 :     }
; 1745 : 
; 1746 :     PushBackDetails(">   bmAttributes: 0x%02X (%s)", ConfigDesc->bmAttributes,

  00087	8a 4f 07	 mov	 cl, BYTE PTR [edi+7]
  0008a	84 c9		 test	 cl, cl
  0008c	79 07		 jns	 SHORT $LN6@Configurat
  0008e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@KJBOJHIH@Bus?5Powered@
  00093	eb 1c		 jmp	 SHORT $LN5@Configurat
$LN6@Configurat:
  00095	f6 c1 40	 test	 cl, 64			; 00000040H
  00098	74 07		 je	 SHORT $LN4@Configurat
  0009a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@BBGKMOEA@Self?5Powered@
  0009f	eb 10		 jmp	 SHORT $LN5@Configurat
$LN4@Configurat:
  000a1	f6 c1 20	 test	 cl, 32			; 00000020H
  000a4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@CEMJPFOE@Remote?5Wakeup@
  000a9	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01OGPIMHDM@?$DP@
  000ae	0f 44 c2	 cmove	 eax, edx
$LN5@Configurat:
  000b1	50		 push	 eax
  000b2	0f b6 c1	 movzx	 eax, cl
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GBBHCHCO@?$DO?5?5?5bmAttributes?3?50x?$CF02X?5?$CI?$CFs?$CJ@
  000bb	56		 push	 esi
  000bc	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1747 :         (ConfigDesc->bmAttributes & 0x80 ? "Bus Powered" :
; 1748 :         (ConfigDesc->bmAttributes & 0x40 ? "Self Powered" :
; 1749 :             (ConfigDesc->bmAttributes & 0x20 ? "Remote Wakeup" : "?"))));
; 1750 :     PushBackDetails(">   MaxPower: 0x%02X (%d mA)", ConfigDesc->MaxPower, (ConfigDesc->MaxPower * 2));

  000c1	0f b6 4f 08	 movzx	 ecx, BYTE PTR [edi+8]
  000c5	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  000c8	50		 push	 eax
  000c9	51		 push	 ecx
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BADCCJC@?$DO?5?5?5MaxPower?3?50x?$CF02X?5?$CI?$CFd?5mA?$CJ@
  000cf	56		 push	 esi
  000d0	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1751 : 
; 1752 :     Log(LOG_DEBUG, __LINE__, "<< USB.CfgDesc");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OFLCOGDC@?$DM?$DM?5USB?4CfgDesc@
  000da	68 d8 06 00 00	 push	 1752			; 000006d8H
  000df	6a 10		 push	 16			; 00000010H
  000e1	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000e6	83 c4 2c	 add	 esp, 44			; 0000002cH

; 1753 : }

  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
?ConfigurationDescriptor@USB@@IAEXPAU_USB_CONFIGURATION_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ENDP ; USB::ConfigurationDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_InterfaceDesc$ = 8					; size = 4
_StringDescs$ = 12					; size = 4
?InterfaceDescriptor@USB@@IAEXPAU_USB_INTERFACE_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z PROC ; USB::InterfaceDescriptor
; _this$ = ecx

; 1757 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1758 :     Log(LOG_DEBUG, __LINE__, ">> USB.InterfaceDesc");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FGFFFEAJ@?$DO?$DO?5USB?4InterfaceDesc@
  0000c	68 de 06 00 00	 push	 1758			; 000006deH
  00011	6a 10		 push	 16			; 00000010H
  00013	8b f1		 mov	 esi, ecx
  00015	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1759 : 
; 1760 :     PushBackDetails("> Interface Descriptor:");

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FGHPJGGP@?$DO?5Interface?5Descriptor?3@
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1761 :     PushBackDetails(">   bInterfaceNumber: 0x%02X", InterfaceDesc->bInterfaceNumber);

  00028	8b 7d 08	 mov	 edi, DWORD PTR _InterfaceDesc$[ebp]
  0002b	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONGOLDBE@?$DO?5?5?5bInterfaceNumber?3?50x?$CF02X@
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1762 :     PushBackDetails(">   bAlternateSetting: 0x%02X", InterfaceDesc->bAlternateSetting);

  0003b	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0003f	83 c4 14	 add	 esp, 20			; 00000014H
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JANOLKEO@?$DO?5?5?5bAlternateSetting?3?50x?$CF02X@
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1763 :     PushBackDetails(">   bNumEndpoints: 0x%02X", InterfaceDesc->bNumEndpoints);

  0004e	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EHJBAMGD@?$DO?5?5?5bNumEndpoints?3?50x?$CF02X@
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1764 :     PushBackDetails(">   bInterfaceClass: 0x%02X (%s)", InterfaceDesc->bInterfaceClass,

  00061	8a 4f 05	 mov	 cl, BYTE PTR [edi+5]
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
  00067	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_01OGPIMHDM@?$DP@
  0006c	80 f9 01	 cmp	 cl, 1
  0006f	75 07		 jne	 SHORT $LN10@InterfaceD
  00071	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KKCMAPLJ@Audio@
  00076	eb 17		 jmp	 SHORT $LN9@InterfaceD
$LN10@InterfaceD:
  00078	80 f9 03	 cmp	 cl, 3
  0007b	75 07		 jne	 SHORT $LN8@InterfaceD
  0007d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03GLEFGMHP@HID@
  00082	eb 0b		 jmp	 SHORT $LN9@InterfaceD
$LN8@InterfaceD:
  00084	80 f9 09	 cmp	 cl, 9
  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03IFOKPDKP@Hub@
  0008c	0f 45 c3	 cmovne	 eax, ebx
$LN9@InterfaceD:
  0008f	50		 push	 eax
  00090	0f b6 c1	 movzx	 eax, cl
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KPEKNPLO@?$DO?5?5?5bInterfaceClass?3?50x?$CF02X?5?$CI?$CFs@
  00099	56		 push	 esi
  0009a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1765 :         (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_AUDIO ? "Audio" :
; 1766 :         (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_HUMAN_INTERFACE ? "HID" :
; 1767 :             (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_HUB ? "Hub" : "?"))));
; 1768 : 
; 1769 :     if (InterfaceDesc->bInterfaceClass == USB_DEVICE_CLASS_AUDIO)

  0009f	8a 47 06	 mov	 al, BYTE PTR [edi+6]
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	80 7f 05 01	 cmp	 BYTE PTR [edi+5], 1
  000a9	75 35		 jne	 SHORT $LN2@InterfaceD

; 1770 :     {
; 1771 :         PushBackDetails(">   bInterfaceSubClass: 0x%02X (%s)", InterfaceDesc->bInterfaceSubClass,

  000ab	3c 01		 cmp	 al, 1
  000ad	75 07		 jne	 SHORT $LN14@InterfaceD
  000af	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0O@FIEMGMDK@Audio?5Control@
  000b4	eb 15		 jmp	 SHORT $LN13@InterfaceD
$LN14@InterfaceD:
  000b6	3c 02		 cmp	 al, 2
  000b8	75 07		 jne	 SHORT $LN12@InterfaceD
  000ba	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BA@CCICINDB@Audio?5Streaming@
  000bf	eb 0a		 jmp	 SHORT $LN13@InterfaceD
$LN12@InterfaceD:
  000c1	3c 03		 cmp	 al, 3
  000c3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0P@ODBCJCKO@MIDI?5Streaming@
  000c8	0f 45 cb	 cmovne	 ecx, ebx
$LN13@InterfaceD:
  000cb	51		 push	 ecx
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@PEKAFJHJ@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X?5@
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  000db	83 c4 10	 add	 esp, 16			; 00000010H

; 1772 :             (InterfaceDesc->bInterfaceSubClass == USB_AUDIO_SUBCLASS_AUDIOCONTROL ? "Audio Control" :
; 1773 :             (InterfaceDesc->bInterfaceSubClass == USB_AUDIO_SUBCLASS_AUDIOSTREAMING ? "Audio Streaming" :
; 1774 :                 (InterfaceDesc->bInterfaceSubClass == USB_AUDIO_SUBCLASS_MIDISTREAMING ? "MIDI Streaming" : "?"))));
; 1775 :     }
; 1776 :     else

  000de	eb 12		 jmp	 SHORT $LN3@InterfaceD
$LN2@InterfaceD:

; 1777 :     {
; 1778 :         PushBackDetails(">   bInterfaceSubClass: 0x%02X", InterfaceDesc->bInterfaceSubClass);

  000e0	0f b6 c0	 movzx	 eax, al
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MCCALMMN@?$DO?5?5?5bInterfaceSubClass?3?50x?$CF02X@
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@InterfaceD:

; 1779 :     }
; 1780 : 
; 1781 :     PushBackDetails(">   bInterfaceProtocol: 0x%02X", InterfaceDesc->bInterfaceProtocol);

  000f2	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  000f6	50		 push	 eax
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HNOOPNHM@?$DO?5?5?5bInterfaceProtocol?3?50x?$CF02X@
  000fc	56		 push	 esi
  000fd	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1782 :     PushBackDetails(">   iInterface: 0x%02X", InterfaceDesc->iInterface);

  00102	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	50		 push	 eax
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JAJKJCLD@?$DO?5?5?5iInterface?3?50x?$CF02X@
  0010f	56		 push	 esi
  00110	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1783 : 
; 1784 :     if (InterfaceDesc->iInterface)

  00115	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011b	84 c0		 test	 al, al
  0011d	74 0b		 je	 SHORT $LN4@InterfaceD

; 1785 :     {
; 1786 :         StringDescriptor(InterfaceDesc->iInterface, StringDescs);

  0011f	ff 75 0c	 push	 DWORD PTR _StringDescs$[ebp]
  00122	8b ce		 mov	 ecx, esi
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ; USB::StringDescriptor
$LN4@InterfaceD:

; 1787 :     }
; 1788 : 
; 1789 :     if (InterfaceDesc->bLength == sizeof(USB_INTERFACE_DESCRIPTOR2))

  0012a	80 3f 0b	 cmp	 BYTE PTR [edi], 11	; 0000000bH
  0012d	75 13		 jne	 SHORT $LN6@InterfaceD

; 1790 :     {
; 1791 :         PUSB_INTERFACE_DESCRIPTOR2 interfaceDesc2 = (PUSB_INTERFACE_DESCRIPTOR2)InterfaceDesc;
; 1792 :         if (interfaceDesc2)
; 1793 :         {
; 1794 :             PushBackDetails(">   wNumClasses: 0x%04X", interfaceDesc2->wNumClasses);

  0012f	0f b7 47 09	 movzx	 eax, WORD PTR [edi+9]
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MFPCCAIN@?$DO?5?5?5wNumClasses?3?50x?$CF04X@
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InterfaceD:

; 1795 :         }
; 1796 :     }
; 1797 : 
; 1798 :     Log(LOG_DEBUG, __LINE__, "<< USB.InterfaceDesc");

  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HIFPCDPI@?$DM?$DM?5USB?4InterfaceDesc@
  00147	68 06 07 00 00	 push	 1798			; 00000706H
  0014c	6a 10		 push	 16			; 00000010H
  0014e	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1799 : }

  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	59		 pop	 ecx
  0015a	5d		 pop	 ebp
  0015b	c2 08 00	 ret	 8
?InterfaceDescriptor@USB@@IAEXPAU_USB_INTERFACE_DESCRIPTOR@@PAU_STRING_DESCRIPTOR_NODE@@@Z ENDP ; USB::InterfaceDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_EndpointDesc$ = 8					; size = 4
?EndpointDescriptor@USB@@IAEXPAU_USB_ENDPOINT_DESCRIPTOR@@@Z PROC ; USB::EndpointDescriptor
; _this$ = ecx

; 1803 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR _EndpointDesc$[ebp]
  00009	8b f1		 mov	 esi, ecx

; 1804 :     Log(LOG_DEBUG, __LINE__, ">> USB.EndpointDesc");

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BNJCNLHH@?$DO?$DO?5USB?4EndpointDesc@
  00010	68 0c 07 00 00	 push	 1804			; 0000070cH
  00015	6a 10		 push	 16			; 00000010H
  00017	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1805 : 
; 1806 :     PushBackDetails("> Endpoint Descriptor:");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NNPPCJHP@?$DO?5Endpoint?5Descriptor?3@
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1807 : 
; 1808 :     if (USB_ENDPOINT_DIRECTION_IN(EndpointDesc->bEndpointAddress))

  0002a	8a 4f 02	 mov	 cl, BYTE PTR [edi+2]

; 1809 :     {
; 1810 :         PushBackDetails(">   bEndpointAddress: 0x%02X IN", EndpointDesc->bEndpointAddress);
; 1811 :     }
; 1812 :     else
; 1813 :     {
; 1814 :         PushBackDetails(">   bEndpointAddress: 0x%02X OUT", EndpointDesc->bEndpointAddress);
; 1815 :     }
; 1816 : 
; 1817 :     switch (EndpointDesc->bmAttributes & 0x03)

  0002d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CA@IMJGHBI@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5IN@
  00032	0f b6 c1	 movzx	 eax, cl
  00035	84 c9		 test	 cl, cl
  00037	50		 push	 eax
  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CB@PIKLNKCM@?$DO?5?5?5bEndpointAddress?3?50x?$CF02X?5OU@
  0003d	0f 48 c2	 cmovs	 eax, edx
  00040	50		 push	 eax
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00047	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
  0004e	83 e0 03	 and	 eax, 3
  00051	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@EndpointDe[eax*4]
$LN6@EndpointDe:

; 1818 :     {
; 1819 :     case 0x00:
; 1820 :         PushBackDetails(">   Transfer Type: Control");

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ICIOMPJC@?$DO?5?5?5Transfer?5Type?3?5Control@

; 1821 :         break;

  0005d	eb 13		 jmp	 SHORT $LN14@EndpointDe
$LN7@EndpointDe:

; 1822 : 
; 1823 :     case 0x01:
; 1824 :         PushBackDetails(">   Transfer Type: Isochronous");

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DMDNFJME@?$DO?5?5?5Transfer?5Type?3?5Isochronous@

; 1825 :         break;

  00064	eb 0c		 jmp	 SHORT $LN14@EndpointDe
$LN8@EndpointDe:

; 1826 : 
; 1827 :     case 0x02:
; 1828 :         PushBackDetails(">   Transfer Type: Bulk");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@ELEHNLID@?$DO?5?5?5Transfer?5Type?3?5Bulk@

; 1829 :         break;

  0006b	eb 05		 jmp	 SHORT $LN14@EndpointDe
$LN9@EndpointDe:

; 1830 : 
; 1831 :     case 0x03:
; 1832 :         PushBackDetails(">   Transfer Type: Interrupt");

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MOOEBEKA@?$DO?5?5?5Transfer?5Type?3?5Interrupt@
$LN14@EndpointDe:

; 1833 :         break;
; 1834 : 
; 1835 :     }
; 1836 : 
; 1837 :     PushBackDetails(">   wMaxPacketSize: 0x%04X (%d)", EndpointDesc->wMaxPacketSize, EndpointDesc->wMaxPacketSize);

  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00078	83 c4 08	 add	 esp, 8
$LN2@EndpointDe:
  0007b	0f b7 47 04	 movzx	 eax, WORD PTR [edi+4]
  0007f	50		 push	 eax
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OFHICAPC@?$DO?5?5?5wMaxPacketSize?3?50x?$CF04X?5?$CI?$CFd?$CJ@
  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0008c	83 c4 10	 add	 esp, 16			; 00000010H

; 1838 : 
; 1839 :     if (EndpointDesc->bLength == sizeof(USB_ENDPOINT_DESCRIPTOR))

  0008f	80 3f 07	 cmp	 BYTE PTR [edi], 7
  00092	75 0a		 jne	 SHORT $LN10@EndpointDe

; 1840 :     {
; 1841 :         PushBackDetails(">   bInterval: 0x%02X", EndpointDesc->bInterval);

  00094	8a 47 06	 mov	 al, BYTE PTR [edi+6]
  00097	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BG@LPGMHCMJ@?$DO?5?5?5bInterval?3?50x?$CF02X@

; 1842 :     }
; 1843 :     else

  0009c	eb 1b		 jmp	 SHORT $LN12@EndpointDe
$LN10@EndpointDe:

; 1844 :     {
; 1845 :         PUSB_ENDPOINT_DESCRIPTOR2 endpointDesc2 = (PUSB_ENDPOINT_DESCRIPTOR2)EndpointDesc;
; 1846 :         if (endpointDesc2)
; 1847 :         {
; 1848 :             PushBackDetails(">   wInterval: 0x%04X", endpointDesc2->wInterval);

  0009e	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HBLIDDIE@?$DO?5?5?5wInterval?3?50x?$CF04X@
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1849 :             PushBackDetails(">   bSyncAddress: 0x%02X", endpointDesc2->bSyncAddress);

  000ae	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BJ@CECFOBBD@?$DO?5?5?5bSyncAddress?3?50x?$CF02X@
$LN12@EndpointDe:

; 1850 :         }
; 1851 :     }
; 1852 : 
; 1853 :     Log(LOG_DEBUG, __LINE__, "<< USB.EndpointDesc");

  000b9	0f b6 c0	 movzx	 eax, al
  000bc	50		 push	 eax
  000bd	51		 push	 ecx
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KDOIKLAK@?$DM?$DM?5USB?4EndpointDesc@
  000cc	68 3d 07 00 00	 push	 1853			; 0000073dH
  000d1	6a 10		 push	 16			; 00000010H
  000d3	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1854 : }

  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	59		 pop	 ecx
  000de	5d		 pop	 ebp
  000df	c2 04 00	 ret	 4
  000e2	66 90		 npad	 2
$LN16@EndpointDe:
  000e4	00 00 00 00	 DD	 $LN6@EndpointDe
  000e8	00 00 00 00	 DD	 $LN7@EndpointDe
  000ec	00 00 00 00	 DD	 $LN8@EndpointDe
  000f0	00 00 00 00	 DD	 $LN9@EndpointDe
?EndpointDescriptor@USB@@IAEXPAU_USB_ENDPOINT_DESCRIPTOR@@@Z ENDP ; USB::EndpointDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_HidDesc$ = 8						; size = 4
?HidDescriptor@USB@@IAEXPAU_USB_HID_DESCRIPTOR@@@Z PROC	; USB::HidDescriptor
; _this$ = ecx

; 1858 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1859 :     Log(LOG_DEBUG, __LINE__, ">> USB.HidDesc");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IBOMINBP@?$DO?$DO?5USB?4HidDesc@
  0000b	68 43 07 00 00	 push	 1859			; 00000743H
  00010	6a 10		 push	 16			; 00000010H
  00012	8b f9		 mov	 edi, ecx
  00014	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1860 : 
; 1861 :     PushBackDetails("> HID Descriptor:");

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FKMEKGFJ@?$DO?5HID?5Descriptor?3@
  00021	57		 push	 edi
  00022	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1862 : 
; 1863 :     PushBackDetails(">   bcdHID: 0x%04X", HidDesc->bcdHID);

  00027	8b 75 08	 mov	 esi, DWORD PTR _HidDesc$[ebp]
  0002a	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JNJCPDHI@?$DO?5?5?5bcdHID?3?50x?$CF04X@
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1864 :     PushBackDetails(">   bCountryCode: 0x%02X", HidDesc->bCountryCode);

  0003a	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  0003e	83 c4 14	 add	 esp, 20			; 00000014H
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CKIDJFBI@?$DO?5?5?5bCountryCode?3?50x?$CF02X@
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1865 :     PushBackDetails(">   bNumDescriptors: 0x%02X", HidDesc->bNumDescriptors);

  0004d	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MKJBFMNP@?$DO?5?5?5bNumDescriptors?3?50x?$CF02X@
  0005a	57		 push	 edi
  0005b	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1866 : 
; 1867 :     for (uint8_t i = 0; i < HidDesc->bNumDescriptors; i++)

  00060	32 db		 xor	 bl, bl
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	38 5e 05	 cmp	 BYTE PTR [esi+5], bl
  00068	76 31		 jbe	 SHORT $LN3@HidDescrip
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL4@HidDescrip:

; 1868 :     {
; 1869 :         PushBackDetails(">   %.3i, bDescriptorType: 0x%02X, wDescriptorLength: 0x%04X", i,

  00070	0f b6 cb	 movzx	 ecx, bl
  00073	8d 04 4e	 lea	 eax, DWORD PTR [esi+ecx*2]
  00076	0f b7 44 01 07	 movzx	 eax, WORD PTR [ecx+eax+7]
  0007b	50		 push	 eax
  0007c	8d 04 4e	 lea	 eax, DWORD PTR [esi+ecx*2]
  0007f	0f b6 44 01 06	 movzx	 eax, BYTE PTR [ecx+eax+6]
  00084	50		 push	 eax
  00085	51		 push	 ecx
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@JAEDHMBE@?$DO?5?5?5?$CF?43i?0?5bDescriptorType?3?50x?$CF0@
  0008b	57		 push	 edi
  0008c	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00091	fe c3		 inc	 bl
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	3a 5e 05	 cmp	 bl, BYTE PTR [esi+5]
  00099	72 d5		 jb	 SHORT $LL4@HidDescrip
$LN3@HidDescrip:

; 1870 :             HidDesc->OptionalDescriptors[i].bDescriptorType, HidDesc->OptionalDescriptors[i].wDescriptorLength);
; 1871 :     }
; 1872 : 
; 1873 :     Log(LOG_DEBUG, __LINE__, "<< USB.HidDesc");

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MIAEPICD@?$DM?$DM?5USB?4HidDesc@
  000a0	68 51 07 00 00	 push	 1873			; 00000751H
  000a5	6a 10		 push	 16			; 00000010H
  000a7	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1874 : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
?HidDescriptor@USB@@IAEXPAU_USB_HID_DESCRIPTOR@@@Z ENDP	; USB::HidDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_Index$ = 8						; size = 1
_StringDescs$ = 12					; size = 4
?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z PROC ; USB::StringDescriptor
; _this$ = ecx

; 1878 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1879 :     Log(LOG_DEBUG, __LINE__, ">> USB.StrDesc, Idx %d", (int)Index);

  00004	8a 5d 08	 mov	 bl, BYTE PTR _Index$[ebp]
  00007	56		 push	 esi
  00008	0f b6 c3	 movzx	 eax, bl
  0000b	8b f1		 mov	 esi, ecx
  0000d	50		 push	 eax
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LCHICFEL@?$DO?$DO?5USB?4StrDesc?0?5Idx?5?$CFd@
  00013	68 57 07 00 00	 push	 1879			; 00000757H
  00018	6a 10		 push	 16			; 00000010H
  0001a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1880 : 
; 1881 :     while (StringDescs)

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _StringDescs$[ebp]
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	85 c0		 test	 eax, eax
  00027	74 2b		 je	 SHORT $LN3@StringDesc
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@StringDesc:

; 1882 :     {
; 1883 :         if (StringDescs->DescriptorIndex == Index)

  00030	38 58 04	 cmp	 BYTE PTR [eax+4], bl
  00033	74 08		 je	 SHORT $LN7@StringDesc

; 1902 :             break;
; 1903 :         }
; 1904 : 
; 1905 :         StringDescs = StringDescs->Next;

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	85 c0		 test	 eax, eax
  00039	75 f5		 jne	 SHORT $LL2@StringDesc

; 1882 :     {
; 1883 :         if (StringDescs->DescriptorIndex == Index)

  0003b	eb 17		 jmp	 SHORT $LN3@StringDesc
$LN7@StringDesc:

; 1884 :         {
; 1885 :             //
; 1886 :             // bString from USB_STRING_DESCRIPTOR isn't NULL-terminated, so 
; 1887 :             // calculate the number of characters.  
; 1888 :             // 
; 1889 :             // bLength is the length of the whole structure, not just the string.  
; 1890 :             // 
; 1891 :             // bLength is bytes, bString is WCHARs
; 1892 :             // 
; 1893 :             //int descChars =
; 1894 :             //    ((int)StringDescs->StringDescriptor->bLength -
; 1895 :             //        offsetof(USB_STRING_DESCRIPTOR, bString)) /
; 1896 :             //    sizeof(WCHAR);
; 1897 :             //
; 1898 :             // Use the * precision and pass the number of characters just caculated.
; 1899 :             // bString is always WCHAR so specify widestring regardless of what TCHAR resolves to
; 1900 :             // 
; 1901 :             PushBackDetails(">   0x%04X: %s", StringDescs->LanguageID, (char const* )StringDescs->StringDescriptor->bString);

  0003d	8d 48 0a	 lea	 ecx, DWORD PTR [eax+10]
  00040	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  00044	51		 push	 ecx
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CCEKBNHE@?$DO?5?5?50x?$CF04X?3?5?$CFs@
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  00051	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@StringDesc:

; 1906 :     }
; 1907 : 
; 1908 :     Log(LOG_DEBUG, __LINE__, "<< USB.StrDesc");

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DKFDMJNG@?$DM?$DM?5USB?4StrDesc@
  00059	68 74 07 00 00	 push	 1908			; 00000774H
  0005e	6a 10		 push	 16			; 00000010H
  00060	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1909 : }

  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?StringDescriptor@USB@@IAEXEPAU_STRING_DESCRIPTOR_NODE@@@Z ENDP ; USB::StringDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\usb.cpp
_TEXT	SEGMENT
_i$1$ = -1037						; size = 1
_format$ = -1036					; size = 1024
__$ArrayPad$ = -8					; size = 4
_CommonDesc$ = 8					; size = 4
?UnknownDescriptor@USB@@IAEXPAU_USB_COMMON_DESCRIPTOR@@@Z PROC ; USB::UnknownDescriptor
; _this$ = ecx

; 1913 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 04 00
	00		 sub	 esp, 1040		; 00000410H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _CommonDesc$[ebp]
  00018	57		 push	 edi

; 1914 :     Log(LOG_DEBUG, __LINE__, ">> USB.UnknownDesc");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LEEGFGLN@?$DO?$DO?5USB?4UnknownDesc@
  0001e	68 7a 07 00 00	 push	 1914			; 0000077aH
  00023	6a 10		 push	 16			; 00000010H
  00025	8b f9		 mov	 edi, ecx
  00027	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1915 : 
; 1916 :     PushBackDetails("> Unknown Descriptor:");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FBFGEGLK@?$DO?5Unknown?5Descriptor?3@
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1917 :     PushBackDetails(">   bDescriptorType: 0x%02X", CommonDesc->bDescriptorType);

  0003a	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HOMJLHIG@?$DO?5?5?5bDescriptorType?3?50x?$CF02X@
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1918 :     PushBackDetails(">   bLength: 0x%02X", CommonDesc->bLength);

  0004a	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PKPADJND@?$DO?5?5?5bLength?3?50x?$CF02X@
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1919 : 
; 1920 :     uint8_t i = 0;
; 1921 :     char format[1024] = { 0 };

  0005f	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _format$[ebp]
  00065	32 db		 xor	 bl, bl
  00067	88 9d f3 fb ff
	ff		 mov	 BYTE PTR _i$1$[ebp], bl
  0006d	68 00 04 00 00	 push	 1024			; 00000400H
  00072	6a 00		 push	 0
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _memset
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1922 :     for (; i < CommonDesc->bLength; i++)

  0007d	38 1e		 cmp	 BYTE PTR [esi], bl
  0007f	76 78		 jbe	 SHORT $LN3@UnknownDes
$LL4@UnknownDes:

; 1923 :     {
; 1924 :         _snprintf(format, sizeof(format) - 1, "%s.%02X", format, ((uint8_t*)CommonDesc)[i]);

  00081	0f b6 db	 movzx	 ebx, bl
  00084	0f b6 04 33	 movzx	 eax, BYTE PTR [ebx+esi]
  00088	50		 push	 eax
  00089	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _format$[ebp]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_07GHOKFMCD@?$CFs?4?$CF02X@
  00095	68 ff 03 00 00	 push	 1023			; 000003ffH
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 __snprintf

; 1925 : 
; 1926 :         if (i % 16 == 15)

  000a0	83 e3 0f	 and	 ebx, 15			; 0000000fH
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	80 fb 0f	 cmp	 bl, 15			; 0000000fH
  000a9	75 3c		 jne	 SHORT $LN2@UnknownDes

; 1927 :         {
; 1928 :             PushBackDetails(format);

  000ab	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _format$[ebp]
  000b1	50		 push	 eax
  000b2	57		 push	 edi
  000b3	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails

; 1929 :             memset(format, 0x00, sizeof(format));

  000b8	68 00 04 00 00	 push	 1024			; 00000400H
  000bd	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _format$[ebp]
  000c3	6a 00		 push	 0
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memset
  000cb	83 c4 14	 add	 esp, 20			; 00000014H

; 1930 :             _snprintf(format, sizeof(format) - 1, ">   ");

  000ce	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _format$[ebp]
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_04CKDHMDHJ@?$DO?5?5?5@
  000d9	68 ff 03 00 00	 push	 1023			; 000003ffH
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 __snprintf
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@UnknownDes:

; 1922 :     for (; i < CommonDesc->bLength; i++)

  000e7	8a 9d f3 fb ff
	ff		 mov	 bl, BYTE PTR _i$1$[ebp]
  000ed	fe c3		 inc	 bl
  000ef	88 9d f3 fb ff
	ff		 mov	 BYTE PTR _i$1$[ebp], bl
  000f5	3a 1e		 cmp	 bl, BYTE PTR [esi]
  000f7	72 88		 jb	 SHORT $LL4@UnknownDes
$LN3@UnknownDes:

; 1931 :         }
; 1932 :     }
; 1933 : 
; 1934 :     if (i % 16 != 0)

  000f9	f6 c3 0f	 test	 bl, 15			; 0000000fH
  000fc	74 10		 je	 SHORT $LN6@UnknownDes

; 1935 :     {
; 1936 :         PushBackDetails(format);

  000fe	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _format$[ebp]
  00104	50		 push	 eax
  00105	57		 push	 edi
  00106	e8 00 00 00 00	 call	 ?PushBackDetails@USB@@IAAXPBDZZ ; USB::PushBackDetails
  0010b	83 c4 08	 add	 esp, 8
$LN6@UnknownDes:

; 1937 :     }
; 1938 : 
; 1939 :     Log(LOG_DEBUG, __LINE__, "<< USB.UnknownDesc");

  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MFCGDLMP@?$DM?$DM?5USB?4UnknownDesc@
  00113	68 93 07 00 00	 push	 1939			; 00000793H
  00118	6a 10		 push	 16			; 00000010H
  0011a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 1940 : }

  0011f	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
  00125	33 cd		 xor	 ecx, ebp
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
?UnknownDescriptor@USB@@IAEXPAU_USB_COMMON_DESCRIPTOR@@@Z ENDP ; USB::UnknownDescriptor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");
; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]

; 1737 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
_TEXT	ENDS
END
