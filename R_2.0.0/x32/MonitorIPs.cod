; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

	TITLE	c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error@	; `string'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	??_C@_0BM@JCKHFAHN@?9?9?5MonIPs?4OnChng?0?50x?$CFp?5?$CF?42X@ ; `string'
PUBLIC	??_C@_0P@DNHLOBGB@?$DO?$DO?5MonIPs?4Init@	; `string'
PUBLIC	??_C@_0BM@LPPKJDAO@?$DM?$DM?5MonIPs?4Init?0?5Sync?5Obj?5?$CFu@ ; `string'
PUBLIC	??_C@_0BM@EDMNPOCE@?$DM?$DM?5MonIPs?4Init?0?5CreateEv?5?$CFu@ ; `string'
PUBLIC	??_C@_0CF@HDGCLEAK@?$DM?$DM?5MonIPs?4Init?0?5RegWaitForSnglO@ ; `string'
PUBLIC	??_C@_0CC@DBAGDPMP@?$DM?$DM?5MonIPs?4Init?0?5Ev?50x?$CFp?0?5ret?5Tr@ ; `string'
PUBLIC	??_C@_0BF@PFFODCIL@?$DO?$DO?5MonIPs?4ChkIPAddrs@ ; `string'
PUBLIC	??_C@_08MIAEGNMG@?0?5Index?5@			; `string'
PUBLIC	??_C@_08FGMGJDIM@Address?5@			; `string'
PUBLIC	??_C@_0P@KJAMIPJI@?0?5Subnet?5Mask?5@		; `string'
PUBLIC	??_C@_08GAGFLDJJ@?0?5Reasm?5@			; `string'
PUBLIC	??_C@_0N@MPOMCOMF@?0?5BroadCast?5@		; `string'
PUBLIC	??_C@_02DNOHDIJJ@?$CI?4@			; `string'
PUBLIC	??_C@_07CIMDCLLJ@?0?5Type?5@			; `string'
PUBLIC	??_C@_08BKNGEFGB@Primary?4@			; `string'
PUBLIC	??_C@_08FHKMKPIG@Dynamic?4@			; `string'
PUBLIC	??_C@_0O@HGEAPED@Disconnected?4@		; `string'
PUBLIC	??_C@_08FCNPIEBD@Deleted?4@			; `string'
PUBLIC	??_C@_0L@HFLHPH@Transient?4@			; `string'
PUBLIC	??_C@_0BC@PFKLNNIM@Published?5in?5DNS?4@	; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_0BF@NLFEEFHK@?$DM?$DM?5MonIPs?4ChkIPAddrs@ ; `string'
PUBLIC	??_C@_02BBAHNLBA@?$CFp@				; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu@				; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld@				; `string'
PUBLIC	??_C@_02BDDLJJBK@lu@				; `string'
PUBLIC	??_C@_02EAOCLKAK@ld@				; `string'
PUBLIC	??_C@_02MDKMJEGG@eE@				; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP@				; `string'
PUBLIC	??_C@_01LFCBOECM@?4@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	_GUID_DEVINTERFACE_USB_HUB
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	_GUID_DEVINTERFACE_USB_DEVICE
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	_frexp:PROC
EXTRN	_free:PROC
EXTRN	__Toupper:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__Getcvt:PROC
EXTRN	_localeconv:PROC
EXTRN	__imp__GetIpAddrTable@12:PROC
EXTRN	_terminate:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__purecall:PROC
EXTRN	__Tolower:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Getctype:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	_strcspn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	__imp__NotifyAddrChange@8:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateMutexA@12:PROC
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z:PROC ; std::_Execute_once
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__RegisterWaitForSingleObject@24:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	_calloc:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___std_exception_destroy:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA
_BSS	SEGMENT
?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA DD 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A
_BSS	SEGMENT
?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A DQ 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_USB_DEVICE
CONST	SEGMENT
_GUID_DEVINTERFACE_USB_DEVICE DD 0a5dcbf10H
	DW	06530H
	DW	011d2H
	DB	090H
	DB	01fH
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	051H
	DB	0edH
CONST	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT _GUID_DEVINTERFACE_USB_HUB
CONST	SEGMENT
_GUID_DEVINTERFACE_USB_HUB DD 0f18a0e88H
	DW	0c30cH
	DW	011d0H
	DB	088H
	DB	015H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	06H
	DB	0beH
	DB	0d8H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	020H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$r	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	058H
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	020H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	010H
CONST	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4@
CONST	SEGMENT
??_C@_01LFCBOECM@?4@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp@ DB '%p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NLFEEFHK@?$DM?$DM?5MonIPs?4ChkIPAddrs@
CONST	SEGMENT
??_C@_0BF@NLFEEFHK@?$DM?$DM?5MonIPs?4ChkIPAddrs@ DB '<< MonIPs.ChkIPAddrs'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFKLNNIM@Published?5in?5DNS?4@
CONST	SEGMENT
??_C@_0BC@PFKLNNIM@Published?5in?5DNS?4@ DB 'Published in DNS.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HFLHPH@Transient?4@
CONST	SEGMENT
??_C@_0L@HFLHPH@Transient?4@ DB 'Transient.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FCNPIEBD@Deleted?4@
CONST	SEGMENT
??_C@_08FCNPIEBD@Deleted?4@ DB 'Deleted.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HGEAPED@Disconnected?4@
CONST	SEGMENT
??_C@_0O@HGEAPED@Disconnected?4@ DB 'Disconnected.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHKMKPIG@Dynamic?4@
CONST	SEGMENT
??_C@_08FHKMKPIG@Dynamic?4@ DB 'Dynamic.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BKNGEFGB@Primary?4@
CONST	SEGMENT
??_C@_08BKNGEFGB@Primary?4@ DB 'Primary.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CIMDCLLJ@?0?5Type?5@
CONST	SEGMENT
??_C@_07CIMDCLLJ@?0?5Type?5@ DB ', Type ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DNOHDIJJ@?$CI?4@
CONST	SEGMENT
??_C@_02DNOHDIJJ@?$CI?4@ DB '(.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MPOMCOMF@?0?5BroadCast?5@
CONST	SEGMENT
??_C@_0N@MPOMCOMF@?0?5BroadCast?5@ DB ', BroadCast ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GAGFLDJJ@?0?5Reasm?5@
CONST	SEGMENT
??_C@_08GAGFLDJJ@?0?5Reasm?5@ DB ', Reasm ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KJAMIPJI@?0?5Subnet?5Mask?5@
CONST	SEGMENT
??_C@_0P@KJAMIPJI@?0?5Subnet?5Mask?5@ DB ', Subnet Mask ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGMGJDIM@Address?5@
CONST	SEGMENT
??_C@_08FGMGJDIM@Address?5@ DB 'Address ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MIAEGNMG@?0?5Index?5@
CONST	SEGMENT
??_C@_08MIAEGNMG@?0?5Index?5@ DB ', Index ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFFODCIL@?$DO?$DO?5MonIPs?4ChkIPAddrs@
CONST	SEGMENT
??_C@_0BF@PFFODCIL@?$DO?$DO?5MonIPs?4ChkIPAddrs@ DB '>> MonIPs.ChkIPAddrs'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DBAGDPMP@?$DM?$DM?5MonIPs?4Init?0?5Ev?50x?$CFp?0?5ret?5Tr@
CONST	SEGMENT
??_C@_0CC@DBAGDPMP@?$DM?$DM?5MonIPs?4Init?0?5Ev?50x?$CFp?0?5ret?5Tr@ DB '<'
	DB	'< MonIPs.Init, Ev 0x%p, ret True', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HDGCLEAK@?$DM?$DM?5MonIPs?4Init?0?5RegWaitForSnglO@
CONST	SEGMENT
??_C@_0CF@HDGCLEAK@?$DM?$DM?5MonIPs?4Init?0?5RegWaitForSnglO@ DB '<< MonI'
	DB	'Ps.Init, RegWaitForSnglObj %u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EDMNPOCE@?$DM?$DM?5MonIPs?4Init?0?5CreateEv?5?$CFu@
CONST	SEGMENT
??_C@_0BM@EDMNPOCE@?$DM?$DM?5MonIPs?4Init?0?5CreateEv?5?$CFu@ DB '<< MonI'
	DB	'Ps.Init, CreateEv %u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LPPKJDAO@?$DM?$DM?5MonIPs?4Init?0?5Sync?5Obj?5?$CFu@
CONST	SEGMENT
??_C@_0BM@LPPKJDAO@?$DM?$DM?5MonIPs?4Init?0?5Sync?5Obj?5?$CFu@ DB '<< Mon'
	DB	'IPs.Init, Sync Obj %u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DNHLOBGB@?$DO?$DO?5MonIPs?4Init@
CONST	SEGMENT
??_C@_0P@DNHLOBGB@?$DO?$DO?5MonIPs?4Init@ DB '>> MonIPs.Init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JCKHFAHN@?9?9?5MonIPs?4OnChng?0?50x?$CFp?5?$CF?42X@
CONST	SEGMENT
??_C@_0BM@JCKHFAHN@?9?9?5MonIPs?4OnChng?0?50x?$CFp?5?$CF?42X@ DB '-- MonI'
	DB	'Ps.OnChng, 0x%p %.2X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error@ DB 'iostream stream error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
PUBLIC	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
PUBLIC	??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,0>
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
PUBLIC	??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
PUBLIC	?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
PUBLIC	??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	??$_Max_value@PAD@std@@YAABQADABQAD0@Z		; std::_Max_value<char *>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z	; std::_Adl_verify_range<char const *,char const *>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBE@QADQBDIIID@Z ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
PUBLIC	??_G?$numpunct@D@std@@MAEPAXI@Z			; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Has_unused_capacity
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	?CheckIPAddress@MonitorIPs@@IAEXXZ		; MonitorIPs::CheckIPAddress
PUBLIC	?Initialize@MonitorIPs@@QAE_NXZ			; MonitorIPs::Initialize
PUBLIC	?SetChange@MonitorIPs@@IAEXXZ			; MonitorIPs::SetChange
PUBLIC	?s_OnChange@MonitorIPs@@KGXPAXE@Z		; MonitorIPs::s_OnChange
PUBLIC	?hex@std@@YAAAVios_base@1@AAV21@@Z		; std::hex
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
PUBLIC	?precision@ios_base@std@@QBE_JXZ		; std::ios_base::precision
PUBLIC	?setf@ios_base@std@@QAEHHH@Z			; std::ios_base::setf
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??1_System_error@std@@UAE@XZ			; std::_System_error::~_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	??8std@@YA_NABVerror_condition@0@0@Z		; std::operator==
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z		; std::ctype<char>::widen
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAPADQADID@Z	; std::char_traits<char>::assign
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	_sprintf_s
PUBLIC	__vsprintf_s_l
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	___local_stdio_printf_options
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_frexpl
PUBLIC	_fabsl
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@412e848000000000
PUBLIC	__real@41cdcd6500000000
PUBLIC	__real@4202a05f20000000
PUBLIC	__xmm@2c27225c7c2f5f2d29282a2524234021
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	__alldiv:PROC
EXTRN	__alldvrm:PROC
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
EXTRN	__chkstk:PROC
EXTRN	__dtoui3:PROC
EXTRN	__dtoul3:PROC
EXTRN	__ltod3:PROC
EXTRN	__ultod3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@2c27225c7c2f5f2d29282a2524234021
CONST	SEGMENT
__xmm@2c27225c7c2f5f2d29282a2524234021 DB '!@#$%*()-_/|\"'','
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+09
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@QBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0runtime_error@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gruntime_error@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gruntime_error@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_Gruntime_error@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gruntime_error@std@@UAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1runtime_error@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1runtime_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1runtime_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1runtime_error@std@@UAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0bad_cast@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_cast@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??0bad_cast@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_cast@std@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gbad_cast@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gbad_cast@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_Gbad_cast@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gbad_cast@std@@UAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1bad_cast@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_cast@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1bad_cast@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_cast@std@@UAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??Bid@locale@std@@QAEIXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??Bid@locale@std@@QAEIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??Bid@locale@std@@QAEIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??Bid@locale@std@@QAEIXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0facet@locale@std@@IAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0facet@locale@std@@IAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0facet@locale@std@@IAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0facet@locale@std@@IAE@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1facet@locale@std@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1facet@locale@std@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1facet@locale@std@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1facet@locale@std@@MAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gfacet@locale@std@@MAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gfacet@locale@std@@MAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_Gfacet@locale@std@@MAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gfacet@locale@std@@MAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ctype_base@std@@QAE@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ctype_base@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0ctype_base@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ctype_base@std@@QAE@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ctype_base@std@@QAE@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ctype_base@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ctype_base@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1ctype_base@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ctype_base@std@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ctype_base@std@@UAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gctype_base@std@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_Gctype_base@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_Gctype_base@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gctype_base@std@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gctype_base@std@@UAEPAXI@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ctype@D@std@@MAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$ctype@D@std@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$ctype@D@std@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$ctype@D@std@@MAEPAXI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??_G?$ctype@D@std@@MAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$ctype@D@std@@MAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$ctype@D@std@@MAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$ctype@D@std@@MAEPAXI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$ctype@D@std@@MAEPAXI@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G_System_error@std@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_G_System_error@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G_System_error@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G_System_error@std@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G_System_error@std@@UAEPAXI@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_System_error@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1_System_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1_System_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_System_error@std@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1_System_error@std@@UAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gsystem_error@std@@UAEPAXI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??_Gsystem_error@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_Gsystem_error@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gsystem_error@std@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gsystem_error@std@@UAEPAXI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gsystem_error@std@@UAEPAXI@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1system_error@std@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1system_error@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1system_error@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1system_error@std@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1system_error@std@@UAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1system_error@std@@UAE@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gfailure@ios_base@std@@UAEPAXI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??_Gfailure@ios_base@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_Gfailure@ios_base@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1failure@ios_base@std@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1failure@ios_base@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1failure@ios_base@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??0system_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0_System_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??0_System_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?CheckIPAddress@MonitorIPs@@IAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CheckIPAddress@MonitorIPs@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?CheckIPAddress@MonitorIPs@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckIPAddress@MonitorIPs@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckIPAddress@MonitorIPs@@IAEXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Yarn@_W@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Yarn@D@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	05H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$11
	DD	03H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$5
	DD	07H
	DD	00H
	DD	07H
	DD	00H
	DD	07H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
	DD	0bH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$14
	DD	0bH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$5
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$6
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$6 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$5
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$6
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$6 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Glocale@std@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1
	DD	05H
	DD	00H
	DD	05H
	DD	00H
	DD	05H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$numpunct@D@std@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$numpunct@D@std@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??1?$numpunct@D@std@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$numpunct@D@std@@MAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$numpunct@D@std@@MAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$numpunct@D@std@@MAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_G?$numpunct@D@std@@MAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??_G?$numpunct@D@std@@MAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$numpunct@D@std@@MAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$numpunct@D@std@@MAEPAXI@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$4
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$4 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$2
__catchsym$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0bad_cast@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_cast@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__unwindtable$??0bad_cast@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_cast@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
;	COMDAT _fabsl
_TEXT	SEGMENT
tv68 = -8						; size = 8
__X$ = 8						; size = 8
_fabsl	PROC						; COMDAT

; 842  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 843  :         return fabs((double)_X);

  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR __X$[ebp]
  0000b	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00012	f2 0f 11 45 f8	 movsd	 QWORD PTR tv68[ebp], xmm0
  00017	dd 45 f8	 fld	 QWORD PTR tv68[ebp]

; 844  :     }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_fabsl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
;	COMDAT _frexpl
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 4
_frexpl	PROC						; COMDAT

; 863  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 864  :         return frexp((double)_X, _Y);

  00003	ff 75 10	 push	 DWORD PTR __Y$[ebp]
  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR __X$[ebp]
  0000b	83 ec 08	 sub	 esp, 8
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	e8 00 00 00 00	 call	 _frexp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 865  :     }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_frexpl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 617  : 		return (INT_MAX);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  00005	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 55   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 56   :         __std_exception_data _InitData = { _Message, true };

  00028	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0002b	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  0002e	89 45 ec	 mov	 DWORD PTR __InitData$[ebp], eax
  00031	0f 57 c0	 xorps	 xmm0, xmm0

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00034	52		 push	 edx
  00035	8d 45 ec	 lea	 eax, DWORD PTR __InitData$[ebp]
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003e	50		 push	 eax
  0003f	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00043	c6 45 f0 01	 mov	 BYTE PTR __InitData$[ebp+4], 1
  00047	e8 00 00 00 00	 call	 ___std_exception_copy
  0004c	83 c4 08	 add	 esp, 8

; 58   :     }

  0004f	8b c6		 mov	 eax, esi
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@QBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@QBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 62   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0000f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00014	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 64   :     }

  00017	8b c1		 mov	 eax, ecx
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 67   :         : _Data()

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 68   :     {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	0f 57 c0	 xorps	 xmm0, xmm0

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00031	50		 push	 eax
  00032	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00036	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00039	83 c0 04	 add	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ___std_exception_copy
  00042	83 c4 08	 add	 esp, 8

; 70   :     }

  00045	8b c6		 mov	 eax, esi
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 87   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1497 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00006	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00009	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00015	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001a	ff 70 04	 push	 DWORD PTR [eax+4]
  0001d	ff 30		 push	 DWORD PTR [eax]
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1841 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00004	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00013	e8 00 00 00 00	 call	 __vsprintf_s_l
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }

  0001b	59		 pop	 ecx
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 460  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@length:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@length
  00017	2b c2		 sub	 eax, edx

; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));
; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 470  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 		}

  00003	5d		 pop	 ebp

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 494  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  : 		}

  00003	5d		 pop	 ebp

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 500  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 502  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 505  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 507  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 511  : 		return (_Left == _Right);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]
  00002	3a 02		 cmp	 al, BYTE PTR [edx]
  00004	0f 94 c0	 sete	 al

; 512  : 		}

  00007	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 520  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  : 		return (static_cast<char>(_Meta));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 522  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 525  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 527  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 530  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 531  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 532  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT
; __Meta$ = ecx

; 535  : 		{	// return anything but EOF

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 536  : 		return (_Meta != eof() ? _Meta : !eof());

  00002	33 c9		 xor	 ecx, ecx
  00004	83 f8 ff	 cmp	 eax, -1
  00007	0f 44 c1	 cmove	 eax, ecx

; 537  : 		}

  0000a	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 541  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 542  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 43   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 37   : 	{	// gets the size of _Count copies of a type with size 1

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	return (_Count);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 39   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 		}

  00003	5d		 pop	 ebp

; 52   : 		return (::operator new(_Bytes));

  00004	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	_Bytes += _Non_user_size;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	83 00 23	 add	 DWORD PTR [eax], 35	; 00000023H
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00011	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00013	83 c0 fc	 add	 eax, -4			; fffffffcH
  00016	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00019	77 04		 ja	 SHORT $LN7@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0001b	89 11		 mov	 DWORD PTR [ecx], edx

; 134  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN7@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1203 : 	{	// convert size_t to size_t, unchanged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1204 : 	return (_Len);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1205 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__InitData$2 = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 165  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0002b	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00032	72 02		 jb	 SHORT $LN11@runtime_er
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00034	8b 12		 mov	 edx, DWORD PTR [edx]
$LN11@runtime_er:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 54   :         : _Data()

  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 55   :     {

  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003f	0f 57 c0	 xorps	 xmm0, xmm0

; 56   :         __std_exception_data _InitData = { _Message, true };

  00042	89 55 e8	 mov	 DWORD PTR __InitData$2[ebp], edx

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00045	50		 push	 eax
  00046	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0004a	8d 45 e8	 lea	 eax, DWORD PTR __InitData$2[ebp]
  0004d	50		 push	 eax
  0004e	c6 45 ec 01	 mov	 BYTE PTR __InitData$2[ebp+4], 1
  00052	e8 00 00 00 00	 call	 ___std_exception_copy
  00057	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept

; 164  : 		: _Mybase(_Message.c_str())

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 165  : 		{	// construct from message string

  00061	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 166  : 		}

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006e	8b c6		 mov	 eax, esi
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__InitData$2 = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 56   :         __std_exception_data _InitData = { _Message, true };

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0002e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00031	89 45 e8	 mov	 DWORD PTR __InitData$2[ebp], eax
  00034	0f 57 c0	 xorps	 xmm0, xmm0

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00037	52		 push	 edx
  00038	8d 45 e8	 lea	 eax, DWORD PTR __InitData$2[ebp]
  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00041	50		 push	 eax
  00042	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00046	c6 45 ec 01	 mov	 BYTE PTR __InitData$2[ebp+4], 1
  0004a	e8 00 00 00 00	 call	 ___std_exception_copy
  0004f	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept

; 169  : 		: _Mybase(_Message)

  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 170  : 		{	// construct from message string

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gruntime_error@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN9@scalar
  00048	6a 0c		 push	 12			; 0000000cH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gruntime_error@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_Gruntime_error@std@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gruntime_error@std@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1runtime_error@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1runtime_error@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1runtime_error@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1runtime_error@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_typeinfo.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 131  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_cast@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 62   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 63   :         _Data._What = _Message;

  00034	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_typeinfo.h

; 130  :         : exception("bad cast", 1)

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 131  :     {

  00042	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@

; 132  :     }

  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b c1		 mov	 eax, ecx
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_cast@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_cast@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_cast@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gbad_cast@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN9@scalar
  00048	6a 0c		 push	 12			; 0000000cH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gbad_cast@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_Gbad_cast@std@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gbad_cast@std@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_cast@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_cast@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1bad_cast@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_cast@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 73   : 		: _Lock(_LOCK_LOCALE)

  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00040	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 76   : 		{	// construct from NTBS

  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00048	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004f	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 76   : 		{	// construct from NTBS

  00053	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00057	33 c0		 xor	 eax, eax
  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00060	66 89 46 18	 mov	 WORD PTR [esi+24], ax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 76   : 		{	// construct from NTBS

  00064	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00068	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0006b	66 89 46 20	 mov	 WORD PTR [esi+32], ax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 76   : 		{	// construct from NTBS

  0006f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00073	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00076	88 46 28	 mov	 BYTE PTR [esi+40], al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 76   : 		{	// construct from NTBS

  00079	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  0007d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00080	88 46 30	 mov	 BYTE PTR [esi+48], al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 76   : 		{	// construct from NTBS

  00083	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 77   : 		if (_Pch == nullptr)

  00087	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  0008a	85 c0		 test	 eax, eax
  0008c	74 25		 je	 SHORT $LN26@Locinfo

; 79   : 		_Locinfo_ctor(this, _Pch);

  0008e	50		 push	 eax
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  00095	83 c4 08	 add	 esp, 8

; 80   : 		}

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b c6		 mov	 eax, esi
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ab	59		 pop	 ecx
  000ac	5e		 pop	 esi
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 04 00	 ret	 4
$LN26@Locinfo:

; 78   : 			_THROW(runtime_error("bad locale name"));

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  000b8	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  000bb	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error
  000c0	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  000c5	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN24@Locinfo:
  000ce	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6

; 95   : 		_Locinfo_dtor(this);

  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
  00036	83 c4 04	 add	 esp, 4

; 96   : 		}

  00039	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  0003d	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00040	85 c0		 test	 eax, eax
  00042	74 09		 je	 SHORT $LN13@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _free
  0004a	83 c4 04	 add	 esp, 4
$LN13@Locinfo:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  0004d	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 96   : 		}

  00054	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  00058	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005b	85 c0		 test	 eax, eax
  0005d	74 09		 je	 SHORT $LN18@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _free
  00065	83 c4 04	 add	 esp, 4
$LN18@Locinfo:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  00068	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 96   : 		}

  0006f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  00073	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN23@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN23@Locinfo:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  00083	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 96   : 		}

  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  0008e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00091	85 c0		 test	 eax, eax
  00093	74 09		 je	 SHORT $LN28@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _free
  0009b	83 c4 04	 add	 esp, 4
$LN28@Locinfo:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  0009e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 96   : 		}

  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  000a9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ac	85 c0		 test	 eax, eax
  000ae	74 09		 je	 SHORT $LN33@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _free
  000b6	83 c4 04	 add	 esp, 4
$LN33@Locinfo:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  000b9	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 96   : 		}

  000c0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  000c4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c7	85 c0		 test	 eax, eax
  000c9	74 09		 je	 SHORT $LN38@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _free
  000d1	83 c4 04	 add	 esp, 4
$LN38@Locinfo:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  000d4	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 96   : 		}

  000db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e2	8b ce		 mov	 ecx, esi
  000e4	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5e		 pop	 esi
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 117  : 		return (::_Getctype());

  00006	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Getctype
  0000f	83 c4 04	 add	 esp, 4
  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00018	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 118  : 		}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
$T1 = -44						; size = 44
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 121  : 		{	// return codecvt stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 122  : 		return (::_Getcvt());

  00006	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Getcvt
  0000f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00012	83 c4 04	 add	 esp, 4
  00015	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00018	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0001b	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0001e	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00022	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00026	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  0002b	8b c2		 mov	 eax, edx
  0002d	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00032	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 123  : 		}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 127  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 167  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false@

; 168  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 172  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true@

; 173  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 67   :         : _Data()

  00029	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 68   :     {

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00032	0f 57 c0	 xorps	 xmm0, xmm0

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00035	50		 push	 eax
  00036	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ___std_exception_copy
  00046	83 c4 08	 add	 esp, 8
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b c6		 mov	 eax, esi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@

; 27   : 		}

  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN6@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN6@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 111  : 			{	// construct with specified stamp value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			: _Id(_Val)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 112  : 			}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 115  : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??Bid@locale@std@@QAEIXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 116  : 			if (_Id == 0)

  00026	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00029	75 32		 jne	 SHORT $LN6@operator

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0002b	6a 00		 push	 0
  0002d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 119  : 					if (_Id == 0)

  0003c	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0003f	75 0d		 jne	 SHORT $LN3@operator

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00046	40		 inc	 eax
  00047	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0004c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@operator:

; 122  : 						}
; 123  : 				_END_LOCK()

  0004e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00058	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 124  : 				}
; 125  : 			return (_Id);
; 126  : 			}

  0005d	8b 06		 mov	 eax, DWORD PTR [esi]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??Bid@locale@std@@QAEIXZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??Bid@locale@std@@QAEIXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??Bid@locale@std@@QAEIXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 153  : 			_MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 154  : 			}

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 158  : 			if (_MT_DECR(_Myrefs) == 0)

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 159  : 				{
; 160  : 				return (this);
; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);
; 164  : 			}

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 172  : 			{	// construct with initial reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0facet@locale@std@@IAE@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00033	8b 45 08	 mov	 eax, DWORD PTR __Initrefs$[ebp]
  00036	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  0003c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 173  : 			}

  0003f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00046	8b c1		 mov	 eax, ecx
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0facet@locale@std@@IAE@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??0facet@locale@std@@IAE@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0facet@locale@std@@IAE@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1facet@locale@std@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 177  : 			}

  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1facet@locale@std@@MAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??1facet@locale@std@@MAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1facet@locale@std@@MAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 303  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 302  : 		: _Ptr(_Right._Ptr)

  00025	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 304  : 		_Ptr->_Incref();

  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	ff 50 04	 call	 DWORD PTR [eax+4]

; 305  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 309  : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 308  : 		: _Ptr(_Init(true))

  00025	6a 01		 push	 1
  00027	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002f	83 c4 04	 add	 esp, 4

; 310  : 		}

  00032	8b c6		 mov	 eax, esi
  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 408  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 409  : 		if (_Ptr != nullptr)

  00022	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00025	85 c9		 test	 ecx, ecx
  00027	74 11		 je	 SHORT $LN4@locale

; 410  : 			delete _Ptr->_Decref();

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	ff 50 08	 call	 DWORD PTR [eax+8]
  0002e	85 c0		 test	 eax, eax
  00030	74 08		 je	 SHORT $LN4@locale
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b c8		 mov	 ecx, eax
  00036	6a 01		 push	 1
  00038	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 411  : 		}

  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 06		 jne	 SHORT $LN3@c_str
  00007	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@

; 432  : 		}

  0000c	c3		 ret	 0
$LN3@c_str:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  0000d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00010	85 c9		 test	 ecx, ecx
  00012	74 03		 je	 SHORT $LN7@c_str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00014	8b c1		 mov	 eax, ecx

; 432  : 		}

  00016	c3		 ret	 0
$LN7@c_str:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00017	83 c0 1c	 add	 eax, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 432  : 		}

  0001a	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 435  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  0000a	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000d	73 0c		 jae	 SHORT $LN6@Getfacet
  0000f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00012	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00015	85 c0		 test	 eax, eax
  00017	75 21		 jne	 SHORT $LN3@Getfacet
  00019	eb 02		 jmp	 SHORT $LN10@Getfacet
$LN6@Getfacet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0001b	33 c0		 xor	 eax, eax
$LN10@Getfacet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  0001d	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00021	74 17		 je	 SHORT $LN3@Getfacet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00023	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  00028	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002b	73 0b		 jae	 SHORT $LN8@Getfacet
  0002d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00030	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00033	5e		 pop	 esi

; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN8@Getfacet:

; 443  : 			return (_Id < _Ptr0->_Facetcount

  00038	33 c0		 xor	 eax, eax
$LN3@Getfacet:
  0003a	5e		 pop	 esi

; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gfacet@locale@std@@MAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00036	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00040	74 0b		 je	 SHORT $LN9@scalar
  00042	6a 08		 push	 8
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004a	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0004d	8b c6		 mov	 eax, esi
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gfacet@locale@std@@MAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??_Gfacet@locale@std@@MAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gfacet@locale@std@@MAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2213 : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ctype_base@std@@QAE@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@

; 172  : 			{	// construct with initial reference count

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00033	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  00036	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  0003c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 173  : 			}
; 174  : 
; 175  : 		virtual __CLR_OR_THIS_CALL ~facet() noexcept
; 176  : 			{	// ensure that derived classes can be destroyed properly
; 177  : 			}
; 178  : 
; 179  : 	public:
; 180  : 		__CLR_OR_THIS_CALL facet(const facet&) = delete;
; 181  : 		facet& __CLR_OR_THIS_CALL operator=(const facet&) = delete;
; 182  : 		};
; 183  : 
; 184  : 			// CLASS _Locimp
; 185  : 	class _CRTIMP2_PURE_IMPORT _Locimp
; 186  : 		: public facet
; 187  : 		{	// reference-counted actual implementation of a locale
; 188  : 	protected:
; 189  : 		__CLR_OR_THIS_CALL ~_Locimp() noexcept
; 190  : 		{	// destroy the object
; 191  : 		_Locimp_dtor(this);
; 192  : 		}
; 193  : 
; 194  : 	private:
; 195  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 196  : 			_New_Locimp(bool _Transparent = false);
; 197  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 198  : 			_New_Locimp(const _Locimp& _Right);
; 199  : 
; 200  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 201  : 			_Locimp_dtor(_Locimp *);
; 202  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 203  : 			_Locimp_Addfac(_Locimp *, facet *, size_t);	// add a facet
; 204  : 		static void __CLRCALL_PURE_OR_CDECL
; 205  : 			_Locimp_ctor(_Locimp *, const _Locimp&);
; 206  : 
; 207  : 		friend locale;
; 208  : 
; 209  : 		__CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 210  : 			: locale::facet(1), _Facetvec(nullptr), _Facetcount(0),
; 211  : 				_Catmask(none), _Xparent(_Transparent),
; 212  : 					_Name("*")
; 213  : 			{	// construct an empty _Locimp
; 214  : 			}
; 215  : 
; 216  : 		__CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 217  : 			: locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount),
; 218  : 				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
; 219  : 					_Name(_Right._Name.c_str())
; 220  : 			{	// construct by copying
; 221  : 			_Locimp_ctor(this, _Right);
; 222  : 			}
; 223  : 
; 224  : 		void __CLR_OR_THIS_CALL _Addfac(facet *_Pfacet, size_t _Id)
; 225  : 			{	// add a facet
; 226  : 			_Locimp_Addfac(this, _Pfacet, _Id);
; 227  : 			}
; 228  : 
; 229  : 		static _Locimp *__CLRCALL_OR_CDECL _Makeloc(const _Locinfo&,
; 230  : 			category, _Locimp *, const locale *);	// make essential facets
; 231  : 
; 232  : 		static void __CLRCALL_OR_CDECL _Makewloc(const _Locinfo&,
; 233  : 			category, _Locimp *, const locale *);	// make wchar_t facets
; 234  : 
; 235  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 236  : 		static void __CLRCALL_OR_CDECL _Makeushloc(const _Locinfo&,
; 237  : 			category, _Locimp *, const locale *);	// make ushort facets
; 238  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 239  : 
; 240  : 		static void __CLRCALL_OR_CDECL _Makexloc(const _Locinfo&,
; 241  : 			category, _Locimp *, const locale *);	// make remaining facets
; 242  : 
; 243  : 		facet **_Facetvec;	// pointer to vector of facets
; 244  : 		size_t _Facetcount;	// size of vector of facets
; 245  : 		category _Catmask;	// mask describing implemented categories
; 246  : 		bool _Xparent;	// true if locale is transparent
; 247  : 		_Yarn<char> _Name;	// locale name, or "*" if not known
; 248  : 
; 249  : 		__PURE_APPDOMAIN_GLOBAL static _Locimp *_Clocptr;
; 250  : 
; 251  : public:
; 252  : 		_Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&) = delete;
; 253  : 		};
; 254  : 
; 255  : 	template<class _Elem,
; 256  : 		class _Traits,
; 257  : 		class _Alloc>
; 258  : 		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 259  : 			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
; 260  : 		{	// compare _Left and _Right strings using collate facet in locale
; 261  : 		const auto& _Coll_fac = use_facet<_STD collate<_Elem>>(*this);
; 262  : 
; 263  : 		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
; 264  : 			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
; 265  : 		}
; 266  : 
; 267  : 	template<class _Facet>
; 268  : 		locale combine(const locale& _Loc) const
; 269  : 		{	// combine two locales
; 270  : 		_Facet *_Facptr;
; 271  : 
; 272  : 		_TRY_BEGIN
; 273  : 			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
; 274  : 		_CATCH_ALL
; 275  : 			_Xruntime_error("locale::combine facet missing");
; 276  : 		_CATCH_END
; 277  : 
; 278  : 		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
; 279  : 		_Newimp->_Addfac(_Facptr, _Facet::id);
; 280  : 		_Newimp->_Catmask = none;
; 281  : 		_Newimp->_Name = "*";
; 282  : 		return (locale(_Newimp));
; 283  : 		}
; 284  : 
; 285  : 	template<class _Facet>
; 286  : 		locale(const locale& _Loc, const _Facet *_Facptr)
; 287  : 			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 288  : 		{	// construct from _Loc, replacing facet with *_Facptr
; 289  : 		if (_Facptr != nullptr)
; 290  : 			{	// replace facet
; 291  : 			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
; 292  : 			_Ptr->_Catmask = none;
; 293  : 			_Ptr->_Name = "*";
; 294  : 			}
; 295  : 		}
; 296  : 
; 297  : 	locale(_Uninitialized)
; 298  : 		{	// defer construction
; 299  : 		}
; 300  : 
; 301  : 	locale(const locale& _Right) noexcept
; 302  : 		: _Ptr(_Right._Ptr)
; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();
; 305  : 		}
; 306  : 
; 307  : 	locale() noexcept
; 308  : 		: _Ptr(_Init(true))
; 309  : 		{	// construct from current locale
; 310  : 		}
; 311  : 
; 312  :  #if !defined(MRTDLL) || !defined(_CRTBLD)
; 313  : 	locale(const locale& _Loc, const locale& _Other,
; 314  : 		category _Cat)
; 315  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 316  : 		{	// construct a locale by copying named facets
; 317  : 		if (_Cat != none)
; 318  : 			{	// worth adding, do it
; 319  : 			_TRY_BEGIN
; 320  : 				_BEGIN_LOCINFO(_Lobj)
; 321  : 					_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
; 322  : 					_Lobj._Addcats(_Loc._Ptr->_Catmask,
; 323  : 						_Loc.name().c_str());
; 324  : 					_Lobj._Addcats(_Other._Ptr->_Catmask,
; 325  : 						_Other.name().c_str());
; 326  : 					_Ptr->_Catmask = _Loc._Ptr->_Catmask
; 327  : 						| _Other._Ptr->_Catmask;
; 328  : 					_Ptr->_Name = _Lobj._Getname();
; 329  : 				_END_LOCINFO()
; 330  : 			_CATCH_ALL
; 331  : 			delete _Ptr->_Decref();
; 332  : 			_RERAISE;
; 333  : 			_CATCH_END
; 334  : 			}
; 335  : 		}
; 336  : 
; 337  : private:
; 338  : 	void _Construct(const string &_Str,
; 339  : 		category _Cat)
; 340  : 		{	// construct a locale with named facets
; 341  : 		bool _Bad = false;
; 342  : 		_Init();
; 343  : 		if (_Cat != none)
; 344  : 			{	// worth adding, do it
; 345  : 			_TRY_BEGIN
; 346  : 				_BEGIN_LOCINFO(_Lobj(_Cat, _Str.c_str()))
; 347  : 					if (_Badname(_Lobj))
; 348  : 						_Bad = true;
; 349  : 					else
; 350  : 						{	// name okay, build the locale
; 351  : 						_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
; 352  : 						_Ptr->_Catmask = _Cat;
; 353  : 						_Ptr->_Name = _Str.c_str();
; 354  : 						}
; 355  : 				_END_LOCINFO()
; 356  : 			_CATCH_ALL
; 357  : 			delete _Ptr->_Decref();
; 358  : 			_RERAISE;
; 359  : 			_CATCH_END
; 360  : 			}
; 361  : 
; 362  : 		if (_Bad)
; 363  : 			{	// Don't throw within _BEGIN_LOCINFO if we can avoid it
; 364  : 			delete _Ptr->_Decref();
; 365  : 			_Xruntime_error("bad locale name");
; 366  : 			}
; 367  : 		}
; 368  : 
; 369  : public:
; 370  : 	explicit locale(char const* _Locname,
; 371  : 		category _Cat = all)
; 372  : 		: _Ptr(_Locimp::_New_Locimp())
; 373  : 		{	// construct a locale with named facets
; 374  : 		// _Locname might have been returned from setlocale().
; 375  : 		// Therefore, _Construct() takes const string&.
; 376  : 		if (_Locname == nullptr)
; 377  : 			_Xruntime_error("bad locale name");
; 378  : 		_Construct(_Locname, _Cat);
; 379  : 		}
; 380  : 
; 381  : 	locale(const locale& _Loc, char const* _Locname,
; 382  : 		category _Cat)
; 383  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 384  : 		{	// construct a locale by copying, replacing named facets
; 385  : 		// _Locname might have been returned from setlocale().
; 386  : 		// Therefore, _Construct() takes const string&.
; 387  : 		if (_Locname == nullptr)
; 388  : 			_Xruntime_error("bad locale name");
; 389  : 		_Construct(_Locname, _Cat);
; 390  : 		}
; 391  : 
; 392  : 	explicit locale(const string& _Str,
; 393  : 		category _Cat = all)
; 394  : 		: _Ptr(_Locimp::_New_Locimp())
; 395  : 		{	// construct a locale with named facets
; 396  : 		_Construct(_Str, _Cat);
; 397  : 		}
; 398  : 
; 399  : 	locale(const locale& _Loc, const string& _Str,
; 400  : 		category _Cat)
; 401  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 402  : 		{	// construct a locale by copying, replacing named facets
; 403  : 		_Construct(_Str, _Cat);
; 404  : 		}
; 405  :  #endif /* !MRTDLL || !_CRTBLD */
; 406  : 
; 407  : 	~locale() noexcept
; 408  : 		{	// destroy the object
; 409  : 		if (_Ptr != nullptr)
; 410  : 			delete _Ptr->_Decref();
; 411  : 		}
; 412  : 
; 413  : 	locale& operator=(const locale& _Right) noexcept
; 414  : 		{	// assign a locale
; 415  : 		if (_Ptr != _Right._Ptr)
; 416  : 			{	// different implementation, point at new one
; 417  : 			delete _Ptr->_Decref();
; 418  : 			_Ptr = _Right._Ptr;
; 419  : 			_Ptr->_Incref();
; 420  : 			}
; 421  : 		return (*this);
; 422  : 		}
; 423  : 
; 424  : 	string name() const
; 425  : 		{	// return locale name
; 426  : 		return (_Ptr == nullptr ? string() : _Ptr->_Name.c_str());
; 427  : 		}
; 428  : 
; 429  : 	_Ret_z_ char const* c_str() const
; 430  : 		{	// return locale name as NTBS
; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());
; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)
; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();
; 443  : 			return (_Id < _Ptr0->_Facetcount
; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}
; 448  : 
; 449  : 	_NODISCARD bool operator==(const locale& _Loc) const
; 450  : 		{	// compare locales for equality
; 451  : 		return (_Ptr == _Loc._Ptr
; 452  : 			|| (name().compare("*") != 0
; 453  : 				&& name().compare(_Loc.name()) == 0));
; 454  : 		}
; 455  : 
; 456  : 	_NODISCARD bool operator!=(const locale& _Right) const
; 457  : 		{	// test for locale inequality
; 458  : 		return (!(*this == _Right));
; 459  : 		}
; 460  : 
; 461  : 	static _MRTIMP2_PURE const locale& __CLRCALL_PURE_OR_CDECL
; 462  : 		classic();	// classic "C" locale
; 463  : 
; 464  : 	static _MRTIMP2_PURE locale __CLRCALL_PURE_OR_CDECL
; 465  : 		global(const locale&);	// current locale
; 466  : 
; 467  : 	static _MRTIMP2_PURE locale __CLRCALL_PURE_OR_CDECL
; 468  : 		empty();	// empty (transparent) locale
; 469  : 
; 470  : private:
; 471  : 	locale(_Locimp *_Ptrimp)
; 472  : 		: _Ptr(_Ptrimp)
; 473  : 		{	// construct from _Locimp pointer
; 474  : 		}
; 475  : 
; 476  : 	static _MRTIMP2_PURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 477  : 		_Init(bool _Do_incref = false);	// initialize locale
; 478  : 	static _MRTIMP2_PURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 479  : 		_Getgloballocale();
; 480  : 	static _MRTIMP2_PURE void __CLRCALL_PURE_OR_CDECL
; 481  : 		_Setgloballocale(void *);
; 482  : 
; 483  : 	bool _Badname(const _Locinfo& _Lobj)
; 484  : 		{	// test if name is "*"
; 485  : 		return (_CSTD strcmp(_Lobj._Getname(), "*") == 0);
; 486  : 		}
; 487  : 
; 488  : 	_Locimp *_Ptr;	// pointer to locale implementation object
; 489  : 	};
; 490  : 
; 491  : 		// SUPPORT TEMPLATES
; 492  : template<class _Facet>
; 493  : 	struct _Facetptr
; 494  : 	{	// store pointer to lazy facet for use_facet
; 495  : 	__PURE_APPDOMAIN_GLOBAL static const locale::facet *_Psave;
; 496  : 	};
; 497  : 
; 498  : template<class _Facet>
; 499  : 	__PURE_APPDOMAIN_GLOBAL const locale::facet *_Facetptr<_Facet>::
; 500  : 		_Psave = nullptr;
; 501  : 
; 502  : template<class _Facet> inline
; 503  : 	const _Facet& __CRTDECL use_facet(const locale& _Loc)
; 504  : 
; 505  : 	{	// get facet reference from locale
; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic
; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)
; 514  : 			{
; 515  : 			if (_Psave != nullptr)
; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated
; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))
; 520  : 				{
; 521  :  #if _HAS_EXCEPTIONS
; 522  : 				_THROW(bad_cast{});	// lazy disallowed
; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 				abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 				}
; 527  : 			else
; 528  : 				{	// queue up lazy facet for destruction
; 529  : 				auto _Pfmod = const_cast<locale::facet *>(_Psave);
; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));
; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);
; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();
; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;
; 540  : 				_Pf = _Psave;
; 541  : 
; 542  : 				(void) _Psave_guard.release();
; 543  : 				}
; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast
; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body
; 549  : 
; 550  : 		// FUNCTION TEMPLATE _Getloctxt
; 551  : template<class _Elem,
; 552  : 	class _InIt> inline
; 553  : 	int __CRTDECL _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
; 554  : 		const _Elem *_Ptr)
; 555  : 	{	// find field at _Ptr that matches longest in [_First, _Last)
; 556  : 	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
; 557  : 		if (_Ptr[_Off] == _Ptr[0])
; 558  : 			++_Numfields;	// add fields with leading mark to initial count
; 559  : 	string _Str(_Numfields, '\0');	// one column counter for each field
; 560  : 
; 561  : 	int _Ans = -2;	// no candidates so far
; 562  : 	for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
; 563  : 		{	// test each element against all viable fields
; 564  : 		bool _Prefix = false;	// seen at least one valid prefix
; 565  : 		size_t _Off = 0;	// offset into fields
; 566  : 		size_t _Field = 0;	// current field number
; 567  : 
; 568  : 		for (; _Field < _Numfields; ++_Field)
; 569  : 			{	// test element at _Column in field _Field
; 570  : 			while (_Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0])
; 571  : 				{	// find beginning of field
; 572  : 				++_Off;
; 573  : 				}
; 574  : 
; 575  : 			if (_Str[_Field] != '\0')
; 576  : 				{
; 577  : 				_Off += _Str[_Field];	// skip tested columns in field
; 578  : 				}
; 579  : 			else if (_Ptr[_Off += _Column] == _Ptr[0] || _Ptr[_Off] == (_Elem)0)
; 580  : 				{	// matched all of field, save as possible answer
; 581  : 				_Str[_Field] = (char)(_Column < 127 ? _Column : 127);	// save skip count if small enough
; 582  : 				_Ans = (int)_Field;	// save answer
; 583  : 				}
; 584  : 			else if (_First == _Last || _Ptr[_Off] != *_First)
; 585  : 				{
; 586  : 				_Str[_Field] = (char)(_Column < 127 ? _Column : 127);	// no match, just save skip count
; 587  : 				}
; 588  : 			else
; 589  : 				{
; 590  : 				_Prefix = true;	// still a valid prefix
; 591  : 				}
; 592  : 			}
; 593  : 
; 594  : 		if (!_Prefix || _First == _Last)
; 595  : 			break;	// no pending prefixes or no input, give up
; 596  : 		}
; 597  : 	return (_Ans);	// return field number or negative value on failure
; 598  : 	}
; 599  : 
; 600  : 		// FUNCTION TEMPLATE _Maklocbyte
; 601  : template<class _Elem> inline
; 602  : 	char __CRTDECL _Maklocbyte(_Elem _Char,
; 603  : 		const _Locinfo::_Cvtvec&)
; 604  : 	{	// convert _Elem to char using _Cvtvec
; 605  : 	return ((char)(unsigned char)_Char);
; 606  : 	}
; 607  : 
; 608  : template<> inline
; 609  : 	char __CRTDECL _Maklocbyte(wchar_t _Char,
; 610  : 		const _Locinfo::_Cvtvec& _Cvt)
; 611  : 	{	// convert wchar_t to char using _Cvtvec
; 612  : 	char _Byte = '\0';
; 613  : 	mbstate_t _Mbst1 = {};
; 614  : 	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
; 615  : 	return (_Byte);
; 616  : 	}
; 617  : 
; 618  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 619  : template<> inline
; 620  : 	char __CRTDECL _Maklocbyte(unsigned short _Char,
; 621  : 		const _Locinfo::_Cvtvec &_Cvt)
; 622  : 	{	// convert unsigned short to char using _Cvtvec
; 623  : 	char _Byte = '\0';
; 624  : 	mbstate_t _Mbst1 = {};
; 625  : 	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
; 626  : 	return (_Byte);
; 627  : 	}
; 628  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 629  : 
; 630  : 		// FUNCTION TEMPLATE _Maklocchr
; 631  : template<class _Elem> inline
; 632  : 	_Elem __CRTDECL _Maklocchr(char _Byte, _Elem *,
; 633  : 		const _Locinfo::_Cvtvec&)
; 634  : 	{	// convert char to _Elem using _Cvtvec
; 635  : 	return ((_Elem)(unsigned char)_Byte);
; 636  : 	}
; 637  : 
; 638  : template<> inline
; 639  : 	wchar_t __CRTDECL _Maklocchr(char _Byte, wchar_t *,
; 640  : 		const _Locinfo::_Cvtvec& _Cvt)
; 641  : 	{	// convert char to wchar_t using _Cvtvec
; 642  : 	wchar_t _Wc = L'\0';
; 643  : 	mbstate_t _Mbst1 = {};
; 644  : 	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
; 645  : 	return (_Wc);
; 646  : 	}
; 647  : 
; 648  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 649  : template<> inline
; 650  : 	unsigned short __CRTDECL _Maklocchr(char _Byte, unsigned short *,
; 651  : 		const _Locinfo::_Cvtvec &_Cvt)
; 652  : 	{	// convert char to unsigned short using _Cvtvec
; 653  : 	unsigned short _Wc = (unsigned short)0;
; 654  : 	mbstate_t _Mbst1 = {};
; 655  : 	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
; 656  : 	return (_Wc);
; 657  : 	}
; 658  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 659  : 
; 660  : 		// FUNCTION TEMPLATE _Maklocstr
; 661  : template<class _Elem> inline
; 662  : 	_Elem *__CRTDECL _Maklocstr(char const* _Ptr, _Elem *,
; 663  : 		const _Locinfo::_Cvtvec&)
; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec
; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;
; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),
; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)
; 671  : 		_Xbad_alloc();
; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
; 675  : 
; 676  : 	return (_Ptrdest);
; 677  : 	}
; 678  : 
; 679  : template<> inline
; 680  : 	wchar_t *__CRTDECL _Maklocstr(char const* _Ptr, wchar_t *,
; 681  : 		const _Locinfo::_Cvtvec& _Cvt)
; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec
; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	char const* _Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};
; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;
; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
; 694  : 			break;
; 695  : 	++_Wchars;	// count terminating nul
; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)
; 701  : 		_Xbad_alloc();
; 702  : 	wchar_t *_Ptrnext = _Ptrdest;
; 703  : 	mbstate_t _Mbst2 = {};
; 704  : 
; 705  : 	for (; 0 < _Wchars;
; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
; 708  : 			break;
; 709  : 	*_Ptrnext = L'\0';
; 710  : 
; 711  : 	return (_Ptrdest);
; 712  : 	}
; 713  : 
; 714  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 715  : template<> inline
; 716  : 	unsigned short *__CRTDECL _Maklocstr(char const* _Ptr, unsigned short *,
; 717  : 		const _Locinfo::_Cvtvec &_Cvt)
; 718  : 	{	// convert C string to unsigned short sequence using _Cvtvec
; 719  : 	size_t _Count, _Count1;
; 720  : 	size_t _Wchars;
; 721  : 	char const* _Ptr1;
; 722  : 	int _Bytes;
; 723  : 	unsigned short _Wc;
; 724  : 	mbstate_t _Mbst1 = {};
; 725  : 
; 726  : 	_Count1 = _CSTD strlen(_Ptr) + 1;
; 727  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
; 728  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
; 729  : 		{
; 730  : 		if ((_Bytes =
; 731  : 			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
; 732  : 			{
; 733  : 			break;
; 734  : 			}
; 735  : 		}
; 736  : 
; 737  : 	++_Wchars;	// count terminating nul
; 738  : 
; 739  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
; 740  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 741  : 
; 742  : 	if (!_Ptrdest)
; 743  : 		{
; 744  : 		_Xbad_alloc();
; 745  : 		}
; 746  : 
; 747  : 	wchar_t *_Ptrnext = _Ptrdest;
; 748  : 	mbstate_t _Mbst2 = {};
; 749  : 	for (; 0 < _Wchars;
; 750  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
; 751  : 		{
; 752  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
; 753  : 			{
; 754  : 			break;
; 755  : 			}
; 756  : 		}
; 757  : 
; 758  : 	*_Ptrnext = L'\0';
; 759  : 	return ((unsigned short *)_Ptrdest);
; 760  : 	}
; 761  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 762  : 
; 763  : 		// STRUCT codecvt_base
; 764  : class _CRTIMP2_PURE_IMPORT codecvt_base
; 765  : 	: public locale::facet
; 766  : 	{	// base class for codecvt
; 767  : public:
; 768  : 	enum
; 769  : 		{	// constants for different parse states
; 770  : 		ok, partial, error, noconv};
; 771  : 	typedef int result;
; 772  : 
; 773  : 	__CLR_OR_THIS_CALL codecvt_base(size_t _Refs = 0)
; 774  : 		: locale::facet(_Refs)
; 775  : 		{	// default constructor
; 776  : 		}
; 777  : 
; 778  : 	bool __CLR_OR_THIS_CALL always_noconv() const noexcept
; 779  : 		{	// return true if conversions never change input (from codecvt)
; 780  : 		return (do_always_noconv());
; 781  : 		}
; 782  : 
; 783  : 	int __CLR_OR_THIS_CALL max_length() const noexcept
; 784  : 		{	// return maximum length required for a conversion (from codecvt)
; 785  : 		return (do_max_length());
; 786  : 		}
; 787  : 
; 788  : 	int __CLR_OR_THIS_CALL encoding() const noexcept
; 789  : 		{	// return length of code sequence (from codecvt)
; 790  : 		return (do_encoding());
; 791  : 		}
; 792  : 
; 793  : 	__CLR_OR_THIS_CALL ~codecvt_base() noexcept
; 794  : 		{	// destroy the object
; 795  : 		}
; 796  : 
; 797  : protected:
; 798  : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept
; 799  : 		{	// return true if conversions never change input (from codecvt)
; 800  : 		return (false);
; 801  : 		}
; 802  : 
; 803  : 	virtual int __CLR_OR_THIS_CALL do_max_length() const noexcept
; 804  : 		{	// return maximum length required for a conversion (from codecvt)
; 805  : 		return (1);
; 806  : 		}
; 807  : 
; 808  : 	virtual int __CLR_OR_THIS_CALL do_encoding() const noexcept
; 809  : 		{	// return length of code sequence (from codecvt)
; 810  : 		return (1);	// -1 ==> state dependent, 0 ==> varying length
; 811  : 		}
; 812  : 	};
; 813  : 
; 814  : 		// CLASS TEMPLATE codecvt
; 815  : template<class _Elem,
; 816  : 	class _Byte,
; 817  : 	class _Statype>
; 818  : 	class codecvt
; 819  : 		: public codecvt_base
; 820  : 	{	// facet for converting between _Elem and char (_Byte) sequences
; 821  : public:
; 822  : 	typedef _Elem intern_type;
; 823  : 	typedef _Byte extern_type;
; 824  : 	typedef _Statype state_type;
; 825  : 
; 826  : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 827  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 828  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 829  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 830  : 		return (do_in(_State,
; 831  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 832  : 		}
; 833  : 
; 834  : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 835  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 836  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 837  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last2)
; 838  : 		return (do_out(_State,
; 839  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 840  : 		}
; 841  : 
; 842  : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 843  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 844  : 		{	// generate bytes to return to default shift state
; 845  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));
; 846  : 		}
; 847  : 
; 848  : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 849  : 		const _Byte *_Last1, size_t _Count) const
; 850  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 851  : 		return (do_length(_State, _First1, _Last1, _Count));
; 852  : 		}
; 853  : 
; 854  : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;	// unique facet id
; 855  : 
; 856  : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 857  : 		: codecvt_base(_Refs)
; 858  : 		{	// construct from current locale
; 859  : 		_Init(_Locinfo());
; 860  : 		}
; 861  : 
; 862  : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 863  : 		: codecvt_base(_Refs)
; 864  : 		{	// construct from specified locale
; 865  : 		_Init(_Lobj);
; 866  : 		}
; 867  : 
; 868  : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = nullptr,
; 869  : 		const locale *_Ploc = nullptr)
; 870  : 		{	// return locale category mask and construct standard facet
; 871  : 		if (_Ppf != nullptr && *_Ppf == nullptr)
; 872  : 			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
; 873  : 				_Locinfo(_Ploc->c_str()));
; 874  : 		return (_X_CTYPE);
; 875  : 		}
; 876  : 
; 877  : protected:
; 878  : 	virtual __CLR_OR_THIS_CALL ~codecvt() noexcept
; 879  : 		{	// destroy the object
; 880  : 		}
; 881  : 
; 882  : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 883  : 		{	// initialize from _Locinfo object
; 884  : 		}
; 885  : 
; 886  : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept
; 887  : 		{	// return true if conversions never change input (from codecvt)
; 888  : 		return (is_same_v<_Byte, _Elem>);
; 889  : 		}
; 890  : 
; 891  : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype&,
; 892  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 893  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 894  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 895  : 		_Mid1 = _First1;
; 896  : 		_Mid2 = _First2;
; 897  : 		if (is_same_v<_Byte, _Elem>)
; 898  : 			{
; 899  : 			return (noconv);	// convert nothing
; 900  : 			}
; 901  : 
; 902  : 		// types differ, copy one for one
; 903  : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 904  : 			{
; 905  : 			*_Mid2 = (_Elem)*_Mid1;
; 906  : 			}
; 907  : 
; 908  : 		return (ok);
; 909  : 		}
; 910  : 
; 911  : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype&,
; 912  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 913  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 914  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 915  : 		_Mid1 = _First1;
; 916  : 		_Mid2 = _First2;
; 917  : 		if (is_same_v<_Byte, _Elem>)
; 918  : 			{
; 919  : 			return (noconv);	// convert nothing
; 920  : 			}
; 921  : 
; 922  : 		// types differ, copy one for one
; 923  : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 924  : 			{
; 925  : 			*_Mid2 = (_Byte)*_Mid1;
; 926  : 			}
; 927  : 
; 928  : 		return (ok);
; 929  : 		}
; 930  : 
; 931  : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&,
; 932  : 		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
; 933  : 		{	// generate bytes to return to default shift state
; 934  : 		_Mid2 = _First2;
; 935  : 		return (ok);	// convert nothing
; 936  : 		}
; 937  : 
; 938  : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype&, const _Byte *_First1,
; 939  : 		const _Byte *_Last1, size_t _Count) const
; 940  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 941  : 		return (static_cast<int>(_Min_value(_Count, static_cast<size_t>(_Last1 - _First1)))); // assumes 1:1 conversion
; 942  : 		}
; 943  : 	};
; 944  : 
; 945  : 		// STATIC codecvt::id OBJECT
; 946  : #ifdef __clang__
; 947  :  #pragma clang diagnostic push
; 948  :  #pragma clang diagnostic ignored "-Wdllimport-static-field-def"
; 949  : #endif /* __clang__ */
; 950  : 
; 951  : template<class _Elem,
; 952  : 	class _Byte,
; 953  : 	class _Statype>
; 954  : 	__PURE_APPDOMAIN_GLOBAL locale::id codecvt<_Elem, _Byte, _Statype>::id;
; 955  : 
; 956  : #ifdef __clang__
; 957  :  #pragma clang diagnostic pop
; 958  : #endif /* __clang__ */
; 959  : 
; 960  : 		// ENUM _Codecvt_mode
; 961  : enum _Codecvt_mode {
; 962  : 	_Consume_header = 4,
; 963  : 	_Generate_header = 2
; 964  : 	};
; 965  : 
; 966  : 		// CLASS codecvt<char16_t, char, _Mbstatet>
; 967  : template<>
; 968  : 	class _CRTIMP2_PURE_IMPORT codecvt<char16_t, char, _Mbstatet>
; 969  : 	: public codecvt_base
; 970  : 	{	// facet for converting between char16_t and UTF-8 byte sequences
; 971  : public:
; 972  : 	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
; 973  : 	typedef char16_t _Elem;
; 974  : 	typedef char _Byte;
; 975  : 	typedef _Mbstatet _Statype;
; 976  : 	typedef _Elem intern_type;
; 977  : 	typedef _Byte extern_type;
; 978  : 	typedef _Statype state_type;
; 979  : 
; 980  : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 981  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 982  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 983  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 984  : 		return (do_in(_State,
; 985  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 986  : 		}
; 987  : 
; 988  : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 989  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 990  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 991  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 992  : 		return (do_out(_State,
; 993  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 994  : 		}
; 995  : 
; 996  : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 997  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 998  : 		{	// generate bytes to return to default shift state
; 999  : 		return (do_unshift(_State,
; 1000 : 			_First2, _Last2, _Mid2));
; 1001 : 		}
; 1002 : 
; 1003 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1004 : 		const _Byte *_Last1, size_t _Count) const
; 1005 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1006 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1007 : 		}
; 1008 : 
; 1009 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1010 : 
; 1011 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1012 : 		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
; 1013 : 		{	// construct from current locale
; 1014 : 		_BEGIN_LOCINFO(_Lobj)
; 1015 : 			_Init(_Lobj);
; 1016 : 		_END_LOCINFO()
; 1017 : 		}
; 1018 : 
; 1019 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1020 : 		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
; 1021 : 		{	// construct from specified locale
; 1022 : 		_Init(_Lobj);
; 1023 : 		}
; 1024 : 
; 1025 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
; 1026 : 		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
; 1027 : 		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
; 1028 : 		{	// construct from specified locale and parameters
; 1029 : 		_Init(_Lobj);
; 1030 : 		}
; 1031 : 
; 1032 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = nullptr,
; 1033 : 		const locale *_Ploc = nullptr)
; 1034 : 		{	// return locale category mask and construct standard facet
; 1035 : 		if (_Ppf != nullptr && *_Ppf == nullptr)
; 1036 : 			{
; 1037 : 			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Ploc->c_str()));
; 1038 : 			}
; 1039 : 
; 1040 : 		return (_X_CTYPE);
; 1041 : 		}
; 1042 : 
; 1043 : protected:
; 1044 : 	virtual __CLR_OR_THIS_CALL ~codecvt() noexcept
; 1045 : 		{	// destroy the object
; 1046 : 		}
; 1047 : 
; 1048 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 1049 : 		{	// initialize
; 1050 : 		}
; 1051 : 
; 1052 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1053 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1054 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1055 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last2)
; 1056 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1057 : 		_Mid1 = _First1;
; 1058 : 		_Mid2 = _First2;
; 1059 : 
; 1060 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1061 : 			{	// convert a multibyte sequence
; 1062 : 			unsigned char _By = (unsigned char)*_Mid1;
; 1063 : 			unsigned long _Ch;
; 1064 : 			int _Nextra, _Nskip;
; 1065 : 
; 1066 : 			if (*_Pstate > 1)
; 1067 : 				{
; 1068 : 				if (_By < 0x80 || 0xc0 <= _By)
; 1069 : 					{
; 1070 : 					return (_Mybase::error);	// not continuation byte
; 1071 : 					}
; 1072 : 
; 1073 : 				// deliver second half of two-word value
; 1074 : 				++_Mid1;
; 1075 : 				*_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
; 1076 : 				*_Pstate = 1;
; 1077 : 				continue;
; 1078 : 				}
; 1079 : 
; 1080 : 			if (_By < 0x80)
; 1081 : 				{
; 1082 : 				_Ch = _By;
; 1083 : 				_Nextra = 0;
; 1084 : 				}
; 1085 : 			else if (_By < 0xc0)
; 1086 : 				{	// 0x80-0xdf not first byte
; 1087 : 				++_Mid1;
; 1088 : 				return (_Mybase::error);
; 1089 : 				}
; 1090 : 			else if (_By < 0xe0)
; 1091 : 				{
; 1092 : 				_Ch = static_cast<unsigned long>(_By & 0x1f);
; 1093 : 				_Nextra = 1;
; 1094 : 				}
; 1095 : 			else if (_By < 0xf0)
; 1096 : 				{
; 1097 : 				_Ch = static_cast<unsigned long>(_By & 0x0f);
; 1098 : 				_Nextra = 2;
; 1099 : 				}
; 1100 : 			else if (_By < 0xf8)
; 1101 : 				{
; 1102 : 				_Ch = static_cast<unsigned long>(_By & 0x07);
; 1103 : 				_Nextra = 3;
; 1104 : 				}
; 1105 : 			else
; 1106 : 				{
; 1107 : 				_Ch = static_cast<unsigned long>(_By & 0x03);
; 1108 : 				_Nextra = _By < 0xfc ? 4 : 5;
; 1109 : 				}
; 1110 : 
; 1111 : 			_Nskip = _Nextra < 3 ? 0 : 1;	// leave a byte for 2nd word
; 1112 : 			_First1 = _Mid1;	// roll back point
; 1113 : 
; 1114 : 			if (_Nextra == 0)
; 1115 : 				{
; 1116 : 				++_Mid1;
; 1117 : 				}
; 1118 : 			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
; 1119 : 				{
; 1120 : 				break;	// not enough input
; 1121 : 				}
; 1122 : 			else
; 1123 : 				{
; 1124 : 				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
; 1125 : 					{
; 1126 : 					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
; 1127 : 						{
; 1128 : 						return (_Mybase::error);	// not continuation byte
; 1129 : 						}
; 1130 : 					else
; 1131 : 						{
; 1132 : 						_Ch = _Ch << 6 | (_By & 0x3f);
; 1133 : 						}
; 1134 : 					}
; 1135 : 				}
; 1136 : 
; 1137 : 			if (0 < _Nskip)
; 1138 : 				{
; 1139 : 				_Ch <<= 6;	// get last byte on next call
; 1140 : 				}
; 1141 : 
; 1142 : 			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
; 1143 : 				{
; 1144 : 				return (_Mybase::error);	// value too large
; 1145 : 				}
; 1146 : 
; 1147 : 			if (0xffff < _Ch)
; 1148 : 				{	// deliver first half of two-word value, save second word
; 1149 : 				unsigned short _Ch0 =
; 1150 : 					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);
; 1151 : 
; 1152 : 				*_Mid2++ = (_Elem)_Ch0;
; 1153 : 				*_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
; 1154 : 				continue;
; 1155 : 				}
; 1156 : 
; 1157 : 			if (_Nskip != 0)
; 1158 : 				{
; 1159 : 				if (_Mid1 == _Last1)
; 1160 : 					{	// not enough bytes, noncanonical value
; 1161 : 					_Mid1 = _First1;
; 1162 : 					break;
; 1163 : 					}
; 1164 : 
; 1165 : 				if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
; 1166 : 					{
; 1167 : 					return (_Mybase::error);	// not continuation byte
; 1168 : 					}
; 1169 : 
; 1170 : 				_Ch |= _By & 0x3f;	// complete noncanonical value
; 1171 : 				}
; 1172 : 
; 1173 : 			if (*_Pstate == 0)
; 1174 : 				{	// first time, maybe look for and consume header
; 1175 : 				*_Pstate = 1;
; 1176 : 
; 1177 : 				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
; 1178 : 					{	// drop header and retry
; 1179 : 					const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
; 1180 : 						_First2, _Last2, _Mid2);
; 1181 : 
; 1182 : 					if (_Ans == _Mybase::partial)
; 1183 : 						{	// roll back header determination
; 1184 : 						*_Pstate = 0;
; 1185 : 						_Mid1 = _First1;
; 1186 : 						}
; 1187 : 
; 1188 : 					return (_Ans);
; 1189 : 					}
; 1190 : 				}
; 1191 : 
; 1192 : 			*_Mid2++ = (_Elem)_Ch;
; 1193 : 			}
; 1194 : 
; 1195 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1196 : 		}
; 1197 : 
; 1198 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1199 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1200 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1201 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1202 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1203 : 		_Mid1 = _First1;
; 1204 : 		_Mid2 = _First2;
; 1205 : 
; 1206 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1207 : 			{	// convert and put a wide char
; 1208 : 			unsigned long _Ch;
; 1209 : 			const unsigned short _Ch1 = (unsigned short)*_Mid1;
; 1210 : 			bool _Save = false;
; 1211 : 
; 1212 : 			if (1 < *_Pstate)
; 1213 : 				{	// get saved MS 11 bits from *_Pstate
; 1214 : 				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
; 1215 : 					return (_Mybase::error);	// bad second word
; 1216 : 				_Ch = static_cast<unsigned long>((*_Pstate << 10) | (_Ch1 - 0xdc00));
; 1217 : 				}
; 1218 : 			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
; 1219 : 				{	// get new first word
; 1220 : 				_Ch = static_cast<unsigned long>((_Ch1 - 0xd800 + 0x0040) << 10);
; 1221 : 				_Save = true;	// put only first byte, rest with second word
; 1222 : 				}
; 1223 : 			else
; 1224 : 				_Ch = _Ch1;	// not first word, just put it
; 1225 : 
; 1226 : 			_Byte _By;
; 1227 : 			int _Nextra;
; 1228 : 
; 1229 : 			if (_Ch < 0x0080)
; 1230 : 				{
; 1231 : 				_By = (_Byte)_Ch;
; 1232 : 				_Nextra = 0;
; 1233 : 				}
; 1234 : 			else if (_Ch < 0x0800)
; 1235 : 				{
; 1236 : 				_By = (_Byte)(0xc0 | _Ch >> 6);
; 1237 : 				_Nextra = 1;
; 1238 : 				}
; 1239 : 			else if (_Ch < 0x10000)
; 1240 : 				{
; 1241 : 				_By = (_Byte)(0xe0 | _Ch >> 12);
; 1242 : 				_Nextra = 2;
; 1243 : 				}
; 1244 : 			else
; 1245 : 				{
; 1246 : 				_By = (_Byte)(0xf0 | _Ch >> 18);
; 1247 : 				_Nextra = 3;
; 1248 : 				}
; 1249 : 
; 1250 : 			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;
; 1251 : 
; 1252 : 			if (_Last2 - _Mid2 < _Nput)
; 1253 : 				{
; 1254 : 				break;	// not enough room, even without header
; 1255 : 				}
; 1256 : 
; 1257 : 			if (*_Pstate == 0 && (_Mode & _Generate_header) != 0)
; 1258 : 				{
; 1259 : 				if (_Last2 - _Mid2 < 3 + _Nput)
; 1260 : 					{
; 1261 : 					break;	// not enough room for header + output
; 1262 : 					}
; 1263 : 
; 1264 : 				// prepend header
; 1265 : 				*_Mid2++ = (_Byte)(unsigned char)0xef;
; 1266 : 				*_Mid2++ = (_Byte)(unsigned char)0xbb;
; 1267 : 				*_Mid2++ = (_Byte)(unsigned char)0xbf;
; 1268 : 				}
; 1269 : 
; 1270 : 			++_Mid1;
; 1271 : 			if (_Save || _Nextra < 3)
; 1272 : 				{	// put first byte of sequence, if not already put
; 1273 : 				*_Mid2++ = _By;
; 1274 : 				--_Nput;
; 1275 : 				}
; 1276 : 
; 1277 : 			for (; 0 < _Nput; --_Nput)
; 1278 : 				{
; 1279 : 				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
; 1280 : 				}
; 1281 : 
; 1282 : 			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
; 1283 : 			}
; 1284 : 
; 1285 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1286 : 		}
; 1287 : 
; 1288 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1289 : 		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
; 1290 : 		{	// generate bytes to return to default shift state
; 1291 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1292 : 		_Mid2 = _First2;
; 1293 : 
; 1294 : 		return (1 < *_Pstate
; 1295 : 			? _Mybase::error : _Mybase::ok);	// fail if trailing first word
; 1296 : 		}
; 1297 : 
; 1298 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1299 : 		const _Byte *_Last1, size_t _Count) const
; 1300 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1301 : 		size_t _Wchars = 0;
; 1302 : 		_Statype _Mystate = _State;
; 1303 : 
; 1304 : 		while (_Wchars < _Count && _First1 != _Last1)
; 1305 : 			{	// convert another wide character
; 1306 : 			const _Byte *_Mid1;
; 1307 : 			_Elem *_Mid2;
; 1308 : 			_Elem _Ch;
; 1309 : 			const auto _Result = do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
; 1310 : 			if (_Result == _Mybase::noconv)
; 1311 : 				{
; 1312 : 				_Wchars += static_cast<size_t>(_Last1 - _First1);
; 1313 : 				break;
; 1314 : 				}
; 1315 : 
; 1316 : 			if (_Result == _Mybase::ok)
; 1317 : 				{
; 1318 : 				if (_Mid2 == &_Ch + 1)
; 1319 : 					{
; 1320 : 					++_Wchars;	// replacement do_in might not convert one
; 1321 : 					}
; 1322 : 
; 1323 : 				_First1 = _Mid1;
; 1324 : 				continue;
; 1325 : 				}
; 1326 : 
; 1327 : 			break;	// error or partial
; 1328 : 			}
; 1329 : 
; 1330 : 		return (static_cast<int>(_Min_value(static_cast<size_t>(INT_MAX), _Wchars)));
; 1331 : 		}
; 1332 : 
; 1333 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept override
; 1334 : 		{	// return true if conversions never change input
; 1335 : 		return (false);
; 1336 : 		}
; 1337 : 
; 1338 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const noexcept override
; 1339 : 		{	// return maximum length required for a conversion
; 1340 : 		return ((_Mode & _Consume_header) != 0 ? 9	// header + max input
; 1341 : 			: (_Mode & _Generate_header) != 0 ? 7	// header + max output
; 1342 : 			: 6);	// 6-byte max input sequence, no 3-byte header
; 1343 : 		}
; 1344 : 
; 1345 : 	virtual int do_encoding() const noexcept override
; 1346 : 		{	// return length of code sequence (from codecvt)
; 1347 : 		return (0);	// 0 => varying length
; 1348 : 		}
; 1349 : 
; 1350 : private:
; 1351 : 	unsigned long _Maxcode;	// default: 0x10ffff
; 1352 : 	_Codecvt_mode _Mode;	// default: _Consume_header
; 1353 : 	};
; 1354 : 
; 1355 : 		// CLASS codecvt<char32_t, char, _Mbstatet>
; 1356 : template<>
; 1357 : 	class _CRTIMP2_PURE_IMPORT codecvt<char32_t, char, _Mbstatet>
; 1358 : 	: public codecvt_base
; 1359 : 	{	// facet for converting between char32_t and UTF-8 byte sequences
; 1360 : public:
; 1361 : 	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
; 1362 : 	typedef char32_t _Elem;
; 1363 : 	typedef char _Byte;
; 1364 : 	typedef _Mbstatet _Statype;
; 1365 : 	typedef _Elem intern_type;
; 1366 : 	typedef _Byte extern_type;
; 1367 : 	typedef _Statype state_type;
; 1368 : 
; 1369 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1370 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1371 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1372 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1373 : 		return (do_in(_State,
; 1374 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1375 : 		}
; 1376 : 
; 1377 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1378 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1379 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1380 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1381 : 		return (do_out(_State,
; 1382 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1383 : 		}
; 1384 : 
; 1385 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1386 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1387 : 		{	// generate bytes to return to default shift state
; 1388 : 		return (do_unshift(_State,
; 1389 : 			_First2, _Last2, _Mid2));
; 1390 : 		}
; 1391 : 
; 1392 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1393 : 		const _Byte *_Last1, size_t _Count) const
; 1394 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1395 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1396 : 		}
; 1397 : 
; 1398 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1399 : 
; 1400 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1401 : 		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
; 1402 : 		{	// construct from current locale
; 1403 : 		_BEGIN_LOCINFO(_Lobj)
; 1404 : 			_Init(_Lobj);
; 1405 : 		_END_LOCINFO()
; 1406 : 		}
; 1407 : 
; 1408 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1409 : 		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
; 1410 : 		{	// construct from specified locale
; 1411 : 		_Init(_Lobj);
; 1412 : 		}
; 1413 : 
; 1414 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
; 1415 : 		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
; 1416 : 		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
; 1417 : 		{	// construct from specified locale and parameters
; 1418 : 		_Init(_Lobj);
; 1419 : 		}
; 1420 : 
; 1421 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = nullptr,
; 1422 : 		const locale *_Ploc = nullptr)
; 1423 : 		{	// return locale category mask and construct standard facet
; 1424 : 		if (_Ppf != nullptr && *_Ppf == nullptr)
; 1425 : 			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
; 1426 : 				_Locinfo(_Ploc->c_str()));
; 1427 : 		return (_X_CTYPE);
; 1428 : 		}
; 1429 : 
; 1430 : protected:
; 1431 : 	virtual __CLR_OR_THIS_CALL ~codecvt() noexcept
; 1432 : 		{	// destroy the object
; 1433 : 		}
; 1434 : 
; 1435 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 1436 : 		{	// initialize
; 1437 : 		}
; 1438 : 
; 1439 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1440 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1441 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1442 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1443 : 		char *_Pstate = (char *)&_State;
; 1444 : 		_Mid1 = _First1;
; 1445 : 		_Mid2 = _First2;
; 1446 : 
; 1447 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1448 : 			{	// convert a multibyte sequence
; 1449 : 			unsigned char _By = (unsigned char)*_Mid1;
; 1450 : 			unsigned long _Ch;
; 1451 : 			int _Nextra;
; 1452 : 
; 1453 : 			if (_By < 0x80)
; 1454 : 				{
; 1455 : 				_Ch = _By;
; 1456 : 				_Nextra = 0;
; 1457 : 				}
; 1458 : 			else if (_By < 0xc0)
; 1459 : 				{	// 0x80-0xdf not first byte
; 1460 : 				++_Mid1;
; 1461 : 				return (_Mybase::error);
; 1462 : 				}
; 1463 : 			else if (_By < 0xe0)
; 1464 : 				{
; 1465 : 				_Ch = static_cast<unsigned long>(_By & 0x1f);
; 1466 : 				_Nextra = 1;
; 1467 : 				}
; 1468 : 			else if (_By < 0xf0)
; 1469 : 				{
; 1470 : 				_Ch = static_cast<unsigned long>(_By & 0x0f);
; 1471 : 				_Nextra = 2;
; 1472 : 				}
; 1473 : 			else if (_By < 0xf8)
; 1474 : 				{
; 1475 : 				_Ch = static_cast<unsigned long>(_By & 0x07);
; 1476 : 				_Nextra = 3;
; 1477 : 				}
; 1478 : 			else
; 1479 : 				{
; 1480 : 				_Ch = static_cast<unsigned long>(_By & 0x03);
; 1481 : 				_Nextra = _By < 0xfc ? 4 : 5;
; 1482 : 				}
; 1483 : 
; 1484 : 			if (_Nextra == 0)
; 1485 : 				{
; 1486 : 				++_Mid1;
; 1487 : 				}
; 1488 : 			else if (_Last1 - _Mid1 < _Nextra + 1)
; 1489 : 				{
; 1490 : 				break;	// not enough input
; 1491 : 				}
; 1492 : 			else
; 1493 : 				{
; 1494 : 				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
; 1495 : 					{
; 1496 : 					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
; 1497 : 						{
; 1498 : 						return (_Mybase::error);	// not continuation byte
; 1499 : 						}
; 1500 : 					else
; 1501 : 						{
; 1502 : 						_Ch = _Ch << 6 | (_By & 0x3f);
; 1503 : 						}
; 1504 : 					}
; 1505 : 				}
; 1506 : 
; 1507 : 			if (*_Pstate == 0)
; 1508 : 				{	// first time, maybe look for and consume header
; 1509 : 				*_Pstate = 1;
; 1510 : 
; 1511 : 				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
; 1512 : 					{	// drop header and retry
; 1513 : 					const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
; 1514 : 						_First2, _Last2, _Mid2);
; 1515 : 
; 1516 : 					if (_Ans == _Mybase::partial)
; 1517 : 						{	// roll back header determination
; 1518 : 						*_Pstate = 0;
; 1519 : 						_Mid1 = _First1;
; 1520 : 						}
; 1521 : 					return (_Ans);
; 1522 : 					}
; 1523 : 				}
; 1524 : 
; 1525 : 			if (_Maxcode < _Ch)
; 1526 : 				{
; 1527 : 				return (_Mybase::error);	// code too large
; 1528 : 				}
; 1529 : 
; 1530 : 			*_Mid2++ = (_Elem)_Ch;
; 1531 : 			}
; 1532 : 
; 1533 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1534 : 		}
; 1535 : 
; 1536 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1537 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1538 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1539 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1540 : 		char *_Pstate = (char *)&_State;
; 1541 : 		_Mid1 = _First1;
; 1542 : 		_Mid2 = _First2;
; 1543 : 
; 1544 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1545 : 			{	// convert and put a wide char
; 1546 : 			_Byte _By;
; 1547 : 			int _Nextra;
; 1548 : 			unsigned long _Ch = (unsigned long)*_Mid1;
; 1549 : 
; 1550 : 			if (_Maxcode < _Ch)
; 1551 : 				return (_Mybase::error);
; 1552 : 
; 1553 : 			if (_Ch < 0x0080)
; 1554 : 				{
; 1555 : 				_By = (_Byte)_Ch;
; 1556 : 				_Nextra = 0;
; 1557 : 				}
; 1558 : 			else if (_Ch < 0x0800)
; 1559 : 				{
; 1560 : 				_By = (_Byte)(0xc0 | _Ch >> 6);
; 1561 : 				_Nextra = 1;
; 1562 : 				}
; 1563 : 			else if (_Ch < 0x00010000)
; 1564 : 				{
; 1565 : 				_By = (_Byte)(0xe0 | _Ch >> 12);
; 1566 : 				_Nextra = 2;
; 1567 : 				}
; 1568 : 			else if (_Ch < 0x00200000)
; 1569 : 				{
; 1570 : 				_By = (_Byte)(0xf0 | _Ch >> 18);
; 1571 : 				_Nextra = 3;
; 1572 : 				}
; 1573 : 			else if (_Ch < 0x04000000)
; 1574 : 				{
; 1575 : 				_By = (_Byte)(0xf8 | _Ch >> 24);
; 1576 : 				_Nextra = 4;
; 1577 : 				}
; 1578 : 			else
; 1579 : 				{
; 1580 : 				_By = (_Byte)(0xfc | (_Ch >> 30 & 0x03));
; 1581 : 				_Nextra = 5;
; 1582 : 				}
; 1583 : 
; 1584 : 			if (*_Pstate == 0)
; 1585 : 				{	// first time, maybe generate header
; 1586 : 				*_Pstate = 1;
; 1587 : 				if ((_Mode & _Generate_header) != 0)
; 1588 : 					{
; 1589 : 					if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
; 1590 : 						{
; 1591 : 						return (_Mybase::partial);	// not enough room for both
; 1592 : 						}
; 1593 : 
; 1594 : 					// prepend header
; 1595 : 					*_Mid2++ = (_Byte)(unsigned char)0xef;
; 1596 : 					*_Mid2++ = (_Byte)(unsigned char)0xbb;
; 1597 : 					*_Mid2++ = (_Byte)(unsigned char)0xbf;
; 1598 : 					}
; 1599 : 				}
; 1600 : 
; 1601 : 			if (_Last2 - _Mid2 < 1 + _Nextra)
; 1602 : 				{
; 1603 : 				break;	// not enough room for output
; 1604 : 				}
; 1605 : 
; 1606 : 			++_Mid1;
; 1607 : 			for (*_Mid2++ = _By; 0 < _Nextra; )
; 1608 : 				{
; 1609 : 				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
; 1610 : 				}
; 1611 : 			}
; 1612 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1613 : 		}
; 1614 : 
; 1615 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&,
; 1616 : 		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
; 1617 : 		{	// generate bytes to return to default shift state
; 1618 : 		_Mid2 = _First2;
; 1619 : 
; 1620 : 		return (_Mybase::ok);
; 1621 : 		}
; 1622 : 
; 1623 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1624 : 		const _Byte *_Last1, size_t _Count) const
; 1625 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1626 : 		size_t _Wchars = 0;
; 1627 : 		_Statype _Mystate = _State;
; 1628 : 
; 1629 : 		while (_Wchars < _Count && _First1 != _Last1)
; 1630 : 			{	// convert another wide character
; 1631 : 			const _Byte *_Mid1;
; 1632 : 			_Elem *_Mid2;
; 1633 : 			_Elem _Ch;
; 1634 : 			const auto _Result = do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
; 1635 : 			if (_Result == _Mybase::noconv)
; 1636 : 				{
; 1637 : 				_Wchars += static_cast<size_t>(_Last1 - _First1);
; 1638 : 				break;
; 1639 : 				}
; 1640 : 
; 1641 : 			if (_Result == _Mybase::ok)
; 1642 : 				{
; 1643 : 				if (_Mid2 == &_Ch + 1)
; 1644 : 					{
; 1645 : 					++_Wchars;	// replacement do_in might not convert one
; 1646 : 					}
; 1647 : 
; 1648 : 				_First1 = _Mid1;
; 1649 : 				continue;
; 1650 : 				}
; 1651 : 
; 1652 : 			break;	// error or partial
; 1653 : 			}
; 1654 : 
; 1655 : 		return (static_cast<int>(_Min_value(static_cast<size_t>(INT_MAX), _Wchars)));
; 1656 : 		}
; 1657 : 
; 1658 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept override
; 1659 : 		{	// return true if conversions never change input
; 1660 : 		return (false);
; 1661 : 		}
; 1662 : 
; 1663 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const noexcept override
; 1664 : 		{	// return maximum length required for a conversion
; 1665 : 		return ((_Mode & (_Consume_header | _Generate_header)) != 0
; 1666 : 			? 9 : 6);
; 1667 : 		}
; 1668 : 
; 1669 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const noexcept override
; 1670 : 		{	// return length of code sequence (from codecvt)
; 1671 : 		return ((_Mode & (_Consume_header | _Generate_header)) != 0
; 1672 : 			? -1 : 0);	// -1 => state dependent, 0 => varying length
; 1673 : 		}
; 1674 : 
; 1675 : private:
; 1676 : 	unsigned long _Maxcode;	// default: 0xffffffff
; 1677 : 	_Codecvt_mode _Mode;	// default: _Consume_header
; 1678 : 	};
; 1679 : 
; 1680 : 		// CLASS codecvt<wchar_t, char, _Mbstatet>
; 1681 : template<>
; 1682 : 	class _CRTIMP2_PURE_IMPORT codecvt<wchar_t, char, _Mbstatet>
; 1683 : 	: public codecvt_base
; 1684 : 	{	// facet for converting between wchar_t and char (_Byte) sequences
; 1685 : public:
; 1686 : 	typedef wchar_t _Elem;
; 1687 : 	typedef char _Byte;
; 1688 : 	typedef _Mbstatet _Statype;
; 1689 : 	typedef _Elem intern_type;
; 1690 : 	typedef _Byte extern_type;
; 1691 : 	typedef _Statype state_type;
; 1692 : 
; 1693 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1694 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1695 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1696 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1697 : 		return (do_in(_State,
; 1698 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1699 : 		}
; 1700 : 
; 1701 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1702 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1703 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1704 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1705 : 		return (do_out(_State,
; 1706 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1707 : 		}
; 1708 : 
; 1709 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1710 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1711 : 		{	// generate bytes to return to default shift state
; 1712 : 		return (do_unshift(_State,
; 1713 : 			_First2, _Last2, _Mid2));
; 1714 : 		}
; 1715 : 
; 1716 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1717 : 		const _Byte *_Last1, size_t _Count) const
; 1718 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1719 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1720 : 		}
; 1721 : 
; 1722 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1723 : 
; 1724 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1725 : 		: codecvt_base(_Refs)
; 1726 : 		{	// construct from current locale
; 1727 : 		_BEGIN_LOCINFO(_Lobj)
; 1728 : 			_Init(_Lobj);
; 1729 : 		_END_LOCINFO()
; 1730 : 		}
; 1731 : 
; 1732 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1733 : 		: codecvt_base(_Refs)
; 1734 : 		{	// construct from specified locale
; 1735 : 		_Init(_Lobj);
; 1736 : 		}
; 1737 : 
; 1738 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = nullptr,
; 1739 : 		const locale *_Ploc = nullptr)
; 1740 : 		{	// return locale category mask and construct standard facet
; 1741 : 		if (_Ppf != nullptr && *_Ppf == nullptr)
; 1742 : 			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
; 1743 : 				_Locinfo(_Ploc->c_str()));
; 1744 : 		return (_X_CTYPE);
; 1745 : 		}
; 1746 : 
; 1747 : protected:
; 1748 : 	virtual __CLR_OR_THIS_CALL ~codecvt() noexcept
; 1749 : 		{	// destroy the object
; 1750 : 		}
; 1751 : 
; 1752 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 1753 : 		{	// initialize from _Lobj
; 1754 : 		_Cvt = _Lobj._Getcvt();
; 1755 : 		}
; 1756 : 
; 1757 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype&,
; 1758 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1759 : 			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1760 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1761 : 		_Statype _Mystate{};
; 1762 : 		_Adl_verify_range(_First1, _Last1);
; 1763 : 		_Adl_verify_range(_First2, _Last2);
; 1764 : 		_Mid1 = _First1;
; 1765 : 		_Mid2 = _First2;
; 1766 : 		for (;;)
; 1767 : 			{
; 1768 : 			if (_Mid1 == _Last1)
; 1769 : 				{
; 1770 : 				return (ok);
; 1771 : 				}
; 1772 : 
; 1773 : 			if (_Mid2 == _Last2)
; 1774 : 				{
; 1775 : 				return (partial);
; 1776 : 				}
; 1777 : 
; 1778 : 			int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
; 1779 : 			switch (_Bytes)
; 1780 : 				{
; 1781 : 				case -2:	// partial conversion
; 1782 : 					return (partial);
; 1783 : 
; 1784 : 				case -1:	// failed conversion
; 1785 : 					return (error);
; 1786 : 
; 1787 : 				case 0:	// converted NULL character, TRANSITION, VSO#654347
; 1788 : 					_Bytes = 1;
; 1789 : 					// [[fallthrough]];
; 1790 : 
; 1791 : 				default:	// converted some other character
; 1792 : 					_Mid1 += _Bytes;
; 1793 : 					++_Mid2;
; 1794 : 					break;
; 1795 : 				}
; 1796 : 			}
; 1797 : 		}
; 1798 : 
; 1799 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1800 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1801 : 			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1802 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1803 : 		_Adl_verify_range(_First1, _Last1);
; 1804 : 		_Adl_verify_range(_First2, _Last2);
; 1805 : 		_Mid1 = _First1;
; 1806 : 		_Mid2 = _First2;
; 1807 : 		int _Bytes;
; 1808 : 
; 1809 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1810 : 			{
; 1811 : 			if ((int)MB_LEN_MAX <= _Last2 - _Mid2)
; 1812 : 				{
; 1813 : 				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
; 1814 : 					&_State, &_Cvt)) < 0)
; 1815 : 					{
; 1816 : 					return (error);	// locale-specific wcrtomb failed
; 1817 : 					}
; 1818 : 				else
; 1819 : 					{
; 1820 : 					++_Mid1;
; 1821 : 					_Mid2 += _Bytes;
; 1822 : 					}
; 1823 : 				}
; 1824 : 			else
; 1825 : 				{	// destination too small, convert into buffer
; 1826 : 				_Byte _Buf[MB_LEN_MAX];
; 1827 : 				_Statype _Stsave = _State;
; 1828 : 
; 1829 : 				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
; 1830 : 					&_State, &_Cvt)) < 0)
; 1831 : 					{
; 1832 : 					return (error);	// locale-specific wcrtomb failed
; 1833 : 					}
; 1834 : 				else if (_Last2 - _Mid2 < _Bytes)
; 1835 : 					{	// converted too many, roll back and return previous
; 1836 : 					_State = _Stsave;
; 1837 : 					break;
; 1838 : 					}
; 1839 : 				else
; 1840 : 					{	// copy converted bytes from buffer
; 1841 : 					_CSTD memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
; 1842 : 					++_Mid1;
; 1843 : 					_Mid2 += _Bytes;
; 1844 : 					}
; 1845 : 				}
; 1846 : 			}
; 1847 : 
; 1848 : 		return (_Mid1 == _Last1 ? ok : partial);
; 1849 : 		}
; 1850 : 
; 1851 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1852 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1853 : 		{	// generate bytes to return to default shift state
; 1854 : 		_Adl_verify_range(_First2, _Last2);
; 1855 : 		_Mid2 = _First2;
; 1856 : 		result _Ans = ok;
; 1857 : 		int _Bytes;
; 1858 : 		_Byte _Buf[MB_LEN_MAX];
; 1859 : 		_Statype _Stsave = _State;
; 1860 : 
; 1861 : 		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
; 1862 : 			_Ans = error;	// locale-specific wcrtomb failed
; 1863 : 		else if (_Last2 - _Mid2 < --_Bytes)
; 1864 : 			{	// converted too many, roll back and return
; 1865 : 			_State = _Stsave;
; 1866 : 			_Ans = partial;
; 1867 : 			}
; 1868 : 		else if (0 < _Bytes)
; 1869 : 			{	// copy converted bytes from buffer
; 1870 : 			_CSTD memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
; 1871 : 			_Mid2 += _Bytes;
; 1872 : 			}
; 1873 : 		return (_Ans);
; 1874 : 		}
; 1875 : 
; 1876 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype&, const _Byte *_First1,
; 1877 : 		const _Byte *_Last1, size_t _Count) const
; 1878 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1879 : 		_Adl_verify_range(_First1, _Last1);
; 1880 : 		size_t _Wchars = 0;
; 1881 : 		_Statype _Mystate{};
; 1882 : 
; 1883 : 		while (_Wchars < _Count && _First1 != _Last1)
; 1884 : 			{
; 1885 : 			_Elem _Ch;
; 1886 : 			int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_Mystate, &_Cvt);
; 1887 : 			if (_Bytes < 0)
; 1888 : 				{	// partial or failed conversion
; 1889 : 				break;
; 1890 : 				}
; 1891 : 
; 1892 : 			if (_Bytes == 0)
; 1893 : 				{	// converted NULL character, TRANSITION, VSO#654347
; 1894 : 				_Bytes = 1;
; 1895 : 				}
; 1896 : 
; 1897 : 			// converted _Bytes bytes to a wchar_t:
; 1898 : 			_First1 += _Bytes;
; 1899 : 			++_Wchars;
; 1900 : 			}
; 1901 : 
; 1902 : 		return (static_cast<int>(_Min_value(static_cast<size_t>(INT_MAX), _Wchars)));
; 1903 : 		}
; 1904 : 
; 1905 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept override
; 1906 : 		{	// return true if conversions never change input
; 1907 : 		return (false);
; 1908 : 		}
; 1909 : 
; 1910 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const noexcept override
; 1911 : 		{	// return maximum length required for a conversion (from codecvt)
; 1912 : 		return (MB_LEN_MAX);
; 1913 : 		}
; 1914 : 
; 1915 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const noexcept override
; 1916 : 		{	// return length of code sequence (from codecvt)
; 1917 : 		return (0);	// 0 => varying length
; 1918 : 		}
; 1919 : 
; 1920 : private:
; 1921 : 	_Locinfo::_Cvtvec _Cvt;	// locale info passed to _Mbrtowc, _Wcrtomb
; 1922 : 	};
; 1923 : 
; 1924 :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 1925 : 		// CLASS codecvt<unsigned short, char, _Mbstatet>
; 1926 : template<>
; 1927 : 	class _CRTIMP2_PURE_IMPORT codecvt<unsigned short, char, _Mbstatet>
; 1928 : 	: public codecvt_base
; 1929 : 	{	// facet for converting between unsigned short and char sequences
; 1930 : public:
; 1931 : 	typedef unsigned short _Elem;
; 1932 : 	typedef char _Byte;
; 1933 : 	typedef _Mbstatet _Statype;
; 1934 : 	typedef _Elem intern_type;
; 1935 : 	typedef _Byte extern_type;
; 1936 : 	typedef _Statype state_type;
; 1937 : 
; 1938 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1939 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1940 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1941 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1942 : 		return (do_in(_State,
; 1943 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1944 : 		}
; 1945 : 
; 1946 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1947 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1948 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1949 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1950 : 		return (do_out(_State,
; 1951 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1952 : 		}
; 1953 : 
; 1954 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1955 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1956 : 		{	// generate bytes to return to default shift state
; 1957 : 		return (do_unshift(_State,
; 1958 : 			_First2, _Last2, _Mid2));
; 1959 : 		}
; 1960 : 
; 1961 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1962 : 		const _Byte *_Last1, size_t _Count) const
; 1963 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1964 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1965 : 		}
; 1966 : 
; 1967 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1968 : 
; 1969 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1970 : 		: codecvt_base(_Refs)
; 1971 : 		{	// construct from current locale
; 1972 : 		_BEGIN_LOCINFO(_Lobj)
; 1973 : 			_Init(_Lobj);
; 1974 : 		_END_LOCINFO()
; 1975 : 		}
; 1976 : 
; 1977 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1978 : 		: codecvt_base(_Refs)
; 1979 : 		{	// construct from specified locale
; 1980 : 		_Init(_Lobj);
; 1981 : 		}
; 1982 : 
; 1983 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = nullptr,
; 1984 : 		const locale *_Ploc = nullptr)
; 1985 : 		{	// return locale category mask and construct standard facet
; 1986 : 		if (_Ppf != nullptr && *_Ppf == nullptr)
; 1987 : 			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
; 1988 : 				_Locinfo(_Ploc->c_str()));
; 1989 : 		return (_X_CTYPE);
; 1990 : 		}
; 1991 : 
; 1992 : protected:
; 1993 : 	virtual __CLR_OR_THIS_CALL ~codecvt() noexcept
; 1994 : 		{	// destroy the object
; 1995 : 		}
; 1996 : 
; 1997 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 1998 : 		{	// initialize from _Lobj
; 1999 : 		_Cvt = _Lobj._Getcvt();
; 2000 : 		}
; 2001 : 
; 2002 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype&,
; 2003 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 2004 : 			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 2005 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 2006 : 		_Statype _Mystate{};
; 2007 : 		_Adl_verify_range(_First1, _Last1);
; 2008 : 		_Adl_verify_range(_First2, _Last2);
; 2009 : 		_Mid1 = _First1;
; 2010 : 		_Mid2 = _First2;
; 2011 : 		for (;;)
; 2012 : 			{
; 2013 : 			if (_Mid1 == _Last1)
; 2014 : 				{
; 2015 : 				return (ok);
; 2016 : 				}
; 2017 : 
; 2018 : 			if (_Mid2 == _Last2)
; 2019 : 				{
; 2020 : 				return (partial);
; 2021 : 				}
; 2022 : 
; 2023 : 			int _Bytes = _Mbrtowc(reinterpret_cast<wchar_t *>(_Mid2), _Mid1,
; 2024 : 				static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
; 2025 : 			switch (_Bytes)
; 2026 : 				{
; 2027 : 				case -2:	// partial conversion
; 2028 : 					return (partial);
; 2029 : 
; 2030 : 				case -1:	// failed conversion
; 2031 : 					return (error);
; 2032 : 
; 2033 : 				case 0:	// converted NULL character, TRANSITION, VSO#654347
; 2034 : 					_Bytes = 1;
; 2035 : 					// [[fallthrough]];
; 2036 : 
; 2037 : 				default:	// converted some other character
; 2038 : 					_Mid1 += _Bytes;
; 2039 : 					++_Mid2;
; 2040 : 					break;
; 2041 : 				}
; 2042 : 			}
; 2043 : 		}
; 2044 : 
; 2045 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 2046 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 2047 : 			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 2048 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 2049 : 		_Adl_verify_range(_First1, _Last1);
; 2050 : 		_Adl_verify_range(_First2, _Last2);
; 2051 : 		_Mid1 = _First1;
; 2052 : 		_Mid2 = _First2;
; 2053 : 		int _Bytes;
; 2054 : 
; 2055 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 2056 : 			{
; 2057 : 			if ((int)MB_LEN_MAX <= _Last2 - _Mid2)
; 2058 : 				{
; 2059 : 				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
; 2060 : 					&_State, &_Cvt)) < 0)
; 2061 : 					{
; 2062 : 					return (error);	// locale-specific wcrtomb failed
; 2063 : 					}
; 2064 : 				else
; 2065 : 					{
; 2066 : 					++_Mid1;
; 2067 : 					_Mid2 += _Bytes;
; 2068 : 					}
; 2069 : 				}
; 2070 : 			else
; 2071 : 				{	// destination too small, convert into buffer
; 2072 : 				_Byte _Buf[MB_LEN_MAX];
; 2073 : 				_Statype _Stsave = _State;
; 2074 : 
; 2075 : 				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
; 2076 : 					&_State, &_Cvt)) < 0)
; 2077 : 					{
; 2078 : 					return (error);	// locale-specific wcrtomb failed
; 2079 : 					}
; 2080 : 				else if (_Last2 - _Mid2 < _Bytes)
; 2081 : 					{	// converted too many, roll back and return previous
; 2082 : 					_State = _Stsave;
; 2083 : 					break;
; 2084 : 					}
; 2085 : 				else
; 2086 : 					{	// copy converted bytes from buffer
; 2087 : 					_CSTD memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
; 2088 : 					++_Mid1;
; 2089 : 					_Mid2 += _Bytes;
; 2090 : 					}
; 2091 : 				}
; 2092 : 			}
; 2093 : 
; 2094 : 		return (_Mid1 == _Last1 ? ok : partial);
; 2095 : 		}
; 2096 : 
; 2097 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 2098 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 2099 : 		{	// generate bytes to return to default shift state
; 2100 : 		_Adl_verify_range(_First2, _Last2);
; 2101 : 		_Mid2 = _First2;
; 2102 : 		result _Ans = ok;
; 2103 : 		int _Bytes;
; 2104 : 		_Byte _Buf[MB_LEN_MAX];
; 2105 : 		_Statype _Stsave = _State;
; 2106 : 
; 2107 : 		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
; 2108 : 			{
; 2109 : 			_Ans = error;	// locale-specific wcrtomb failed
; 2110 : 			}
; 2111 : 		else if (_Last2 - _Mid2 < --_Bytes)
; 2112 : 			{	// converted too many, roll back and return
; 2113 : 			_State = _Stsave;
; 2114 : 			_Ans = partial;
; 2115 : 			}
; 2116 : 		else if (0 < _Bytes)
; 2117 : 			{	// copy converted bytes from buffer
; 2118 : 			_CSTD memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
; 2119 : 			_Mid2 += _Bytes;
; 2120 : 			}
; 2121 : 
; 2122 : 		return (_Ans);
; 2123 : 		}
; 2124 : 
; 2125 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype&, const _Byte *_First1,
; 2126 : 		const _Byte *_Last1, size_t _Count) const
; 2127 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 2128 : 		_Adl_verify_range(_First1, _Last1);
; 2129 : 		size_t _Wchars = 0;
; 2130 : 		_Statype _Mystate{};
; 2131 : 
; 2132 : 		while (_Wchars < _Count && _First1 != _Last1)
; 2133 : 			{
; 2134 : 			wchar_t _Ch;
; 2135 : 			int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_Mystate, &_Cvt);
; 2136 : 			if (_Bytes < 0)
; 2137 : 				{	// partial or failed conversion
; 2138 : 				break;
; 2139 : 				}
; 2140 : 
; 2141 : 			if (_Bytes == 0)
; 2142 : 				{	// converted NULL character, TRANSITION, VSO#654347
; 2143 : 				_Bytes = 1;
; 2144 : 				}
; 2145 : 
; 2146 : 			// converted _Bytes bytes to a wchar_t:
; 2147 : 			_First1 += _Bytes;
; 2148 : 			++_Wchars;
; 2149 : 			}
; 2150 : 
; 2151 : 		return (static_cast<int>(_Min_value(static_cast<size_t>(INT_MAX), _Wchars)));
; 2152 : 		}
; 2153 : 
; 2154 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const noexcept override
; 2155 : 		{	// return true if conversions never change input
; 2156 : 		return (false);
; 2157 : 		}
; 2158 : 
; 2159 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const noexcept override
; 2160 : 		{	// return maximum length required for a conversion (from codecvt)
; 2161 : 		return (MB_LEN_MAX);
; 2162 : 		}
; 2163 : 
; 2164 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const noexcept override
; 2165 : 		{	// return length of code sequence (from codecvt)
; 2166 : 		return (0);	// 0 => varying length
; 2167 : 		}
; 2168 : 
; 2169 : private:
; 2170 : 	_Locinfo::_Cvtvec _Cvt;	// locale info passed to _Mbrtowc, _Wcrtomb
; 2171 : 	};
; 2172 :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 2173 : 
; 2174 : 		// CLASS TEMPLATE codecvt_byname
; 2175 : template<class _Elem,
; 2176 : 	class _Byte,
; 2177 : 	class _Statype>
; 2178 : 	class codecvt_byname
; 2179 : 		: public codecvt<_Elem, _Byte, _Statype>
; 2180 : 	{	// codecvt for named locale
; 2181 : public:
; 2182 : 	explicit __CLR_OR_THIS_CALL codecvt_byname(char const* _Locname, size_t _Refs = 0)
; 2183 : 		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
; 2184 : 		{	// construct for named locale
; 2185 : 		}
; 2186 : 
; 2187 : 	explicit __CLR_OR_THIS_CALL codecvt_byname(const string& _Str, size_t _Refs = 0)
; 2188 : 		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
; 2189 : 		{	// construct for named locale
; 2190 : 		}
; 2191 : 
; 2192 : protected:
; 2193 : 	virtual __CLR_OR_THIS_CALL ~codecvt_byname() noexcept
; 2194 : 		{	// destroy the object
; 2195 : 		}
; 2196 : 	};
; 2197 : 
; 2198 : 		// STRUCT ctype_base
; 2199 : struct _CRTIMP2_PURE_IMPORT ctype_base
; 2200 : 	: public locale::facet
; 2201 : 	{	// base for ctype
; 2202 : 	enum
; 2203 : 		{	// constants for character classifications
; 2204 : 		alnum = _DI | _LO | _UP | _XA, alpha = _LO | _UP | _XA,
; 2205 : 		cntrl = _BB, digit = _DI, graph = _DI | _LO | _PU | _UP | _XA,
; 2206 : 		lower = _LO, print = _DI | _LO | _PU | _SP | _UP | _XA | _XD,
; 2207 : 		punct = _PU, space = _CN | _SP | _XS, upper = _UP,
; 2208 : 		xdigit = _XD, blank = _CN | _SP | _XS | _XB};
; 2209 : 	typedef short mask;	// to match <ctype.h>
; 2210 : 
; 2211 : 	__CLR_OR_THIS_CALL ctype_base(size_t _Refs = 0)
; 2212 : 		: locale::facet(_Refs)

  0003f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2213 : 		{	// default constructor

  00046	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@

; 2214 : 		}

  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b c1		 mov	 eax, ecx
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ctype_base@std@@QAE@I@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??0ctype_base@std@@QAE@I@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$??0ctype_base@std@@QAE@I@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ctype_base@std@@QAE@I@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2217 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ctype_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@

; 2218 : 		}

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00040	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2218 : 		}

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ctype_base@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??1ctype_base@std@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??1ctype_base@std@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ctype_base@std@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gctype_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2217 : 		{	// destroy the object

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ctype_base@std@@6B@

; 2218 : 		}

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0004d	74 0b		 je	 SHORT $LN12@scalar
  0004f	6a 08		 push	 8
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0005a	8b c6		 mov	 eax, esi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gctype_base@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??_Gctype_base@std@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??_Gctype_base@std@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gctype_base@std@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2565 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2566 : 		return (do_widen(_Byte));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 40 20	 mov	 eax, DWORD PTR [eax+32]

; 2567 : 		}

  00008	5d		 pop	 ebp

; 2566 : 		return (do_widen(_Byte));

  00009	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z PROC		; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2571 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2573 : 		}

  00005	5d		 pop	 ebp

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00006	ff 60 1c	 jmp	 DWORD PTR [eax+28]
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T2 = -40						; size = 16
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2612 : 		{	// construct from current locale

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00028	56		 push	 esi
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b f1		 mov	 esi, ecx
  0003c	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0003f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@

; 172  : 			{	// construct with initial reference count

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0004c	8b 43 0c	 mov	 eax, DWORD PTR __Refs$[ebx]
  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00055	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2212 : 		: locale::facet(_Refs)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2213 : 		{	// default constructor

  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ctype_base@std@@6B@

; 2214 : 		}
; 2215 : 
; 2216 : 	__CLR_OR_THIS_CALL ~ctype_base() noexcept
; 2217 : 		{	// destroy the object
; 2218 : 		}
; 2219 : 	};
; 2220 : 
; 2221 : 		// CLASS TEMPLATE ctype
; 2222 : template<class _Elem>
; 2223 : 	class ctype
; 2224 : 		: public ctype_base
; 2225 : 	{	// facet for classifying elements, converting cases
; 2226 : public:
; 2227 : 	typedef _Elem char_type;
; 2228 : 
; 2229 : 	bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const
; 2230 : 		{	// test if element fits any mask classifications
; 2231 : 		return (do_is(_Maskval, _Ch));
; 2232 : 		}
; 2233 : 
; 2234 : 	const _Elem *__CLR_OR_THIS_CALL is(const _Elem *_First, const _Elem *_Last,
; 2235 : 		mask *_Dest) const
; 2236 : 		{	// get mask sequence for elements in [_First, _Last)
; 2237 : 		return (do_is(_First, _Last, _Dest));
; 2238 : 		}
; 2239 : 
; 2240 : 	const _Elem *__CLR_OR_THIS_CALL scan_is(mask _Maskval, const _Elem *_First,
; 2241 : 		const _Elem *_Last) const
; 2242 : 		{	// find first in [_First, _Last) that fits mask classification
; 2243 : 		return (do_scan_is(_Maskval, _First, _Last));
; 2244 : 		}
; 2245 : 
; 2246 : 	const _Elem *__CLR_OR_THIS_CALL scan_not(mask _Maskval, const _Elem *_First,
; 2247 : 		const _Elem *_Last) const
; 2248 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2249 : 		return (do_scan_not(_Maskval, _First, _Last));
; 2250 : 		}
; 2251 : 
; 2252 : 	_Elem __CLR_OR_THIS_CALL tolower(_Elem _Ch) const
; 2253 : 		{	// convert element to lower case
; 2254 : 		return (do_tolower(_Ch));
; 2255 : 		}
; 2256 : 
; 2257 : 	const _Elem *__CLR_OR_THIS_CALL tolower(_Elem *_First, const _Elem *_Last) const
; 2258 : 		{	// convert [_First, _Last) in place to lower case
; 2259 : 		return (do_tolower(_First, _Last));
; 2260 : 		}
; 2261 : 
; 2262 : 	_Elem __CLR_OR_THIS_CALL toupper(_Elem _Ch) const
; 2263 : 		{	// convert element to upper case
; 2264 : 		return (do_toupper(_Ch));
; 2265 : 		}
; 2266 : 
; 2267 : 	const _Elem *__CLR_OR_THIS_CALL toupper(_Elem *_First, const _Elem *_Last) const
; 2268 : 		{	// convert [_First, _Last) in place to upper case
; 2269 : 		return (do_toupper(_First, _Last));
; 2270 : 		}
; 2271 : 
; 2272 : 	_Elem __CLR_OR_THIS_CALL widen(char _Byte) const
; 2273 : 		{	// widen char
; 2274 : 		return (do_widen(_Byte));
; 2275 : 		}
; 2276 : 
; 2277 : 	char const* __CLR_OR_THIS_CALL widen(char const* _First, char const* _Last,
; 2278 : 		_Elem *_Dest) const
; 2279 : 		{	// widen chars in [_First, _Last)
; 2280 : 		return (do_widen(_First, _Last, _Dest));
; 2281 : 		}
; 2282 : 
; 2283 : 	char __CLR_OR_THIS_CALL narrow(_Elem _Ch, char _Dflt = '\0') const
; 2284 : 		{	// narrow element to char
; 2285 : 		return (do_narrow(_Ch, _Dflt));
; 2286 : 		}
; 2287 : 
; 2288 : 	const _Elem *__CLR_OR_THIS_CALL narrow(const _Elem *_First, const _Elem *_Last,
; 2289 : 		char _Dflt, char *_Dest) const
; 2290 : 		{	// narrow elements in [_First, _Last) to chars
; 2291 : 		return (do_narrow(_First, _Last, _Dflt, _Dest));
; 2292 : 		}
; 2293 : 
; 2294 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 2295 : 
; 2296 : 	explicit __CLR_OR_THIS_CALL ctype(size_t _Refs = 0)
; 2297 : 		: ctype_base(_Refs)
; 2298 : 		{	// construct from current locale
; 2299 : 		_BEGIN_LOCINFO(_Lobj)
; 2300 : 			_Init(_Lobj);
; 2301 : 		_END_LOCINFO()
; 2302 : 		}
; 2303 : 
; 2304 : 	__CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
; 2305 : 		: ctype_base(_Refs)
; 2306 : 		{	// construct from specified locale
; 2307 : 		_Init(_Lobj);
; 2308 : 		}
; 2309 : 
; 2310 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = nullptr,
; 2311 : 		const locale *_Ploc = nullptr)
; 2312 : 		{	// return locale category mask and construct standard facet
; 2313 : 		if (_Ppf != nullptr && *_Ppf == nullptr)
; 2314 : 			*_Ppf = new ctype<_Elem>(
; 2315 : 				_Locinfo(_Ploc->c_str()));
; 2316 : 		return (_X_CTYPE);
; 2317 : 		}
; 2318 : 
; 2319 : protected:
; 2320 : 	virtual __CLR_OR_THIS_CALL ~ctype() noexcept
; 2321 : 		{	// destroy the object
; 2322 : 		if (_Ctype._Delfl)
; 2323 : 			_CSTD free((void *)_Ctype._Table);
; 2324 : 
; 2325 : 		_CSTD free(_Ctype._LocaleName);
; 2326 : 		}
; 2327 : 
; 2328 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 2329 : 		{	// initialize from _Lobj
; 2330 : 		_Ctype = _Lobj._Getctype();
; 2331 : 		_Cvt = _Lobj._Getcvt();
; 2332 : 		}
; 2333 : 
; 2334 : 	virtual bool __CLR_OR_THIS_CALL do_is(mask _Maskval, _Elem _Ch) const
; 2335 : 		{	// test if element fits any mask classifications
; 2336 : 		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
; 2337 : 			& _Maskval) != 0);
; 2338 : 		}
; 2339 : 
; 2340 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_is(const _Elem *_First, const _Elem *_Last,
; 2341 : 		mask *_Dest) const
; 2342 : 		{	// get mask sequence for elements in [_First, _Last)
; 2343 : 		_Adl_verify_range(_First, _Last);
; 2344 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2345 : 			{
; 2346 : 			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
; 2347 : 			}
; 2348 : 
; 2349 : 		return (_First);
; 2350 : 		}
; 2351 : 
; 2352 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_scan_is(mask _Maskval,
; 2353 : 		const _Elem *_First, const _Elem *_Last) const
; 2354 : 		{	// find first in [_First, _Last) that fits mask classification
; 2355 : 		_Adl_verify_range(_First, _Last);
; 2356 : 		while (_First != _Last && !is(_Maskval, *_First))
; 2357 : 			{
; 2358 : 			++_First;
; 2359 : 			}
; 2360 : 
; 2361 : 		return (_First);
; 2362 : 		}
; 2363 : 
; 2364 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_scan_not(mask _Maskval,
; 2365 : 		const _Elem *_First, const _Elem *_Last) const
; 2366 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2367 : 		_Adl_verify_range(_First, _Last);
; 2368 : 		while (_First != _Last && is(_Maskval, *_First))
; 2369 : 			{
; 2370 : 			++_First;
; 2371 : 			}
; 2372 : 
; 2373 : 		return (_First);
; 2374 : 		}
; 2375 : 
; 2376 : 	virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const
; 2377 : 		{	// convert element to lower case
; 2378 : 		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
; 2379 : 		if (_Byte == '\0')
; 2380 : 			{
; 2381 : 			return (_Ch);
; 2382 : 			}
; 2383 : 
; 2384 : 		return (widen((char)_Tolower(_Byte, &_Ctype)));
; 2385 : 		}
; 2386 : 
; 2387 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_tolower(_Elem *_First,
; 2388 : 		const _Elem *_Last) const
; 2389 : 		{	// convert [_First, _Last) in place to lower case
; 2390 : 		_Adl_verify_range((const _Elem *)_First, _Last);
; 2391 : 		for (; _First != _Last; ++_First)
; 2392 : 			{	// convert *_First to lower case
; 2393 : 			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
; 2394 : 			if (_Byte != '\0')
; 2395 : 				{
; 2396 : 				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
; 2397 : 				}
; 2398 : 			}
; 2399 : 		return ((const _Elem *)_First);
; 2400 : 		}
; 2401 : 
; 2402 : 	virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const
; 2403 : 		{	// convert element to upper case
; 2404 : 		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
; 2405 : 		if (_Byte == '\0')
; 2406 : 			{
; 2407 : 			return (_Ch);
; 2408 : 			}
; 2409 : 
; 2410 : 		return (widen((char)_Toupper(_Byte, &_Ctype)));
; 2411 : 		}
; 2412 : 
; 2413 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_toupper(_Elem *_First,
; 2414 : 		const _Elem *_Last) const
; 2415 : 		{	// convert [_First, _Last) in place to upper case
; 2416 : 		_Adl_verify_range((const _Elem *)_First, _Last);
; 2417 : 		for (; _First != _Last; ++_First)
; 2418 : 			{	// convert *_First to upper case
; 2419 : 			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
; 2420 : 			if (_Byte != '\0')
; 2421 : 				{
; 2422 : 				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
; 2423 : 				}
; 2424 : 			}
; 2425 : 
; 2426 : 		return ((const _Elem *)_First);
; 2427 : 		}
; 2428 : 
; 2429 : 	virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const
; 2430 : 		{	// widen char
; 2431 : 		return (_Maklocchr(_Byte, static_cast<_Elem *>(nullptr), _Cvt));
; 2432 : 		}
; 2433 : 
; 2434 : 	virtual char const* __CLR_OR_THIS_CALL do_widen(char const* _First,
; 2435 : 		char const* _Last, _Elem *_Dest) const
; 2436 : 		{	// widen chars in [_First, _Last)
; 2437 : 		_Adl_verify_range(_First, _Last);
; 2438 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2439 : 			{
; 2440 : 			*_Dest = _Maklocchr(*_First, static_cast<_Elem *>(nullptr), _Cvt);
; 2441 : 			}
; 2442 : 
; 2443 : 		return (_First);
; 2444 : 		}
; 2445 : 
; 2446 : 	char __CLR_OR_THIS_CALL _Donarrow(_Elem _Ch, char _Dflt) const
; 2447 : 		{	// narrow element to char
; 2448 : 		char _Byte;
; 2449 : 		if (_Ch == (_Elem)0)
; 2450 : 			{
; 2451 : 			return ('\0');
; 2452 : 			}
; 2453 : 
; 2454 : 		if ((_Byte = _Maklocbyte(_Ch, _Cvt)) == '\0')
; 2455 : 			{
; 2456 : 			return (_Dflt);
; 2457 : 			}
; 2458 : 
; 2459 : 		return (_Byte);
; 2460 : 		}
; 2461 : 
; 2462 : 	virtual char __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char _Dflt) const
; 2463 : 		{	// narrow element to char
; 2464 : 		return (_Donarrow(_Ch, _Dflt));
; 2465 : 		}
; 2466 : 
; 2467 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_narrow(const _Elem *_First,
; 2468 : 		const _Elem *_Last, char _Dflt, char *_Dest) const
; 2469 : 		{	// narrow elements in [_First, _Last) to chars
; 2470 : 		_Adl_verify_range(_First, _Last);
; 2471 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2472 : 			{
; 2473 : 			*_Dest = _Donarrow(*_First, _Dflt);
; 2474 : 			}
; 2475 : 
; 2476 : 		return (_First);
; 2477 : 		}
; 2478 : 
; 2479 : private:
; 2480 : 	_Locinfo::_Ctypevec _Ctype;	// locale info passed to _Tolower, etc.
; 2481 : 	_Locinfo::_Cvtvec _Cvt;		// conversion information
; 2482 : 	};
; 2483 : 
; 2484 : 		// STATIC ctype::id OBJECT
; 2485 : #ifdef __clang__
; 2486 :  #pragma clang diagnostic push
; 2487 :  #pragma clang diagnostic ignored "-Wdllimport-static-field-def"
; 2488 : #endif /* __clang__ */
; 2489 : 
; 2490 : template<class _Elem>
; 2491 : 	locale::id ctype<_Elem>::id;
; 2492 : 
; 2493 : #ifdef __clang__
; 2494 :  #pragma clang diagnostic pop
; 2495 : #endif /* __clang__ */
; 2496 : 
; 2497 : 		// CLASS ctype<char>
; 2498 : template<>
; 2499 : 	class _CRTIMP2_PURE_IMPORT ctype<char>
; 2500 : 	: public ctype_base
; 2501 : 	{	// facet for classifying char elements, converting cases
; 2502 : public:
; 2503 : 	typedef char _Elem;
; 2504 : 	typedef _Elem char_type;
; 2505 : 
; 2506 : 	bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const
; 2507 : 		{	// test if element fits any mask classifications
; 2508 : 		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
; 2509 : 		}
; 2510 : 
; 2511 : 	const _Elem *__CLR_OR_THIS_CALL is(const _Elem *_First,
; 2512 : 		const _Elem *_Last, mask *_Dest) const
; 2513 : 		{	// get mask sequence for elements in [_First, _Last)
; 2514 : 		_Adl_verify_range(_First, _Last);
; 2515 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2516 : 			*_Dest = _Ctype._Table[(unsigned char)*_First];
; 2517 : 		return (_First);
; 2518 : 		}
; 2519 : 
; 2520 : 	const _Elem *__CLR_OR_THIS_CALL scan_is(mask _Maskval,
; 2521 : 		const _Elem *_First, const _Elem *_Last) const
; 2522 : 		{	// find first in [_First, _Last) that fits mask classification
; 2523 : 		_Adl_verify_range(_First, _Last);
; 2524 : 		while (_First != _Last && !is(_Maskval, *_First))
; 2525 : 			{
; 2526 : 			++_First;
; 2527 : 			}
; 2528 : 
; 2529 : 		return (_First);
; 2530 : 		}
; 2531 : 
; 2532 : 	const _Elem *__CLR_OR_THIS_CALL scan_not(mask _Maskval,
; 2533 : 		const _Elem *_First, const _Elem *_Last) const
; 2534 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2535 : 		_Adl_verify_range(_First, _Last);
; 2536 : 		while (_First != _Last && is(_Maskval, *_First))
; 2537 : 			{
; 2538 : 			++_First;
; 2539 : 			}
; 2540 : 
; 2541 : 		return (_First);
; 2542 : 		}
; 2543 : 
; 2544 : 	_Elem __CLR_OR_THIS_CALL tolower(_Elem _Ch) const
; 2545 : 		{	// convert element to lower case
; 2546 : 		return (do_tolower(_Ch));
; 2547 : 		}
; 2548 : 
; 2549 : 	const _Elem *__CLR_OR_THIS_CALL tolower(_Elem *_First, const _Elem *_Last) const
; 2550 : 		{	// convert [_First, _Last) in place to lower case
; 2551 : 		return (do_tolower(_First, _Last));
; 2552 : 		}
; 2553 : 
; 2554 : 	_Elem __CLR_OR_THIS_CALL toupper(_Elem _Ch) const
; 2555 : 		{	// convert element to upper case
; 2556 : 		return (do_toupper(_Ch));
; 2557 : 		}
; 2558 : 
; 2559 : 	const _Elem *__CLR_OR_THIS_CALL toupper(_Elem *_First, const _Elem *_Last) const
; 2560 : 		{	// convert [_First, _Last) in place to upper case
; 2561 : 		return (do_toupper(_First, _Last));
; 2562 : 		}
; 2563 : 
; 2564 : 	_Elem __CLR_OR_THIS_CALL widen(char _Byte) const
; 2565 : 		{	// widen char
; 2566 : 		return (do_widen(_Byte));
; 2567 : 		}
; 2568 : 
; 2569 : 	const _Elem *__CLR_OR_THIS_CALL widen(char const* _First, char const* _Last,
; 2570 : 		_Elem *_Dest) const
; 2571 : 		{	// widen chars in [_First, _Last)
; 2572 : 		return (do_widen(_First, _Last, _Dest));
; 2573 : 		}
; 2574 : 
; 2575 : 	_Elem __CLR_OR_THIS_CALL narrow(_Elem _Ch, char _Dflt = '\0') const
; 2576 : 		{	// narrow element to char
; 2577 : 		return (do_narrow(_Ch, _Dflt));
; 2578 : 		}
; 2579 : 
; 2580 : 	const _Elem *__CLR_OR_THIS_CALL narrow(const _Elem *_First, const _Elem *_Last,
; 2581 : 		char _Dflt, char *_Dest) const
; 2582 : 		{	// narrow elements in [_First, _Last) to chars
; 2583 : 		return (do_narrow(_First, _Last, _Dflt, _Dest));
; 2584 : 		}
; 2585 : 
; 2586 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 2587 : 
; 2588 : 	explicit __CLR_OR_THIS_CALL ctype(const mask *_Table = nullptr,
; 2589 : 		bool _Deletetable = false,
; 2590 : 		size_t _Refs = 0)
; 2591 : 		: ctype_base(_Refs)
; 2592 : 		{	// construct with specified table and delete flag for table
; 2593 : 		_BEGIN_LOCINFO(_Lobj)
; 2594 : 			_Init(_Lobj);
; 2595 : 		_END_LOCINFO()
; 2596 : 
; 2597 : 		_Tidy();	// free existing table, as needed
; 2598 : 		if (_Table != nullptr)
; 2599 : 			{	// replace existing char to mask table
; 2600 : 			_Ctype._Table = _Table;
; 2601 : 			_Ctype._Delfl = _Deletetable ? -1 : 0;
; 2602 : 			}
; 2603 : 		else
; 2604 : 			{	// use classic table
; 2605 : 			_Ctype._Table = classic_table();
; 2606 : 			_Ctype._Delfl = 0;
; 2607 : 			}
; 2608 : 		}
; 2609 : 
; 2610 : 	__CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
; 2611 : 		: ctype_base(_Refs)

  00065	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  0006c	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0006f	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2612 : 		{	// construct from current locale

  00070	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  00076	e8 00 00 00 00	 call	 __Getctype
  0007b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2646 : 		_Ctype = _Lobj._Getctype();

  0007e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00081	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2613 : 		_Init(_Lobj);
; 2614 : 		}

  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008c	8b c6		 mov	 eax, esi
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	8b e3		 mov	 esp, ebx
  0009f	5b		 pop	 ebx
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -92						; size = 52
$T3 = -40						; size = 16
$T4 = -24						; size = 4
$T5 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2618 : 		{	// return locale category mask and construct standard facet

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 50	 sub	 esp, 80			; 00000050H
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2619 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  0003b	8b 7b 08	 mov	 edi, DWORD PTR __Ppf$[ebx]
  0003e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00045	85 ff		 test	 edi, edi
  00047	0f 84 bb 00 00
	00		 je	 $LN33@Getcat
  0004d	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00050	0f 85 b2 00 00
	00		 jne	 $LN33@Getcat

; 2620 : 			*_Ppf = new ctype<_Elem>(

  00056	6a 18		 push	 24			; 00000018H
  00058	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005d	8b f0		 mov	 esi, eax
  0005f	83 c4 04	 add	 esp, 4
  00062	89 75 e8	 mov	 DWORD PTR $T4[ebp], esi
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  0006c	8b 4b 0c	 mov	 ecx, DWORD PTR __Ploc$[ebx]
  0006f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00072	85 c0		 test	 eax, eax
  00074	75 07		 jne	 SHORT $LN12@Getcat
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@@
  0007b	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  0007d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00080	85 c9		 test	 ecx, ecx
  00082	75 03		 jne	 SHORT $LN17@Getcat
  00084	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2620 : 			*_Ppf = new ctype<_Elem>(

  00087	51		 push	 ecx
  00088	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00090	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00094	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
  0009b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@

; 172  : 			{	// construct with initial reference count

  000a1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000a8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  000ae	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2212 : 		: locale::facet(_Refs)

  000b5	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 2213 : 		{	// default constructor

  000bc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ctype_base@std@@6B@

; 2611 : 		: ctype_base(_Refs)

  000c2	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  000c9	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000cc	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2612 : 		{	// construct from current locale

  000cd	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  000d3	e8 00 00 00 00	 call	 __Getctype
  000d8	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2646 : 		_Ctype = _Lobj._Getctype();

  000db	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000de	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2620 : 			*_Ppf = new ctype<_Elem>(

  000e2	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  000e9	89 37		 mov	 DWORD PTR [edi], esi
  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  000fa	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  000fd	83 e0 fe	 and	 eax, -2			; fffffffeH
  00100	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  00103	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN33@Getcat:

; 2621 : 				_Locinfo(_Ploc->c_str()));
; 2622 : 		return (_X_CTYPE);
; 2623 : 		}

  00108	b8 02 00 00 00	 mov	 eax, 2
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00117	59		 pop	 ecx
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	8b e3		 mov	 esp, ebx
  0011f	5b		 pop	 ebx
  00120	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 ec fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  0001f	8d 4d a4	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4:
  00028	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3:
  00030	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00038	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00040	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00044	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00047	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2640 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ctype@D@std@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2651 : 		if (0 < _Ctype._Delfl)

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	85 c0		 test	 eax, eax
  0003b	7e 0a		 jle	 SHORT $LN18@ctype

; 2652 : 			_CSTD free((void *)_Ctype._Table);

  0003d	ff 76 0c	 push	 DWORD PTR [esi+12]
  00040	e8 00 00 00 00	 call	 _free
  00045	eb 0a		 jmp	 SHORT $LN19@ctype
$LN18@ctype:

; 2653 : 		else if (_Ctype._Delfl < 0)

  00047	79 0b		 jns	 SHORT $LN7@ctype

; 2654 : 			delete[] _Ctype._Table;

  00049	ff 76 0c	 push	 DWORD PTR [esi+12]
  0004c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN19@ctype:

; 2655 : 
; 2656 : 		_CSTD free(_Ctype._LocaleName);

  00051	83 c4 04	 add	 esp, 4
$LN7@ctype:
  00054	ff 76 14	 push	 DWORD PTR [esi+20]
  00057	e8 00 00 00 00	 call	 _free
  0005c	83 c4 04	 add	 esp, 4

; 2642 : 		}

  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2217 : 		{	// destroy the object

  00066	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ctype_base@std@@6B@

; 2218 : 		}

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00073	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00080	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2642 : 		}

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??1?$ctype@D@std@@MAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ctype@D@std@@MAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2645 : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  00006	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2645 : 		{	// initialize from _Lobj

  00009	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  0000a	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2645 : 		{	// initialize from _Lobj

  0000b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  0000d	e8 00 00 00 00	 call	 __Getctype
  00012	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2646 : 		_Ctype = _Lobj._Getctype();

  00015	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00018	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2647 : 		}

  0001c	5e		 pop	 esi
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2650 : 		{	// free any allocated storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2651 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax
  00008	7e 18		 jle	 SHORT $LN6@Tidy

; 2652 : 			_CSTD free((void *)_Ctype._Table);

  0000a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0000d	e8 00 00 00 00	 call	 _free

; 2655 : 
; 2656 : 		_CSTD free(_Ctype._LocaleName);

  00012	83 c4 04	 add	 esp, 4
  00015	ff 76 14	 push	 DWORD PTR [esi+20]
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
  00020	5e		 pop	 esi

; 2657 : 		}

  00021	c3		 ret	 0
$LN6@Tidy:

; 2653 : 		else if (_Ctype._Delfl < 0)

  00022	79 0b		 jns	 SHORT $LN4@Tidy

; 2654 : 			delete[] _Ctype._Table;

  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 2655 : 
; 2656 : 		_CSTD free(_Ctype._LocaleName);

  0002c	83 c4 04	 add	 esp, 4
$LN4@Tidy:
  0002f	ff 76 14	 push	 DWORD PTR [esi+20]
  00032	e8 00 00 00 00	 call	 _free
  00037	83 c4 04	 add	 esp, 4
  0003a	5e		 pop	 esi

; 2657 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2660 : 		{	// convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2661 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2662 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv136 = 12						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2666 : 		{	// convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2667 : 		_Adl_verify_range((const _Elem *)_First, _Last);
; 2668 : 		for (; _First != _Last; ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	57		 push	 edi
  00010	33 ff		 xor	 edi, edi
  00012	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00015	0f 47 da	 cmova	 ebx, edx
  00018	85 db		 test	 ebx, ebx
  0001a	74 1e		 je	 SHORT $LN12@do_tolower
  0001c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0001f	89 45 0c	 mov	 DWORD PTR tv136[ebp], eax
$LL4@do_tolower:

; 2669 : 			{
; 2670 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00022	50		 push	 eax
  00023	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Tolower
  0002c	88 06		 mov	 BYTE PTR [esi], al
  0002e	47		 inc	 edi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR tv136[ebp]
  00032	83 c4 08	 add	 esp, 8
  00035	46		 inc	 esi
  00036	3b fb		 cmp	 edi, ebx
  00038	75 e8		 jne	 SHORT $LL4@do_tolower
$LN12@do_tolower:
  0003a	5f		 pop	 edi

; 2671 : 			}
; 2672 : 
; 2673 : 		return ((const _Elem *)_First);
; 2674 : 		}

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2677 : 		{	// convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2678 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2679 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv136 = 12						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2683 : 		{	// convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2684 : 		_Adl_verify_range((const _Elem *)_First, _Last);
; 2685 : 		for (; _First != _Last; ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	57		 push	 edi
  00010	33 ff		 xor	 edi, edi
  00012	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00015	0f 47 da	 cmova	 ebx, edx
  00018	85 db		 test	 ebx, ebx
  0001a	74 1e		 je	 SHORT $LN12@do_toupper
  0001c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0001f	89 45 0c	 mov	 DWORD PTR tv136[ebp], eax
$LL4@do_toupper:

; 2686 : 			{
; 2687 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00022	50		 push	 eax
  00023	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Toupper
  0002c	88 06		 mov	 BYTE PTR [esi], al
  0002e	47		 inc	 edi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR tv136[ebp]
  00032	83 c4 08	 add	 esp, 8
  00035	46		 inc	 esi
  00036	3b fb		 cmp	 edi, ebx
  00038	75 e8		 jne	 SHORT $LL4@do_toupper
$LN12@do_toupper:
  0003a	5f		 pop	 edi

; 2688 : 			}
; 2689 : 
; 2690 : 		return ((const _Elem *)_First);
; 2691 : 		}

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2694 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2695 : 		return (_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2696 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2700 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2701 : 		_Adl_verify_range(_First, _Last);
; 2702 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2703 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2704 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2707 : 		{	// narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2708 : 		return (_Ch);

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2709 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2713 : 		{	// narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2714 : 		_Adl_verify_range(_First, _Last);
; 2715 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2716 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2717 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$ctype@D@std@@MAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2640 : 		{	// destroy the object

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2651 : 		if (0 < _Ctype._Delfl)

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	85 c0		 test	 eax, eax
  0003b	7e 0a		 jle	 SHORT $LN22@scalar

; 2652 : 			_CSTD free((void *)_Ctype._Table);

  0003d	ff 76 0c	 push	 DWORD PTR [esi+12]
  00040	e8 00 00 00 00	 call	 _free
  00045	eb 0a		 jmp	 SHORT $LN23@scalar
$LN22@scalar:

; 2653 : 		else if (_Ctype._Delfl < 0)

  00047	79 0b		 jns	 SHORT $LN10@scalar

; 2654 : 			delete[] _Ctype._Table;

  00049	ff 76 0c	 push	 DWORD PTR [esi+12]
  0004c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN23@scalar:

; 2655 : 
; 2656 : 		_CSTD free(_Ctype._LocaleName);

  00051	83 c4 04	 add	 esp, 4
$LN10@scalar:
  00054	ff 76 14	 push	 DWORD PTR [esi+20]
  00057	e8 00 00 00 00	 call	 _free
  0005c	83 c4 04	 add	 esp, 4

; 2642 : 		}

  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2217 : 		{	// destroy the object

  00066	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ctype_base@std@@6B@

; 2218 : 		}

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00073	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00084	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0008a	74 0b		 je	 SHORT $LN20@scalar
  0008c	6a 18		 push	 24			; 00000018H
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00094	83 c4 08	 add	 esp, 8
$LN20@scalar:
  00097	8b c6		 mov	 eax, esi
  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5e		 pop	 esi
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$ctype@D@std@@MAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
__unwindfunclet$??_G?$ctype@D@std@@MAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??_G?$ctype@D@std@@MAEPAXI@Z$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??_G?$ctype@D@std@@MAEPAXI@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$ctype@D@std@@MAEPAXI@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 75   : 		{	// default constructor
; 76   : 		_Addr = reinterpret_cast<uintptr_t>(this);

  00000	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 77   : 		}

  00003	8b c1		 mov	 eax, ecx
  00005	c3		 ret	 0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 81   : 		}

  00000	c3		 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 94   : 		{	// compare categories for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 		return (_Addr == _Right._Addr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000c	0f 94 c0	 sete	 al

; 96   : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 136  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  : 		: _Myval(_Val),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 		_Mycat(&_Cat)

  00008	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 137  : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 170  : 		return (_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 171  : 		}

  00002	c3		 ret	 0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 175  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 176  : 		}

  00003	c3		 ret	 0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT
; _this$ = ecx

; 181  : 		{	// get name of error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 175  : 		return (*_Mycat);

  0002a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 182  : 		return (category().message(value()));

  0002d	ff 31		 push	 DWORD PTR [ecx]
  0002f	8b ca		 mov	 ecx, edx
  00031	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	ff 50 08	 call	 DWORD PTR [eax+8]
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00047	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 183  : 		}

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@message
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@message:
  00018	c3		 ret	 0
__ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 208  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		: _Myval(_Val),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 207  : 		_Mycat(&_Cat)

  00008	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 209  : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 242  : 		return (_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 243  : 		}

  00002	c3		 ret	 0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 247  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 248  : 		}

  00003	c3		 ret	 0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??8std@@YA_NABVerror_condition@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??8std@@YA_NABVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 285  : 	{	// test errors for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 		return (_Addr == _Right._Addr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 285  : 	{	// test errors for equality

  00006	56		 push	 esi

; 95   : 		return (_Addr == _Right._Addr);

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]

; 286  : 	return (_Left.category() == _Right.category()

  00016	75 0b		 jne	 SHORT $LN3@operator
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	3b 06		 cmp	 eax, DWORD PTR [esi]
  0001c	75 05		 jne	 SHORT $LN3@operator
  0001e	b0 01		 mov	 al, 1
  00020	5e		 pop	 esi

; 287  : 		&& _Left.value() == _Right.value());
; 288  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN3@operator:

; 286  : 	return (_Left.category() == _Right.category()

  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 287  : 		&& _Left.value() == _Right.value());
; 288  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??8std@@YA_NABVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 328  : 	{	// make error_condition for error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		: _Myval(_Val),

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Errval$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 207  : 		_Mycat(&_Cat)

  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 329  : 	return (error_condition(_Errval, *this));
; 330  : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 333  : 	{	// test if error code same condition

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 	return (default_error_condition(_Errval) == _Cond);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	ff 75 08	 push	 DWORD PTR __Errval$[ebp]
  0000f	52		 push	 edx
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]

; 95   : 		return (_Addr == _Right._Addr);

  00013	8b 75 0c	 mov	 esi, DWORD PTR __Cond$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]

; 286  : 	return (_Left.category() == _Right.category()

  00022	75 0f		 jne	 SHORT $LN5@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN5@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 335  : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN5@equivalent:

; 286  : 	return (_Left.category() == _Right.category()

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 335  : 	}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 338  : 	{	// test if conditions same for this category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 		return (_Addr == _Right._Addr);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 338  : 	{	// test if conditions same for this category

  00006	56		 push	 esi

; 95   : 		return (_Addr == _Right._Addr);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Code$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]

; 339  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  00010	75 0e		 jne	 SHORT $LN3@equivalent
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  00017	75 07		 jne	 SHORT $LN3@equivalent
  00019	b0 01		 mov	 al, 1
  0001b	5e		 pop	 esi

; 340  : 	}

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN3@equivalent:

; 339  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 340  : 	}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT
; ___$ReturnUdt$ = ecx
; __Errno$dead$ = edx

; 355  : 	{	// make an error_code

  00000	56		 push	 esi

; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00001	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00006	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000b	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag

; 355  : 	{	// make an error_code

  00010	8b f1		 mov	 esi, ecx

; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00012	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	85 c0		 test	 eax, eax
  0001c	74 11		 je	 SHORT $LN14@make_error

; 134  : 		: _Myval(_Val),

  0001e	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 356  : 	return (error_code((int)_Errno, iostream_category()));

  00024	8b c6		 mov	 eax, esi

; 135  : 		_Mycat(&_Cat)

  00026	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage

; 356  : 	return (error_code((int)_Errno, iostream_category()));

  0002d	5e		 pop	 esi

; 357  : 	}

  0002e	c3		 ret	 0
$LN14@make_error:

; 614  : 		_STD terminate();

  0002f	e8 00 00 00 00	 call	 _terminate
$LN12@make_error:
  00034	cc		 int	 3
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -56				; size = 4
__Old_size$1$ = -52					; size = 4
$T2 = -52						; size = 1
$T3 = -48						; size = 4
$T4 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 8
__Message$ = 20						; size = 24
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 401  : 		{	// compose error message

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 28	 sub	 esp, 40			; 00000028H
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00032	56		 push	 esi
  00033	57		 push	 edi
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00041	89 7d c8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00044	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3371 : 		return (size() == 0);

  00052	8b 4b 24	 mov	 ecx, DWORD PTR __Message$[ebx+16]
  00055	89 4d cc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  00058	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 402  : 		if (!_Message.empty())

  0005a	74 4a		 je	 SHORT $LN22@Makestr
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2571 : 		const size_type _Old_size = _My_data._Mysize;

  0005c	8b 53 28	 mov	 edx, DWORD PTR __Message$[ebx+20]
  0005f	8b c2		 mov	 eax, edx
  00061	2b c1		 sub	 eax, ecx

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  00063	6a 02		 push	 2
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  0006a	83 f8 02	 cmp	 eax, 2
  0006d	72 26		 jb	 SHORT $LN23@Makestr

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0006f	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00072	8d 73 14	 lea	 esi, DWORD PTR __Message$[ebx]

; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  00075	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 1804 : 		if (_Large_string_engaged())

  00078	0f 43 73 14	 cmovae	 esi, DWORD PTR __Message$[ebx]

; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  0007c	89 43 24	 mov	 DWORD PTR __Message$[ebx+16], eax

; 2575 : 			_Elem * const _Old_ptr = _My_data._Myptr();
; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0007f	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _memmove

; 506  : 		_Left = _Right;

  00088	8b 45 cc	 mov	 eax, DWORD PTR __Old_size$1$[ebp]

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0008e	c6 44 06 02 00	 mov	 BYTE PTR [esi+eax+2], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2578 : 			return (*this);

  00093	eb 11		 jmp	 SHORT $LN22@Makestr
$LN23@Makestr:

; 2579 : 			}
; 2580 : 
; 2581 : 		return (_Reallocate_grow_by(_Count,

  00095	c6 45 cc 00	 mov	 BYTE PTR $T2[ebp], 0
  00099	8d 4b 14	 lea	 ecx, DWORD PTR __Message$[ebx]
  0009c	ff 75 cc	 push	 DWORD PTR $T2[ebp]
  0009f	6a 02		 push	 2
  000a1	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN22@Makestr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 407  : 		_Message.append(_Errcode.message());

  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 182  : 		return (category().message(value()));

  000aa	8d 55 d4	 lea	 edx, DWORD PTR $T4[ebp]
  000ad	8b 4b 10	 mov	 ecx, DWORD PTR __Errcode$[ebx+4]
  000b0	ff 73 0c	 push	 DWORD PTR __Errcode$[ebx]
  000b3	52		 push	 edx
  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b9	ff d0		 call	 eax

; 407  : 		_Message.append(_Errcode.message());

  000bb	50		 push	 eax
  000bc	8d 4b 14	 lea	 ecx, DWORD PTR __Message$[ebx]

; 182  : 		return (category().message(value()));

  000bf	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2

; 407  : 		_Message.append(_Errcode.message());

  000c6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000cb	b8 02 00 00 00	 mov	 eax, 2
  000d0	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
  000d3	83 e0 fd	 and	 eax, -3			; fffffffdH
  000d6	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
  000d9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000dd	8b 55 e8	 mov	 edx, DWORD PTR $T4[ebp+20]
  000e0	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  000e3	72 2c		 jb	 SHORT $LN90@Makestr
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e5	8b 4d d4	 mov	 ecx, DWORD PTR $T4[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  000e8	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e9	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000eb	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000f1	72 14		 jb	 SHORT $LN89@Makestr

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000f3	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000f6	83 c2 23	 add	 edx, 35			; 00000023H
  000f9	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	0f 87 8a 00 00
	00		 ja	 $LN206@Makestr
$LN89@Makestr:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00107	52		 push	 edx
  00108	51		 push	 ecx
  00109	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010e	83 c4 08	 add	 esp, 8
$LN90@Makestr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00111	0f 10 43 14	 movups	 xmm0, XMMWORD PTR __Message$[ebx]

; 1784 : 		_Mysize(0),

  00115	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1785 : 		_Myres(0)

  0011c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00123	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 3995 : 		_My_data._Mysize = 0;

  00126	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0012d	f3 0f 7e 43 24	 movq	 xmm0, QWORD PTR __Message$[ebx+16]

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00132	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00139	c6 45 d4 00	 mov	 BYTE PTR $T4[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0013d	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00142	c7 43 24 00 00
	00 00		 mov	 DWORD PTR __Message$[ebx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00149	c7 43 28 0f 00
	00 00		 mov	 DWORD PTR __Message$[ebx+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00150	c6 43 14 00	 mov	 BYTE PTR __Message$[ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 408  : 		return (_Message);

  00154	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  0015b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0015f	c7 43 24 00 00
	00 00		 mov	 DWORD PTR __Message$[ebx+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00166	c7 43 28 0f 00
	00 00		 mov	 DWORD PTR __Message$[ebx+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0016d	c6 43 14 00	 mov	 BYTE PTR __Message$[ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 408  : 		return (_Message);

  00171	8b c7		 mov	 eax, edi

; 409  : 		}

  00173	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00176	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017d	59		 pop	 ecx
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00183	33 cd		 xor	 ecx, ebp
  00185	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	8b e3		 mov	 esp, ebx
  0018f	5b		 pop	 ebx
  00190	c3		 ret	 0
$LN206@Makestr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00191	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN204@Makestr:
  00196	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0:
  00000	8b 5d f0	 mov	 ebx, DWORD PTR [ebp-16]
  00003	8d 4b 14	 lea	 ecx, DWORD PTR __Message$[ebx]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$3:
  0000b	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  0000e	83 e0 02	 and	 eax, 2
  00011	0f 84 0c 00 00
	00		 je	 $LN43@Makestr
  00017	83 65 d0 fd	 and	 DWORD PTR $T3[ebp], -3	; fffffffdH
  0001b	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN43@Makestr:
  00023	c3		 ret	 0
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2:
  00024	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  00027	83 e0 01	 and	 eax, 1
  0002a	0f 84 0c 00 00
	00		 je	 $LN7@Makestr
  00030	83 65 d0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00034	8b 4d c8	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@Makestr:
  0003c	c3		 ret	 0
__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z:
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00044	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -120					; size = 4
__Old_size$1$ = -116					; size = 4
$T2 = -112						; size = 24
__InitData$3 = -84					; size = 8
__Errcode$2$ = -80					; size = 4
_this$ = -80						; size = 4
__Errcode$1$ = -76					; size = 4
$T4 = -76						; size = 1
$T5 = -72						; size = 4
$T6 = -68						; size = 24
$T7 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 415  : 		{	// construct from error code and message string

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 68	 sub	 esp, 104		; 00000068H
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00032	56		 push	 esi
  00033	57		 push	 edi
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	8b f9		 mov	 edi, ecx
  00040	89 7d b0	 mov	 DWORD PTR _this$[ebp], edi
  00043	8b 43 10	 mov	 eax, DWORD PTR __Message$[ebx]
  00046	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00049	89 7d 88	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0004c	50		 push	 eax
  0004d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00060	8b 43 08	 mov	 eax, DWORD PTR __Errcode$[ebx]
  00063	8b 73 0c	 mov	 esi, DWORD PTR __Errcode$[ebx+4]
  00066	89 45 b0	 mov	 DWORD PTR __Errcode$2$[ebp], eax
  00069	89 75 b4	 mov	 DWORD PTR __Errcode$1$[ebp], esi

; 401  : 		{	// compose error message

  0006c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3371 : 		return (size() == 0);

  00073	8b 4d a0	 mov	 ecx, DWORD PTR $T2[ebp+16]
  00076	89 4d 8c	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  00079	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 402  : 		if (!_Message.empty())

  0007b	74 4d		 je	 SHORT $LN27@System_err
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2571 : 		const size_type _Old_size = _My_data._Mysize;

  0007d	8b 55 a4	 mov	 edx, DWORD PTR $T2[ebp+20]
  00080	8b c2		 mov	 eax, edx
  00082	2b c1		 sub	 eax, ecx

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  00084	6a 02		 push	 2
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  0008b	83 f8 02	 cmp	 eax, 2
  0008e	72 29		 jb	 SHORT $LN28@System_err

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00090	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00093	8d 75 90	 lea	 esi, DWORD PTR $T2[ebp]

; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  00096	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 1804 : 		if (_Large_string_engaged())

  00099	0f 43 75 90	 cmovae	 esi, DWORD PTR $T2[ebp]

; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  0009d	89 45 a0	 mov	 DWORD PTR $T2[ebp+16], eax

; 2575 : 			_Elem * const _Old_ptr = _My_data._Myptr();
; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  000a0	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _memmove

; 506  : 		_Left = _Right;

  000a9	8b 45 8c	 mov	 eax, DWORD PTR __Old_size$1$[ebp]

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  000af	c6 44 06 02 00	 mov	 BYTE PTR [esi+eax+2], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2578 : 			return (*this);

  000b4	8b 75 b4	 mov	 esi, DWORD PTR __Errcode$1$[ebp]
  000b7	eb 11		 jmp	 SHORT $LN27@System_err
$LN28@System_err:

; 2579 : 			}
; 2580 : 
; 2581 : 		return (_Reallocate_grow_by(_Count,

  000b9	c6 45 b4 00	 mov	 BYTE PTR $T4[ebp], 0
  000bd	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  000c0	ff 75 b4	 push	 DWORD PTR $T4[ebp]
  000c3	6a 02		 push	 2
  000c5	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN27@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 407  : 		_Message.append(_Errcode.message());

  000ca	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 182  : 		return (category().message(value()));

  000ce	8d 4d bc	 lea	 ecx, DWORD PTR $T6[ebp]
  000d1	8b 06		 mov	 eax, DWORD PTR [esi]
  000d3	ff 75 b0	 push	 DWORD PTR __Errcode$2$[ebp]
  000d6	51		 push	 ecx
  000d7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000da	8b ce		 mov	 ecx, esi
  000dc	ff d0		 call	 eax

; 407  : 		_Message.append(_Errcode.message());

  000de	50		 push	 eax
  000df	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]

; 182  : 		return (category().message(value()));

  000e2	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR $T5[ebp], 2

; 407  : 		_Message.append(_Errcode.message());

  000e9	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000ee	b8 02 00 00 00	 mov	 eax, 2
  000f3	89 45 b8	 mov	 DWORD PTR $T5[ebp], eax
  000f6	83 e0 fd	 and	 eax, -3			; fffffffdH
  000f9	89 45 b8	 mov	 DWORD PTR $T5[ebp], eax
  000fc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00100	8b 55 d0	 mov	 edx, DWORD PTR $T6[ebp+20]
  00103	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00106	72 2c		 jb	 SHORT $LN95@System_err
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00108	8b 4d bc	 mov	 ecx, DWORD PTR $T6[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0010b	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0010e	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00114	72 14		 jb	 SHORT $LN94@System_err

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00116	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00119	83 c2 23	 add	 edx, 35			; 00000023H
  0011c	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00121	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00124	0f 87 37 01 00
	00		 ja	 $LN286@System_err
$LN94@System_err:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0012a	52		 push	 edx
  0012b	51		 push	 ecx
  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00131	83 c4 08	 add	 esp, 8
$LN95@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00134	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T2[ebp]

; 1784 : 		_Mysize(0),

  00138	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 1785 : 		_Myres(0)

  0013f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00146	0f 11 45 d4	 movups	 XMMWORD PTR $T7[ebp], xmm0

; 3995 : 		_My_data._Mysize = 0;

  0014a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00151	f3 0f 7e 45 a0	 movq	 xmm0, QWORD PTR $T2[ebp+16]

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00156	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0015d	c6 45 bc 00	 mov	 BYTE PTR $T6[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00161	66 0f d6 45 e4	 movq	 QWORD PTR $T7[ebp+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00166	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0016d	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00174	c6 45 90 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 408  : 		return (_Message);

  00178	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
  0017f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 54   :         : _Data()

  00183	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00186	83 7d e8 10	 cmp	 DWORD PTR $T7[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0018a	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  0018d	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 55   :     {

  00190	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  00196	0f 43 4d d4	 cmovae	 ecx, DWORD PTR $T7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 57   :         __std_exception_copy(&_InitData, &_Data);

  0019a	50		 push	 eax
  0019b	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0019f	8d 45 ac	 lea	 eax, DWORD PTR __InitData$3[ebp]
  001a2	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  001a3	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  001aa	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001b1	c6 45 90 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 56   :         __std_exception_data _InitData = { _Message, true };

  001b5	89 4d ac	 mov	 DWORD PTR __InitData$3[ebp], ecx
  001b8	c6 45 b0 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1

; 57   :         __std_exception_copy(&_InitData, &_Data);

  001bc	e8 00 00 00 00	 call	 ___std_exception_copy
  001c1	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\stdexcept

; 164  : 		: _Mybase(_Message.c_str())

  001c4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 165  : 		{	// construct from message string

  001c8	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7runtime_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 413  : 		: runtime_error(_Makestr(_Errcode, _Message)),

  001ce	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	89 45 b8	 mov	 DWORD PTR $T5[ebp], eax
  001da	83 e0 fe	 and	 eax, -2			; fffffffeH
  001dd	89 45 b8	 mov	 DWORD PTR $T5[ebp], eax
  001e0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001e4	8b 55 e8	 mov	 edx, DWORD PTR $T7[ebp+20]
  001e7	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001ea	72 28		 jb	 SHORT $LN269@System_err
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ec	8b 4d d4	 mov	 ecx, DWORD PTR $T7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001ef	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001f0	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001f2	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001f8	72 10		 jb	 SHORT $LN268@System_err

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  001fa	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001fd	83 c2 23	 add	 edx, 35			; 00000023H
  00200	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00202	83 c0 fc	 add	 eax, -4			; fffffffcH
  00205	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00208	77 5c		 ja	 SHORT $LN287@System_err
$LN268@System_err:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0020a	52		 push	 edx
  0020b	51		 push	 ecx
  0020c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00211	83 c4 08	 add	 esp, 8
$LN269@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 414  : 		_Mycode(_Errcode)

  00214	8b 4b 08	 mov	 ecx, DWORD PTR __Errcode$[ebx]
  00217	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  0021a	8b 4b 0c	 mov	 ecx, DWORD PTR __Errcode$[ebx+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0021d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00224	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0022b	c6 45 d4 00	 mov	 BYTE PTR $T7[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 415  : 		{	// construct from error code and message string

  0022f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00235	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 416  : 		}

  00238	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0023f	8b c7		 mov	 eax, edi
  00241	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00244	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024b	59		 pop	 ecx
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi
  0024e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00251	33 cd		 xor	 ecx, ebp
  00253	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00258	8b e5		 mov	 esp, ebp
  0025a	5d		 pop	 ebp
  0025b	8b e3		 mov	 esp, ebx
  0025d	5b		 pop	 ebx
  0025e	c2 0c 00	 ret	 12			; 0000000cH
$LN286@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00261	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN287@System_err:
  00266	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN284@System_err:
  0026b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5:
  00008	8b 45 b8	 mov	 eax, DWORD PTR $T5[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN12@System_err
  00014	83 65 b8 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00018	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@System_err:
  00020	c3		 ret	 0
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  00021	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6:
  00029	8b 45 b8	 mov	 eax, DWORD PTR $T5[ebp]
  0002c	83 e0 02	 and	 eax, 2
  0002f	0f 84 0c 00 00
	00		 je	 $LN48@System_err
  00035	83 65 b8 fd	 and	 DWORD PTR $T5[ebp], -3	; fffffffdH
  00039	8d 4d bc	 lea	 ecx, DWORD PTR $T6[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN48@System_err:
  00041	c3		 ret	 0
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$7:
  00042	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  0004a	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0004d	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00052	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00056	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00059	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00066	33 c8		 xor	 ecx, eax
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00072	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G_System_error@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN12@scalar
  00048	6a 14		 push	 20			; 00000014H
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G_System_error@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??_G_System_error@std@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_G_System_error@std@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G_System_error@std@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1_System_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_System_error@std@@UAE@XZ PROC			; std::_System_error::~_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_System_error@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_System_error@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??1_System_error@std@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1_System_error@std@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_System_error@std@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_System_error@std@@UAE@XZ ENDP			; std::_System_error::~_System_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
_this$GSCopy$ = -52					; size = 4
_this$ = -48						; size = 4
$T2 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 8
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 440  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 d0	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00032	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 440  : 		{	// construct from error code and message string

  00034	89 75 cc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00037	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 1785 : 		_Myres(0)

  0003e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0

; 3976 : 		_My_data._Mysize = 0;

  00045	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0004c	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0004f	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00056	c6 45 d4 00	 mov	 BYTE PTR $T2[ebp], 0
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL86@system_err:

; 462  : 		return (__builtin_strlen(_First));

  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL86@system_err
  00067	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00069	51		 push	 ecx
  0006a	52		 push	 edx
  0006b	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 439  : 		: _Mybase(_Errcode, _Message)

  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  0007d	50		 push	 eax
  0007e	ff 75 10	 push	 DWORD PTR __Errcode$[ebp+4]
  00081	8b ce		 mov	 ecx, esi
  00083	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp]
  00086	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  0008b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0008f	8b 55 e8	 mov	 edx, DWORD PTR $T2[ebp+20]
  00092	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00095	72 28		 jb	 SHORT $LN71@system_err
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0009d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN70@system_err

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000a5	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000a8	83 c2 23	 add	 edx, 35			; 00000023H
  000ab	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 48		 ja	 SHORT $LN90@system_err
$LN70@system_err:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000b5	52		 push	 edx
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN71@system_err:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  000bf	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000c6	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000cd	c6 45 d4 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 440  : 		{	// construct from error code and message string

  000d1	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 441  : 		}

  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000de	8b c6		 mov	 eax, esi
  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 0c 00	 ret	 12			; 0000000cH
$LN90@system_err:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@system_err:
  00102	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1:
  00008	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gsystem_error@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN15@scalar
  00048	6a 14		 push	 20			; 00000014H
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gsystem_error@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__unwindfunclet$??_Gsystem_error@std@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??_Gsystem_error@std@@UAEPAXI@Z$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_Gsystem_error@std@@UAEPAXI@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gsystem_error@std@@UAEPAXI@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1system_error@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1system_error@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__unwindfunclet$??1system_error@std@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??1system_error@std@@UAE@XZ$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1system_error@std@@UAE@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1system_error@std@@UAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 484  : 	_Generic_error_category() noexcept

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Generic_error_category@std@@6B@

; 485  : 		{	// default constructor
; 486  : 		_Addr = _Generic_addr;
; 487  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 03 00
	00 00		 mov	 DWORD PTR [ecx+4], 3
  0000f	c3		 ret	 0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 491  : 		return ("generic");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07DCLBNMLN@generic@

; 492  : 		}

  00005	c3		 ret	 0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 495  : 		{	// convert to name of error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 496  : 		return (_Syserror_map(_Errcode));

  00025	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp]
  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00034	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  00037	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00039	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  0003b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0004c	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 506  : 		_Left = _Right;

  0004f	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL29@message:

; 462  : 		return (__builtin_strlen(_First));

  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL29@message
  00059	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0005b	51		 push	 ecx
  0005c	52		 push	 edx
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00072	8b c6		 mov	 eax, esi

; 497  : 		}

  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@message
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@message:
  00018	c3		 ret	 0
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
; Function compile flags: /Ogtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN8@scalar
  0000c	6a 08		 push	 8
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 505  : 	_Iostream_error_category() noexcept

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Iostream_error_category@std@@6B@

; 506  : 		{	// default constructor
; 507  : 		_Addr = _Iostream_addr;
; 508  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 05 00
	00 00		 mov	 DWORD PTR [ecx+4], 5
  0000f	c3		 ret	 0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 512  : 		return ("iostream");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 513  : 		}

  00005	c3		 ret	 0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 516  : 		{	// convert to name of error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 517  : 		if (_Errcode == (int)io_errc::stream)

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 24		 jne	 SHORT $LN2@message
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00034	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00037	8b ce		 mov	 ecx, esi
  00039	6a 15		 push	 21			; 00000015H
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error@

; 3976 : 		_My_data._Mysize = 0;

  00040	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00047	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0004e	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 519  : 			return ("iostream stream error");

  00056	eb 52		 jmp	 SHORT $LN61@message
$LN2@message:

; 523  : 			return (_Generic_error_category::message(_Errcode));

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 496  : 		return (_Syserror_map(_Errcode));

  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00065	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  00068	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0006a	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  0006c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0006f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00076	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0007d	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 506  : 		_Left = _Right;

  00080	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL59@message:

; 462  : 		return (__builtin_strlen(_First));

  00083	8a 01		 mov	 al, BYTE PTR [ecx]
  00085	41		 inc	 ecx
  00086	84 c0		 test	 al, al
  00088	75 f9		 jne	 SHORT $LL59@message
  0008a	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0008c	51		 push	 ecx
  0008d	52		 push	 edx
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 523  : 			return (_Generic_error_category::message(_Errcode));

  00095	b9 02 00 00 00	 mov	 ecx, 2

; 496  : 		return (_Syserror_map(_Errcode));

  0009a	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR $T2[ebp], 2

; 523  : 			return (_Generic_error_category::message(_Errcode));

  000a1	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  000a4	83 e1 fd	 and	 ecx, -3			; fffffffdH
  000a7	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
$LN61@message:

; 524  : 			}
; 525  : 		}

  000aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b1	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  000b8	8b c6		 mov	 eax, esi
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@message
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@message:
  00018	c3		 ret	 0
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$1:
  00019	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN34@message
  00025	83 65 f0 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00029	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN34@message:
  00031	c3		 ret	 0
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
; Function compile flags: /Ogtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN10@scalar
  0000c	6a 08		 push	 8
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00000	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00005	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000a	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
  0000f	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	0f 84 00 00 00
	00		 je	 _terminate

; 628  : 	return (_Immortalize<_Iostream_error_category>());
; 629  : 	}

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00024	c3		 ret	 0
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -48					; size = 4
tv332 = -44						; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00033	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00036	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 238  : 			{	// construct with message

  00038	89 75 d0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 237  : 			: system_error(_Errcode, _Message)

  00042	8b 38		 mov	 edi, DWORD PTR [eax]
  00044	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00047	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  0004a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0

; 3976 : 		_My_data._Mysize = 0;

  00051	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00058	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0005f	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 462  : 		return (__builtin_strlen(_First));

  00063	89 45 d4	 mov	 DWORD PTR tv332[ebp], eax
$LL90@failure:
  00066	8a 01		 mov	 al, BYTE PTR [ecx]
  00068	41		 inc	 ecx
  00069	84 c0		 test	 al, al
  0006b	75 f9		 jne	 SHORT $LL90@failure
  0006d	2b 4d d4	 sub	 ecx, DWORD PTR tv332[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00070	51		 push	 ecx
  00071	52		 push	 edx
  00072	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00075	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 439  : 		: _Mybase(_Errcode, _Message)

  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00081	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00084	50		 push	 eax
  00085	53		 push	 ebx
  00086	57		 push	 edi
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  0008e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00092	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  00095	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00098	72 28		 jb	 SHORT $LN74@failure
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009a	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009d	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009e	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000a0	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000a6	72 10		 jb	 SHORT $LN73@failure

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000a8	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000ab	83 c2 23	 add	 edx, 35			; 00000023H
  000ae	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b6	77 56		 ja	 SHORT $LN94@failure
$LN73@failure:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000b8	52		 push	 edx
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bf	83 c4 08	 add	 esp, 8
$LN74@failure:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  000c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000c9	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000d0	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error

; 440  : 		{	// construct from error code and message string

  000d4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 237  : 			: system_error(_Errcode, _Message)

  000da	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 238  : 			{	// construct with message

  000e1	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8b c6		 mov	 eax, esi
  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	33 cd		 xor	 ecx, ebp
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
$LN94@failure:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@failure:
  00113	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$2:
  00008	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0:
  00010	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1system_error@std@@UAE@XZ
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -28						; size = 8
$T2 = -20						; size = 20
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 287  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 288  : 		_State &= _Statmask;

  00006	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00009	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0000c	83 e0 17	 and	 eax, 23			; 00000017H

; 289  : 		_Mystate = _State;

  0000f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 290  : 		const auto _Filtered = _State & _Except;

  00012	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00015	56		 push	 esi
  00016	23 c8		 and	 ecx, eax

; 291  : 		if (_Filtered)

  00018	74 08		 je	 SHORT $LN2@clear

; 292  : 			{
; 293  : 			if (_Reraise)

  0001a	80 7d 0c 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0001e	74 12		 je	 SHORT $LN3@clear
  00020	eb 07		 jmp	 SHORT $LN11@clear
$LN2@clear:

; 313  : 			}
; 314  : 		}

  00022	5e		 pop	 esi
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN11@clear:

; 294  : 				{
; 295  : 				_RERAISE;

  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 296  : 				}
; 297  : 
; 298  : 			char const*  _Msg;
; 299  : 			if (_Filtered & ios_base::badbit)

  00032	f6 c1 04	 test	 cl, 4
  00035	74 07		 je	 SHORT $LN4@clear

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  00037	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0003c	eb 10		 jmp	 SHORT $LN6@clear
$LN4@clear:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  0003e	f6 c1 02	 test	 cl, 2
  00041	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00046	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0004b	0f 44 f0	 cmove	 esi, eax
$LN6@clear:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  0004e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T1[esp+32]
  00052	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00057	50		 push	 eax
  00058	56		 push	 esi
  00059	8d 4c 24 14	 lea	 ecx, DWORD PTR $T2[esp+40]
  0005d	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00062	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00067	8d 44 24 10	 lea	 eax, DWORD PTR $T2[esp+36]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@clear:
  00071	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$dead$ = 8					; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 318  : 		clear(_State, false);

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 319  : 		}

  00009	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 330  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 331  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 352  : 		return (rdstate() == ios_base::goodbit);

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	0f 94 c0	 sete	 al

; 353  : 		}

  00007	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 390  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 391  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT
__Newfmtflags$dead$ = 8					; size = 4
__Mask$dead$ = 12					; size = 4
?setf@ios_base@std@@QAEHHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 409  : 		const ios_base::fmtflags _Oldfmtflags = _Fmtfl;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 410  : 		_Fmtfl = (_Oldfmtflags & ~_Mask) | (_Newfmtflags & _Mask & _Fmtmask);

  00003	8b d0		 mov	 edx, eax
  00005	81 e2 ff f9 ff
	ff		 and	 edx, -1537		; fffff9ffH
  0000b	81 ca 00 08 00
	00		 or	 edx, 2048		; 00000800H
  00011	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 411  : 		return (_Oldfmtflags);
; 412  : 		}

  00014	c2 08 00	 ret	 8
?setf@ios_base@std@@QAEHHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 421  : 		return (_Prec);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]

; 422  : 		}

  00006	c3		 ret	 0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 433  : 		return (_Wide);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 434  : 		}

  00006	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 437  : 		{	// set width to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 438  : 		const streamsize _Oldwidth = _Wide;

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00009	56		 push	 esi

; 439  : 		_Wide = _Newwidth;

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newwidth$[ebp]
  0000d	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR __Newwidth$[ebp+4]
  00013	89 71 24	 mov	 DWORD PTR [ecx+36], esi

; 440  : 		return (_Oldwidth);
; 441  : 		}

  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 444  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 445  : 		return (*_Ploc);

  0002b	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  0002e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	ff 52 04	 call	 DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0004a	8b c6		 mov	 eax, esi

; 446  : 		}

  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00056	59		 pop	 ecx
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@getloc
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN4@getloc:
  00018	c3		 ret	 0
__ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 533  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 534  : 		_Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00029	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0002e	83 c4 04	 add	 esp, 4

; 535  : 		}

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 543  : 	__CLR_OR_THIS_CALL ios_base()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@

; 544  : 		{	// default constructor
; 545  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 548  : 		{	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 318  : 		clear(_State, false);

  00005	6a 00		 push	 0
  00007	6a 00		 push	 0

; 549  : 		_Ploc = nullptr;

  00009	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 550  : 		_Stdstr = 0;

  00010	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 551  : 		_Except = goodbit;

  00017	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 552  : 		_Fmtfl = (fmtflags)(skipws | dec);

  0001e	c7 47 14 01 02
	00 00		 mov	 DWORD PTR [edi+20], 513	; 00000201H

; 553  : 		_Prec = 6;

  00025	c7 47 18 06 00
	00 00		 mov	 DWORD PTR [edi+24], 6
  0002c	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 554  : 		_Wide = 0;

  00033	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  0003a	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 555  : 		_Arr = nullptr;

  00041	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 556  : 		_Calls = nullptr;

  00048	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 318  : 		clear(_State, false);

  0004f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 558  : 		_Ploc = new locale;

  00054	6a 08		 push	 8
  00056	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  00060	6a 01		 push	 1
  00062	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00067	83 c4 04	 add	 esp, 4
  0006a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 558  : 		_Ploc = new locale;

  0006d	89 77 30	 mov	 DWORD PTR [edi+48], esi

; 559  : 		}

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	59		 pop	 ecx
  00073	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN18@scalar
  00048	6a 14		 push	 20			; 00000014H
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1system_error@std@@UAE@XZ
__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??_Gfailure@ios_base@std@@UAEPAXI@Z$3:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gfailure@ios_base@std@@UAEPAXI@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1failure@ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 86   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1system_error@std@@UAE@XZ
__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??1failure@ios_base@std@@UAE@XZ$3:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1failure@ios_base@std@@UAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 68   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7runtime_error@std@@6B@
  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00064	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00067	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0006a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00070	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00077	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  0007d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00084	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  0008a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00091	8b c7		 mov	 eax, edi
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$3:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$2:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$1:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1system_error@std@@UAE@XZ
__ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0system_error@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 68   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7runtime_error@std@@6B@
  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00064	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00067	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0006a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00070	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00077	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8b c7		 mov	 eax, edi
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_System_error@std@@UAE@XZ
__ehhandler$??0system_error@std@@QAE@ABV01@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 68   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7runtime_error@std@@6B@
  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00064	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00067	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0006a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8b c7		 mov	 eax, edi
  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1runtime_error@std@@UAE@XZ
__ehhandler$??0_System_error@std@@QAE@ABV01@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gios_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 534  : 		_Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0002c	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00031	83 c4 04	 add	 esp, 4
  00034	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00038	74 0b		 je	 SHORT $LN6@scalar
  0003a	6a 38		 push	 56			; 00000038H
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00045	8b c6		 mov	 eax, esi
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gios_base@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?hex@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?hex@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::hex, COMDAT

; 231  : 	{	// set basefield to hex

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 409  : 		const ios_base::fmtflags _Oldfmtflags = _Fmtfl;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]

; 410  : 		_Fmtfl = (_Oldfmtflags & ~_Mask) | (_Newfmtflags & _Mask & _Fmtmask);

  00006	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00009	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  0000f	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 234  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?hex@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::hex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.h
;	COMDAT ?s_OnChange@MonitorIPs@@KGXPAXE@Z
_TEXT	SEGMENT
_lpParameter$ = 8					; size = 4
_b$ = 12						; size = 1
?s_OnChange@MonitorIPs@@KGXPAXE@Z PROC			; MonitorIPs::s_OnChange, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 88   :         Log(LOG_DEBUG, __LINE__, "-- MonIPs.OnChng, 0x%p %.2X", lpParameter, b);

  00007	0f b6 45 0c	 movzx	 eax, BYTE PTR _b$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _lpParameter$[ebp]
  0000f	50		 push	 eax
  00010	56		 push	 esi
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JCKHFAHN@?9?9?5MonIPs?4OnChng?0?50x?$CFp?5?$CF?42X@
  00016	6a 58		 push	 88			; 00000058H
  00018	6a 10		 push	 16			; 00000010H
  0001a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0001f	83 c4 14	 add	 esp, 20			; 00000014H

; 89   :         MonitorIPs *self = reinterpret_cast<MonitorIPs*>(lpParameter);
; 90   :         self->CheckIPAddress();     // something changed - check it again

  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?CheckIPAddress@MonitorIPs@@IAEXXZ ; MonitorIPs::CheckIPAddress

; 97   :         WaitForSingleObject(m_hSync, MINUTE);

  00029	68 60 ea 00 00	 push	 60000			; 0000ea60H
  0002e	ff 36		 push	 DWORD PTR [esi]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 98   :         m_changed = true;
; 99   :         ReleaseMutex(m_hSync);

  00036	ff 36		 push	 DWORD PTR [esi]
  00038	c6 46 28 01	 mov	 BYTE PTR [esi+40], 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4

; 91   :         self->SetChange();
; 92   :     }

  00042	5e		 pop	 esi
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?s_OnChange@MonitorIPs@@KGXPAXE@Z ENDP			; MonitorIPs::s_OnChange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.h
;	COMDAT ?SetChange@MonitorIPs@@IAEXXZ
_TEXT	SEGMENT
?SetChange@MonitorIPs@@IAEXXZ PROC			; MonitorIPs::SetChange, COMDAT
; _this$ = ecx

; 96   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 97   :         WaitForSingleObject(m_hSync, MINUTE);

  00003	68 60 ea 00 00	 push	 60000			; 0000ea60H
  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 98   :         m_changed = true;
; 99   :         ReleaseMutex(m_hSync);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	c6 46 28 01	 mov	 BYTE PTR [esi+40], 1
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0001c	5e		 pop	 esi

; 100  :     }

  0001d	c3		 ret	 0
?SetChange@MonitorIPs@@IAEXXZ ENDP			; MonitorIPs::SetChange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
_TEXT	SEGMENT
?Initialize@MonitorIPs@@QAE_NXZ PROC			; MonitorIPs::Initialize
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 30   :     Log(LOG_DEBUG, __LINE__, ">> MonIPs.Init");

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNHLOBGB@?$DO?$DO?5MonIPs?4Init@
  0000d	6a 1e		 push	 30			; 0000001eH
  0000f	6a 10		 push	 16			; 00000010H
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 
; 32   :     m_hSync = CreateMutex(nullptr, FALSE, nullptr);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	6a 00		 push	 0
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00027	89 06		 mov	 DWORD PTR [esi], eax

; 33   :     if (!m_hSync)

  00029	85 c0		 test	 eax, eax
  0002b	75 1f		 jne	 SHORT $LN2@Initialize

; 34   :     {
; 35   :         Log(LOG_DEBUG, __LINE__, "<< MonIPs.Init, Sync Obj %u", GetLastError());

  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00033	50		 push	 eax
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LPPKJDAO@?$DM?$DM?5MonIPs?4Init?0?5Sync?5Obj?5?$CFu@
  00039	6a 23		 push	 35			; 00000023H
  0003b	6a 10		 push	 16			; 00000010H
  0003d	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 36   :         return false;

  00045	32 c0		 xor	 al, al

; 56   : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN2@Initialize:

; 37   :     }
; 38   : 
; 39   :     m_o.hEvent = CreateEvent(nullptr, FALSE, FALSE, nullptr);

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  0005a	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 40   :     if (!m_o.hEvent)

  0005d	85 c0		 test	 eax, eax
  0005f	75 1f		 jne	 SHORT $LN3@Initialize

; 41   :     {
; 42   :         Log(LOG_DEBUG, __LINE__, "<< MonIPs.Init, CreateEv %u", GetLastError());

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EDMNPOCE@?$DM?$DM?5MonIPs?4Init?0?5CreateEv?5?$CFu@
  0006d	6a 2a		 push	 42			; 0000002aH
  0006f	6a 10		 push	 16			; 00000010H
  00071	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  00076	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :         return false;

  00079	32 c0		 xor	 al, al

; 56   : }

  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN3@Initialize:

; 44   :     }
; 45   : 
; 46   :     if (!RegisterWaitForSingleObject(&m_hWait, m_o.hEvent, s_OnChange, this, INFINITE, 0))

  00080	6a 00		 push	 0
  00082	6a ff		 push	 -1
  00084	56		 push	 esi
  00085	68 00 00 00 00	 push	 OFFSET ?s_OnChange@MonitorIPs@@KGXPAXE@Z ; MonitorIPs::s_OnChange
  0008a	50		 push	 eax
  0008b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterWaitForSingleObject@24
  00095	85 c0		 test	 eax, eax
  00097	75 1f		 jne	 SHORT $LN4@Initialize

; 47   :     {
; 48   :         Log(LOG_DEBUG, __LINE__, "<< MonIPs.Init, RegWaitForSnglObj %u", GetLastError());

  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0009f	50		 push	 eax
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@HDGCLEAK@?$DM?$DM?5MonIPs?4Init?0?5RegWaitForSnglO@
  000a5	6a 30		 push	 48			; 00000030H
  000a7	6a 10		 push	 16			; 00000010H
  000a9	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 49   :         return false;

  000b1	32 c0		 xor	 al, al

; 56   : }

  000b3	5e		 pop	 esi
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
$LN4@Initialize:

; 50   :     }
; 51   : 
; 52   :     CheckIPAddress();

  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?CheckIPAddress@MonitorIPs@@IAEXXZ ; MonitorIPs::CheckIPAddress

; 53   : 
; 54   :     Log(LOG_DEBUG, __LINE__, "<< MonIPs.Init, Ev 0x%p, ret True", m_o.hEvent);

  000bf	ff 76 18	 push	 DWORD PTR [esi+24]
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DBAGDPMP@?$DM?$DM?5MonIPs?4Init?0?5Ev?50x?$CFp?0?5ret?5Tr@
  000c7	6a 36		 push	 54			; 00000036H
  000c9	6a 10		 push	 16			; 00000010H
  000cb	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  000d0	83 c4 10	 add	 esp, 16			; 00000010H

; 55   :     return true;

  000d3	b0 01		 mov	 al, 1

; 56   : }

  000d5	5e		 pop	 esi
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?Initialize@MonitorIPs@@QAE_NXZ ENDP			; MonitorIPs::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp
_TEXT	SEGMENT
_ss$2 = -248						; size = 176
_h$ = -72						; size = 4
_hDefaultProcessHeap$1$ = -68				; size = 4
_piat$1$ = -64						; size = 4
_dwIndex$1$ = -60					; size = 4
_ulSize$ = -56						; size = 4
_this$GSCopy$1$ = -52					; size = 4
tv1177 = -48						; size = 4
tv1173 = -48						; size = 4
tv1171 = -48						; size = 4
$T3 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?CheckIPAddress@MonitorIPs@@IAEXXZ PROC			; MonitorIPs::CheckIPAddress
; _this$ = ecx

; 59   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CheckIPAddress@MonitorIPs@@IAEXXZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 60   :     ULONG ulSize = 0;
; 61   : 
; 62   :     Log(LOG_DEBUG, __LINE__, ">> MonIPs.ChkIPAddrs");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PFFODCIL@?$DO?$DO?5MonIPs?4ChkIPAddrs@
  00049	6a 3e		 push	 62			; 0000003eH
  0004b	6a 10		 push	 16			; 00000010H
  0004d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _ulSize$[ebp], 0
  00054	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log

; 63   : 
; 64   :     //Get number of bytes required
; 65   :     if (GetIpAddrTable(nullptr, &ulSize, 0) == ERROR_INSUFFICIENT_BUFFER)

  00059	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetIpAddrTable@12
  0005f	8d 45 c8	 lea	 eax, DWORD PTR _ulSize$[ebp]
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	6a 00		 push	 0
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	ff d7		 call	 edi
  0006c	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0006f	0f 85 fb 02 00
	00		 jne	 $LN6@CheckIPAdd

; 66   :     {
; 67   :         //Allocate required memory
; 68   :         HANDLE const hDefaultProcessHeap = GetProcessHeap();

  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0

; 69   :         PMIB_IPADDRTABLE piat = reinterpret_cast<PMIB_IPADDRTABLE>(HeapAlloc(hDefaultProcessHeap, HEAP_ZERO_MEMORY, ulSize));

  0007b	ff 75 c8	 push	 DWORD PTR _ulSize$[ebp]
  0007e	89 45 bc	 mov	 DWORD PTR _hDefaultProcessHeap$1$[ebp], eax
  00081	6a 08		 push	 8
  00083	50		 push	 eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  0008a	8b f0		 mov	 esi, eax
  0008c	89 75 c0	 mov	 DWORD PTR _piat$1$[ebp], esi

; 70   :         if (piat)

  0008f	85 f6		 test	 esi, esi
  00091	0f 84 d9 02 00
	00		 je	 $LN6@CheckIPAdd

; 71   :         {
; 72   :             //Retrieve the list of IPs
; 73   :             if (GetIpAddrTable(piat, &ulSize, 0) == ERROR_SUCCESS)

  00097	6a 00		 push	 0
  00099	8d 45 c8	 lea	 eax, DWORD PTR _ulSize$[ebp]
  0009c	50		 push	 eax
  0009d	56		 push	 esi
  0009e	ff d7		 call	 edi
  000a0	85 c0		 test	 eax, eax
  000a2	0f 85 bc 02 00
	00		 jne	 $LN7@CheckIPAdd

; 74   :             {
; 75   :                 WaitForSingleObject(m_hSync, MINUTE);

  000a8	8b 7d cc	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  000ab	68 60 ea 00 00	 push	 60000			; 0000ea60H
  000b0	ff 37		 push	 DWORD PTR [edi]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  000b8	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  000bb	51		 push	 ecx
  000bc	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000bf	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1592 : 		this->_Mylast() = this->_Myfirst();

  000c4	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  000c7	83 c4 04	 add	 esp, 4

; 1592 : 		this->_Mylast() = this->_Myfirst();

  000ca	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp

; 78   :                 for (DWORD dwIndex = 0; dwIndex < piat->dwNumEntries; dwIndex++)

  000cd	83 3e 00	 cmp	 DWORD PTR [esi], 0
  000d0	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _dwIndex$1$[ebp], 0
  000d7	0f 86 7f 02 00
	00		 jbe	 $LN245@CheckIPAdd

; 74   :             {
; 75   :                 WaitForSingleObject(m_hSync, MINUTE);

  000dd	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
$LL4@CheckIPAdd:

; 79   :                 {
; 80   :                     //Trace all IPs
; 81   :                     std::stringstream ss;

  000e0	83 ec 08	 sub	 esp, 8
  000e3	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp]
  000e9	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 82   :                     PMIB_IPADDRROW prow = &piat->table[dwIndex];
; 83   :                     IN_ADDR IPAddr{};
; 84   : 
; 85   :                     IPAddr.S_un.S_addr = static_cast<ULONG>(prow->dwAddr);
; 86   :                     ss << "Address " << inet_ntoa(IPAddr) << ", Index " << prow->dwIndex;

  000f5	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08FGMGJDIM@Address?5@
  000fa	8b 77 f8	 mov	 esi, DWORD PTR [edi-8]
  000fd	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  00103	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00108	56		 push	 esi
  00109	89 45 d0	 mov	 DWORD PTR tv1177[ebp], eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  00112	8b 4d d0	 mov	 ecx, DWORD PTR tv1177[ebp]
  00115	8b d0		 mov	 edx, eax
  00117	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0011c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08MIAEGNMG@?0?5Index?5@
  00121	8b c8		 mov	 ecx, eax
  00123	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00128	ff 77 fc	 push	 DWORD PTR [edi-4]
  0012b	8b c8		 mov	 ecx, eax
  0012d	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 87   :                     
; 88   :                     IPAddr.S_un.S_addr = static_cast<ULONG>(prow->dwMask);

  00132	8b 37		 mov	 esi, DWORD PTR [edi]

; 89   :                     ss << ", Subnet Mask " << inet_ntoa(IPAddr);

  00134	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  0013a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0P@KJAMIPJI@?0?5Subnet?5Mask?5@
  0013f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00144	56		 push	 esi
  00145	89 45 d0	 mov	 DWORD PTR tv1173[ebp], eax
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  0014e	8b 4d d0	 mov	 ecx, DWORD PTR tv1173[ebp]
  00151	8b d0		 mov	 edx, eax
  00153	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 90   : 
; 91   :                     IPAddr.S_un.S_addr = static_cast<ULONG>(prow->dwBCastAddr);

  00158	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 92   :                     ss << ", BroadCast " << inet_ntoa(IPAddr)

  0015b	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  00161	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0N@MPOMCOMF@?0?5BroadCast?5@
  00166	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0016b	56		 push	 esi
  0016c	89 45 d0	 mov	 DWORD PTR tv1171[ebp], eax
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  00175	8b 4d d0	 mov	 ecx, DWORD PTR tv1171[ebp]
  00178	8b d0		 mov	 edx, eax
  0017a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0017f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08GAGFLDJJ@?0?5Reasm?5@
  00184	8b c8		 mov	 ecx, eax
  00186	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018b	ff 77 08	 push	 DWORD PTR [edi+8]
  0018e	8b c8		 mov	 ecx, eax
  00190	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 95   :                     ss << ", Type " << std::hex << prow->wType << "(.";

  00195	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CIMDCLLJ@?0?5Type?5@
  0019a	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  001a0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001a5	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 217  : 		(*_Pfn)(*(ios_base *)this);

  001a7	85 f6		 test	 esi, esi
  001a9	75 04		 jne	 SHORT $LN59@CheckIPAdd
  001ab	33 c9		 xor	 ecx, ecx
  001ad	eb 07		 jmp	 SHORT $LN60@CheckIPAdd
$LN59@CheckIPAdd:
  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b4	03 ce		 add	 ecx, esi
$LN60@CheckIPAdd:
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 ?hex@std@@YAAAVios_base@1@AAV21@@Z ; std::hex
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp

; 95   :                     ss << ", Type " << std::hex << prow->wType << "(.";

  001bc	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 217  : 		(*_Pfn)(*(ios_base *)this);

  001c0	83 c4 04	 add	 esp, 4
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp

; 95   :                     ss << ", Type " << std::hex << prow->wType << "(.";

  001c3	8b ce		 mov	 ecx, esi
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  001cb	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02DNOHDIJJ@?$CI?4@
  001d0	8b c8		 mov	 ecx, eax
  001d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 96   : 
; 97   :                     if (prow->wType & MIB_IPADDR_PRIMARY)

  001d7	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  001db	8b c8		 mov	 ecx, eax
  001dd	a8 01		 test	 al, 1
  001df	74 14		 je	 SHORT $LN8@CheckIPAdd

; 98   :                         ss << "Primary.";

  001e1	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08BKNGEFGB@Primary?4@
  001e6	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  001ec	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001f1	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
$LN8@CheckIPAdd:

; 99   : 
; 100  :                     if (prow->wType & MIB_IPADDR_DYNAMIC)

  001f5	0f b7 c1	 movzx	 eax, cx
  001f8	f6 c1 04	 test	 cl, 4
  001fb	74 14		 je	 SHORT $LN9@CheckIPAdd

; 101  :                         ss << "Dynamic.";

  001fd	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08FHKMKPIG@Dynamic?4@
  00202	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  00208	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0020d	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
$LN9@CheckIPAdd:

; 102  : 
; 103  :                     if (prow->wType & MIB_IPADDR_DISCONNECTED)

  00211	0f b7 c8	 movzx	 ecx, ax
  00214	a8 08		 test	 al, 8
  00216	74 14		 je	 SHORT $LN10@CheckIPAdd

; 104  :                         ss << "Disconnected.";

  00218	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0O@HGEAPED@Disconnected?4@
  0021d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  00223	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00228	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
$LN10@CheckIPAdd:

; 105  : 
; 106  :                     if (prow->wType & MIB_IPADDR_DELETED)

  0022c	0f b7 c1	 movzx	 eax, cx
  0022f	f6 c1 40	 test	 cl, 64			; 00000040H
  00232	74 14		 je	 SHORT $LN243@CheckIPAdd

; 107  :                         ss << "Deleted.";

  00234	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08FCNPIEBD@Deleted?4@
  00239	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  0023f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00244	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
$LN243@CheckIPAdd:

; 108  : 
; 109  :                     if (prow->wType & MIB_IPADDR_TRANSIENT)

  00248	0f b7 c8	 movzx	 ecx, ax
  0024b	84 c0		 test	 al, al
  0024d	79 14		 jns	 SHORT $LN244@CheckIPAdd

; 110  :                         ss << "Transient.";

  0024f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@HFLHPH@Transient?4@
  00254	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  0025a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0025f	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
$LN244@CheckIPAdd:

; 111  : 
; 112  :                     if (prow->wType & MIB_IPADDR_DNS_ELIGIBLE)

  00263	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00269	74 10		 je	 SHORT $LN13@CheckIPAdd

; 113  :                         ss << "Published in DNS.";

  0026b	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BC@PFKLNNIM@Published?5in?5DNS?4@
  00270	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  00276	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
$LN13@CheckIPAdd:

; 114  : 
; 115  :                     ss << ")";

  0027b	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01PKGAHCOL@?$CJ@
  00280	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp+16]
  00286	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 116  :                     m_ips.push_back(ss.str());

  0028b	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
  0028e	50		 push	 eax
  0028f	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp]
  00295	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0029a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0029e	8b 55 cc	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  002a1	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  002a4	39 4a 24	 cmp	 DWORD PTR [edx+36], ecx

; 917  : 		if (_Has_unused_capacity())

  002a7	74 35		 je	 SHORT $LN66@CheckIPAdd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  002a9	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1785 : 		_Myres(0)

  002b0	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  002b7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002ba	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  002bd	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  002c2	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  002c7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002ce	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002d5	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  002d8	83 42 20 18	 add	 DWORD PTR [edx+32], 24	; 00000018H

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  002dc	eb 0a		 jmp	 SHORT $LN65@CheckIPAdd
$LN66@CheckIPAdd:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  002de	50		 push	 eax
  002df	51		 push	 ecx
  002e0	8d 4a 1c	 lea	 ecx, DWORD PTR [edx+28]
  002e3	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
$LN65@CheckIPAdd:
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp

; 116  :                     m_ips.push_back(ss.str());

  002e8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002ec	8b 55 e8	 mov	 edx, DWORD PTR $T3[ebp+20]
  002ef	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  002f2	72 2c		 jb	 SHORT $LN224@CheckIPAdd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f4	8b 4d d4	 mov	 ecx, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  002f7	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f8	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  002fa	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00300	72 14		 jb	 SHORT $LN223@CheckIPAdd

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00302	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00305	83 c2 23	 add	 edx, 35			; 00000023H
  00308	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0030a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0030d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00310	0f 87 9a 00 00
	00		 ja	 $LN220@CheckIPAdd
$LN223@CheckIPAdd:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00316	52		 push	 edx
  00317	51		 push	 ecx
  00318	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0031d	83 c4 08	 add	 esp, 8
$LN224@CheckIPAdd:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00320	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00327	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0032e	c6 45 d4 00	 mov	 BYTE PTR $T3[ebp], 0
; File c:\users\giulif\downloads\study\git\sysstatus\monitorips.cpp

; 117  :                 }

  00332	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00339	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp]
  0033f	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00344	8b 45 c4	 mov	 eax, DWORD PTR _dwIndex$1$[ebp]
  00347	83 c7 18	 add	 edi, 24			; 00000018H
  0034a	8b 75 c0	 mov	 esi, DWORD PTR _piat$1$[ebp]
  0034d	40		 inc	 eax
  0034e	89 45 c4	 mov	 DWORD PTR _dwIndex$1$[ebp], eax
  00351	3b 06		 cmp	 eax, DWORD PTR [esi]
  00353	0f 82 87 fd ff
	ff		 jb	 $LL4@CheckIPAdd

; 78   :                 for (DWORD dwIndex = 0; dwIndex < piat->dwNumEntries; dwIndex++)

  00359	8b 7d cc	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN245@CheckIPAdd:

; 118  :                 ReleaseMutex(m_hSync);

  0035c	ff 37		 push	 DWORD PTR [edi]
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
$LN7@CheckIPAdd:

; 119  :             }
; 120  :             HeapFree(hDefaultProcessHeap, 0UL, piat);

  00364	56		 push	 esi
  00365	6a 00		 push	 0
  00367	ff 75 bc	 push	 DWORD PTR _hDefaultProcessHeap$1$[ebp]
  0036a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN6@CheckIPAdd:

; 121  :         }
; 122  :     }
; 123  : 
; 124  :     HANDLE h;
; 125  :     NotifyAddrChange(&h, &m_o);

  00370	8b 45 cc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00373	83 c0 08	 add	 eax, 8
  00376	50		 push	 eax
  00377	8d 45 b8	 lea	 eax, DWORD PTR _h$[ebp]
  0037a	50		 push	 eax
  0037b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NotifyAddrChange@8

; 126  : 
; 127  :     Log(LOG_DEBUG, __LINE__, "<< MonIPs.ChkIPAddrs");

  00381	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NLFEEFHK@?$DM?$DM?5MonIPs?4ChkIPAddrs@
  00386	6a 7f		 push	 127			; 0000007fH
  00388	6a 10		 push	 16			; 00000010H
  0038a	e8 00 00 00 00	 call	 ?Log@@YAXHHPBDZZ	; Log
  0038f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : }

  00392	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00395	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0039c	59		 pop	 ecx
  0039d	5f		 pop	 edi
  0039e	5e		 pop	 esi
  0039f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a2	33 cd		 xor	 ecx, ebp
  003a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	8b e3		 mov	 esp, ebx
  003ae	5b		 pop	 ebx
  003af	c3		 ret	 0
$LN220@CheckIPAdd:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003b0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN248@CheckIPAdd:
  003b5	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CheckIPAddress@MonitorIPs@@IAEXXZ$0:
  00000	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _ss$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?CheckIPAddress@MonitorIPs@@IAEXXZ$1:
  0000b	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?CheckIPAddress@MonitorIPs@@IAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckIPAddress@MonitorIPs@@IAEXXZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckIPAddress@MonitorIPs@@IAEXXZ ENDP			; MonitorIPs::CheckIPAddress
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 711  : 		{	// destroy the object

  0002a	8b 46 98	 mov	 eax, DWORD PTR [esi-104]
  0002d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00030	c7 44 30 98 00
	00 00 00	 mov	 DWORD PTR [eax+esi-104], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00038	8b 46 98	 mov	 eax, DWORD PTR [esi-104]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  00041	89 44 31 94	 mov	 DWORD PTR [ecx+esi-108], eax

; 712  : 		}

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8d 4e b0	 lea	 ecx, DWORD PTR [esi-80]
  0004f	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  0005e	e8 00 00 00 00	 call	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
  00063	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00066	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00073	56		 push	 esi
  00074	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0007a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0007f	83 c4 04	 add	 esp, 4
  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 e9 50	 sub	 ecx, 80			; 00000050H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear, COMDAT
; _this$ = ecx

; 1589 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00003	51		 push	 ecx
  00004	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1590 : 		this->_Orphan_all();
; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1592 : 		this->_Mylast() = this->_Myfirst();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00010	83 c4 04	 add	 esp, 4

; 1590 : 		this->_Orphan_all();
; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1592 : 		this->_Mylast() = this->_Myfirst();

  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00016	5e		 pop	 esi

; 1593 : 		}

  00017	c3		 ret	 0
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	39 51 08	 cmp	 DWORD PTR [ecx+8], edx

; 917  : 		if (_Has_unused_capacity())

  00009	74 3a		 je	 SHORT $LN6@push_back
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 1784 : 		_Mysize(0),

  0000e	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 1785 : 		_Myres(0)

  00015	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0001f	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00022	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00027	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0002c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00033	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0003a	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  0003d	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 937  : 		emplace_back(_STD move(_Val));
; 938  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@push_back:

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00045	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 937  : 		emplace_back(_STD move(_Val));
; 938  : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx

; 917  : 		if (_Has_unused_capacity())

  0000b	74 3f		 je	 SHORT $LN2@emplace_ba
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 1784 : 		_Mysize(0),

  00010	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1785 : 		_Myres(0)

  00017	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00021	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00024	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00029	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0002e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00035	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0003c	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0003f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 905  : 		++this->_Mylast();

  00042	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  00045	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN2@emplace_ba:

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));
; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ca		 mov	 ecx, edx
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1785 : 		_Myres(0)

  00013	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0001d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00020	f3 0f 7e 42 10	 movq	 xmm0, QWORD PTR [edx+16]
  00025	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0002a	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00031	c7 42 14 0f 00
	00 00		 mov	 DWORD PTR [edx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00038	c6 02 00	 mov	 BYTE PTR [edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 905  : 		++this->_Mylast();

  0003e	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  00041	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);

  00044	5e		 pop	 esi

; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Yarn@_W@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	85 c0		 test	 eax, eax
  00029	74 09		 je	 SHORT $LN6@Yarn

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _free
  00031	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 4143 : 		_Tidy();
; 4144 : 		}

  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	5e		 pop	 esi
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Yarn@_W@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Yarn@_W@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00008	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 4088 : 		}

  0000c	8b c1		 mov	 eax, ecx
  0000e	c3		 ret	 0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 4154 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Yarn@D@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	85 c0		 test	 eax, eax
  00029	74 09		 je	 SHORT $LN6@Yarn

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _free
  00031	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 4143 : 		_Tidy();
; 4144 : 		}

  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	5e		 pop	 esi
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Yarn@D@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Yarn@D@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4088 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  0000c	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 3371 : 		return (size() == 0);

  00000	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00004	0f 94 c0	 sete	 al

; 3372 : 		}

  00007	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
tv299 = -4						; size = 4
$T1 = 8							; size = 1
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 3318 : 		{	// determine new length, padding with _Ch elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3319 : 		const size_type _Old_size = size();
; 3320 : 		if (_Newsize <= _Old_size)

  00004	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]

; 3302 : 		return (this->_Get_data()._Mysize);

  00007	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 3318 : 		{	// determine new length, padding with _Ch elements as needed

  0000a	53		 push	 ebx

; 3302 : 		return (this->_Get_data()._Mysize);

  0000b	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  0000e	89 45 fc	 mov	 DWORD PTR tv299[ebp], eax

; 3318 : 		{	// determine new length, padding with _Ch elements as needed

  00011	56		 push	 esi

; 3302 : 		return (this->_Get_data()._Mysize);

  00012	8d 71 10	 lea	 esi, DWORD PTR [ecx+16]

; 3319 : 		const size_type _Old_size = size();
; 3320 : 		if (_Newsize <= _Old_size)

  00015	3b d3		 cmp	 edx, ebx
  00017	77 15		 ja	 SHORT $LN2@resize

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00019	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0001c	72 02		 jb	 SHORT $LN18@resize
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@resize:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  00020	89 16		 mov	 DWORD PTR [esi], edx
  00022	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00023	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3328 : 		}

  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@resize:
  0002e	57		 push	 edi

; 3321 : 			{
; 3322 : 			_Eos(_Newsize);
; 3323 : 			}
; 3324 : 		else
; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  0002f	8b fa		 mov	 edi, edx

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00031	2b c3		 sub	 eax, ebx

; 3321 : 			{
; 3322 : 			_Eos(_Newsize);
; 3323 : 			}
; 3324 : 		else
; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  00033	2b fb		 sub	 edi, ebx

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00035	3b f8		 cmp	 edi, eax
  00037	77 29		 ja	 SHORT $LN27@resize

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00039	83 7d fc 10	 cmp	 DWORD PTR tv299[ebp], 16 ; 00000010H

; 2601 : 			_My_data._Mysize = _Old_size + _Count;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 1804 : 		if (_Large_string_engaged())

  0003f	72 02		 jb	 SHORT $LN34@resize
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00041	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN34@resize:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00043	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00047	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00055	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3328 : 		}

  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
$LN27@resize:

; 2608 : 		return (_Reallocate_grow_by(_Count,

  00062	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00065	c6 45 08 00	 mov	 BYTE PTR $T1[ebp], 0
  00069	57		 push	 edi
  0006a	ff 75 08	 push	 DWORD PTR $T1[ebp]
  0006d	57		 push	 edi
  0006e	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi

; 3328 : 		}

  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN14@c_str

; 3280 : 		return (this->_Get_data()._Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3281 : 		}

  00008	c3		 ret	 0
$LN14@c_str:

; 3280 : 		return (this->_Get_data()._Myptr());

  00009	8b c1		 mov	 eax, ecx

; 3281 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3201 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00007	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000a	72 02		 jb	 SHORT $LN14@operator
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3207 : 		}

  0000e	03 c1		 add	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Old_size$1$ = 8					; size = 4
$T1 = 8							; size = 1
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2591 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2591 : 		{	// append [_Ptr, <null>)

  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00007	8b f2		 mov	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2591 : 		{	// append [_Ptr, <null>)

  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0000c	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000f	90		 npad	 1
$LL25@append:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL25@append
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  00017	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0001a	2b f1		 sub	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2571 : 		const size_type _Old_size = _My_data._Mysize;

  0001c	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  0001f	2b c1		 sub	 eax, ecx
  00021	89 4d 08	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  00024	3b f0		 cmp	 esi, eax
  00026	77 31		 ja	 SHORT $LN8@append

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00028	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  0002c	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  0002f	53		 push	 ebx
  00030	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00033	8b df		 mov	 ebx, edi

; 1804 : 		if (_Large_string_engaged())

  00035	72 02		 jb	 SHORT $LN15@append
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00037	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN15@append:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00039	56		 push	 esi
  0003a	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0003b	03 cb		 add	 ecx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _memmove

; 506  : 		_Left = _Right;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2577 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00046	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0004c	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00050	8b c7		 mov	 eax, edi
  00052	5b		 pop	 ebx
  00053	5f		 pop	 edi

; 2593 : 		}

  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN8@append:

; 2581 : 		return (_Reallocate_grow_by(_Count,

  00059	56		 push	 esi
  0005a	52		 push	 edx
  0005b	c6 45 08 00	 mov	 BYTE PTR $T1[ebp], 0
  0005f	8b cf		 mov	 ecx, edi
  00061	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
  0006a	5f		 pop	 edi

; 2593 : 		}

  0006b	5e		 pop	 esi
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
$T1 = 8							; size = 1
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2537 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 2538 : 		auto& _Right_data = _Right._Get_data();
; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	57		 push	 edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000b	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2538 : 		auto& _Right_data = _Right._Get_data();
; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  0000f	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]

; 1815 : 		if (_Large_string_engaged())

  00012	72 02		 jb	 SHORT $LN8@append
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN8@append:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  00016	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00019	8b c2		 mov	 eax, edx
  0001b	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0001e	2b c3		 sub	 eax, ebx
  00020	3b f8		 cmp	 edi, eax
  00022	77 35		 ja	 SHORT $LN15@append

; 1803 : 		value_type * _Result = _Bx._Buf;

  00024	89 75 08	 mov	 DWORD PTR __Result$1$[ebp], esi

; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  00027	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0002a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  0002d	8b c6		 mov	 eax, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002f	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00032	72 05		 jb	 SHORT $LN22@append
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN22@append:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00039	57		 push	 edi
  0003a	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0003b	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2577 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00044	8b 4d 08	 mov	 ecx, DWORD PTR __Result$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2577 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0004a	03 cf		 add	 ecx, edi

; 2538 : 		auto& _Right_data = _Right._Get_data();
; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  0004c	8b c6		 mov	 eax, esi
  0004e	5f		 pop	 edi

; 2540 : 		}

  0004f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00050	c6 04 19 00	 mov	 BYTE PTR [ecx+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2540 : 		}

  00054	5b		 pop	 ebx
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN15@append:

; 2581 : 		return (_Reallocate_grow_by(_Count,

  00059	57		 push	 edi
  0005a	51		 push	 ecx
  0005b	c6 45 08 00	 mov	 BYTE PTR $T1[ebp], 0
  0005f	8b ce		 mov	 ecx, esi
  00061	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
  0006a	5f		 pop	 edi

; 2540 : 		}

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0002b	72 27		 jb	 SHORT $LN43@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0002f	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00030	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00036	72 12		 jb	 SHORT $LN42@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00038	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003b	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003e	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00040	83 c0 fc	 add	 eax, -4			; fffffffcH
  00043	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00046	77 2d		 ja	 SHORT $LN39@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00048	8b c2		 mov	 eax, edx
$LN42@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004a	51		 push	 ecx
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00051	83 c4 08	 add	 esp, 8
$LN43@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00054	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0005b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00062	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2461 : 		}

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN39@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00075	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@basic_stri:
  0007a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2268 : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 1784 : 		_Mysize(0),

  00006	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1785 : 		_Myres(0)

  0000d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001f	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00024	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0002b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00032	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2270 : 		}

  00035	8b c1		 mov	 eax, ecx
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2201 : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2682 : 		if (_Count <= _My_data._Myres)

  00009	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 3976 : 		_My_data._Mysize = 0;

  0000c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00013	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2682 : 		if (_Count <= _My_data._Myres)

  0001d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00020	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00023	3b f9		 cmp	 edi, ecx
  00025	77 2a		 ja	 SHORT $LN20@basic_stri

; 1803 : 		value_type * _Result = _Bx._Buf;

  00027	8b de		 mov	 ebx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0002c	72 02		 jb	 SHORT $LN27@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002e	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN27@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00030	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00034	57		 push	 edi
  00035	50		 push	 eax
  00036	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2685 : 			_My_data._Mysize = _Count;

  00037	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0003a	e8 00 00 00 00	 call	 _memset
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00042	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2204 : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
$LN20@basic_stri:

; 3889 : 		if (_New_size > max_size())

  00051	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00057	0f 87 d5 00 00
	00		 ja	 $LN154@basic_stri

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0005d	8b df		 mov	 ebx, edi
  0005f	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00062	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00068	76 07		 jbe	 SHORT $LN61@basic_stri

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0006a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0006f	eb 1e		 jmp	 SHORT $LN60@basic_stri
$LN61@basic_stri:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00071	8b d1		 mov	 edx, ecx
  00073	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00078	d1 ea		 shr	 edx, 1
  0007a	2b c2		 sub	 eax, edx
  0007c	3b c8		 cmp	 ecx, eax
  0007e	76 07		 jbe	 SHORT $LN62@basic_stri

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00080	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00085	eb 08		 jmp	 SHORT $LN60@basic_stri
$LN62@basic_stri:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00087	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0008a	3b d8		 cmp	 ebx, eax
  0008c	0f 42 d8	 cmovb	 ebx, eax
$LN60@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00092	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00098	72 23		 jb	 SHORT $LN93@basic_stri

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0009a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0009d	83 ca ff	 or	 edx, -1
  000a0	3b c1		 cmp	 eax, ecx
  000a2	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ab	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000ae	85 c0		 test	 eax, eax
  000b0	74 7b		 je	 SHORT $LN135@basic_stri

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000b2	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  000b5	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000b8	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000bb	eb 13		 jmp	 SHORT $LN152@basic_stri
$LN93@basic_stri:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000bd	85 c9		 test	 ecx, ecx
  000bf	74 0d		 je	 SHORT $LN94@basic_stri

; 52   : 		return (::operator new(_Bytes));

  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c7	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000ca	8b c8		 mov	 ecx, eax
  000cc	eb 02		 jmp	 SHORT $LN152@basic_stri
$LN94@basic_stri:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ce	33 c9		 xor	 ecx, ecx
$LN152@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000d0	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  000d4	57		 push	 edi
  000d5	50		 push	 eax
  000d6	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  000d7	89 4d 08	 mov	 DWORD PTR $T1[ebp], ecx
  000da	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 3901 : 		_My_data._Myres = _New_capacity;

  000dd	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000e0	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000e5	8b 5d 08	 mov	 ebx, DWORD PTR $T1[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000eb	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000ee	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000f2	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f5	72 29		 jb	 SHORT $LN39@basic_stri

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000f7	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fa	8b 06		 mov	 eax, DWORD PTR [esi]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000fc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00102	72 12		 jb	 SHORT $LN138@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00104	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00107	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0010a	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00112	77 19		 ja	 SHORT $LN135@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00114	8b c2		 mov	 eax, edx
$LN138@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00116	51		 push	 ecx
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011d	83 c4 08	 add	 esp, 8
$LN39@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2204 : 		}

  00120	5f		 pop	 edi
  00121	89 1e		 mov	 DWORD PTR [esi], ebx
  00123	8b c6		 mov	 eax, esi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 08 00	 ret	 8
$LN135@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN154@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  00132	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN151@basic_stri:
  00137	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2183 : 		{	// construct from [_Ptr, <null>)

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0000f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL25@basic_stri:

; 462  : 		return (__builtin_strlen(_First));

  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL25@basic_stri
  00027	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2184 : 		_Tidy_init();
; 2185 : 		assign(_Ptr);
; 2186 : 		}

  00032	5f		 pop	 edi
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2144 : 		}

  00007	8b c1		 mov	 eax, ecx

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00009	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2144 : 		}

  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2130 : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00008	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]

; 1784 : 		_Mysize(0),

  0000b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00019	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0001d	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00020	89 4d 08	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 1815 : 		if (_Large_string_engaged())

  00023	72 02		 jb	 SHORT $LN31@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN31@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00027	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002a	73 1a		 jae	 SHORT $LN20@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0002c	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  0002f	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 2132 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00037	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2132 : 		}

  0003a	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0003d	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN20@basic_stri:

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00046	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00048	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0004d	83 cb 0f	 or	 ebx, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00050	3b d8		 cmp	 ebx, eax
  00052	0f 47 d8	 cmova	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00055	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00058	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005e	72 23		 jb	 SHORT $LN64@basic_stri

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00060	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00063	83 ca ff	 or	 edx, -1
  00066	3b c1		 cmp	 eax, ecx
  00068	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00071	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00074	85 c0		 test	 eax, eax
  00076	74 41		 je	 SHORT $LN73@basic_stri

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00078	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0007b	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0007e	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00081	eb 13		 jmp	 SHORT $LN63@basic_stri
$LN64@basic_stri:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00083	85 c9		 test	 ecx, ecx
  00085	74 0d		 je	 SHORT $LN65@basic_stri

; 52   : 		return (::operator new(_Bytes));

  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008d	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00090	8b c8		 mov	 ecx, eax
  00092	eb 02		 jmp	 SHORT $LN63@basic_stri
$LN65@basic_stri:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00094	33 c9		 xor	 ecx, ecx
$LN63@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00096	8b 45 08	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00099	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0009a	89 0e		 mov	 DWORD PTR [esi], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009c	50		 push	 eax
  0009d	57		 push	 edi
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 _memcpy
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2132 : 		}

  000aa	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000ad	8b c6		 mov	 eax, esi
  000af	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
$LN73@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000b9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN98@basic_stri:
  000be	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -24				; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 720  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	89 75 e8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 721  : 		return (_Stringbuffer.str());

  00037	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 97   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != nullptr)

  0004f	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]

; 106  : 			}
; 107  : 
; 108  : 		return (_Result);

  00052	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00059	f6 c1 02	 test	 cl, 2
  0005c	75 25		 jne	 SHORT $LN6@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0005e	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00061	8b 18		 mov	 ebx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 97   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != nullptr)

  00063	85 db		 test	 ebx, ebx
  00065	74 1c		 je	 SHORT $LN6@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 230  : 		return (*_IPfirst);

  00067	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0006a	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	3b 5f 50	 cmp	 ebx, DWORD PTR [edi+80]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 100  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));

  00070	89 5d ec	 mov	 DWORD PTR $T2[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 230  : 		return (*_IPfirst);

  00073	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 100  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));

  00075	8d 47 50	 lea	 eax, DWORD PTR [edi+80]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00078	0f 42 c8	 cmovb	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 100  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));

  0007b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007d	2b c2		 sub	 eax, edx
  0007f	50		 push	 eax
  00080	52		 push	 edx
  00081	eb 1e		 jmp	 SHORT $LN47@str
$LN6@str:

; 102  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)

  00083	f6 c1 04	 test	 cl, 4
  00086	75 20		 jne	 SHORT $LN8@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00088	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0008b	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 102  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)

  0008d	85 d2		 test	 edx, edx
  0008f	74 17		 je	 SHORT $LN8@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00091	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]

; 240  : 		return (*_IGnext + *_IGcount);

  00096	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00099	8b 00		 mov	 eax, DWORD PTR [eax]
  0009b	2b c1		 sub	 eax, ecx
  0009d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 105  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Mysb::egptr() - _Base));

  0009f	50		 push	 eax
  000a0	51		 push	 ecx
$LN47@str:

; 721  : 		return (_Stringbuffer.str());

  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN8@str:
  000a8	b9 02 00 00 00	 mov	 ecx, 2
  000ad	89 4d f0	 mov	 DWORD PTR $T3[ebp], ecx
  000b0	83 e1 fd	 and	 ecx, -3			; fffffffdH
  000b3	89 4d f0	 mov	 DWORD PTR $T3[ebp], ecx
  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000bd	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  000c4	8b c6		 mov	 eax, esi

; 722  : 		}

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00003	83 e0 02	 and	 eax, 2
  00006	0f 84 0c 00 00
	00		 je	 $LN11@str
  0000c	83 65 f0 fd	 and	 DWORD PTR $T3[ebp], -3	; fffffffdH
  00010	8b 4d e8	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN11@str:
  00018	c3		 ret	 0
__unwindfunclet$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00019	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0001c	83 e0 01	 and	 eax, 1
  0001f	0f 84 0c 00 00
	00		 je	 $LN4@str
  00025	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00029	8b 4d e8	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@str:
  00031	c3		 ret	 0
__ehhandler$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 711  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8b 46 98	 mov	 eax, DWORD PTR [esi-104]
  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002f	c7 44 30 98 00
	00 00 00	 mov	 DWORD PTR [eax+esi-104], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00037	8b 46 98	 mov	 eax, DWORD PTR [esi-104]
  0003a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003d	8d 42 98	 lea	 eax, DWORD PTR [edx-104]
  00040	89 44 32 94	 mov	 DWORD PTR [edx+esi-108], eax

; 712  : 		}

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	8d 4e b0	 lea	 ecx, DWORD PTR [esi-80]
  0004e	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  0005d	e8 00 00 00 00	 call	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5e		 pop	 esi
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 e9 50	 sub	 ecx, 80			; 00000050H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T2 = -36						; size = 8
$T3 = -28						; size = 4
$T4 = -28						; size = 4
_this$ = -28						; size = 4
_this$ = -24						; size = 4
$T5 = -20						; size = 4
$T6 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Mode$dead$ = 8					; size = 4
_$initVBases$dead$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 667  : 		{	// construct empty character buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00034	8d 43 68	 lea	 eax, DWORD PTR [ebx+104]
  00037	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003d	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00044	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 543  : 	__CLR_OR_THIS_CALL ios_base()

  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 177  : 		{	// default constructor, do nothing

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 667  : 		{	// construct empty character buffer

  0005a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 45   : 		{	// construct from stream buffer pointer

  00061	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 667  : 		{	// construct empty character buffer

  00067	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 45   : 		{	// construct from stream buffer pointer

  0006e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00071	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00078	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007d	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00080	89 44 19 fc	 mov	 DWORD PTR [ecx+ebx-4], eax

; 46   : 		_Myios::init(_Strbuf, _Isstd);

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  0008d	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00094	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00097	03 fb		 add	 edi, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00099	8b cf		 mov	 ecx, edi

; 549  : 		_Ploc = nullptr;

  0009b	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 550  : 		_Stdstr = 0;

  000a2	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 551  : 		_Except = goodbit;

  000a9	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 552  : 		_Fmtfl = (fmtflags)(skipws | dec);

  000b0	c7 47 14 01 02
	00 00		 mov	 DWORD PTR [edi+20], 513	; 00000201H

; 553  : 		_Prec = 6;

  000b7	c7 47 18 06 00
	00 00		 mov	 DWORD PTR [edi+24], 6
  000be	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 554  : 		_Wide = 0;

  000c5	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  000cc	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 555  : 		_Arr = nullptr;

  000d3	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 556  : 		_Calls = nullptr;

  000da	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 318  : 		clear(_State, false);

  000e1	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 558  : 		_Ploc = new locale;

  000e6	6a 08		 push	 8
  000e8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ed	83 c4 04	 add	 esp, 4
  000f0	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  000f2	6a 01		 push	 1
  000f4	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000f9	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000fc	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 665  : 		: _Mybase(&_Stringbuffer),

  000ff	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 558  : 		_Ploc = new locale;

  00102	89 77 30	 mov	 DWORD PTR [edi+48], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  00105	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 166  : 		_Tiestr = nullptr;

  00108	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  0010f	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00116	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00119	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  0011c	8b ce		 mov	 ecx, esi
  0011e	89 75 e0	 mov	 DWORD PTR $T2[ebp+4], esi
  00121	8b 06		 mov	 eax, DWORD PTR [esi]
  00123	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00126	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00129	c7 45 ec 09 00
	00 00		 mov	 DWORD PTR $T5[ebp], 9
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00136	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2566 : 		return (do_widen(_Byte));

  00139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013b	6a 20		 push	 32			; 00000020H
  0013d	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00140	8b c8		 mov	 ecx, eax
  00142	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00144	ba 09 00 00 00	 mov	 edx, 9
  00149	88 45 f3	 mov	 BYTE PTR $T6[ebp], al
  0014c	89 55 ec	 mov	 DWORD PTR $T5[ebp], edx
  0014f	83 e2 f7	 and	 edx, -9			; fffffff7H
  00152	89 55 ec	 mov	 DWORD PTR $T5[ebp], edx
  00155	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 410  : 			delete _Ptr->_Decref();

  00159	8b ce		 mov	 ecx, esi
  0015b	8b 16		 mov	 edx, DWORD PTR [esi]
  0015d	ff 52 08	 call	 DWORD PTR [edx+8]
  00160	85 c0		 test	 eax, eax
  00162	74 0a		 je	 SHORT $LN69@basic_stri
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	6a 01		 push	 1
  00168	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016a	8b c8		 mov	 ecx, eax
  0016c	ff d2		 call	 edx
$LN69@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 169  : 		if (_Mystrbuf == nullptr)

  0016e	83 7f 38 00	 cmp	 DWORD PTR [edi+56], 0
  00172	8a 45 f3	 mov	 al, BYTE PTR $T6[ebp]
  00175	88 47 40	 mov	 BYTE PTR [edi+64], al
  00178	75 10		 jne	 SHORT $LN36@basic_stri

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  0017a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0017d	8b cf		 mov	 ecx, edi
  0017f	83 c8 04	 or	 eax, 4
  00182	6a 00		 push	 0
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN36@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 801  : 		: _Myis(_Strbuf, false),

  0018a	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7

; 802  : 			_Myos(_Noinit, false)

  00191	8d 53 10	 lea	 edx, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 58   : 		{	// construct uninitialized

  00194	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 802  : 			_Myos(_Noinit, false)

  00196	89 55 e4	 mov	 DWORD PTR $T3[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 58   : 		{	// construct uninitialized

  00199	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019c	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  001a3	8b 02		 mov	 eax, DWORD PTR [edx]
  001a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a8	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  001ab	89 44 11 fc	 mov	 DWORD PTR [ecx+edx-4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 802  : 			_Myos(_Noinit, false)

  001af	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 803  : 		{	// construct from stream buffer pointer

  001b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001bb	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  001c2	8b 03		 mov	 eax, DWORD PTR [ebx]
  001c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001c7	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  001ca	89 44 19 fc	 mov	 DWORD PTR [ecx+ebx-4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 665  : 		: _Mybase(&_Stringbuffer),

  001ce	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH

; 666  : 			_Stringbuffer(_Mode)

  001d5	8d 7b 18	 lea	 edi, DWORD PTR [ebx+24]

; 667  : 		{	// construct empty character buffer

  001d8	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 23   : 		: _Plocale(new locale)

  001da	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 666  : 			_Stringbuffer(_Mode)

  001dc	89 7d e4	 mov	 DWORD PTR $T4[ebp], edi

; 667  : 		{	// construct empty character buffer

  001df	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e2	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  001e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  001eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001ee	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  001f1	89 44 19 fc	 mov	 DWORD PTR [ecx+ebx-4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 24   : 		{	// construct with no buffers

  001f5	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  001fb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00200	83 c4 04	 add	 esp, 4
  00203	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  00205	6a 01		 push	 1
  00207	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0020c	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 318  : 		_IPfirst = &_Pfirst;

  0020f	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00212	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 23   : 		: _Plocale(new locale)

  00215	89 77 34	 mov	 DWORD PTR [edi+52], esi

; 317  : 		_IGfirst = &_Gfirst;

  00218	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  0021b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 319  : 		_IGnext = &_Gnext;

  0021e	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00221	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00224	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 320  : 		_IPnext = &_Pnext;

  00227	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0022a	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 321  : 		_IGcount = &_Gcount;

  0022d	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00230	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 322  : 		_IPcount = &_Pcount;

  00233	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00236	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 292  : 		*_IPfirst = _First;

  00239	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 293  : 		*_IPnext = _First;

  0023f	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00242	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  00248	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0024b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 251  : 		*_IGfirst = _First;

  00251	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00254	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  0025a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0025d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00263	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00266	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 33   : 		{	// construct empty character buffer from mode

  0026c	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00270	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00276	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  0027d	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 668  : 		}

  00284	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0028b	8b c3		 mov	 eax, ebx
  0028d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00290	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00297	59		 pop	 ecx
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$3:
  00000	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri
  00014	83 65 ec fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00018	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 68	 add	 ecx, 104		; 00000068H
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_stri:
  00023	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$11:
  00024	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00027	83 e0 08	 and	 eax, 8
  0002a	0f 84 0c 00 00
	00		 je	 $LN61@basic_stri
  00030	83 65 ec f7	 and	 DWORD PTR $T5[ebp], -9	; fffffff7H
  00034	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN61@basic_stri:
  0003c	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$5:
  0003d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 18	 add	 ecx, 24			; 00000018H
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$6:
  00048	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 18	 add	 ecx, 24			; 00000018H
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  00053	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 20	 add	 ecx, 32			; 00000020H
  00059	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$14:
  0005e	8b 4d e4	 mov	 ecx, DWORD PTR $T4[ebp]
  00061	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$2:
  00066	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 18	 add	 ecx, 24			; 00000018H
  0006c	e9 00 00 00 00	 jmp	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00071	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00075	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00078	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0007b	33 c8		 xor	 ecx, eax
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00087	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
__Seeklow$1$ = -20					; size = 4
__Gptr_old$1$ = -16					; size = 4
tv255 = -12						; size = 4
tv228 = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 323  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  0000a	8b 5d 18	 mov	 ebx, DWORD PTR __Pos$[ebp+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 323  : 		{	// change position to _Pos, according to _Mode

  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  00011	8b 7d 14	 mov	 edi, DWORD PTR __Pos$[ebp+8]
  00014	03 7d 0c	 add	 edi, DWORD PTR __Pos$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00017	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  0001a	13 5d 10	 adc	 ebx, DWORD PTR __Pos$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	89 44 24 10	 mov	 DWORD PTR __Gptr_old$1$[esp+32], eax

; 235  : 		return (*_IPnext);

  00023	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 327  : 		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)

  00028	85 c9		 test	 ecx, ecx
  0002a	74 08		 je	 SHORT $LN2@seekpos
  0002c	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  0002f	73 03		 jae	 SHORT $LN2@seekpos

; 328  : 			{	// update high-water pointer
; 329  : 			_Seekhigh = _Pptr_old;

  00031	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN2@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00034	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00037	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 333  : 		const auto _Seekdist = _Seekhigh - _Seeklow;

  00039	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0003c	89 44 24 18	 mov	 DWORD PTR tv228[esp+32], eax
  00040	2b c2		 sub	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00042	89 54 24 0c	 mov	 DWORD PTR __Seeklow$1$[esp+32], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 334  : 		if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist))

  00046	99		 cdq
  00047	3b da		 cmp	 ebx, edx
  00049	72 18		 jb	 SHORT $LN3@seekpos
  0004b	77 04		 ja	 SHORT $LN30@seekpos
  0004d	3b f8		 cmp	 edi, eax
  0004f	76 12		 jbe	 SHORT $LN3@seekpos
$LN30@seekpos:

; 358  : 		}

  00051	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00054	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0005a	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00061	eb 75		 jmp	 SHORT $LN31@seekpos
$LN3@seekpos:

; 335  : 			{
; 336  : 			return (pos_type(off_type(-1)));
; 337  : 			}
; 338  : 
; 339  : 		if (_Off != 0
; 340  : 			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)

  00063	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
  00066	8b c7		 mov	 eax, edi
  00068	0b c3		 or	 eax, ebx
  0006a	74 15		 je	 SHORT $LN4@seekpos
  0006c	f6 c2 01	 test	 dl, 1
  0006f	74 07		 je	 SHORT $LN6@seekpos
  00071	83 7c 24 10 00	 cmp	 DWORD PTR __Gptr_old$1$[esp+32], 0
  00076	74 d9		 je	 SHORT $LN30@seekpos
$LN6@seekpos:
  00078	f6 c2 02	 test	 dl, 2
  0007b	74 04		 je	 SHORT $LN4@seekpos
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 d0		 je	 SHORT $LN30@seekpos
$LN4@seekpos:

; 341  : 				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
; 342  : 			{
; 343  : 			return (pos_type(off_type(-1)));
; 344  : 			}
; 345  : 
; 346  : 		const auto _Newptr = _Seeklow + _Off;	// may perform nullptr + 0

  00081	8b 44 24 0c	 mov	 eax, DWORD PTR __Seeklow$1$[esp+32]
  00085	03 c7		 add	 eax, edi

; 347  : 		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)

  00087	f6 c2 01	 test	 dl, 1
  0008a	74 1a		 je	 SHORT $LN7@seekpos
  0008c	83 7c 24 10 00	 cmp	 DWORD PTR __Gptr_old$1$[esp+32], 0
  00091	74 13		 je	 SHORT $LN7@seekpos
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  00093	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00096	89 02		 mov	 DWORD PTR [edx], eax

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00098	8b 54 24 18	 mov	 edx, DWORD PTR tv228[esp+32]
  0009c	2b d0		 sub	 edx, eax
  0009e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a1	89 10		 mov	 DWORD PTR [eax], edx
  000a3	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
$LN7@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 352  : 		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)

  000a6	f6 c2 02	 test	 dl, 2
  000a9	74 25		 je	 SHORT $LN8@seekpos
  000ab	85 c9		 test	 ecx, ecx
  000ad	74 21		 je	 SHORT $LN8@seekpos
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  000af	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000b2	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000b5	8b 10		 mov	 edx, DWORD PTR [eax]

; 299  : 		*_IPfirst = _First;

  000b7	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 258  : 		return (*_IPnext + *_IPcount);

  000ba	03 11		 add	 edx, DWORD PTR [ecx]

; 299  : 		*_IPfirst = _First;

  000bc	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Seeklow$1$[esp+32]
  000c0	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;

  000c2	03 cf		 add	 ecx, edi
  000c4	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000c7	2b d1		 sub	 edx, ecx
  000c9	89 08		 mov	 DWORD PTR [eax], ecx
  000cb	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000ce	89 10		 mov	 DWORD PTR [eax], edx
$LN8@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  000d0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d3	89 38		 mov	 DWORD PTR [eax], edi
  000d5	89 58 04	 mov	 DWORD PTR [eax+4], ebx
$LN31@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 358  : 		}

  000d8	5f		 pop	 edi
  000d9	0f 57 c0	 xorps	 xmm0, xmm0
  000dc	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000e3	5e		 pop	 esi
  000e4	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000eb	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Gptr_old$1$ = -28					; size = 4
__Off$2$ = -24						; size = 4
__Newoff$ = -24						; size = 8
__Newptr$1$ = -16					; size = 4
__Seekdist$1$ = -16					; size = 4
__Seeklow$1$ = -12					; size = 4
tv248 = -8						; size = 4
tv183 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
__Mode$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 249  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0000e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00011	8b 38		 mov	 edi, DWORD PTR [eax]

; 235  : 		return (*_IPnext);

  00013	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 225  : 		return (*_IGnext);

  00016	89 7c 24 0c	 mov	 DWORD PTR __Gptr_old$1$[esp+40], edi

; 235  : 		return (*_IPnext);

  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 252  : 		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 08		 je	 SHORT $LN4@seekoff
  00020	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  00023	73 03		 jae	 SHORT $LN4@seekoff

; 253  : 			{	// update high-water pointer
; 254  : 			_Seekhigh = _Pptr_old;

  00025	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN4@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00028	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 260  : 		switch (_Way)

  0002b	8b 5d 18	 mov	 ebx, DWORD PTR __Mode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 258  : 		const auto _Seekdist = _Seekhigh - _Seeklow;

  00030	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00033	89 44 24 24	 mov	 DWORD PTR tv183[esp+40], eax
  00037	2b c2		 sub	 eax, edx
  00039	89 44 24 18	 mov	 DWORD PTR __Seekdist$1$[esp+40], eax

; 260  : 		switch (_Way)

  0003d	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00040	89 54 24 1c	 mov	 DWORD PTR __Seeklow$1$[esp+40], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 260  : 		switch (_Way)

  00044	83 e8 00	 sub	 eax, 0
  00047	74 63		 je	 SHORT $LN5@seekoff
  00049	83 e8 01	 sub	 eax, 1
  0004c	74 10		 je	 SHORT $LN7@seekoff
  0004e	83 e8 01	 sub	 eax, 1
  00051	75 44		 jne	 SHORT $LN13@seekoff

; 264  : 				break;
; 265  : 			case ios_base::end:
; 266  : 				_Newoff = _Seekdist;

  00053	8b 44 24 18	 mov	 eax, DWORD PTR __Seekdist$1$[esp+40]
  00057	99		 cdq
  00058	8b f8		 mov	 edi, eax
  0005a	8b c2		 mov	 eax, edx

; 267  : 				break;

  0005c	eb 5f		 jmp	 SHORT $LN2@seekoff
$LN7@seekoff:

; 268  : 			case ios_base::cur:
; 269  : 				{
; 270  : 				constexpr auto _Both = ios_base::in | ios_base::out;
; 271  : 				if ((_Mode & _Both) != _Both)

  0005e	8b c3		 mov	 eax, ebx
  00060	83 e0 03	 and	 eax, 3
  00063	3c 03		 cmp	 al, 3
  00065	74 30		 je	 SHORT $LN13@seekoff

; 272  : 					{	// prohibited by N4727 [stringbuf.virtuals] Table 107 "seekoff positioning"
; 273  : 					if (_Mode & ios_base::in)

  00067	f6 c3 01	 test	 bl, 1
  0006a	74 13		 je	 SHORT $LN9@seekoff

; 274  : 						{
; 275  : 						if (_Gptr_old != nullptr || _Seeklow == nullptr)

  0006c	85 ff		 test	 edi, edi
  0006e	75 04		 jne	 SHORT $LN12@seekoff
  00070	85 d2		 test	 edx, edx
  00072	75 23		 jne	 SHORT $LN13@seekoff
$LN12@seekoff:

; 276  : 							{
; 277  : 							_Newoff = _Gptr_old - _Seeklow;

  00074	8b c7		 mov	 eax, edi
  00076	2b c2		 sub	 eax, edx
  00078	99		 cdq
  00079	8b f8		 mov	 edi, eax
  0007b	8b c2		 mov	 eax, edx

; 278  : 							break;

  0007d	eb 3e		 jmp	 SHORT $LN2@seekoff
$LN9@seekoff:

; 279  : 							}
; 280  : 						}
; 281  : 					else if ((_Mode & ios_base::out) && (_Pptr_old != nullptr || _Seeklow == nullptr))

  0007f	f6 c3 02	 test	 bl, 2
  00082	74 13		 je	 SHORT $LN13@seekoff
  00084	85 c9		 test	 ecx, ecx
  00086	75 04		 jne	 SHORT $LN14@seekoff
  00088	85 d2		 test	 edx, edx
  0008a	75 0b		 jne	 SHORT $LN13@seekoff
$LN14@seekoff:

; 282  : 						{
; 283  : 						_Newoff = _Pptr_old - _Seeklow;

  0008c	8b c1		 mov	 eax, ecx
  0008e	2b c2		 sub	 eax, edx
  00090	99		 cdq
  00091	8b f8		 mov	 edi, eax
  00093	8b c2		 mov	 eax, edx

; 284  : 						break;

  00095	eb 26		 jmp	 SHORT $LN2@seekoff
$LN13@seekoff:

; 319  : 		}

  00097	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  000a0	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  000a7	e9 a5 00 00 00	 jmp	 $LN46@seekoff
$LN5@seekoff:
  000ac	0f 57 c0	 xorps	 xmm0, xmm0

; 261  : 			{
; 262  : 			case ios_base::beg:
; 263  : 				_Newoff = 0;

  000af	66 0f 13 44 24
	10		 movlpd	 QWORD PTR __Newoff$[esp+40], xmm0
  000b5	8b 44 24 14	 mov	 eax, DWORD PTR __Newoff$[esp+44]
  000b9	8b 7c 24 10	 mov	 edi, DWORD PTR __Newoff$[esp+40]
$LN2@seekoff:

; 285  : 						}
; 286  : 					}
; 287  : 				}
; 288  : 
; 289  : 				// fallthrough
; 290  : 			default:
; 291  : 				return (pos_type(off_type(-1)));
; 292  : 			}
; 293  : 
; 294  : 		if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist))

  000bd	03 7d 0c	 add	 edi, DWORD PTR __Off$[ebp]
  000c0	13 45 10	 adc	 eax, DWORD PTR __Off$[ebp+4]
  000c3	89 44 24 10	 mov	 DWORD PTR __Off$2$[esp+40], eax
  000c7	8b 44 24 18	 mov	 eax, DWORD PTR __Seekdist$1$[esp+40]
  000cb	99		 cdq
  000cc	39 54 24 10	 cmp	 DWORD PTR __Off$2$[esp+40], edx
  000d0	72 06		 jb	 SHORT $LN16@seekoff
  000d2	77 c3		 ja	 SHORT $LN13@seekoff
  000d4	3b f8		 cmp	 edi, eax
  000d6	77 bf		 ja	 SHORT $LN13@seekoff
$LN16@seekoff:

; 295  : 			{
; 296  : 			return (pos_type(off_type(-1)));
; 297  : 			}
; 298  : 
; 299  : 		_Off += _Newoff;
; 300  : 		if (_Off != 0
; 301  : 			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)

  000d8	8b 54 24 0c	 mov	 edx, DWORD PTR __Gptr_old$1$[esp+40]
  000dc	8b c7		 mov	 eax, edi
  000de	0b 44 24 10	 or	 eax, DWORD PTR __Off$2$[esp+40]
  000e2	74 12		 je	 SHORT $LN17@seekoff
  000e4	f6 c3 01	 test	 bl, 1
  000e7	74 04		 je	 SHORT $LN19@seekoff
  000e9	85 d2		 test	 edx, edx
  000eb	74 aa		 je	 SHORT $LN13@seekoff
$LN19@seekoff:
  000ed	f6 c3 02	 test	 bl, 2
  000f0	74 04		 je	 SHORT $LN17@seekoff
  000f2	85 c9		 test	 ecx, ecx
  000f4	74 a1		 je	 SHORT $LN13@seekoff
$LN17@seekoff:

; 302  : 				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
; 303  : 			{
; 304  : 			return (pos_type(off_type(-1)));
; 305  : 			}
; 306  : 
; 307  : 		const auto _Newptr = _Seeklow + _Off;	// may perform nullptr + 0

  000f6	8b 44 24 1c	 mov	 eax, DWORD PTR __Seeklow$1$[esp+40]
  000fa	03 c7		 add	 eax, edi
  000fc	89 44 24 18	 mov	 DWORD PTR __Newptr$1$[esp+40], eax

; 308  : 		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)

  00100	f6 c3 01	 test	 bl, 1
  00103	74 14		 je	 SHORT $LN20@seekoff
  00105	85 d2		 test	 edx, edx
  00107	74 10		 je	 SHORT $LN20@seekoff
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  00109	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0010c	89 02		 mov	 DWORD PTR [edx], eax

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0010e	8b 54 24 24	 mov	 edx, DWORD PTR tv183[esp+40]
  00112	2b d0		 sub	 edx, eax
  00114	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00117	89 10		 mov	 DWORD PTR [eax], edx
$LN20@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 313  : 		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)

  00119	f6 c3 02	 test	 bl, 2
  0011c	74 27		 je	 SHORT $LN21@seekoff
  0011e	85 c9		 test	 ecx, ecx
  00120	74 23		 je	 SHORT $LN21@seekoff
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00122	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00125	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00128	8b 10		 mov	 edx, DWORD PTR [eax]

; 299  : 		*_IPfirst = _First;

  0012a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 258  : 		return (*_IPnext + *_IPcount);

  0012d	03 11		 add	 edx, DWORD PTR [ecx]

; 299  : 		*_IPfirst = _First;

  0012f	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Seeklow$1$[esp+40]
  00133	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;

  00135	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00138	8b 4c 24 18	 mov	 ecx, DWORD PTR __Newptr$1$[esp+40]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  0013c	2b d1		 sub	 edx, ecx
  0013e	89 08		 mov	 DWORD PTR [eax], ecx
  00140	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00143	89 10		 mov	 DWORD PTR [eax], edx
$LN21@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00145	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00148	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$2$[esp+40]
  0014c	89 38		 mov	 DWORD PTR [eax], edi
  0014e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN46@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 319  : 		}

  00151	5f		 pop	 edi
  00152	0f 57 c0	 xorps	 xmm0, xmm0
  00155	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0015c	5e		 pop	 esi
  0015d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00164	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 216  : 		{	// get an element from stream, but don't point past it

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi
  00003	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00004	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  00007	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 218  : 		if (_Gptr == nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 47		 je	 SHORT $LN5@underflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0000d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 223  : 		if (_Gptr < _Mysb::egptr())

  00014	3b c8		 cmp	 ecx, eax
  00016	73 06		 jae	 SHORT $LN3@underflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00018	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0001b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  0001c	5e		 pop	 esi
  0001d	c3		 ret	 0
$LN3@underflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0001e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 229  : 		const auto _Pptr = _Mysb::pptr();

  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	85 c0		 test	 eax, eax

; 230  : 		if (!_Pptr || (_Mystate & _Noread))

  00025	74 2d		 je	 SHORT $LN5@underflow
  00027	f6 42 3c 04	 test	 BYTE PTR [edx+60], 4
  0002b	75 27		 jne	 SHORT $LN5@underflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0002d	8b 72 38	 mov	 esi, DWORD PTR [edx+56]
  00030	3b f0		 cmp	 esi, eax
  00032	0f 42 f0	 cmovb	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 236  : 		if (_Local_highwater <= _Gptr)

  00035	3b f1		 cmp	 esi, ecx
  00037	76 1b		 jbe	 SHORT $LN5@underflow

; 237  : 			{	// nothing in the put area to take
; 238  : 			return (_Traits::eof());
; 239  : 			}
; 240  : 
; 241  : 		_Seekhigh = _Local_highwater;

  00039	89 72 38	 mov	 DWORD PTR [edx+56], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  0003c	8b c7		 mov	 eax, edi

; 225  : 		return (*_IGnext);

  0003e	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00040	2b f1		 sub	 esi, ecx
  00042	5f		 pop	 edi

; 252  : 		*_IGnext = _Next;

  00043	89 08		 mov	 DWORD PTR [eax], ecx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00045	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00048	89 30		 mov	 DWORD PTR [eax], esi

; 225  : 		return (*_IGnext);

  0004a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  0004d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00050	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  00053	c3		 ret	 0
$LN5@underflow:
  00054	5f		 pop	 edi

; 231  : 			{	// no put area or read disallowed
; 232  : 			return (_Traits::eof());

  00055	83 c8 ff	 or	 eax, -1

; 244  : 		}

  00058	5e		 pop	 esi
  00059	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 194  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00003	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 194  : 		{	// put an element back to stream

  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00007	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00009	85 f6		 test	 esi, esi
  0000b	74 3f		 je	 SHORT $LN3@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0000d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	76 38		 jbe	 SHORT $LN3@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00014	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00017	83 fa ff	 cmp	 edx, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001a	74 0b		 je	 SHORT $LN2@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 511  : 		return (_Left == _Right);

  0001c	3a 56 ff	 cmp	 dl, BYTE PTR [esi-1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001f	74 06		 je	 SHORT $LN2@pbackfail
  00021	f6 41 3c 02	 test	 BYTE PTR [ecx+60], 2
  00025	75 25		 jne	 SHORT $LN3@pbackfail
$LN2@pbackfail:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 245  : 		*_IGcount -= _Off;

  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	ff 00		 inc	 DWORD PTR [eax]

; 246  : 		*_IGnext += _Off;

  0002c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002f	ff 08		 dec	 DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00031	83 fa ff	 cmp	 edx, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 207  : 		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00034	74 07		 je	 SHORT $LN4@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00036	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00039	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 209  : 			*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0003b	88 11		 mov	 BYTE PTR [ecx], dl
$LN4@pbackfail:

; 210  : 			}
; 211  : 
; 212  : 		return (_Traits::not_eof(_Meta));

  0003d	33 c0		 xor	 eax, eax
  0003f	83 fa ff	 cmp	 edx, -1
  00042	5e		 pop	 esi
  00043	0f 44 d0	 cmove	 edx, eax
  00046	8b c2		 mov	 eax, edx

; 213  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN3@pbackfail:

; 199  : 				&& !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])
; 200  : 				&& (_Mystate & _Constant)))
; 201  : 			{	// can't put back, fail
; 202  : 			return (_Traits::eof());

  0004c	83 c8 ff	 or	 eax, -1
  0004f	5e		 pop	 esi

; 213  : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Back_shift$1$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 119  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 120  : 		if (_Mystate & _Constant)

  0000b	f6 43 3c 02	 test	 BYTE PTR [ebx+60], 2
  0000f	0f 85 90 01 00
	00		 jne	 $LN10@overflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00015	83 7d 08 ff	 cmp	 DWORD PTR __Meta$[ebp], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 125  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00019	75 0b		 jne	 SHORT $LN3@overflow

; 191  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00026	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00029	8b 38		 mov	 edi, DWORD PTR [eax]

; 258  : 		return (*_IPnext + *_IPcount);

  0002b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 132  : 		if (_Pptr != nullptr && _Pptr < _Epptr)

  00033	85 ff		 test	 edi, edi
  00035	74 27		 je	 SHORT $LN105@overflow
  00037	3b f9		 cmp	 edi, ecx
  00039	73 23		 jae	 SHORT $LN105@overflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 306  : 		--*_IPcount;

  0003b	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  0003e	89 08		 mov	 DWORD PTR [eax], ecx

; 307  : 		return ((*_IPnext)++);

  00040	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 134  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00043	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 307  : 		return ((*_IPnext)++);

  00046	8b 32		 mov	 esi, DWORD PTR [edx]
  00048	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0004b	89 0a		 mov	 DWORD PTR [edx], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 135  : 			_Seekhigh = _Pptr + 1;

  0004d	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00050	5f		 pop	 edi
  00051	88 06		 mov	 BYTE PTR [esi], al

; 191  : 		}

  00053	5e		 pop	 esi
  00054	89 4b 38	 mov	 DWORD PTR [ebx+56], ecx
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN105@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0005e	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00061	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 148  : 		if (_Oldsize < _MINSIZE)

  00063	2b ce		 sub	 ecx, esi
  00065	f7 df		 neg	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00067	89 75 fc	 mov	 DWORD PTR __Back_shift$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 148  : 		if (_Oldsize < _MINSIZE)

  0006a	1b ff		 sbb	 edi, edi
  0006c	23 f9		 and	 edi, ecx
  0006e	83 ff 20	 cmp	 edi, 32			; 00000020H
  00071	73 15		 jae	 SHORT $LN6@overflow

; 150  : 			_Newsize = _MINSIZE;

  00073	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00078	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 150  : 			_Newsize = _MINSIZE;

  00079	89 4d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0007c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00081	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00084	8b f0		 mov	 esi, eax
  00086	eb 64		 jmp	 SHORT $LN46@overflow
$LN6@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 152  : 		else if (_Oldsize < INT_MAX / 2)

  00088	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  0008e	73 23		 jae	 SHORT $LN8@overflow

; 153  : 			{	// grow by 50 percent
; 154  : 			_Newsize = _Oldsize << 1;

  00090	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00093	89 4d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00096	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009c	73 29		 jae	 SHORT $LN107@overflow

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0009e	85 c9		 test	 ecx, ecx
  000a0	74 0d		 je	 SHORT $LN48@overflow

; 52   : 		return (::operator new(_Bytes));

  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a8	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000ab	8b f0		 mov	 esi, eax
  000ad	eb 3d		 jmp	 SHORT $LN46@overflow
$LN48@overflow:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000af	33 f6		 xor	 esi, esi
  000b1	eb 39		 jmp	 SHORT $LN46@overflow
$LN8@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 156  : 		else if (_Oldsize < INT_MAX)

  000b3	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  000b9	0f 83 e6 00 00
	00		 jae	 $LN10@overflow

; 157  : 			{
; 158  : 			_Newsize = INT_MAX;

  000bf	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000c4	89 4d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ecx
$LN107@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  000c7	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  000ca	83 ca ff	 or	 edx, -1
  000cd	3b c1		 cmp	 eax, ecx
  000cf	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d8	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000db	85 c0		 test	 eax, eax
  000dd	0f 84 ce 00 00
	00		 je	 $LN95@overflow

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000e3	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  000e6	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000e9	89 46 fc	 mov	 DWORD PTR [esi-4], eax
$LN46@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ec	57		 push	 edi
  000ed	ff 75 fc	 push	 DWORD PTR __Back_shift$1$[ebp]
  000f0	56		 push	 esi
  000f1	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 168  : 		const auto _New_pnext = _Newptr + _Oldsize;

  000f6	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000f9	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 169  : 		_Seekhigh = _New_pnext + 1; // to include _Meta

  000fb	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000fe	2b ca		 sub	 ecx, edx
  00100	03 4d f8	 add	 ecx, DWORD PTR __Newsize$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 169  : 		_Seekhigh = _New_pnext + 1; // to include _Meta

  00106	89 43 38	 mov	 DWORD PTR [ebx+56], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  00109	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0010c	89 30		 mov	 DWORD PTR [eax], esi

; 300  : 		*_IPnext = _Next;

  0010e	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00111	89 10		 mov	 DWORD PTR [eax], edx

; 301  : 		*_IPcount = (int)(_Last - _Next);

  00113	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00116	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 172  : 		if (_Mystate & _Noread)

  00118	f6 43 3c 04	 test	 BYTE PTR [ebx+60], 4
  0011c	74 15		 je	 SHORT $LN12@overflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  0011e	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00121	89 30		 mov	 DWORD PTR [eax], esi

; 252  : 		*_IGnext = _Next;

  00123	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00126	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0012c	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0012f	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 176  : 		else

  00131	eb 1e		 jmp	 SHORT $LN13@overflow
$LN12@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00133	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 178  : 			_Mysb::setg(_Newptr,

  00136	8b 53 38	 mov	 edx, DWORD PTR [ebx+56]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00139	8b 08		 mov	 ecx, DWORD PTR [eax]

; 251  : 		*_IGfirst = _First;

  0013b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 225  : 		return (*_IGnext);

  0013e	2b 4d fc	 sub	 ecx, DWORD PTR __Back_shift$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 178  : 			_Mysb::setg(_Newptr,

  00141	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00143	2b d1		 sub	 edx, ecx
  00145	89 30		 mov	 DWORD PTR [eax], esi
  00147	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0014a	89 08		 mov	 DWORD PTR [eax], ecx
  0014c	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0014f	89 10		 mov	 DWORD PTR [eax], edx
$LN13@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 183  : 		if (_Mystate & _Allocated)

  00151	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  00154	a8 01		 test	 al, 1
  00156	74 2a		 je	 SHORT $LN99@overflow
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00158	8b 45 fc	 mov	 eax, DWORD PTR __Back_shift$1$[ebp]
  0015b	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00161	72 12		 jb	 SHORT $LN98@overflow

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00163	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00166	83 c7 23	 add	 edi, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00169	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0016e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00171	77 3e		 ja	 SHORT $LN95@overflow

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00173	8b c1		 mov	 eax, ecx
$LN98@overflow:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00175	57		 push	 edi
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017c	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  0017f	83 c4 08	 add	 esp, 8
$LN99@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 188  : 		_Mystate |= _Allocated;

  00182	83 c8 01	 or	 eax, 1
  00185	89 43 3c	 mov	 DWORD PTR [ebx+60], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 306  : 		--*_IPcount;

  00188	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0018b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 191  : 		}

  0018c	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 306  : 		--*_IPcount;

  0018d	ff 08		 dec	 DWORD PTR [eax]

; 307  : 		return ((*_IPnext)++);

  0018f	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 191  : 		}

  00192	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 307  : 		return ((*_IPnext)++);

  00193	8b 11		 mov	 edx, DWORD PTR [ecx]
  00195	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00198	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 189  : 		*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0019a	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0019d	88 02		 mov	 BYTE PTR [edx], al

; 191  : 		}

  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 04 00	 ret	 4
$LN10@overflow:
  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	83 c8 ff	 or	 eax, -1
  001aa	5b		 pop	 ebx
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c2 04 00	 ret	 4
$LN95@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN109@overflow:
  001b6	cc		 int	 3
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 77   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 402  : 		if (_Mystate & _Allocated)

  00036	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  0003a	74 4b		 je	 SHORT $LN38@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0003c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00041	85 c9		 test	 ecx, ecx
  00043	74 09		 je	 SHORT $LN7@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00045	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00048	8b 10		 mov	 edx, DWORD PTR [eax]
  0004a	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0004c	eb 0a		 jmp	 SHORT $LN8@basic_stri
$LN7@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0004e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00051	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	03 11		 add	 edx, DWORD PTR [ecx]
$LN8@basic_stri:

; 220  : 		return (*_IGfirst);

  00058	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005b	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0005d	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0005f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00065	72 16		 jb	 SHORT $LN37@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00067	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0006a	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006d	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00072	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00075	0f 87 94 00 00
	00		 ja	 $LN34@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0007b	8b c1		 mov	 eax, ecx
$LN37@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0007d	52		 push	 edx
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00084	83 c4 08	 add	 esp, 8
$LN38@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00087	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00090	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00093	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00099	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0009c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 292  : 		*_IPfirst = _First;

  000a2	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a5	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  000ab	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000ae	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  000b4	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000b7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 412  : 		_Mystate &= ~_Allocated;

  000bd	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  000c1	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 79   : 		}

  000c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 77   : 		{	// destroy the object

  000cf	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 78   : 		delete _Plocale;

  000d5	8b 76 34	 mov	 esi, DWORD PTR [esi+52]
  000d8	85 f6		 test	 esi, esi
  000da	74 23		 je	 SHORT $LN51@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  000dc	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000df	85 c9		 test	 ecx, ecx
  000e1	74 11		 je	 SHORT $LN56@basic_stri

; 410  : 			delete _Ptr->_Decref();

  000e3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e5	ff 50 08	 call	 DWORD PTR [eax+8]
  000e8	85 c0		 test	 eax, eax
  000ea	74 08		 je	 SHORT $LN56@basic_stri
  000ec	8b 10		 mov	 edx, DWORD PTR [eax]
  000ee	8b c8		 mov	 ecx, eax
  000f0	6a 01		 push	 1
  000f2	ff 12		 call	 DWORD PTR [edx]
$LN56@basic_stri:
  000f4	6a 08		 push	 8
  000f6	56		 push	 esi
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fc	83 c4 08	 add	 esp, 8
$LN51@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 79   : 		}

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5e		 pop	 esi
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
$LN34@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@basic_stri:
  00114	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 832  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 08 e0 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-32], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00034	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  00037	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003a	8d 42 e0	 lea	 eax, DWORD PTR [edx-32]
  0003d	89 44 0a dc	 mov	 DWORD PTR [edx+ecx-36], eax

; 833  : 		}

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	8d 51 f8	 lea	 edx, DWORD PTR [ecx-8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 87   : 		{	// destroy the object

  0004b	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00059	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00062	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 833  : 		}

  00066	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 80   : 		{	// destroy the object

  0006d	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00070	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00073	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0007b	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  0007e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00081	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00084	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax

; 833  : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 08	 sub	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 e9 08	 sub	 ecx, 8
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T2 = -60						; size = 8
$T3 = -60						; size = 8
$T4 = -60						; size = 8
__Ok$ = -52						; size = 8
__Nput_fac$1$ = -44					; size = 4
$T5 = -40						; size = 4
__State$ = -36						; size = 4
_this$ = -32						; size = 4
$T6 = -28						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 361  : 		{	// insert an unsigned long

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	53		 push	 ebx
  00026	83 ec 28	 sub	 esp, 40			; 00000028H
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b f1		 mov	 esi, ecx
  00041	89 75 e0	 mov	 DWORD PTR _this$[ebp], esi
  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0

; 362  : 		ios_base::iostate _State = ios_base::goodbit;

  0004b	33 ff		 xor	 edi, edi
  0004d	89 7d dc	 mov	 DWORD PTR __State$[ebp], edi

; 363  : 		const sentry _Ok(*this);

  00050	56		 push	 esi
  00051	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00059	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi

; 364  : 
; 365  : 		if (_Ok)

  0005c	80 7d d0 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00060	0f 84 cd 00 00
	00		 je	 $LN10@operator

; 367  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  0006f	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00073	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00076	89 4d d8	 mov	 DWORD PTR $T5[ebp], ecx
  00079	89 4d c8	 mov	 DWORD PTR $T4[ebp+4], ecx

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  0007c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007e	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00081	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 367  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00088	8d 45 c4	 lea	 eax, DWORD PTR $T4[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00091	83 c4 04	 add	 esp, 4
  00094	89 45 d4	 mov	 DWORD PTR __Nput_fac$1$[ebp], eax
  00097	ba 01 00 00 00	 mov	 edx, 1
  0009c	89 55 e4	 mov	 DWORD PTR $T6[ebp], edx
  0009f	83 e2 fe	 and	 edx, -2			; fffffffeH
  000a2	89 55 e4	 mov	 DWORD PTR $T6[ebp], edx
  000a5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a9	8b 4d d8	 mov	 ecx, DWORD PTR $T5[ebp]
  000ac	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  000ae	74 15		 je	 SHORT $LN23@operator

; 410  : 			delete _Ptr->_Decref();

  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b5	ff d0		 call	 eax
  000b7	85 c0		 test	 eax, eax
  000b9	74 0a		 je	 SHORT $LN23@operator
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bf	6a 01		 push	 1
  000c1	8b c8		 mov	 ecx, eax
  000c3	ff d2		 call	 edx
$LN23@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 369  : 			_TRY_IO_BEGIN

  000c5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ce	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 670  : 		: _Failed(false), _Strbuf(_Sb)

  000d1	c6 45 c4 00	 mov	 BYTE PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 108  : 		return (_Fillch);

  000d5	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 371  : 				_Myios::fill(), _Val).failed())

  000d8	ff 71 38	 push	 DWORD PTR [ecx+56]
  000db	ff 75 c4	 push	 DWORD PTR $T3[ebp]
  000de	ff 73 08	 push	 DWORD PTR __Val$[ebx]
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d d4	 mov	 ecx, DWORD PTR __Nput_fac$1$[ebp]
  000ea	e8 00 00 00 00	 call	 ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 705  : 		return (_Failed);

  000ef	8a 00		 mov	 al, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 371  : 				_Myios::fill(), _Val).failed())

  000f1	b9 04 00 00 00	 mov	 ecx, 4
  000f6	84 c0		 test	 al, al
  000f8	0f 45 f9	 cmovne	 edi, ecx
  000fb	89 7d dc	 mov	 DWORD PTR __State$[ebp], edi
  000fe	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00105	eb 2c		 jmp	 SHORT $LN10@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0:
  00107	8b 5d ec	 mov	 ebx, DWORD PTR [ebp-20]

; 372  : 				_State |= ios_base::badbit;
; 373  : 			_CATCH_IO_END

  0010a	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0010d	8b 02		 mov	 eax, DWORD PTR [edx]
  0010f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00112	03 ca		 add	 ecx, edx
  00114	6a 01		 push	 1
  00116	6a 04		 push	 4
  00118	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0011d	b8 00 00 00 00	 mov	 eax, $LN61@operator
  00122	c3		 ret	 0
$LN61@operator:
  00123	8b 5d ec	 mov	 ebx, DWORD PTR [ebp-20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	8b 75 e0	 mov	 esi, DWORD PTR _this$[ebp]
  00130	8b 7d dc	 mov	 edi, DWORD PTR __State$[ebp]
$LN10@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 374  : 			}
; 375  : 
; 376  : 		_Myios::setstate(_State);

  00133	8b 06		 mov	 eax, DWORD PTR [esi]
  00135	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00138	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 330  : 		return (_Mystate);

  0013a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0013d	0b d7		 or	 edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  0013f	6a 00		 push	 0
  00141	8b c2		 mov	 eax, edx
  00143	83 c8 04	 or	 eax, 4
  00146	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0014a	0f 45 c2	 cmovne	 eax, edx
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 135  : 			{	// destroy the object

  00153	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  0015a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0015f	84 c0		 test	 al, al
  00161	75 08		 jne	 SHORT $LN44@operator

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00163	8b 4d cc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00166	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN44@operator:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  0016b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00172	8b 4d cc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00175	8b 01		 mov	 eax, DWORD PTR [ecx]
  00177	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0017a	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0017e	85 c9		 test	 ecx, ecx
  00180	74 0c		 je	 SHORT $LN58@operator
  00182	8b 01		 mov	 eax, DWORD PTR [ecx]
  00184	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00187	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  0018c	75 18		 jne	 SHORT $LN63@operator
$LN58@operator:

; 377  : 		return (*this);
; 378  : 		}

  0018e	8b c6		 mov	 eax, esi
  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	8b e3		 mov	 esp, ebx
  001a2	5b		 pop	 ebx
  001a3	c2 04 00	 ret	 4
$LN63@operator:

; 107  : 				_Myostr.rdbuf()->_Unlock();

  001a6	ff d0		 call	 eax
  001a8	eb e4		 jmp	 SHORT $LN58@operator
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$4:
  00008	8b 45 e4	 mov	 eax, DWORD PTR $T6[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN17@operator
  00014	83 65 e4 fe	 and	 DWORD PTR $T6[ebp], -2	; fffffffeH
  00018	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN17@operator:
  00020	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$5:
  00021	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT
$T2 = -60						; size = 8
$T3 = -60						; size = 8
$T4 = -60						; size = 8
__Ok$ = -52						; size = 8
__Nput_fac$1$ = -44					; size = 4
$T5 = -40						; size = 4
__State$ = -36						; size = 4
_this$ = -32						; size = 4
$T6 = -28						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 2
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 276  : 		{	// insert an unsigned short

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	53		 push	 ebx
  00026	83 ec 28	 sub	 esp, 40			; 00000028H
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b f1		 mov	 esi, ecx
  00041	89 75 e0	 mov	 DWORD PTR _this$[ebp], esi
  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0

; 277  : 		ios_base::iostate _State = ios_base::goodbit;

  0004b	33 ff		 xor	 edi, edi
  0004d	89 7d dc	 mov	 DWORD PTR __State$[ebp], edi

; 278  : 		const sentry _Ok(*this);

  00050	56		 push	 esi
  00051	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00054	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00059	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi

; 279  : 
; 280  : 		if (_Ok)

  0005c	80 7d d0 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00060	0f 84 ce 00 00
	00		 je	 $LN10@operator

; 282  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  0006f	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00073	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00076	89 4d d8	 mov	 DWORD PTR $T5[ebp], ecx
  00079	89 4d c8	 mov	 DWORD PTR $T4[ebp+4], ecx

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  0007c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007e	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00081	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 282  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00088	8d 45 c4	 lea	 eax, DWORD PTR $T4[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00091	83 c4 04	 add	 esp, 4
  00094	89 45 d4	 mov	 DWORD PTR __Nput_fac$1$[ebp], eax
  00097	ba 01 00 00 00	 mov	 edx, 1
  0009c	89 55 e4	 mov	 DWORD PTR $T6[ebp], edx
  0009f	83 e2 fe	 and	 edx, -2			; fffffffeH
  000a2	89 55 e4	 mov	 DWORD PTR $T6[ebp], edx
  000a5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a9	8b 4d d8	 mov	 ecx, DWORD PTR $T5[ebp]
  000ac	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  000ae	74 15		 je	 SHORT $LN23@operator

; 410  : 			delete _Ptr->_Decref();

  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b5	ff d0		 call	 eax
  000b7	85 c0		 test	 eax, eax
  000b9	74 0a		 je	 SHORT $LN23@operator
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bf	6a 01		 push	 1
  000c1	8b c8		 mov	 ecx, eax
  000c3	ff d2		 call	 edx
$LN23@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 284  : 			_TRY_IO_BEGIN

  000c5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ce	03 d6		 add	 edx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 670  : 		: _Failed(false), _Strbuf(_Sb)

  000d0	c6 45 c4 00	 mov	 BYTE PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 108  : 		return (_Fillch);

  000d4	8a 4a 40	 mov	 cl, BYTE PTR [edx+64]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 286  : 				_Myios::fill(), (unsigned long)_Val).failed())

  000d7	ff 72 38	 push	 DWORD PTR [edx+56]
  000da	ff 75 c4	 push	 DWORD PTR $T3[ebp]
  000dd	0f b7 43 08	 movzx	 eax, WORD PTR __Val$[ebx]
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	52		 push	 edx
  000e4	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d d4	 mov	 ecx, DWORD PTR __Nput_fac$1$[ebp]
  000eb	e8 00 00 00 00	 call	 ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 705  : 		return (_Failed);

  000f0	8a 00		 mov	 al, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 286  : 				_Myios::fill(), (unsigned long)_Val).failed())

  000f2	b9 04 00 00 00	 mov	 ecx, 4
  000f7	84 c0		 test	 al, al
  000f9	0f 45 f9	 cmovne	 edi, ecx
  000fc	89 7d dc	 mov	 DWORD PTR __State$[ebp], edi
  000ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00106	eb 2c		 jmp	 SHORT $LN10@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0:
  00108	8b 5d ec	 mov	 ebx, DWORD PTR [ebp-20]

; 287  : 				_State |= ios_base::badbit;
; 288  : 			_CATCH_IO_END

  0010b	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0010e	8b 02		 mov	 eax, DWORD PTR [edx]
  00110	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00113	03 ca		 add	 ecx, edx
  00115	6a 01		 push	 1
  00117	6a 04		 push	 4
  00119	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0011e	b8 00 00 00 00	 mov	 eax, $LN61@operator
  00123	c3		 ret	 0
$LN61@operator:
  00124	8b 5d ec	 mov	 ebx, DWORD PTR [ebp-20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
  00127	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012e	8b 75 e0	 mov	 esi, DWORD PTR _this$[ebp]
  00131	8b 7d dc	 mov	 edi, DWORD PTR __State$[ebp]
$LN10@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 289  : 			}
; 290  : 
; 291  : 		_Myios::setstate(_State);

  00134	8b 06		 mov	 eax, DWORD PTR [esi]
  00136	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00139	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 330  : 		return (_Mystate);

  0013b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0013e	0b d7		 or	 edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00140	6a 00		 push	 0
  00142	8b c2		 mov	 eax, edx
  00144	83 c8 04	 or	 eax, 4
  00147	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0014b	0f 45 c2	 cmovne	 eax, edx
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 135  : 			{	// destroy the object

  00154	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  0015b	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00160	84 c0		 test	 al, al
  00162	75 08		 jne	 SHORT $LN44@operator

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00164	8b 4d cc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00167	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN44@operator:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  0016c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00173	8b 4d cc	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0017b	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0017f	85 c9		 test	 ecx, ecx
  00181	74 0c		 je	 SHORT $LN58@operator
  00183	8b 01		 mov	 eax, DWORD PTR [ecx]
  00185	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00188	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  0018d	75 18		 jne	 SHORT $LN63@operator
$LN58@operator:

; 292  : 		return (*this);
; 293  : 		}

  0018f	8b c6		 mov	 eax, esi
  00191	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00194	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019b	59		 pop	 ecx
  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	8b e3		 mov	 esp, ebx
  001a3	5b		 pop	 ebx
  001a4	c2 04 00	 ret	 4
$LN63@operator:

; 107  : 				_Myostr.rdbuf()->_Unlock();

  001a7	ff d0		 call	 eax
  001a9	eb e4		 jmp	 SHORT $LN58@operator
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$4:
  00008	8b 45 e4	 mov	 eax, DWORD PTR $T6[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN17@operator
  00014	83 65 e4 fe	 and	 DWORD PTR $T6[ebp], -2	; fffffffeH
  00018	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN17@operator:
  00020	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$5:
  00021	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
_TEXT	SEGMENT
__Pfn$dead$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 216  : 		{	// call ios_base manipulator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 217  : 		(*_Pfn)(*(ios_base *)this);

  00003	85 f6		 test	 esi, esi
  00005	75 11		 jne	 SHORT $LN3@operator
  00007	33 c0		 xor	 eax, eax
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?hex@std@@YAAAVios_base@1@AAV21@@Z ; std::hex
  0000f	83 c4 04	 add	 esp, 4

; 218  : 		return (*this);

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi

; 219  : 		}

  00015	c2 04 00	 ret	 4
$LN3@operator:

; 217  : 		(*_Pfn)(*(ios_base *)this);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001d	03 c6		 add	 eax, esi
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?hex@std@@YAAAVios_base@1@AAV21@@Z ; std::hex
  00025	83 c4 04	 add	 esp, 4

; 218  : 		return (*this);

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi

; 219  : 		}

  0002b	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 87   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00017	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax

; 88   : 		}

  0001b	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 80   : 		{	// destroy the object

  00000	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00017	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax

; 81   : 		}

  0001b	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 457  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 452  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 453  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 447  : 		return (this);

  00000	8b c1		 mov	 eax, ecx

; 448  : 		}

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 441  : 		{	// change to specified position, according to mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 443  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 435  : 		{	// change position by offset, according to way and mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 437  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Size$2$ = -12						; size = 4
__Start_count$1$ = -8					; size = 4
__Start_count$2$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 401  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx

; 402  : 		const streamsize _Start_count = _Count;

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000d	8b d3		 mov	 edx, ebx
  0000f	89 4c 24 08	 mov	 DWORD PTR _this$1$[esp+24], ecx
  00013	89 54 24 14	 mov	 DWORD PTR __Start_count$2$[esp+24], edx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001c	8b c7		 mov	 eax, edi
  0001e	89 44 24 18	 mov	 DWORD PTR __Start_count$1$[esp+32], eax

; 403  : 		while (0 < _Count)

  00022	85 db		 test	 ebx, ebx
  00024	0f 8c 9c 00 00
	00		 jl	 $LN29@xsputn
  0002a	7f 08		 jg	 SHORT $LL2@xsputn
  0002c	85 ff		 test	 edi, edi
  0002e	0f 84 92 00 00
	00		 je	 $LN29@xsputn
$LL2@xsputn:

; 404  : 			{
; 405  : 			streamsize _Size = _Pnavail();

  00034	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00039	8b f0		 mov	 esi, eax
  0003b	8b c2		 mov	 eax, edx
  0003d	89 44 24 14	 mov	 DWORD PTR __Size$2$[esp+32], eax

; 406  : 			if (0 < _Size)

  00041	85 c0		 test	 eax, eax
  00043	7c 42		 jl	 SHORT $LN4@xsputn
  00045	7f 04		 jg	 SHORT $LN27@xsputn
  00047	85 f6		 test	 esi, esi
  00049	74 3c		 je	 SHORT $LN4@xsputn
$LN27@xsputn:

; 407  : 				{	// copy to write buffer
; 408  : 				if (_Count < _Size)

  0004b	3b d8		 cmp	 ebx, eax
  0004d	7f 0c		 jg	 SHORT $LN6@xsputn
  0004f	7c 04		 jl	 SHORT $LN28@xsputn
  00051	3b fe		 cmp	 edi, esi
  00053	73 06		 jae	 SHORT $LN6@xsputn
$LN28@xsputn:

; 409  : 					{
; 410  : 					_Size = _Count;

  00055	8b f7		 mov	 esi, edi
  00057	89 5c 24 14	 mov	 DWORD PTR __Size$2$[esp+32], ebx
$LN6@xsputn:

; 235  : 		return (*_IPnext);

  0005b	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00062	56		 push	 esi
  00063	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00064	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00067	ff 30		 push	 DWORD PTR [eax]
  00069	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 286  : 		*_IPcount -= _Off;

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR _this$1$[esp+44]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 415  : 				_Count -= _Size;

  00075	2b fe		 sub	 edi, esi
  00077	1b 5c 24 14	 sbb	 ebx, DWORD PTR __Size$2$[esp+32]

; 286  : 		*_IPcount -= _Off;

  0007b	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0007e	29 30		 sub	 DWORD PTR [eax], esi

; 287  : 		*_IPnext += _Off;

  00080	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00083	01 30		 add	 DWORD PTR [eax], esi

; 288  : 		}

  00085	eb 26		 jmp	 SHORT $LN8@xsputn
$LN4@xsputn:

; 418  : 			else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr))))

  00087	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$1$[esp+32]
  0008b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008d	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00090	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00093	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 418  : 			else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr))))

  00096	50		 push	 eax
  00097	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00099	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 418  : 			else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr))))

  0009c	74 20		 je	 SHORT $LN32@xsputn

; 419  : 				{
; 420  : 				break;	// single character put failed, quit
; 421  : 				}
; 422  : 			else
; 423  : 				{	// count character successfully put
; 424  : 				++_Ptr;
; 425  : 				--_Count;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$1$[esp+32]
  000a2	83 c7 ff	 add	 edi, -1
  000a5	be 01 00 00 00	 mov	 esi, 1
  000aa	83 d3 ff	 adc	 ebx, -1
$LN8@xsputn:

; 403  : 		while (0 < _Count)

  000ad	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi
  000b0	85 db		 test	 ebx, ebx
  000b2	7f 80		 jg	 SHORT $LL2@xsputn
  000b4	7c 08		 jl	 SHORT $LN32@xsputn
  000b6	85 ff		 test	 edi, edi
  000b8	0f 85 76 ff ff
	ff		 jne	 $LL2@xsputn
$LN32@xsputn:
  000be	8b 44 24 18	 mov	 eax, DWORD PTR __Start_count$1$[esp+32]
  000c2	8b 54 24 1c	 mov	 edx, DWORD PTR __Start_count$2$[esp+32]
$LN29@xsputn:

; 426  : 				}
; 427  : 			}
; 428  : 
; 429  : 		return (_Start_count - _Count);

  000c6	2b c7		 sub	 eax, edi

; 430  : 		}

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	1b d3		 sbb	 edx, ebx
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Size$2$ = -12						; size = 4
__Start_count$1$ = -8					; size = 4
__Start_count$2$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 365  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx

; 366  : 		const streamsize _Start_count = _Count;

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000d	8b d3		 mov	 edx, ebx
  0000f	89 4c 24 08	 mov	 DWORD PTR _this$1$[esp+24], ecx
  00013	89 54 24 14	 mov	 DWORD PTR __Start_count$2$[esp+24], edx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001c	8b c7		 mov	 eax, edi
  0001e	89 44 24 18	 mov	 DWORD PTR __Start_count$1$[esp+32], eax

; 367  : 
; 368  : 		while (0 < _Count)

  00022	85 db		 test	 ebx, ebx
  00024	0f 8c c0 00 00
	00		 jl	 $LN45@xsgetn
  0002a	7f 08		 jg	 SHORT $LL2@xsgetn
  0002c	85 ff		 test	 edi, edi
  0002e	0f 84 b6 00 00
	00		 je	 $LN45@xsgetn
$LL2@xsgetn:

; 369  : 			{
; 370  : 			streamsize _Size = _Gnavail();

  00034	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00039	8b f0		 mov	 esi, eax
  0003b	8b c2		 mov	 eax, edx
  0003d	89 44 24 14	 mov	 DWORD PTR __Size$2$[esp+32], eax

; 371  : 			if (0 < _Size)

  00041	85 c0		 test	 eax, eax
  00043	7c 42		 jl	 SHORT $LN4@xsgetn
  00045	7f 04		 jg	 SHORT $LN43@xsgetn
  00047	85 f6		 test	 esi, esi
  00049	74 3c		 je	 SHORT $LN4@xsgetn
$LN43@xsgetn:

; 372  : 				{	// copy from read buffer
; 373  : 				if (_Count < _Size)

  0004b	3b d8		 cmp	 ebx, eax
  0004d	7f 0c		 jg	 SHORT $LN6@xsgetn
  0004f	7c 04		 jl	 SHORT $LN44@xsgetn
  00051	3b fe		 cmp	 edi, esi
  00053	73 06		 jae	 SHORT $LN6@xsgetn
$LN44@xsgetn:

; 374  : 					{
; 375  : 					_Size = _Count;

  00055	8b f7		 mov	 esi, edi
  00057	89 5c 24 14	 mov	 DWORD PTR __Size$2$[esp+32], ebx
$LN6@xsgetn:

; 225  : 		return (*_IGnext);

  0005b	8b 44 24 10	 mov	 eax, DWORD PTR _this$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00062	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00063	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00066	ff 30		 push	 DWORD PTR [eax]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 245  : 		*_IGcount -= _Off;

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR _this$1$[esp+44]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 380  : 				_Count -= _Size;

  00075	2b fe		 sub	 edi, esi
  00077	1b 5c 24 14	 sbb	 ebx, DWORD PTR __Size$2$[esp+32]

; 245  : 		*_IGcount -= _Off;

  0007b	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0007e	29 30		 sub	 DWORD PTR [eax], esi

; 246  : 		*_IGnext += _Off;

  00080	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00083	01 30		 add	 DWORD PTR [eax], esi

; 381  : 				gbump(static_cast<int>(_Size));
; 382  : 				}
; 383  : 			else

  00085	eb 46		 jmp	 SHORT $LN5@xsgetn
$LN4@xsgetn:

; 384  : 				{
; 385  : 				const int_type _Meta = uflow();

  00087	8b 74 24 10	 mov	 esi, DWORD PTR _this$1$[esp+32]
  0008b	8b ce		 mov	 ecx, esi
  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00092	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
  00098	75 5d		 jne	 SHORT $LN10@xsgetn

; 360  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  0009a	ff 50 18	 call	 DWORD PTR [eax+24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  0009d	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 360  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  000a0	74 40		 je	 SHORT $LN48@xsgetn

; 269  : 		--*_IGcount;

  000a2	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a5	ff 08		 dec	 DWORD PTR [eax]

; 270  : 		return ((*_IGnext)++);

  000a7	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  000b1	0f b6 02	 movzx	 eax, BYTE PTR [edx]
$LN9@xsgetn:

; 531  : 		return (_Left == _Right);

  000b4	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 386  : 				if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  000b7	74 29		 je	 SHORT $LN48@xsgetn

; 387  : 					{
; 388  : 					break;	// end of file, quit
; 389  : 					}
; 390  : 
; 391  : 				// get a single character
; 392  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 393  : 				--_Count;

  000bc	83 c7 ff	 add	 edi, -1
  000bf	be 01 00 00 00	 mov	 esi, 1
  000c4	83 d3 ff	 adc	 ebx, -1
  000c7	88 01		 mov	 BYTE PTR [ecx], al
  000c9	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$1$[esp+32]
$LN5@xsgetn:

; 367  : 
; 368  : 		while (0 < _Count)

  000cd	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi
  000d0	85 db		 test	 ebx, ebx
  000d2	0f 8f 5c ff ff
	ff		 jg	 $LL2@xsgetn
  000d8	7c 08		 jl	 SHORT $LN48@xsgetn
  000da	85 ff		 test	 edi, edi
  000dc	0f 85 52 ff ff
	ff		 jne	 $LL2@xsgetn
$LN48@xsgetn:
  000e2	8b 44 24 18	 mov	 eax, DWORD PTR __Start_count$1$[esp+32]
  000e6	8b 54 24 1c	 mov	 edx, DWORD PTR __Start_count$2$[esp+32]
$LN45@xsgetn:

; 394  : 				}
; 395  : 			}
; 396  : 
; 397  : 		return (_Start_count - _Count);

  000ea	2b c7		 sub	 eax, edi

; 398  : 		}

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	1b d3		 sbb	 edx, ebx
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 0c 00	 ret	 12			; 0000000cH
$LN10@xsgetn:

; 384  : 				{
; 385  : 				const int_type _Meta = uflow();

  000f7	ff d2		 call	 edx
  000f9	eb b9		 jmp	 SHORT $LN9@xsgetn
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 359  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 360  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00008	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 360  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  0000b	75 04		 jne	 SHORT $LN3@uflow
  0000d	0b c0		 or	 eax, eax
  0000f	5e		 pop	 esi

; 362  : 		}

  00010	c3		 ret	 0
$LN3@uflow:

; 269  : 		--*_IGcount;

  00011	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00014	ff 08		 dec	 DWORD PTR [eax]

; 270  : 		return ((*_IGnext)++);

  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	5e		 pop	 esi
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00021	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 362  : 		}

  00024	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 355  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 356  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 350  : 		return (0);

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 351  : 		}

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 345  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 346  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 340  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 341  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 215  : 		}

  00000	c3		 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 211  : 		}

  00000	c3		 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 77   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 78   : 		delete _Plocale;

  00023	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0002c	85 f6		 test	 esi, esi
  0002e	74 23		 je	 SHORT $LN6@basic_stre
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  00030	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00033	85 c9		 test	 ecx, ecx
  00035	74 11		 je	 SHORT $LN11@basic_stre

; 410  : 			delete _Ptr->_Decref();

  00037	8b 01		 mov	 eax, DWORD PTR [ecx]
  00039	ff 50 08	 call	 DWORD PTR [eax+8]
  0003c	85 c0		 test	 eax, eax
  0003e	74 08		 je	 SHORT $LN11@basic_stre
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	8b c8		 mov	 ecx, eax
  00044	6a 01		 push	 1
  00046	ff 12		 call	 DWORD PTR [edx]
$LN11@basic_stre:
  00048	6a 08		 push	 8
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN6@basic_stre:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 79   : 		}

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 38   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00033	51		 push	 ecx
  00034	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  0003a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 39   : 		}

  00042	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00045	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004c	59		 pop	 ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 98	 lea	 esi, DWORD PTR [ecx-104]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0e		 je	 SHORT $LN4@scalar
  00014	68 b0 00 00 00	 push	 176			; 000000b0H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN4@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8d 7e e0	 lea	 edi, DWORD PTR [esi-32]
  0002a	e8 00 00 00 00	 call	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
  0002f	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  00038	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  0003f	56		 push	 esi
  00040	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00046	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0004b	83 c4 04	 add	 esp, 4
  0004e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00052	74 0b		 je	 SHORT $LN11@scalar
  00054	6a 68		 push	 104			; 00000068H
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005c	83 c4 08	 add	 esp, 8
$LN11@scalar:
  0005f	8b c7		 mov	 eax, edi
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 87   : 		{	// destroy the object

  00024	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00027	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00030	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003d	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00040	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00051	51		 push	 ecx
  00052	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00058	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0005d	83 c4 04	 add	 esp, 4
  00060	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00064	74 0b		 je	 SHORT $LN13@scalar
  00066	6a 50		 push	 80			; 00000050H
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006e	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 80   : 		{	// destroy the object

  00024	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00027	8d 71 e8	 lea	 esi, DWORD PTR [ecx-24]
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00030	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003d	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00040	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00051	51		 push	 ecx
  00052	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00058	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0005d	83 c4 04	 add	 esp, 4
  00060	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00064	74 0b		 je	 SHORT $LN13@scalar
  00066	6a 60		 push	 96			; 00000060H
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006e	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 78   : 		delete _Plocale;

  00026	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0002f	85 ff		 test	 edi, edi
  00031	74 23		 je	 SHORT $LN9@scalar
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  00033	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00036	85 c9		 test	 ecx, ecx
  00038	74 11		 je	 SHORT $LN14@scalar

; 410  : 			delete _Ptr->_Decref();

  0003a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003c	ff 50 08	 call	 DWORD PTR [eax+8]
  0003f	85 c0		 test	 eax, eax
  00041	74 08		 je	 SHORT $LN14@scalar
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	8b c8		 mov	 ecx, eax
  00047	6a 01		 push	 1
  00049	ff 12		 call	 DWORD PTR [edx]
$LN14@scalar:
  0004b	6a 08		 push	 8
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00056	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005a	74 0b		 je	 SHORT $LN16@scalar
  0005c	6a 38		 push	 56			; 00000038H
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00064	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Glocale@std@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 409  : 		if (_Ptr != nullptr)

  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00028	85 c9		 test	 ecx, ecx
  0002a	74 11		 je	 SHORT $LN7@scalar

; 410  : 			delete _Ptr->_Decref();

  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	ff 50 08	 call	 DWORD PTR [eax+8]
  00031	85 c0		 test	 eax, eax
  00033	74 08		 je	 SHORT $LN7@scalar
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	8b c8		 mov	 ecx, eax
  00039	6a 01		 push	 1
  0003b	ff 12		 call	 DWORD PTR [edx]
$LN7@scalar:
  0003d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00041	74 0b		 je	 SHORT $LN9@scalar
  00043	6a 08		 push	 8
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004b	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0004e	8b c6		 mov	 eax, esi
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Glocale@std@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Glocale@std@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00036	56		 push	 esi
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0003d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00042	83 c4 04	 add	 esp, 4
  00045	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00049	74 0b		 je	 SHORT $LN9@scalar
  0004b	6a 48		 push	 72			; 00000048H
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00056	8b c6		 mov	 eax, esi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
  0002e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  00037	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  0003e	56		 push	 esi
  0003f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00045	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 87   : 		{	// destroy the object

  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  00028	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002b	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00033	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  0003c	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003f	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00043	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00050	52		 push	 edx
  00051	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00057	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0005c	83 c4 04	 add	 esp, 4
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 80   : 		{	// destroy the object

  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00028	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002b	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00033	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  0003c	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003f	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 38   : 		{	// destroy the object

  00043	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 534  : 		_Ios_base_dtor(this);

  00050	52		 push	 edx
  00051	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00057	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0005c	83 c4 04	 add	 esp, 4
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT
; __Val$ = ecx

; 342  : 		return (_STD addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 343  : 		}

  00002	c3		 ret	 0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 153  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 154  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 135  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN2@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00052	85 c9		 test	 ecx, ecx
  00054	74 0c		 je	 SHORT $LN8@sentry
  00056	8b 01		 mov	 eax, DWORD PTR [ecx]
  00058	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0005b	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  00060	75 10		 jne	 SHORT $LN18@sentry
$LN8@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5e		 pop	 esi
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
$LN18@sentry:

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00072	ff d0		 call	 eax
  00074	eb ec		 jmp	 SHORT $LN8@sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ok$2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 98   : 			: _Myostr(_Ostr)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]
  00030	89 3b		 mov	 DWORD PTR [ebx], edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  00032	8b 07		 mov	 eax, DWORD PTR [edi]
  00034	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00037	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  0003b	85 c9		 test	 ecx, ecx
  0003d	74 10		 je	 SHORT $LN8@sentry
  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
  00049	0f 85 b5 00 00
	00		 jne	 $LN72@sentry
$LN8@sentry:

; 108  : 			}
; 109  : 
; 110  : 		basic_ostream& _Myostr;	// the output stream, for _Unlock call at destruction
; 111  : 
; 112  : 		_Sentry_base& operator=(const _Sentry_base&) = delete;
; 113  : 		};
; 114  : 
; 115  : 	class sentry
; 116  : 		: public _Sentry_base
; 117  : 		{	// stores thread lock and state of stream
; 118  : 	public:
; 119  : 		explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr)
; 120  : 			: _Sentry_base(_Ostr)

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 330  : 		return (_Mystate);

  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 352  : 		return (rdstate() == ios_base::goodbit);

  0005b	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

  00060	75 75		 jne	 SHORT $LN58@sentry
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 75   : 		return (_Tiestr);

  00062	8b 74 38 3c	 mov	 esi, DWORD PTR [eax+edi+60]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

  00066	85 f6		 test	 esi, esi
  00068	74 6d		 je	 SHORT $LN58@sentry
  0006a	3b f7		 cmp	 esi, edi
  0006c	74 69		 je	 SHORT $LN58@sentry
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 587  : 		if (_Myios::rdbuf() != nullptr)

  00073	83 7c 30 38 00	 cmp	 DWORD PTR [eax+esi+56], 0
  00078	74 5d		 je	 SHORT $LN58@sentry

; 588  : 			{	// buffer exists, flush it
; 589  : 			const sentry _Ok(*this);

  0007a	56		 push	 esi
  0007b	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0007e	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00083	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00087	80 7d ec 00	 cmp	 BYTE PTR __Ok$2[ebp+4], 0
  0008b	74 15		 je	 SHORT $LN28@sentry
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00092	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00096	8b 01		 mov	 eax, DWORD PTR [ecx]
  00098	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0009b	3d 00 00 00 00	 cmp	 eax, OFFSET ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
  000a0	75 69		 jne	 SHORT $LN73@sentry
$LN28@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 135  : 			{	// destroy the object

  000a2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  000a6	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000ab	84 c0		 test	 al, al
  000ad	75 08		 jne	 SHORT $LN52@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  000af	8b 4d e8	 mov	 ecx, DWORD PTR __Ok$2[ebp]
  000b2	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN52@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  000b7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  000bb	8b 4d e8	 mov	 ecx, DWORD PTR __Ok$2[ebp]
  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c3	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  000c7	85 c9		 test	 ecx, ecx
  000c9	74 0c		 je	 SHORT $LN58@sentry
  000cb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d0	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  000d5	75 56		 jne	 SHORT $LN74@sentry
$LN58@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 330  : 		return (_Mystate);

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 352  : 		return (rdstate() == ios_base::goodbit);

  000dc	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  000e1	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e4	88 43 04	 mov	 BYTE PTR [ebx+4], al

; 125  : 			}

  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8b c3		 mov	 eax, ebx
  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
$LN72@sentry:

; 101  : 				_Myostr.rdbuf()->_Lock();

  00104	ff d0		 call	 eax
  00106	e9 44 ff ff ff	 jmp	 $LN8@sentry
$LN73@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 143  : 		return (sync());

  0010b	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  0010d	83 f8 ff	 cmp	 eax, -1
  00110	75 90		 jne	 SHORT $LN28@sentry

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  00112	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00114	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  00116	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00119	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  0011d	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  0011f	83 c8 04	 or	 eax, 4
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
  00128	e9 75 ff ff ff	 jmp	 $LN28@sentry
$LN74@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 107  : 				_Myostr.rdbuf()->_Unlock();

  0012d	ff d0		 call	 eax
  0012f	eb a6		 jmp	 SHORT $LN58@sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1623 : 		{	// put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  00014	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	56		 push	 esi
  0001c	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001f	57		 push	 edi

; 1624 : 		char _Buf[2 * _MAX_INT_DIG];
; 1625 : 
; 1626 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp@
  00026	8d 44 24 18	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0002a	8b f9		 mov	 edi, ecx
  0002c	6a 40		 push	 64			; 00000040H
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _sprintf_s
  00034	50		 push	 eax
  00035	8d 44 24 24	 lea	 eax, DWORD PTR __Buf$[esp+108]
  00039	50		 push	 eax
  0003a	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0003d	56		 push	 esi
  0003e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00041	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00044	53		 push	 ebx
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1627 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val))));
; 1628 : 		}

  0004b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	8b c3		 mov	 eax, ebx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Precision$ = -64					; size = 8
__Ptwo$2 = -60						; size = 4
___$ReturnUdt$GSCopy$1$ = -56				; size = 4
_this$GSCopy$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1599 : 		{	// put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00033	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+16], 0

; 1785 : 		_Myres(0)

  0003a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1599 : 		{	// put formatted long double to _Dest

  00041	89 45 c8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00044	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0004b	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00052	c6 45 d0 00	 mov	 BYTE PTR __Buf$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1600 : 		string _Buf;

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  0005d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 421  : 		return (_Prec);

  00060	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1603 : 			== ios_base::fixed;

  00063	25 00 30 00 00	 and	 eax, 12288		; 00003000H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 421  : 		return (_Prec);

  00068	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1604 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0006b	85 c9		 test	 ecx, ecx
  0006d	7f 14		 jg	 SHORT $LN4@do_put
  0006f	7c 04		 jl	 SHORT $LN126@do_put
  00071	85 f6		 test	 esi, esi
  00073	75 0e		 jne	 SHORT $LN4@do_put
$LN126@do_put:
  00075	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0007a	74 07		 je	 SHORT $LN4@do_put
  0007c	be 06 00 00 00	 mov	 esi, 6
  00081	33 c9		 xor	 ecx, ecx
$LN4@do_put:
  00083	89 4d c4	 mov	 DWORD PTR __Precision$[ebp+4], ecx

; 1605 : 			? 6 : _Iosbase.precision();	// desired precision
; 1606 : 		size_t _Bufsize = (size_t)_Precision;

  00086	8b ce		 mov	 ecx, esi

; 1607 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

  00088	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0008d	75 50		 jne	 SHORT $LN2@do_put
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h

; 843  :         return fabs((double)_X);

  0008f	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  00094	0f 28 c1	 movaps	 xmm0, xmm1
  00097	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1607 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

  0009e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000a6	76 37		 jbe	 SHORT $LN2@do_put
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h

; 864  :         return frexp((double)_X, _Y);

  000a8	8d 45 c4	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000ab	50		 push	 eax
  000ac	83 ec 08	 sub	 esp, 8
  000af	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b4	e8 00 00 00 00	 call	 _frexp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000b9	8b 45 c4	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h

; 864  :         return frexp((double)_X, _Y);

  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000bf	99		 cdq
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h

; 864  :         return frexp((double)_X, _Y);

  000c0	dd d8		 fstp	 ST(0)
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000c2	33 c2		 xor	 eax, edx
  000c4	2b c2		 sub	 eax, edx
  000c6	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000cc	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000d1	f7 e9		 imul	 ecx
  000d3	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000d6	8b ca		 mov	 ecx, edx
  000d8	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000db	03 ca		 add	 ecx, edx
  000dd	03 ce		 add	 ecx, esi
$LN2@do_put:

; 1612 : 			}
; 1613 : 
; 1614 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  000df	8d 41 32	 lea	 eax, DWORD PTR [ecx+50]
  000e2	6a 00		 push	 0
  000e4	50		 push	 eax
  000e5	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  000e8	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  000ed	ff 77 14	 push	 DWORD PTR [edi+20]
  000f0	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  000f3	6a 4c		 push	 76			; 0000004cH
  000f5	50		 push	 eax
  000f6	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  000f9	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000fe	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00102	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00105	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0010a	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  0010e	83 c4 08	 add	 esp, 8
  00111	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00116	56		 push	 esi
  00117	50		 push	 eax
  00118	ff 75 e0	 push	 DWORD PTR __Buf$[ebp+16]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _sprintf_s
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00121	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00125	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00128	8b 75 c8	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0012b	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  0012f	50		 push	 eax
  00130	51		 push	 ecx
  00131	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00134	57		 push	 edi
  00135	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00138	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0013b	56		 push	 esi
  0013c	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0013f	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  00144	83 c4 38	 add	 esp, 56			; 00000038H
  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0014e	8b 55 e4	 mov	 edx, DWORD PTR __Buf$[ebp+20]
  00151	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00154	72 28		 jb	 SHORT $LN111@do_put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00156	8b 4d d0	 mov	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00159	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015a	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0015c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00162	72 10		 jb	 SHORT $LN110@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00164	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00167	83 c2 23	 add	 edx, 35			; 00000023H
  0016a	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0016f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00172	77 3b		 ja	 SHORT $LN130@do_put
$LN110@do_put:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00174	52		 push	 edx
  00175	51		 push	 ecx
  00176	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017b	83 c4 08	 add	 esp, 8
$LN111@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0017e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00185	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00187	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0018e	c6 45 d0 00	 mov	 BYTE PTR __Buf$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1619 : 		}

  00192	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00195	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019c	59		 pop	 ecx
  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a2	33 cd		 xor	 ecx, ebp
  001a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 1c 00	 ret	 28			; 0000001cH
$LN130@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001af	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN128@do_put:
  001b4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Precision$ = -64					; size = 8
__Ptwo$2 = -60						; size = 4
___$ReturnUdt$GSCopy$1$ = -56				; size = 4
_this$GSCopy$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1575 : 		{	// put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00033	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+16], 0

; 1785 : 		_Myres(0)

  0003a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1575 : 		{	// put formatted double to _Dest

  00041	89 45 c8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00044	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0004b	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00052	c6 45 d0 00	 mov	 BYTE PTR __Buf$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1576 : 		string _Buf;

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  0005d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 421  : 		return (_Prec);

  00060	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1579 : 			== ios_base::fixed;

  00063	25 00 30 00 00	 and	 eax, 12288		; 00003000H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 421  : 		return (_Prec);

  00068	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1580 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0006b	85 c9		 test	 ecx, ecx
  0006d	7f 14		 jg	 SHORT $LN4@do_put
  0006f	7c 04		 jl	 SHORT $LN122@do_put
  00071	85 f6		 test	 esi, esi
  00073	75 0e		 jne	 SHORT $LN4@do_put
$LN122@do_put:
  00075	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0007a	74 07		 je	 SHORT $LN4@do_put
  0007c	be 06 00 00 00	 mov	 esi, 6
  00081	33 c9		 xor	 ecx, ecx
$LN4@do_put:
  00083	89 4d c4	 mov	 DWORD PTR __Precision$[ebp+4], ecx

; 1581 : 			? 6 : _Iosbase.precision();	// desired precision
; 1582 : 		size_t _Bufsize = (size_t)_Precision;

  00086	8b ce		 mov	 ecx, esi

; 1583 : 		if (_Isfixed && 1e10 < _CSTD fabs(_Val))

  00088	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0008d	75 50		 jne	 SHORT $LN2@do_put
  0008f	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  00094	0f 28 c1	 movaps	 xmm0, xmm1
  00097	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0009e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000a6	76 37		 jbe	 SHORT $LN2@do_put

; 1584 : 			{	// f or F format
; 1585 : 			int _Ptwo;
; 1586 : 			(void)_CSTD frexp(_Val, &_Ptwo);

  000a8	8d 45 c4	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000ab	50		 push	 eax
  000ac	83 ec 08	 sub	 esp, 8
  000af	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000b4	e8 00 00 00 00	 call	 _frexp

; 1587 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000b9	8b 45 c4	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	99		 cdq
  000c0	dd d8		 fstp	 ST(0)
  000c2	33 c2		 xor	 eax, edx
  000c4	2b c2		 sub	 eax, edx
  000c6	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000cc	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000d1	f7 e9		 imul	 ecx
  000d3	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000d6	8b ca		 mov	 ecx, edx
  000d8	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000db	03 ca		 add	 ecx, edx
  000dd	03 ce		 add	 ecx, esi
$LN2@do_put:

; 1588 : 			}
; 1589 : 
; 1590 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  000df	8d 41 32	 lea	 eax, DWORD PTR [ecx+50]
  000e2	6a 00		 push	 0
  000e4	50		 push	 eax
  000e5	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  000e8	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  000ed	ff 77 14	 push	 DWORD PTR [edi+20]
  000f0	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  000f3	6a 00		 push	 0
  000f5	50		 push	 eax
  000f6	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  000f9	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000fe	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00102	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00105	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0010a	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  0010e	83 c4 08	 add	 esp, 8
  00111	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00116	56		 push	 esi
  00117	50		 push	 eax
  00118	ff 75 e0	 push	 DWORD PTR __Buf$[ebp+16]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _sprintf_s
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00121	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00125	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00128	8b 75 c8	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0012b	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  0012f	50		 push	 eax
  00130	51		 push	 ecx
  00131	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00134	57		 push	 edi
  00135	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00138	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0013b	56		 push	 esi
  0013c	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0013f	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  00144	83 c4 38	 add	 esp, 56			; 00000038H
  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0014e	8b 55 e4	 mov	 edx, DWORD PTR __Buf$[ebp+20]
  00151	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00154	72 28		 jb	 SHORT $LN107@do_put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00156	8b 4d d0	 mov	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00159	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015a	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0015c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00162	72 10		 jb	 SHORT $LN106@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00164	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00167	83 c2 23	 add	 edx, 35			; 00000023H
  0016a	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0016f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00172	77 3b		 ja	 SHORT $LN126@do_put
$LN106@do_put:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00174	52		 push	 edx
  00175	51		 push	 ecx
  00176	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017b	83 c4 08	 add	 esp, 8
$LN107@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0017e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00185	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00187	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0018e	c6 45 d0 00	 mov	 BYTE PTR __Buf$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1595 : 		}

  00192	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00195	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019c	59		 pop	 ecx
  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a2	33 cd		 xor	 ecx, ebp
  001a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 1c 00	 ret	 28			; 0000001cH
$LN126@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001af	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN124@do_put:
  001b4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -80						; size = 8
__Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1565 : 		{	// put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 54	 sub	 esp, 84			; 00000054H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 50	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1566 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1567 : 
; 1568 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00018	8d 44 24 08	 lea	 eax, DWORD PTR __Fmt$[esp+88]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00020	57		 push	 edi
  00021	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  00024	8b f9		 mov	 edi, ecx
  00026	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00029	ff 76 14	 push	 DWORD PTR [esi+20]
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu@
  00031	50		 push	 eax
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	50		 push	 eax
  0003c	8d 44 24 24	 lea	 eax, DWORD PTR __Buf$[esp+108]
  00040	6a 40		 push	 64			; 00000040H
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _sprintf_s
  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	50		 push	 eax
  0004c	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+100]
  00050	50		 push	 eax
  00051	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00054	56		 push	 esi
  00055	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00058	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0005b	53		 push	 ebx
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1569 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1570 : 				_Iosbase.flags()), _Val))));
; 1571 : 		}

  00062	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00066	83 c4 20	 add	 esp, 32			; 00000020H
  00069	8b c3		 mov	 eax, ebx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	33 cc		 xor	 ecx, esp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -80						; size = 8
__Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1555 : 		{	// put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 54	 sub	 esp, 84			; 00000054H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 50	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1556 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1557 : 
; 1558 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00018	8d 44 24 08	 lea	 eax, DWORD PTR __Fmt$[esp+88]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00020	57		 push	 edi
  00021	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  00024	8b f9		 mov	 edi, ecx
  00026	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00029	ff 76 14	 push	 DWORD PTR [esi+20]
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld@
  00031	50		 push	 eax
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	50		 push	 eax
  0003c	8d 44 24 24	 lea	 eax, DWORD PTR __Buf$[esp+108]
  00040	6a 40		 push	 64			; 00000040H
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _sprintf_s
  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	50		 push	 eax
  0004c	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+100]
  00050	50		 push	 eax
  00051	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00054	56		 push	 esi
  00055	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00058	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0005b	53		 push	 ebx
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1559 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1560 : 				_Iosbase.flags()), _Val))));
; 1561 : 		}

  00062	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00066	83 c4 20	 add	 esp, 32			; 00000020H
  00069	8b c3		 mov	 eax, ebx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	33 cc		 xor	 ecx, esp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -80						; size = 6
__Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1545 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 54	 sub	 esp, 84			; 00000054H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 50	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1546 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1547 : 
; 1548 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00018	8d 44 24 08	 lea	 eax, DWORD PTR __Fmt$[esp+88]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00020	57		 push	 edi
  00021	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00024	8b f9		 mov	 edi, ecx
  00026	ff 76 14	 push	 DWORD PTR [esi+20]
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu@
  0002e	50		 push	 eax
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	50		 push	 eax
  00039	8d 44 24 20	 lea	 eax, DWORD PTR __Buf$[esp+104]
  0003d	6a 40		 push	 64			; 00000040H
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _sprintf_s
  00045	50		 push	 eax
  00046	8d 44 24 2c	 lea	 eax, DWORD PTR __Buf$[esp+116]
  0004a	50		 push	 eax
  0004b	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004e	56		 push	 esi
  0004f	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00052	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00055	53		 push	 ebx
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1549 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1550 : 				_Iosbase.flags()), _Val))));
; 1551 : 		}

  0005c	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+144]
  00063	83 c4 30	 add	 esp, 48			; 00000030H
  00066	8b c3		 mov	 eax, ebx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	33 cc		 xor	 ecx, esp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -80						; size = 6
__Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1535 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 54	 sub	 esp, 84			; 00000054H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 50	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1536 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1537 : 
; 1538 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00018	8d 44 24 08	 lea	 eax, DWORD PTR __Fmt$[esp+88]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00020	57		 push	 edi
  00021	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00024	8b f9		 mov	 edi, ecx
  00026	ff 76 14	 push	 DWORD PTR [esi+20]
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld@
  0002e	50		 push	 eax
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	50		 push	 eax
  00039	8d 44 24 20	 lea	 eax, DWORD PTR __Buf$[esp+104]
  0003d	6a 40		 push	 64			; 00000040H
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _sprintf_s
  00045	50		 push	 eax
  00046	8d 44 24 2c	 lea	 eax, DWORD PTR __Buf$[esp+116]
  0004a	50		 push	 eax
  0004b	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004e	56		 push	 esi
  0004f	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00052	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00055	53		 push	 ebx
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1539 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1540 : 				_Iosbase.flags()), _Val))));
; 1541 : 		}

  0005c	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+144]
  00063	83 c4 30	 add	 esp, 48			; 00000030H
  00066	8b c3		 mov	 eax, ebx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	33 cc		 xor	 ecx, esp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T2 = -88						; size = 8
$T3 = -88						; size = 8
$T4 = -88						; size = 8
___$ReturnUdt$GSCopy$1$ = -80				; size = 4
_this$GSCopy$1$ = -76					; size = 4
__Fill$GSCopy$ = -72					; size = 1
$T5 = -68						; size = 4
$T6 = -64						; size = 24
$T7 = -64						; size = 24
__Str$8 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1506 : 		{	// put formatted bool to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 5d 14	 mov	 ebx, DWORD PTR __Iosbase$[ebp]
  00031	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]
  00034	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00037	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 1507 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  0003e	f7 43 14 00 40
	00 00		 test	 DWORD PTR [ebx+20], 16384 ; 00004000H
  00045	89 75 b0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], esi
  00048	88 45 b8	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  0004b	75 1a		 jne	 SHORT $LN2@do_put

; 1508 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  0004d	0f b6 45 1c	 movzx	 eax, BYTE PTR __Val$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	50		 push	 eax
  00054	ff 75 b8	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00057	53		 push	 ebx
  00058	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0005b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0005e	56		 push	 esi
  0005f	ff 52 24	 call	 DWORD PTR [edx+36]
  00062	e9 4b 02 00 00	 jmp	 $LN267@do_put
$LN2@do_put:

; 1511 : 			const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  0006e	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00071	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  00074	8b ce		 mov	 ecx, esi
  00076	89 75 ac	 mov	 DWORD PTR $T4[ebp+4], esi
  00079	8b 06		 mov	 eax, DWORD PTR [esi]
  0007b	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1511 : 			const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0007e	8d 45 a8	 lea	 eax, DWORD PTR $T4[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00081	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1511 : 			const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0008e	ba 01 00 00 00	 mov	 edx, 1
  00093	83 c4 04	 add	 esp, 4
  00096	89 55 bc	 mov	 DWORD PTR $T5[ebp], edx
  00099	8b f8		 mov	 edi, eax
  0009b	83 e2 fe	 and	 edx, -2			; fffffffeH
  0009e	89 55 bc	 mov	 DWORD PTR $T5[ebp], edx
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	85 f6		 test	 esi, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  000aa	74 15		 je	 SHORT $LN25@do_put

; 410  : 			delete _Ptr->_Decref();

  000ac	8b 16		 mov	 edx, DWORD PTR [esi]
  000ae	8b ce		 mov	 ecx, esi
  000b0	ff 52 08	 call	 DWORD PTR [edx+8]
  000b3	85 c0		 test	 eax, eax
  000b5	74 0a		 je	 SHORT $LN25@do_put
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	6a 01		 push	 1
  000bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bd	8b c8		 mov	 ecx, eax
  000bf	ff d2		 call	 edx
$LN25@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  000c1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$8[ebp+16], 0

; 1785 : 		_Myres(0)

  000c8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Str$8[ebp+20], 0

; 3976 : 		_My_data._Mysize = 0;

  000cf	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$8[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000d6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$8[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000dd	c6 45 d8 00	 mov	 BYTE PTR __Str$8[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1512 : 			basic_string<_Elem> _Str;

  000e1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1513 : 			if (_Val)

  000e8	80 7d 1c 00	 cmp	 BYTE PTR __Val$[ebp], 0
  000ec	74 61		 je	 SHORT $LN4@do_put

; 1514 : 				_Str.assign(_Punct_fac.truename());

  000ee	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 143  : 		return (do_truename());

  000f2	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  000f5	8b 07		 mov	 eax, DWORD PTR [edi]
  000f7	51		 push	 ecx
  000f8	8b cf		 mov	 ecx, edi
  000fa	ff 50 1c	 call	 DWORD PTR [eax+28]

; 1514 : 				_Str.assign(_Punct_fac.truename());

  000fd	50		 push	 eax
  000fe	8d 4d d8	 lea	 ecx, DWORD PTR __Str$8[ebp]

; 143  : 		return (do_truename());

  00101	c7 45 bc 02 00
	00 00		 mov	 DWORD PTR $T5[ebp], 2

; 1514 : 				_Str.assign(_Punct_fac.truename());

  00108	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0010d	b8 02 00 00 00	 mov	 eax, 2
  00112	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax
  00115	83 e0 fd	 and	 eax, -3			; fffffffdH
  00118	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax
  0011b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0011f	8b 55 d4	 mov	 edx, DWORD PTR $T7[ebp+20]
  00122	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00125	0f 82 89 00 00
	00		 jb	 $LN152@do_put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012b	8b 4d c0	 mov	 ecx, DWORD PTR $T7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0012e	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012f	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00131	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00137	72 71		 jb	 SHORT $LN151@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00139	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0013c	83 c2 23	 add	 edx, 35			; 00000023H
  0013f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00141	83 c0 fc	 add	 eax, -4			; fffffffcH
  00144	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00147	0f 87 85 01 00
	00		 ja	 $LN269@do_put
  0014d	eb 5b		 jmp	 SHORT $LN151@do_put
$LN4@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1516 : 				_Str.assign(_Punct_fac.falsename());

  0014f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 138  : 		return (do_falsename());

  00153	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  00156	8b 07		 mov	 eax, DWORD PTR [edi]
  00158	51		 push	 ecx
  00159	8b cf		 mov	 ecx, edi
  0015b	ff 50 18	 call	 DWORD PTR [eax+24]

; 1516 : 				_Str.assign(_Punct_fac.falsename());

  0015e	50		 push	 eax
  0015f	8d 4d d8	 lea	 ecx, DWORD PTR __Str$8[ebp]

; 138  : 		return (do_falsename());

  00162	c7 45 bc 04 00
	00 00		 mov	 DWORD PTR $T5[ebp], 4

; 1516 : 				_Str.assign(_Punct_fac.falsename());

  00169	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0016e	b8 04 00 00 00	 mov	 eax, 4
  00173	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax
  00176	83 e0 fb	 and	 eax, -5			; fffffffbH
  00179	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax
  0017c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00180	8b 55 d4	 mov	 edx, DWORD PTR $T6[ebp+20]
  00183	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00186	72 2c		 jb	 SHORT $LN152@do_put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8b 4d c0	 mov	 ecx, DWORD PTR $T6[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0018b	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018c	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0018e	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00194	72 14		 jb	 SHORT $LN151@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00196	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00199	83 c2 23	 add	 edx, 35			; 00000023H
  0019c	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019e	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a4	0f 87 2d 01 00
	00		 ja	 $LN270@do_put
$LN151@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  001aa	52		 push	 edx
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b1	83 c4 08	 add	 esp, 8
$LN152@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1519 : 				|| (size_t)_Iosbase.width() <= _Str.size()

  001b4	83 7b 24 00	 cmp	 DWORD PTR [ebx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  001b8	8b 73 20	 mov	 esi, DWORD PTR [ebx+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1519 : 				|| (size_t)_Iosbase.width() <= _Str.size()

  001bb	8b 45 e8	 mov	 eax, DWORD PTR __Str$8[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  001be	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0
  001c2	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH
  001c9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1519 : 				|| (size_t)_Iosbase.width() <= _Str.size()

  001d0	7c 0e		 jl	 SHORT $LN8@do_put
  001d2	7f 04		 jg	 SHORT $LN263@do_put
  001d4	85 f6		 test	 esi, esi
  001d6	74 08		 je	 SHORT $LN8@do_put
$LN263@do_put:
  001d8	3b f0		 cmp	 esi, eax
  001da	76 04		 jbe	 SHORT $LN8@do_put
  001dc	2b f0		 sub	 esi, eax
  001de	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  001e0	33 f6		 xor	 esi, esi
$LN9@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  001e2	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1522 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  001e5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001ea	83 f8 40	 cmp	 eax, 64			; 00000040H
  001ed	74 28		 je	 SHORT $LN264@do_put

; 1523 : 				{	// put leading fill
; 1524 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001ef	56		 push	 esi
  001f0	ff 75 b8	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  001f3	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  001f6	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  001f9	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  001fc	50		 push	 eax
  001fd	ff 75 b4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00200	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00205	83 c4 18	 add	 esp, 24			; 00000018H

; 1525 : 				_Fillcount = 0;

  00208	33 f6		 xor	 esi, esi
  0020a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020c	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  0020f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00212	89 55 10	 mov	 DWORD PTR __Dest$[ebp+4], edx
  00215	eb 06		 jmp	 SHORT $LN6@do_put
$LN264@do_put:

; 1522 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00217	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp+4]
  0021a	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
$LN6@do_put:

; 1527 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0021d	ff 75 e8	 push	 DWORD PTR __Str$8[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00220	83 7d ec 10	 cmp	 DWORD PTR __Str$8[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00224	8d 45 d8	 lea	 eax, DWORD PTR __Str$8[ebp]

; 1815 : 		if (_Large_string_engaged())

  00227	8b 7d d8	 mov	 edi, DWORD PTR __Str$8[ebp]
  0022a	0f 43 c7	 cmovae	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1527 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0022d	50		 push	 eax
  0022e	52		 push	 edx
  0022f	51		 push	 ecx
  00230	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  00233	50		 push	 eax
  00234	ff 75 b4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00237	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1529 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0023c	56		 push	 esi
  0023d	ff 75 b8	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00240	8b 75 b0	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00243	8b 08		 mov	 ecx, DWORD PTR [eax]
  00245	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00248	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0024b	50		 push	 eax
  0024c	51		 push	 ecx
  0024d	56		 push	 esi
  0024e	ff 75 b4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00251	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  00254	c7 43 20 00 00
	00 00		 mov	 DWORD PTR [ebx+32], 0
  0025b	c7 43 24 00 00
	00 00		 mov	 DWORD PTR [ebx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1529 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00262	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00267	83 c4 30	 add	 esp, 48			; 00000030H
  0026a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00271	8b 45 ec	 mov	 eax, DWORD PTR __Str$8[ebp+20]
  00274	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00277	72 27		 jb	 SHORT $LN249@do_put

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00279	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0027c	8b c7		 mov	 eax, edi

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0027e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00284	72 10		 jb	 SHORT $LN248@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00286	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]
  00289	83 c1 23	 add	 ecx, 35			; 00000023H
  0028c	2b c7		 sub	 eax, edi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0028e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00291	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00294	77 46		 ja	 SHORT $LN271@do_put
$LN248@do_put:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00296	51		 push	 ecx
  00297	57		 push	 edi
  00298	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0029d	83 c4 08	 add	 esp, 8
$LN249@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  002a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$8[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002a7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$8[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002ae	c6 45 d8 00	 mov	 BYTE PTR __Str$8[ebp], 0
$LN267@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1531 : 		}

  002b2	8b c6		 mov	 eax, esi
  002b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002be	59		 pop	 ecx
  002bf	5f		 pop	 edi
  002c0	5e		 pop	 esi
  002c1	5b		 pop	 ebx
  002c2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c5	33 cd		 xor	 ecx, ebp
  002c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cc	8b e5		 mov	 esp, ebp
  002ce	5d		 pop	 ebp
  002cf	c2 18 00	 ret	 24			; 00000018H
$LN269@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002d2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN270@do_put:
  002d7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN271@do_put:
  002dc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN266@do_put:
  002e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$4:
  00000	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN19@do_put
  0000c	83 65 bc fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN19@do_put:
  00018	c3		 ret	 0
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00019	8d 4d d8	 lea	 ecx, DWORD PTR __Str$8[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$5:
  00021	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp]
  00024	83 e0 02	 and	 eax, 2
  00027	0f 84 0c 00 00
	00		 je	 $LN48@do_put
  0002d	83 65 bc fd	 and	 DWORD PTR $T5[ebp], -3	; fffffffdH
  00031	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN48@do_put:
  00039	c3		 ret	 0
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$6:
  0003a	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp]
  0003d	83 e0 04	 and	 eax, 4
  00040	0f 84 0c 00 00
	00		 je	 $LN109@do_put
  00046	83 65 bc fb	 and	 DWORD PTR $T5[ebp], -5	; fffffffbH
  0004a	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0004d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN109@do_put:
  00052	c3		 ret	 0
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00073	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iosbase$ = 12						; size = 4
__Fill$ = 16						; size = 1
__Val$ = 20						; size = 4
__Dest$ = 24						; size = 8
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1469 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1470 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00006	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff 75 10	 push	 DWORD PTR __Fill$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Iosbase$[ebp]
  00011	ff 75 1c	 push	 DWORD PTR __Dest$[ebp+4]
  00014	ff 75 18	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	ff 50 20	 call	 DWORD PTR [eax+32]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1471 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1430 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1431 : 		}

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00040	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1431 : 		}

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 705  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 706  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 671  : 		{	// construct from stream buffer _Sb

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 670  : 		: _Failed(false), _Strbuf(_Sb)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Sb$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 672  : 		}

  00009	8b c1		 mov	 eax, ecx
  0000b	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1960 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000f	83 c4 04	 add	 esp, 4

; 1850 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00006	0f 95 c0	 setne	 al

; 1727 : 		}

  00009	c3		 ret	 0
?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;
; 4179 : 		}

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;
; 4179 : 		}

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1862 : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	0f 93 c0	 setae	 al

; 1826 : 		}

  00007	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;
; 1815 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN8@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1821 : 		}

  00008	c3		 ret	 0
$LN8@Myptr:

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00009	8b c1		 mov	 eax, ecx

; 1821 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;
; 1804 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN8@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1810 : 		}

  00008	c3		 ret	 0
$LN8@Myptr:

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00009	8b c1		 mov	 eax, ecx

; 1810 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2048 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2049 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2043 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2044 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2038 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2039 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2033 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2034 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1911 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1911 : 		}

  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3985 : 		this->_Orphan_all();
; 3986 : 		auto& _My_data = this->_Get_data();
; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 27		 jb	 SHORT $LN41@Tidy_deall
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN40@Tidy_deall

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN37@Tidy_deall

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN40@Tidy_deall:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN41@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 4000 : 		}

  00044	c3		 ret	 0
$LN37@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3975 : 		auto& _My_data = this->_Get_data();
; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00007	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0000e	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3981 : 		}

  00011	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 3968 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 0a		 jb	 SHORT $LN16@Eos
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00011	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3971 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN16@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00019	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3971 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
; 3310 : 		return (_Min_value(

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000d	0f 42 c1	 cmovb	 eax, ecx

; 34   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 3303 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2680 : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2681 : 		auto& _My_data = this->_Get_data();
; 2682 : 		if (_Count <= _My_data._Myres)

  00009	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 2a		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0001b	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN9@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001f	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2685 : 			_My_data._Mysize = _Count;

  00026	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00029	e8 00 00 00 00	 call	 _memset
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00031	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2695 : 		}

  00035	8b c6		 mov	 eax, esi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  00040	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00046	0f 87 d5 00 00
	00		 ja	 $LN136@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0004c	8b df		 mov	 ebx, edi
  0004e	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00051	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00057	76 07		 jbe	 SHORT $LN43@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00059	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005e	eb 1e		 jmp	 SHORT $LN42@assign
$LN43@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00060	8b d1		 mov	 edx, ecx
  00062	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00067	d1 ea		 shr	 edx, 1
  00069	2b c2		 sub	 eax, edx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	76 07		 jbe	 SHORT $LN44@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0006f	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00074	eb 08		 jmp	 SHORT $LN42@assign
$LN44@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00076	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00079	3b d8		 cmp	 ebx, eax
  0007b	0f 42 d8	 cmovb	 ebx, eax
$LN42@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0007e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00081	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00087	72 23		 jb	 SHORT $LN75@assign

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00089	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0008c	83 ca ff	 or	 edx, -1
  0008f	3b c1		 cmp	 eax, ecx
  00091	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0009d	85 c0		 test	 eax, eax
  0009f	74 7b		 je	 SHORT $LN117@assign

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000a1	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  000a4	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000a7	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000aa	eb 13		 jmp	 SHORT $LN134@assign
$LN75@assign:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000ac	85 c9		 test	 ecx, ecx
  000ae	74 0d		 je	 SHORT $LN76@assign

; 52   : 		return (::operator new(_Bytes));

  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b6	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000b9	8b c8		 mov	 ecx, eax
  000bb	eb 02		 jmp	 SHORT $LN134@assign
$LN76@assign:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000bd	33 c9		 xor	 ecx, ecx
$LN134@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000bf	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  000c6	89 4d 08	 mov	 DWORD PTR $T1[ebp], ecx
  000c9	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 3901 : 		_My_data._Myres = _New_capacity;

  000cc	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000cf	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000d4	8b 5d 08	 mov	 ebx, DWORD PTR $T1[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000da	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000dd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000e1	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e4	72 29		 jb	 SHORT $LN21@assign

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000e6	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e9	8b 06		 mov	 eax, DWORD PTR [esi]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN120@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 19		 ja	 SHORT $LN117@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN120@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN21@assign:
  0010f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00110	89 1e		 mov	 DWORD PTR [esi], ebx

; 2695 : 		}

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 08 00	 ret	 8
$LN117@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN136@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  00121	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN132@assign:
  00126	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z PROC ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator(), COMDAT
; _this$dead$ = ecx

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00007	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00008	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  0000b	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0001a	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2694 : 			}, _Ch));

  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z ENDP ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2675 : 		{	// assign [_Ptr, <null>)

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@assign:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@assign
  00017	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2677 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2658 : 		auto& _My_data = this->_Get_data();
; 2659 : 		if (_Count <= _My_data._Myres)

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0001b	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN9@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2662 : 			_My_data._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2672 : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 d3 00 00
	00		 ja	 $LN136@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00055	76 07		 jbe	 SHORT $LN43@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN42@assign
$LN43@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN44@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN42@assign
$LN44@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN42@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  0007f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00085	72 25		 jb	 SHORT $LN75@assign

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00087	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0008a	83 ca ff	 or	 edx, -1
  0008d	3b c1		 cmp	 eax, ecx
  0008f	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00098	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  0009a	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0009d	85 c9		 test	 ecx, ecx
  0009f	74 77		 je	 SHORT $LN117@assign

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000a1	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  000a4	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000a7	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000aa	eb 11		 jmp	 SHORT $LN134@assign
$LN75@assign:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000ac	85 c9		 test	 ecx, ecx
  000ae	74 0b		 je	 SHORT $LN76@assign

; 52   : 		return (::operator new(_Bytes));

  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b6	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000b9	eb 02		 jmp	 SHORT $LN134@assign
$LN76@assign:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000bb	33 c0		 xor	 eax, eax
$LN134@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000bd	57		 push	 edi
  000be	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  000c1	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c4	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  000c5	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 3901 : 		_My_data._Myres = _New_capacity;

  000c8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000cb	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000d0	8b 5d 0c	 mov	 ebx, DWORD PTR $T1[ebp]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000d6	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000d9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000dd	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e0	72 29		 jb	 SHORT $LN21@assign

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000e2	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e5	8b 06		 mov	 eax, DWORD PTR [esi]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000e7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ed	72 12		 jb	 SHORT $LN120@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000ef	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f2	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f5	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f7	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fa	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fd	77 19		 ja	 SHORT $LN117@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000ff	8b c2		 mov	 eax, edx
$LN120@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00101	51		 push	 ecx
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00108	83 c4 08	 add	 esp, 8
$LN21@assign:
  0010b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  0010c	89 1e		 mov	 DWORD PTR [esi], ebx

; 2672 : 		}

  0010e	8b c6		 mov	 eax, esi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
$LN117@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00118	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN136@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  0011d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN132@assign:
  00122	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$dead$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00018	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2671 : 			}, _Ptr));

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2596 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2597 : 		auto& _My_data = this->_Get_data();
; 2598 : 		const size_type _Old_size = _My_data._Mysize;
; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000d	8b c2		 mov	 eax, edx
  0000f	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00012	2b c1		 sub	 eax, ecx
  00014	3b d8		 cmp	 ebx, eax
  00016	77 2f		 ja	 SHORT $LN2@append

; 2600 : 			{
; 2601 : 			_My_data._Mysize = _Old_size + _Count;

  00018	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  0001b	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  0001e	8b c7		 mov	 eax, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00020	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00023	72 02		 jb	 SHORT $LN9@append
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00025	8b 07		 mov	 eax, DWORD PTR [edi]
$LN9@append:
  00027	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00028	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0002b	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0003a	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2605 : 			return (*this);

  0003e	8b c7		 mov	 eax, edi
  00040	5e		 pop	 esi
  00041	5f		 pop	 edi

; 2609 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2610 : 				const size_type _Count, const _Elem _Ch) {
; 2611 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 2613 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2614 : 			}, _Count, _Ch));
; 2615 : 		}

  00042	5b		 pop	 ebx
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@append:

; 2606 : 			}
; 2607 : 
; 2608 : 		return (_Reallocate_grow_by(_Count,

  00047	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0004a	c6 45 08 00	 mov	 BYTE PTR $T1[ebp], 0
  0004e	8b cf		 mov	 ecx, edi
  00050	53		 push	 ebx
  00051	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
  0005a	5f		 pop	 edi

; 2609 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2610 : 				const size_type _Count, const _Elem _Ch) {
; 2611 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 2613 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2614 : 			}, _Count, _Ch));
; 2615 : 		}

  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Count$ = 20						; size = 4
__Ch$ = 24						; size = 1
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z PROC ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator(), COMDAT
; _this$dead$ = ecx

; 2610 : 				const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2610 : 				const size_type _Count, const _Elem _Ch) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 10	 mov	 edi, DWORD PTR __Old_size$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 0c	 push	 DWORD PTR __Old_ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00015	0f be 45 18	 movsx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00019	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001b	8b 75 14	 mov	 esi, DWORD PTR __Count$[ebp]
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00029	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2614 : 			}, _Count, _Ch));

  0002f	5d		 pop	 ebp
  00030	c2 14 00	 ret	 20			; 00000014H
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z ENDP ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 1
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2569 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2570 : 		auto& _My_data = this->_Get_data();
; 2571 : 		const size_type _Old_size = _My_data._Mysize;
; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0000d	8b c2		 mov	 eax, edx
  0000f	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00012	2b c1		 sub	 eax, ecx
  00014	3b d8		 cmp	 ebx, eax
  00016	77 2d		 ja	 SHORT $LN2@append

; 2573 : 			{
; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  00018	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  0001b	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  0001e	8b c7		 mov	 eax, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00020	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00023	72 02		 jb	 SHORT $LN9@append
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00025	8b 07		 mov	 eax, DWORD PTR [edi]
$LN9@append:
  00027	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00028	53		 push	 ebx
  00029	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0002c	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _memmove
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00038	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2578 : 			return (*this);

  0003c	8b c7		 mov	 eax, edi
  0003e	5e		 pop	 esi
  0003f	5f		 pop	 edi

; 2582 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {
; 2584 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2586 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2587 : 			}, _Ptr, _Count));
; 2588 : 		}

  00040	5b		 pop	 ebx
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
$LN2@append:

; 2579 : 			}
; 2580 : 
; 2581 : 		return (_Reallocate_grow_by(_Count,

  00045	53		 push	 ebx
  00046	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00049	c6 45 0c 00	 mov	 BYTE PTR $T1[ebp], 0
  0004d	8b cf		 mov	 ecx, edi
  0004f	ff 75 0c	 push	 DWORD PTR $T1[ebp]
  00052	53		 push	 ebx
  00053	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
  00058	5f		 pop	 edi

; 2582 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {
; 2584 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2586 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2587 : 			}, _Ptr, _Count));
; 2588 : 		}

  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$dead$ = ecx

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 10	 mov	 edi, DWORD PTR __Old_size$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 0c	 push	 DWORD PTR __Old_ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00015	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00017	8b 75 18	 mov	 esi, DWORD PTR __Count$[ebp]
  0001a	56		 push	 esi
  0001b	ff 75 14	 push	 DWORD PTR __Ptr$[ebp]
  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _memcpy
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00027	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2587 : 			}, _Ptr, _Count));

  0002d	5d		 pop	 ebp
  0002e	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
__New_capacity$1$ = 8					; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2394 : 		{	// assign by copying data stored in _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00005	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0000f	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 1815 : 		if (_Large_string_engaged())

  00012	72 02		 jb	 SHORT $LN13@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00014	8b 36		 mov	 esi, DWORD PTR [esi]
$LN13@Construct_:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00016	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00019	73 17		 jae	 SHORT $LN2@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0001b	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0001e	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  00021	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  00024	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN2@Construct_:

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00032	8b c3		 mov	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00034	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00039	83 c8 0f	 or	 eax, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 47 c1	 cmova	 eax, ecx
  00041	89 45 08	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00044	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00047	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004d	72 23		 jb	 SHORT $LN46@Construct_

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0004f	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00052	83 ca ff	 or	 edx, -1
  00055	3b c1		 cmp	 eax, ecx
  00057	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00060	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00063	85 c0		 test	 eax, eax
  00065	74 3e		 je	 SHORT $LN55@Construct_

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00067	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0006a	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0006d	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00070	eb 13		 jmp	 SHORT $LN45@Construct_
$LN46@Construct_:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00072	85 c9		 test	 ecx, ecx
  00074	74 0d		 je	 SHORT $LN47@Construct_

; 52   : 		return (::operator new(_Bytes));

  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0007f	8b c8		 mov	 ecx, eax
  00081	eb 02		 jmp	 SHORT $LN45@Construct_
$LN47@Construct_:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00083	33 c9		 xor	 ecx, ecx
$LN45@Construct_:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00085	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00088	89 0f		 mov	 DWORD PTR [edi], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0008a	50		 push	 eax
  0008b	56		 push	 esi
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2415 : 		_My_data._Myres = _New_capacity;

  00092	8b 45 08	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  00098	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  0009b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
$LN55@Construct_:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000a5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN79@Construct_:
  000aa	cc		 int	 3
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2344 : 		{	// assign by stealing _Right's buffer, memcpy optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2345 : 			// pre: this != &_Right
; 2346 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2347 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2348 : 		auto& _Right_data = _Right._Get_data();
; 2349 : 
; 2350 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2351 : 		if (_Right_data._Large_string_engaged())
; 2352 : 			{	// take ownership of _Right's iterators along with its buffer
; 2353 : 			this->_Swap_all(_Right);
; 2354 : 			}
; 2355 : 		else
; 2356 : 			{
; 2357 : 			_Right._Orphan_all();
; 2358 : 			}
; 2359 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2360 : 
; 2361 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2362 : 			+ _Memcpy_move_offset;
; 2363 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2364 : 			+ _Memcpy_move_offset;
; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00009	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0000c	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00011	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00016	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001d	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00024	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2367 : 		}

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 401  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 402  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00007	74 47		 je	 SHORT $LN35@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00009	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 09		 je	 SHORT $LN4@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00012	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00019	eb 0a		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0001b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	03 11		 add	 edx, DWORD PTR [ecx]
$LN5@Tidy:

; 220  : 		return (*_IGfirst);

  00025	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0002c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00032	72 12		 jb	 SHORT $LN34@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00034	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00037	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003a	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00042	77 4f		 ja	 SHORT $LN31@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00044	8b c1		 mov	 eax, ecx
$LN34@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00046	52		 push	 edx
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004d	83 c4 08	 add	 esp, 8
$LN35@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00050	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00059	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00062	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 292  : 		*_IPfirst = _First;

  0006b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  00074	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00077	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  0007d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00080	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 412  : 		_Mystate &= ~_Allocated;

  00086	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  0008a	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00091	5e		 pop	 esi

; 413  : 		}

  00092	c3		 ret	 0
$LN31@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00093	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN42@Tidy:
  00098	cc		 int	 3
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 95   : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00036	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00040	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00047	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 108  : 		return (_Result);

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  00054	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0005b	f6 c1 02	 test	 cl, 2
  0005e	75 1b		 jne	 SHORT $LN2@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00060	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 97   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != nullptr)

  00063	8b 18		 mov	 ebx, DWORD PTR [eax]
  00065	85 db		 test	 ebx, ebx
  00067	74 12		 je	 SHORT $LN2@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 230  : 		return (*_IPfirst);

  00069	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0006c	3b 5f 38	 cmp	 ebx, DWORD PTR [edi+56]
  0006f	0f 42 5f 38	 cmovb	 ebx, DWORD PTR [edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 230  : 		return (*_IPfirst);

  00073	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 100  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));

  00075	2b da		 sub	 ebx, edx
  00077	53		 push	 ebx
  00078	52		 push	 edx
  00079	eb 1e		 jmp	 SHORT $LN45@str
$LN2@str:

; 102  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)

  0007b	f6 c1 04	 test	 cl, 4
  0007e	75 20		 jne	 SHORT $LN42@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00080	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 102  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)

  00083	8b 10		 mov	 edx, DWORD PTR [eax]
  00085	85 d2		 test	 edx, edx
  00087	74 17		 je	 SHORT $LN42@str
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00089	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]

; 240  : 		return (*_IGnext + *_IGcount);

  0008e	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00091	8b 00		 mov	 eax, DWORD PTR [eax]
  00093	2b c1		 sub	 eax, ecx
  00095	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 105  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Mysb::egptr() - _Base));

  00097	50		 push	 eax
  00098	51		 push	 ecx
$LN45@str:

; 109  : 		}

  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN42@str:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN7@str
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@str:
  00018	c3		 ret	 0
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$dead$ = 8					; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 33   : 		{	// construct empty character buffer from mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 23   : 		: _Plocale(new locale)

  0002a	6a 08		 push	 8

; 24   : 		{	// construct with no buffers

  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  00037	6a 01		 push	 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 23   : 		: _Plocale(new locale)

  00039	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  0003b	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 318  : 		_IPfirst = &_Pfirst;

  00043	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00046	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 23   : 		: _Plocale(new locale)

  00049	89 77 34	 mov	 DWORD PTR [edi+52], esi

; 317  : 		_IGfirst = &_Gfirst;

  0004c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  0004f	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 319  : 		_IGnext = &_Gnext;

  00052	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00055	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00058	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 320  : 		_IPnext = &_Pnext;

  0005b	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0005e	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 321  : 		_IGcount = &_Gcount;

  00061	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00064	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 322  : 		_IPcount = &_Pcount;

  00067	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  0006a	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 292  : 		*_IPfirst = _First;

  0006d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 293  : 		*_IPnext = _First;

  00073	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00076	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  0007c	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0007f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 251  : 		*_IGfirst = _First;

  00085	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00088	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  0008e	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00091	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00097	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0009a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream

; 33   : 		{	// construct empty character buffer from mode

  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a7	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000ad	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  000b4	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 34   : 		}

  000bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c2	8b c7		 mov	 eax, edi
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 27		 jb	 SHORT $LN6@allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00011	83 ca ff	 or	 edx, -1
  00014	3b c1		 cmp	 eax, ecx
  00016	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001f	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00021	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00024	85 c9		 test	 ecx, ecx
  00026	74 24		 je	 SHORT $LN15@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00028	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0002e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN6@allocate:

; 188  : 	if (_Bytes != 0)

  00035	85 c9		 test	 ecx, ecx
  00037	74 0d		 je	 SHORT $LN7@allocate

; 52   : 		return (::operator new(_Bytes));

  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN7@allocate:

; 193  : 	return (nullptr);

  00046	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN15@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@allocate:
  00051	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00009	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000f	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00011	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00014	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	77 10		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00021	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00023	51		 push	 ecx
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8

; 993  : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00036	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 8
_this$ = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Strbuf$ = 8						; size = 4
$T5 = 11						; size = 1
_$initVBases$dead$ = 12					; size = 4
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 803  : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 45   : 		{	// construct from stream buffer pointer

  00034	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 45   : 		{	// construct from stream buffer pointer

  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00044	8b 03		 mov	 eax, DWORD PTR [ebx]
  00046	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00049	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  0004c	89 44 1a fc	 mov	 DWORD PTR [edx+ebx-4], eax

; 46   : 		_Myios::init(_Strbuf, _Isstd);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]
  00052	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00059	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00060	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00063	03 fb		 add	 edi, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00065	8b cf		 mov	 ecx, edi

; 549  : 		_Ploc = nullptr;

  00067	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 550  : 		_Stdstr = 0;

  0006e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 551  : 		_Except = goodbit;

  00075	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 552  : 		_Fmtfl = (fmtflags)(skipws | dec);

  0007c	c7 47 14 01 02
	00 00		 mov	 DWORD PTR [edi+20], 513	; 00000201H

; 553  : 		_Prec = 6;

  00083	c7 47 18 06 00
	00 00		 mov	 DWORD PTR [edi+24], 6
  0008a	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 554  : 		_Wide = 0;

  00091	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00098	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 555  : 		_Arr = nullptr;

  0009f	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 556  : 		_Calls = nullptr;

  000a6	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 318  : 		clear(_State, false);

  000ad	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 558  : 		_Ploc = new locale;

  000b2	6a 08		 push	 8
  000b4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b9	83 c4 04	 add	 esp, 4
  000bc	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  000be	6a 01		 push	 1
  000c0	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000c5	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000c8	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  000cb	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 558  : 		_Ploc = new locale;

  000ce	89 77 30	 mov	 DWORD PTR [edi+48], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  000d1	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 166  : 		_Tiestr = nullptr;

  000d4	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000db	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000e2	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  000e5	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  000e8	8b ce		 mov	 ecx, esi
  000ea	89 75 e8	 mov	 DWORD PTR $T2[ebp+4], esi
  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000f2	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000f5	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR $T3[ebp], 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00102	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2566 : 		return (do_widen(_Byte));

  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	6a 20		 push	 32			; 00000020H
  00109	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0010c	8b c8		 mov	 ecx, eax
  0010e	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00110	ba 04 00 00 00	 mov	 edx, 4
  00115	88 45 0b	 mov	 BYTE PTR $T5[ebp], al
  00118	89 55 f0	 mov	 DWORD PTR $T3[ebp], edx
  0011b	83 e2 fb	 and	 edx, -5			; fffffffbH
  0011e	89 55 f0	 mov	 DWORD PTR $T3[ebp], edx
  00121	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 410  : 			delete _Ptr->_Decref();

  00125	8b ce		 mov	 ecx, esi
  00127	8b 16		 mov	 edx, DWORD PTR [esi]
  00129	ff 52 08	 call	 DWORD PTR [edx+8]
  0012c	85 c0		 test	 eax, eax
  0012e	74 0a		 je	 SHORT $LN57@basic_iost
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	6a 01		 push	 1
  00134	8b 11		 mov	 edx, DWORD PTR [ecx]
  00136	8b c8		 mov	 ecx, eax
  00138	ff d2		 call	 edx
$LN57@basic_iost:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 169  : 		if (_Mystrbuf == nullptr)

  0013a	83 7f 38 00	 cmp	 DWORD PTR [edi+56], 0
  0013e	8a 45 0b	 mov	 al, BYTE PTR $T5[ebp]
  00141	88 47 40	 mov	 BYTE PTR [edi+64], al
  00144	75 10		 jne	 SHORT $LN24@basic_iost

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00146	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00149	8b cf		 mov	 ecx, edi
  0014b	83 c8 04	 or	 eax, 4
  0014e	6a 00		 push	 0
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN24@basic_iost:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 801  : 		: _Myis(_Strbuf, false),

  00156	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5

; 802  : 			_Myos(_Noinit, false)

  0015d	8d 53 10	 lea	 edx, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 58   : 		{	// construct uninitialized

  00160	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 802  : 			_Myos(_Noinit, false)

  00162	89 55 08	 mov	 DWORD PTR $T4[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 58   : 		{	// construct uninitialized

  00165	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00168	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0016f	8b 02		 mov	 eax, DWORD PTR [edx]
  00171	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00174	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00177	89 44 11 fc	 mov	 DWORD PTR [ecx+edx-4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 802  : 			_Myos(_Noinit, false)

  0017b	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8

; 803  : 		{	// construct from stream buffer pointer

  00182	8b 03		 mov	 eax, DWORD PTR [ebx]
  00184	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00187	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  0018e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00190	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00193	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  00196	89 44 19 fc	 mov	 DWORD PTR [ecx+ebx-4], eax

; 804  : 		}

  0019a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a1	8b c3		 mov	 eax, ebx
  001a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ad	59		 pop	 ecx
  001ae	5f		 pop	 edi
  001af	5e		 pop	 esi
  001b0	5b		 pop	 ebx
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$7:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00003	83 e0 04	 and	 eax, 4
  00006	0f 84 0c 00 00
	00		 je	 $LN49@basic_iost
  0000c	83 65 f0 fb	 and	 DWORD PTR $T3[ebp], -5	; fffffffbH
  00010	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN49@basic_iost:
  00018	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1:
  00019	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 18	 add	 ecx, 24			; 00000018H
  0001f	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$2:
  00024	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 18	 add	 ecx, 24			; 00000018H
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 313  : 		}

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 313  : 		}

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 306  : 		--*_IPcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 307  : 		return ((*_IPnext)++);

  00005	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 308  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 298  : 		{	// set pointers for write buffer, extended version

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 299  : 		*_IPfirst = _First;

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi

; 300  : 		*_IPnext = _Next;
; 301  : 		*_IPcount = (int)(_Last - _Next);

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	89 02		 mov	 DWORD PTR [edx], eax
  0000f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00015	2b f2		 sub	 esi, edx
  00017	89 10		 mov	 DWORD PTR [eax], edx
  00019	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	5e		 pop	 esi

; 302  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 285  : 		{	// alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 286  : 		*_IPcount -= _Off;

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 287  : 		*_IPnext += _Off;

  0000b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 288  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 281  : 		return (*_IGnext != nullptr ? *_IGcount : 0);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Gnavail
  00008	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 282  : 		}

  0000e	c3		 ret	 0
$LN3@Gnavail:

; 281  : 		return (*_IGnext != nullptr ? *_IGcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 282  : 		}

  00012	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 269  : 		--*_IGcount;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 270  : 		return ((*_IGnext)++);

  00005	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 271  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 258  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 259  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 250  : 		{	// set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  : 		*_IGfirst = _First;

  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi

; 252  : 		*_IGnext = _Next;
; 253  : 		*_IGcount = (int)(_Last - _Next);

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	89 02		 mov	 DWORD PTR [edx], eax
  0000f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00015	2b f2		 sub	 esi, edx
  00017	89 10		 mov	 DWORD PTR [eax], edx
  00019	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	5e		 pop	 esi

; 254  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 244  : 		{	// alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  : 		*_IGcount -= _Off;

  00003	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 246  : 		*_IGnext += _Off;

  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 247  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 240  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 241  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 235  : 		return (*_IPnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 236  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 225  : 		return (*_IGnext);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 226  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 220  : 		return (*_IGfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 221  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 176  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 543  : 	__CLR_OR_THIS_CALL ios_base()

  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 177  : 		{	// default constructor, do nothing

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 178  : 		}

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00040	8b c1		 mov	 eax, ecx
  00042	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00045	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004c	59		 pop	 ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
__ehhandler$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 108  : 		return (_Fillch);

  00000	8a 41 40	 mov	 al, BYTE PTR [ecx+64]

; 109  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 87   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 88   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		{	// merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 		clear(rdstate() | _State, _Reraise);

  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	0b 55 08	 or	 edx, DWORD PTR __State$[ebp]

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00009	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  0000c	8b c2		 mov	 eax, edx
  0000e	83 c8 04	 or	 eax, 4
  00011	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00015	0f 45 c2	 cmovne	 eax, edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 56   : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 53   : 			// TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old basic_filebuf
; 54   : 			// would set _Fpos.
; 55   : 		return (_Myoff + _Fpos);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]
  00005	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00008	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 56   : 		}

  0000b	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 33   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	89 01		 mov	 DWORD PTR [ecx], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0000e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 34   : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00021	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1430 : 		{	// destroy the object

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1431 : 		}

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0004d	74 0b		 je	 SHORT $LN12@scalar
  0004f	6a 08		 push	 8
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0005a	8b c6		 mov	 eax, esi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 248  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 249  : 		return (string_type(_Truename));

  0002c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0002f	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00034	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00045	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL29@do_truenam:

; 462  : 		return (__builtin_strlen(_First));

  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	41		 inc	 ecx
  0004b	84 c0		 test	 al, al
  0004d	75 f9		 jne	 SHORT $LL29@do_truenam
  0004f	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 249  : 		return (string_type(_Truename));

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00068	8b c6		 mov	 eax, esi

; 250  : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@do_truenam
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@do_truenam:
  00018	c3		 ret	 0
__ehhandler$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 243  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 244  : 		return (string_type(_Falsename));

  0002c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0002f	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00034	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00045	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL29@do_falsena:

; 462  : 		return (__builtin_strlen(_First));

  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	41		 inc	 ecx
  0004b	84 c0		 test	 al, al
  0004d	75 f9		 jne	 SHORT $LL29@do_falsena
  0004f	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 244  : 		return (string_type(_Falsename));

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00068	8b c6		 mov	 eax, esi

; 245  : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@do_falsena
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@do_falsena:
  00018	c3		 ret	 0
__ehhandler$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 238  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 239  : 		return (string(_Grouping));

  0002c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  0002f	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00034	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00045	c6 06 00	 mov	 BYTE PTR [esi], 0
$LL29@do_groupin:

; 462  : 		return (__builtin_strlen(_First));

  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	41		 inc	 ecx
  0004b	84 c0		 test	 al, al
  0004d	75 f9		 jne	 SHORT $LL29@do_groupin
  0004f	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 239  : 		return (string(_Grouping));

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00068	8b c6		 mov	 eax, esi

; 240  : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@do_groupin
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@do_groupin:
  00018	c3		 ret	 0
__ehhandler$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 234  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 235  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 229  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 230  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 174  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$numpunct@D@std@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 255  : 		_CSTD free((void *)_Grouping);

  00036	ff 76 08	 push	 DWORD PTR [esi+8]
  00039	e8 00 00 00 00	 call	 _free

; 256  : 		_CSTD free((void *)_Falsename);

  0003e	ff 76 10	 push	 DWORD PTR [esi+16]
  00041	e8 00 00 00 00	 call	 _free

; 257  : 		_CSTD free((void *)_Truename);

  00046	ff 76 14	 push	 DWORD PTR [esi+20]
  00049	e8 00 00 00 00	 call	 _free
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 		}

  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  0005e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00065	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 176  : 		}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$numpunct@D@std@@MAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??1?$numpunct@D@std@@MAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??1?$numpunct@D@std@@MAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$numpunct@D@std@@MAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 142  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 143  : 		return (do_truename());

  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0002f	ff 50 1c	 call	 DWORD PTR [eax+28]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : 		}

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@truename
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@truename:
  00018	c3		 ret	 0
__ehhandler$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 137  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 138  : 		return (do_falsename());

  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0002f	ff 50 18	 call	 DWORD PTR [eax+24]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 139  : 		}

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@falsename
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@falsename:
  00018	c3		 ret	 0
__ehhandler$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 0c		 je	 SHORT $LN4@Sentry_bas
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00036	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  0003b	75 0f		 jne	 SHORT $LN14@Sentry_bas
$LN4@Sentry_bas:

; 108  : 			}

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN14@Sentry_bas:

; 107  : 				_Myostr.rdbuf()->_Unlock();

  0004c	ff d0		 call	 eax
  0004e	eb ed		 jmp	 SHORT $LN4@Sentry_bas
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 			: _Myostr(_Ostr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]

; 99   : 			{	// lock the stream buffer, if there

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00014	85 c9		 test	 ecx, ecx
  00016	74 0c		 je	 SHORT $LN12@Sentry_bas
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001d	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
  00022	75 07		 jne	 SHORT $LN15@Sentry_bas
$LN12@Sentry_bas:

; 102  : 			}

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN15@Sentry_bas:

; 101  : 				_Myostr.rdbuf()->_Lock();

  0002b	ff d0		 call	 eax
  0002d	eb f5		 jmp	 SHORT $LN12@Sentry_bas
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1828 : 		{	// put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1829 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  00004	8b 75 14	 mov	 esi, DWORD PTR __Dest$[ebp+4]
  00007	57		 push	 edi
  00008	8b 7d 1c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	85 ff		 test	 edi, edi
  0000d	74 4c		 je	 SHORT $LN3@Rep
  0000f	53		 push	 ebx
  00010	8a 5d 18	 mov	 bl, BYTE PTR __Ch$[ebp]
$LL4@Rep:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00013	85 f6		 test	 esi, esi
  00015	74 3a		 je	 SHORT $LN12@Rep

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00017	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 1d		 je	 SHORT $LN16@Rep
  0001f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 198  : 		return (0 < _Pnavail()

  00024	85 c0		 test	 eax, eax
  00026	7e 14		 jle	 SHORT $LN16@Rep

; 306  : 		--*_IPcount;

  00028	48		 dec	 eax
  00029	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		return ((*_IPnext)++);

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  00035	88 1a		 mov	 BYTE PTR [edx], bl
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00037	0f b6 c3	 movzx	 eax, bl
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0003a	eb 0d		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00043	0f b6 c3	 movzx	 eax, bl
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00046	50		 push	 eax
  00047	ff d2		 call	 edx
$LN17@Rep:

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00049	8b 75 14	 mov	 esi, DWORD PTR __Dest$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  0004c	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  0004f	75 04		 jne	 SHORT $LN2@Rep
$LN12@Rep:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

  00051	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Rep:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1829 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  00055	83 ef 01	 sub	 edi, 1
  00058	75 b9		 jne	 SHORT $LL4@Rep
  0005a	5b		 pop	 ebx
$LN3@Rep:

; 1830 : 			*_Dest = _Ch;
; 1831 : 		return (_Dest);

  0005b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00061	5f		 pop	 edi
  00062	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00065	89 08		 mov	 DWORD PTR [eax], ecx
  00067	5e		 pop	 esi

; 1832 : 		}

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Ch$1$ = 31						; size = 1
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1820 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1821 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  00004	8b 75 14	 mov	 esi, DWORD PTR __Dest$[ebp+4]
  00007	57		 push	 edi
  00008	8b 7d 1c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	85 ff		 test	 edi, edi
  0000d	74 55		 je	 SHORT $LN3@Put
  0000f	53		 push	 ebx
  00010	8b 5d 18	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LL4@Put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00013	85 f6		 test	 esi, esi
  00015	74 42		 je	 SHORT $LN12@Put

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00017	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  0001a	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0001c	88 4d 1f	 mov	 BYTE PTR __Ch$1$[ebp], cl

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  0001f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00022	74 20		 je	 SHORT $LN16@Put
  00024	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  00029	85 c0		 test	 eax, eax
  0002b	7e 17		 jle	 SHORT $LN16@Put

; 306  : 		--*_IPcount;

  0002d	48		 dec	 eax
  0002e	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  00030	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00038	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  0003a	8a 45 1f	 mov	 al, BYTE PTR __Ch$1$[ebp]
  0003d	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  0003f	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00042	eb 0d		 jmp	 SHORT $LN17@Put
$LN16@Put:
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00049	0f b6 c1	 movzx	 eax, cl
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0004c	8b ce		 mov	 ecx, esi
  0004e	50		 push	 eax
  0004f	ff d2		 call	 edx
$LN17@Put:

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00051	8b 75 14	 mov	 esi, DWORD PTR __Dest$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00054	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00057	75 04		 jne	 SHORT $LN2@Put
$LN12@Put:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

  00059	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Put:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1821 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  0005d	43		 inc	 ebx
  0005e	83 ef 01	 sub	 edi, 1
  00061	75 b0		 jne	 SHORT $LL4@Put
  00063	5b		 pop	 ebx
$LN3@Put:

; 1822 : 			*_Dest = *_Ptr;
; 1823 : 		return (_Dest);

  00064	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00067	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0006a	5f		 pop	 edi
  0006b	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0006e	89 08		 mov	 DWORD PTR [eax], ecx
  00070	5e		 pop	 esi

; 1824 : 		}

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -100				; size = 4
__Iosbase$GSCopy$1$ = -96				; size = 4
$T2 = -92						; size = 8
$T3 = -92						; size = 8
$T4 = -92						; size = 8
$T5 = -92						; size = 8
$T6 = -92						; size = 8
$T7 = -92						; size = 8
$T8 = -92						; size = 8
$T9 = -92						; size = 8
__Prefix$1$ = -84					; size = 4
__Punct_fac$1$ = -80					; size = 4
__Ctype_fac$1$ = -80					; size = 4
$T10 = -80						; size = 1
$T11 = -76						; size = 4
$T12 = -72						; size = 4
__Buf$GSCopy$1$ = -72					; size = 4
tv1142 = -72						; size = 4
__Kseparator$13 = -72					; size = 1
__Kseparator$1$ = -65					; size = 1
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1761 : 		{	// put formatted integer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 24	 mov	 edi, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 55 18	 mov	 edx, DWORD PTR __Iosbase$[ebp]
  00034	8b 4d 20	 mov	 ecx, DWORD PTR __Buf$[ebp]
  00037	89 45 9c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 55 a0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], edx
  0003d	89 4d b8	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], ecx
  00040	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T11[ebp], 0

; 1762 : 		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  00047	85 ff		 test	 edi, edi
  00049	74 11		 je	 SHORT $LN14@Iput
  0004b	8a 01		 mov	 al, BYTE PTR [ecx]
  0004d	3c 2b		 cmp	 al, 43			; 0000002bH
  0004f	74 04		 je	 SHORT $LN13@Iput
  00051	3c 2d		 cmp	 al, 45			; 0000002dH
  00053	75 07		 jne	 SHORT $LN14@Iput
$LN13@Iput:
  00055	be 01 00 00 00	 mov	 esi, 1
  0005a	eb 02		 jmp	 SHORT $LN295@Iput
$LN14@Iput:
  0005c	33 f6		 xor	 esi, esi
$LN295@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  0005e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1765 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  00061	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  00066	89 75 ac	 mov	 DWORD PTR __Prefix$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1765 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  00069	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  0006e	75 20		 jne	 SHORT $LN4@Iput
  00070	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00073	3b c7		 cmp	 eax, edi
  00075	77 19		 ja	 SHORT $LN4@Iput
  00077	80 3c 31 30	 cmp	 BYTE PTR [ecx+esi], 48	; 00000030H
  0007b	75 13		 jne	 SHORT $LN4@Iput
  0007d	8a 4c 31 01	 mov	 cl, BYTE PTR [ecx+esi+1]
  00081	80 f9 78	 cmp	 cl, 120			; 00000078H
  00084	74 05		 je	 SHORT $LN5@Iput
  00086	80 f9 58	 cmp	 cl, 88			; 00000058H
  00089	75 05		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1766 : 			{
; 1767 : 			_Prefix += 2;

  0008b	8b f0		 mov	 esi, eax
  0008d	89 75 ac	 mov	 DWORD PTR __Prefix$1$[ebp], esi
$LN4@Iput:

; 1770 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00097	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  0009a	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  0009d	8b cb		 mov	 ecx, ebx
  0009f	89 5d a8	 mov	 DWORD PTR $T9[ebp+4], ebx
  000a2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a4	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1770 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000a7	8d 45 a4	 lea	 eax, DWORD PTR $T9[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000aa	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR $T11[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1770 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000b7	89 45 b0	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000ba	83 c4 04	 add	 esp, 4
  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	89 45 b4	 mov	 DWORD PTR $T11[ebp], eax
  000c5	83 e0 fe	 and	 eax, -2			; fffffffeH
  000c8	89 45 b4	 mov	 DWORD PTR $T11[ebp], eax
  000cb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d2	85 db		 test	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  000d4	74 13		 je	 SHORT $LN33@Iput

; 410  : 			delete _Ptr->_Decref();

  000d6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d8	8b cb		 mov	 ecx, ebx
  000da	ff 50 08	 call	 DWORD PTR [eax+8]
  000dd	8b c8		 mov	 ecx, eax
  000df	85 c9		 test	 ecx, ecx
  000e1	74 06		 je	 SHORT $LN33@Iput
  000e3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e5	6a 01		 push	 1
  000e7	ff 10		 call	 DWORD PTR [eax]
$LN33@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1771 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

  000e9	6a 00		 push	 0
  000eb	57		 push	 edi
  000ec	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  000ef	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  000fb	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000fe	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00102	8b 5d b0	 mov	 ebx, DWORD PTR __Ctype_fac$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  00105	0f 43 4d d8	 cmovae	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00109	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1772 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  0010a	8b 4d b8	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  0010d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010f	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1772 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  00112	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00115	50		 push	 eax
  00116	51		 push	 ecx
  00117	8b cb		 mov	 ecx, ebx
  00119	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1774 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0011b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  0011f	8b 55 a0	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00122	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00125	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00128	89 4d a8	 mov	 DWORD PTR $T8[ebp+4], ecx
  0012b	89 4d b8	 mov	 DWORD PTR $T12[ebp], ecx

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  0012e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00130	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1774 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00133	8d 45 a4	 lea	 eax, DWORD PTR $T8[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00136	c7 45 b4 02 00
	00 00		 mov	 DWORD PTR $T11[ebp], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1774 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00143	8b d8		 mov	 ebx, eax
  00145	83 c4 04	 add	 esp, 4
  00148	b8 02 00 00 00	 mov	 eax, 2
  0014d	89 5d b0	 mov	 DWORD PTR __Punct_fac$1$[ebp], ebx
  00150	89 45 b4	 mov	 DWORD PTR $T11[ebp], eax
  00153	83 e0 fd	 and	 eax, -3			; fffffffdH
  00156	89 45 b4	 mov	 DWORD PTR $T11[ebp], eax
  00159	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0015d	8b 4d b8	 mov	 ecx, DWORD PTR $T12[ebp]
  00160	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  00162	74 11		 je	 SHORT $LN59@Iput

; 410  : 			delete _Ptr->_Decref();

  00164	8b 01		 mov	 eax, DWORD PTR [ecx]
  00166	ff 50 08	 call	 DWORD PTR [eax+8]
  00169	8b c8		 mov	 ecx, eax
  0016b	85 c9		 test	 ecx, ecx
  0016d	74 06		 je	 SHORT $LN59@Iput
  0016f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00171	6a 01		 push	 1
  00173	ff 10		 call	 DWORD PTR [eax]
$LN59@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1775 : 		const string _Grouping = _Punct_fac.grouping();

  00175	8d 45 c0	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00178	8b cb		 mov	 ecx, ebx
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  00180	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00184	8d 5d c0	 lea	 ebx, DWORD PTR __Grouping$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00187	83 7d d4 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H

; 1815 : 		if (_Large_string_engaged())

  0018b	0f 43 5d c0	 cmovae	 ebx, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1777 : 		if (*_Pg != CHAR_MAX && '\0' < *_Pg)

  0018f	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00191	80 f9 7f	 cmp	 cl, 127			; 0000007fH
  00194	0f 84 c8 00 00
	00		 je	 $LN3@Iput
  0019a	84 c9		 test	 cl, cl
  0019c	0f 8e c0 00 00
	00		 jle	 $LN3@Iput
  001a2	8b 55 b0	 mov	 edx, DWORD PTR __Punct_fac$1$[ebp]
  001a5	8b 02		 mov	 eax, DWORD PTR [edx]
  001a7	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  001aa	89 75 b8	 mov	 DWORD PTR tv1142[ebp], esi
  001ad	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7?$numpunct@D@std@@6B@
  001b2	0f 85 9e 02 00
	00		 jne	 $LN81@Iput

; 234  : 		return (_Kseparator);

  001b8	8a 42 0d	 mov	 al, BYTE PTR [edx+13]
$LN296@Iput:

; 1781 : 				&& (size_t)*_Pg < _Count - _Prefix)

  001bb	8b 75 ac	 mov	 esi, DWORD PTR __Prefix$1$[ebp]
  001be	88 45 bf	 mov	 BYTE PTR __Kseparator$1$[ebp], al
  001c1	88 45 b8	 mov	 BYTE PTR __Kseparator$13[ebp], al
  001c4	80 f9 7f	 cmp	 cl, 127			; 0000007fH
  001c7	0f 84 95 00 00
	00		 je	 $LN3@Iput
  001cd	0f 1f 00	 npad	 3
$LL2@Iput:
  001d0	84 c9		 test	 cl, cl
  001d2	0f 8e 8a 00 00
	00		 jle	 $LN3@Iput
  001d8	8b c7		 mov	 eax, edi
  001da	0f be c9	 movsx	 ecx, cl
  001dd	2b c6		 sub	 eax, esi
  001df	3b c8		 cmp	 ecx, eax
  001e1	73 7f		 jae	 SHORT $LN3@Iput

; 1782 : 				{	// insert thousands separator
; 1783 : 				_Count -= *_Pg;

  001e3	2b f9		 sub	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  001e5	8b 4d e8	 mov	 ecx, DWORD PTR __Groupstring$[ebp+16]
  001e8	3b cf		 cmp	 ecx, edi
  001ea	0f 82 72 02 00
	00		 jb	 $LN288@Iput

; 2789 : 		const size_type _Old_size = _My_data._Mysize;

  001f0	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]
  001f3	8b c2		 mov	 eax, edx
  001f5	2b c1		 sub	 eax, ecx

; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

  001f7	83 f8 01	 cmp	 eax, 1
  001fa	72 38		 jb	 SHORT $LN85@Iput

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  001fc	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001ff	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00202	8d 75 d8	 lea	 esi, DWORD PTR __Groupstring$[ebp]

; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  00205	89 45 e8	 mov	 DWORD PTR __Groupstring$[ebp+16], eax

; 1804 : 		if (_Large_string_engaged())

  00208	0f 43 75 d8	 cmovae	 esi, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0020c	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  0020e	03 f7		 add	 esi, edi

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00210	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00211	51		 push	 ecx
  00212	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00213	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 _memmove

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0021c	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00220	83 c4 0c	 add	 esp, 12			; 0000000cH

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00223	0f b6 c1	 movzx	 eax, cl
  00226	66 c1 e1 08	 shl	 cx, 8
  0022a	66 0b c8	 or	 cx, ax
  0022d	88 0e		 mov	 BYTE PTR [esi], cl
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2797 : 			return (*this);

  0022f	8b 75 ac	 mov	 esi, DWORD PTR __Prefix$1$[ebp]
  00232	eb 17		 jmp	 SHORT $LN84@Iput
$LN85@Iput:

; 2798 : 			}
; 2799 : 
; 2800 : 		return (_Reallocate_grow_by(_Count,

  00234	ff 75 b8	 push	 DWORD PTR __Kseparator$13[ebp]
  00237	c6 45 b0 00	 mov	 BYTE PTR $T10[ebp], 0
  0023b	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0023e	6a 01		 push	 1
  00240	57		 push	 edi
  00241	ff 75 b0	 push	 DWORD PTR $T10[ebp]
  00244	6a 01		 push	 1
  00246	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
$LN84@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1781 : 				&& (size_t)*_Pg < _Count - _Prefix)

  0024b	80 7b 01 00	 cmp	 BYTE PTR [ebx+1], 0

; 1784 : 				_Groupstring.insert(_Count, 1, _Kseparator);
; 1785 : 				if ('\0' < _Pg[1])

  0024f	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00252	0f 4e c3	 cmovle	 eax, ebx
  00255	8b d8		 mov	 ebx, eax
  00257	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00259	80 f9 7f	 cmp	 cl, 127			; 0000007fH
  0025c	0f 85 6e ff ff
	ff		 jne	 $LL2@Iput
$LN3@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  00262	8b 45 a0	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00265	8b 5d e8	 mov	 ebx, DWORD PTR __Groupstring$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1792 : 			|| (size_t)_Iosbase.width() <= _Count

  00268	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  0026c	8b 78 20	 mov	 edi, DWORD PTR [eax+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1792 : 			|| (size_t)_Iosbase.width() <= _Count

  0026f	7c 0e		 jl	 SHORT $LN16@Iput
  00271	7f 04		 jg	 SHORT $LN292@Iput
  00273	85 ff		 test	 edi, edi
  00275	74 08		 je	 SHORT $LN16@Iput
$LN292@Iput:
  00277	3b fb		 cmp	 edi, ebx
  00279	76 04		 jbe	 SHORT $LN16@Iput
  0027b	2b fb		 sub	 edi, ebx
  0027d	eb 02		 jmp	 SHORT $LN17@Iput
$LN16@Iput:
  0027f	33 ff		 xor	 edi, edi
$LN17@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  00281	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1796 : 			_Iosbase.flags() & ios_base::adjustfield;

  00284	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1797 : 		if (_Adjustfield != ios_base::left
; 1798 : 			&& _Adjustfield != ios_base::internal)

  00289	83 f8 40	 cmp	 eax, 64			; 00000040H
  0028c	0f 84 97 00 00
	00		 je	 $LN10@Iput
  00292	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00297	74 48		 je	 SHORT $LN291@Iput

; 1799 : 			{	// put leading fill
; 1800 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00299	57		 push	 edi
  0029a	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  0029d	8d 45 a4	 lea	 eax, DWORD PTR $T7[ebp]
  002a0	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002a3	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002a6	50		 push	 eax
  002a7	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002aa	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002af	8b c8		 mov	 ecx, eax

; 1801 : 			_Fillcount = 0;

  002b1	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002b3	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1802 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002b7	56		 push	 esi
  002b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ba	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  002bd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002c0	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  002c3	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  002c6	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1802 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002ca	50		 push	 eax
  002cb	ff 71 04	 push	 DWORD PTR [ecx+4]
  002ce	8d 45 a4	 lea	 eax, DWORD PTR $T6[ebp]
  002d1	ff 31		 push	 DWORD PTR [ecx]
  002d3	50		 push	 eax
  002d4	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002d7	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  002dc	83 c4 30	 add	 esp, 48			; 00000030H
  002df	eb 6a		 jmp	 SHORT $LN297@Iput
$LN291@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002e1	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  002e5	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1806 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002e8	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  002e9	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1806 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002ed	50		 push	 eax
  002ee	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002f1	8d 45 a4	 lea	 eax, DWORD PTR $T5[ebp]
  002f4	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002f7	50		 push	 eax
  002f8	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002fb	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00300	8b c8		 mov	 ecx, eax

; 1807 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00302	57		 push	 edi
  00303	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00306	8b 01		 mov	 eax, DWORD PTR [ecx]
  00308	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  0030b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0030e	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00311	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  00314	ff 71 04	 push	 DWORD PTR [ecx+4]
  00317	ff 31		 push	 DWORD PTR [ecx]
  00319	50		 push	 eax
  0031a	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0031d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00322	83 c4 30	 add	 esp, 48			; 00000030H

; 1808 : 			_Fillcount = 0;

  00325	33 ff		 xor	 edi, edi

; 1809 : 			}
; 1810 : 		else

  00327	eb 22		 jmp	 SHORT $LN297@Iput
$LN10@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00329	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  0032d	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1811 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00330	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  00331	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1811 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00335	50		 push	 eax
  00336	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00339	8d 45 a4	 lea	 eax, DWORD PTR $T3[ebp]
  0033c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0033f	50		 push	 eax
  00340	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00343	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00348	83 c4 18	 add	 esp, 24			; 00000018H
$LN297@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  0034b	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0034d	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00351	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00354	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00357	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  0035a	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0035e	2b de		 sub	 ebx, esi
  00360	53		 push	 ebx
  00361	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3206 : 		return (_My_data._Myptr()[_Off]);

  00364	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00366	50		 push	 eax
  00367	52		 push	 edx
  00368	51		 push	 ecx
  00369	8d 45 a4	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  0036c	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0036f	50		 push	 eax
  00370	53		 push	 ebx
  00371	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  00376	8b 55 a0	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00379	8b 75 9c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0037c	57		 push	 edi
  0037d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0037f	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00382	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00385	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00388	50		 push	 eax
  00389	51		 push	 ecx
  0038a	56		 push	 esi
  0038b	53		 push	 ebx
  0038c	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  0038f	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00396	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0039d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003a2	83 c4 30	 add	 esp, 48			; 00000030H
  003a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003a9	8b 55 d4	 mov	 edx, DWORD PTR __Grouping$[ebp+20]
  003ac	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  003af	72 2c		 jb	 SHORT $LN217@Iput
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b1	8b 4d c0	 mov	 ecx, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  003b4	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b5	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  003b7	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  003bd	72 14		 jb	 SHORT $LN216@Iput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  003bf	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  003c2	83 c2 23	 add	 edx, 35			; 00000023H
  003c5	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003c7	83 c0 fc	 add	 eax, -4			; fffffffcH
  003ca	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003cd	0f 87 94 00 00
	00		 ja	 $LN299@Iput
$LN216@Iput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  003d3	52		 push	 edx
  003d4	51		 push	 ecx
  003d5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003da	83 c4 08	 add	 esp, 8
$LN217@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  003dd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  003e4	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  003eb	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  003ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003f6	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]
  003f9	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  003fc	72 28		 jb	 SHORT $LN273@Iput
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003fe	8b 4d d8	 mov	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00401	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00402	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00404	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0040a	72 10		 jb	 SHORT $LN272@Iput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0040c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0040f	83 c2 23	 add	 edx, 35			; 00000023H
  00412	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00414	83 c0 fc	 add	 eax, -4			; fffffffcH
  00417	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0041a	77 50		 ja	 SHORT $LN300@Iput
$LN272@Iput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0041c	52		 push	 edx
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00423	83 c4 08	 add	 esp, 8
$LN273@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00426	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0042d	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0042f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00436	c6 45 d8 00	 mov	 BYTE PTR __Groupstring$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1816 : 		}

  0043a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0043d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00444	59		 pop	 ecx
  00445	5f		 pop	 edi
  00446	5e		 pop	 esi
  00447	5b		 pop	 ebx
  00448	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044b	33 cd		 xor	 ecx, ebp
  0044d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00452	8b e5		 mov	 esp, ebp
  00454	5d		 pop	 ebp
  00455	c3		 ret	 0
$LN81@Iput:
  00456	8b ca		 mov	 ecx, edx

; 128  : 		return (do_thousands_sep());

  00458	ff 55 b8	 call	 DWORD PTR tv1142[ebp]
  0045b	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0045d	e9 59 fd ff ff	 jmp	 $LN296@Iput
$LN288@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1832 : 			_Xran();

  00462	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN299@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00467	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN300@Iput:
  0046c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN294@Iput:
  00471	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$4:
  00000	8b 45 b4	 mov	 eax, DWORD PTR $T11[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN27@Iput
  0000c	83 65 b4 fe	 and	 DWORD PTR $T11[ebp], -2	; fffffffeH
  00010	8d 4d a4	 lea	 ecx, DWORD PTR $T9[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN27@Iput:
  00018	c3		 ret	 0
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00019	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$5:
  00021	8b 45 b4	 mov	 eax, DWORD PTR $T11[ebp]
  00024	83 e0 02	 and	 eax, 2
  00027	0f 84 0c 00 00
	00		 je	 $LN53@Iput
  0002d	83 65 b4 fd	 and	 DWORD PTR $T11[ebp], -3	; fffffffdH
  00031	8d 4d a4	 lea	 ecx, DWORD PTR $T8[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN53@Iput:
  00039	c3		 ret	 0
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3:
  0003a	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1733 : 		{	// generate sprintf format for integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1734 : 		char *_Ptr = _Fmt;
; 1735 : 		*_Ptr++ = '%';
; 1736 : 
; 1737 : 		if (_Flags & ios_base::showpos)

  00003	8b 45 14	 mov	 eax, DWORD PTR __Flags$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Fmt$[ebp]
  0000a	57		 push	 edi
  0000b	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000e	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00011	a8 20		 test	 al, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN2@Ifmt

; 1738 : 			*_Ptr++ = '+';

  00015	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00018	41		 inc	 ecx
$LN2@Ifmt:

; 1739 : 		if (_Flags & ios_base::showbase)

  00019	a8 08		 test	 al, 8
  0001b	74 04		 je	 SHORT $LN3@Ifmt

; 1740 : 			*_Ptr++ = '#';

  0001d	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00020	41		 inc	 ecx
$LN3@Ifmt:

; 1741 : 		if (_Spec[0] != 'L')

  00021	8b 7d 10	 mov	 edi, DWORD PTR __Spec$[ebp]
  00024	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00027	53		 push	 ebx
  00028	8a 1f		 mov	 bl, BYTE PTR [edi]
  0002a	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002d	74 04		 je	 SHORT $LN4@Ifmt

; 1742 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002f	88 19		 mov	 BYTE PTR [ecx], bl

; 1743 : 		else

  00031	eb 0b		 jmp	 SHORT $LN5@Ifmt
$LN4@Ifmt:

; 1744 : 
; 1745 : 			{	/* change L to I64 */
; 1746 : 			*_Ptr++ = 'I';

  00033	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H

; 1747 : 			*_Ptr++ = '6';

  00036	66 c7 02 36 34	 mov	 WORD PTR [edx], 13366	; 00003436H

; 1748 : 			*_Ptr++ = '4';

  0003b	83 c2 02	 add	 edx, 2
$LN5@Ifmt:

; 1749 : 			}
; 1750 : 
; 1751 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003e	8b c8		 mov	 ecx, eax
  00040	81 e1 00 0e 00
	00		 and	 ecx, 3584		; 00000e00H
  00046	5b		 pop	 ebx

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00047	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  0004d	75 0e		 jne	 SHORT $LN9@Ifmt
  0004f	b0 6f		 mov	 al, 111			; 0000006fH
  00051	88 02		 mov	 BYTE PTR [edx], al

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';
; 1756 : 		return (_Fmt);

  00053	8b c6		 mov	 eax, esi
  00055	5f		 pop	 edi
  00056	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  0005a	5e		 pop	 esi

; 1757 : 		}

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@Ifmt:

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  0005d	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  00063	74 0f		 je	 SHORT $LN7@Ifmt
  00065	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00068	88 02		 mov	 BYTE PTR [edx], al

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';
; 1756 : 		return (_Fmt);

  0006a	8b c6		 mov	 eax, esi
  0006c	5f		 pop	 edi
  0006d	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  00071	5e		 pop	 esi

; 1757 : 		}

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN7@Ifmt:

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00074	c0 e0 03	 shl	 al, 3
  00077	f6 d0		 not	 al
  00079	24 20		 and	 al, 32			; 00000020H
  0007b	0c 58		 or	 al, 88			; 00000058H
  0007d	88 02		 mov	 BYTE PTR [edx], al

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';
; 1756 : 		return (_Fmt);

  0007f	8b c6		 mov	 eax, esi
  00081	5f		 pop	 edi
  00082	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  00086	5e		 pop	 esi

; 1757 : 		}

  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -116				; size = 4
$T2 = -112						; size = 4
__Count$GSCopy$1$ = -108				; size = 4
__Ctype_fac$1$ = -104					; size = 4
__Eoff$1$ = -100					; size = 4
$T3 = -100						; size = 1
__Prefix$1$ = -96					; size = 4
$T4 = -92						; size = 8
$T5 = -92						; size = 8
$T6 = -92						; size = 8
$T7 = -92						; size = 8
$T8 = -92						; size = 8
$T9 = -92						; size = 8
$T10 = -92						; size = 8
$T11 = -92						; size = 8
__Iosbase$GSCopy$1$ = -84				; size = 4
$T12 = -80						; size = 4
__Buf$GSCopy$1$ = -80					; size = 4
__Kseparator$ = -80					; size = 1
__Dp$ = -76						; size = 2
$T13 = -72						; size = 4
__Kseparator$1$ = -65					; size = 1
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1663 : 		{	// put formatted floating-point to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 24	 mov	 ebx, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 4d 18	 mov	 ecx, DWORD PTR __Iosbase$[ebp]
  00034	8b 7d 20	 mov	 edi, DWORD PTR __Buf$[ebp]
  00037	89 45 8c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 4d ac	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ecx
  0003d	89 7d b0	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], edi
  00040	89 5d 94	 mov	 DWORD PTR __Count$GSCopy$1$[ebp], ebx
  00043	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T13[ebp], 0

; 1664 : 		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  0004a	85 db		 test	 ebx, ebx
  0004c	74 11		 je	 SHORT $LN16@Fput
  0004e	8a 07		 mov	 al, BYTE PTR [edi]
  00050	3c 2b		 cmp	 al, 43			; 0000002bH
  00052	74 04		 je	 SHORT $LN15@Fput
  00054	3c 2d		 cmp	 al, 45			; 0000002dH
  00056	75 07		 jne	 SHORT $LN16@Fput
$LN15@Fput:
  00058	be 01 00 00 00	 mov	 esi, 1
  0005d	eb 02		 jmp	 SHORT $LN316@Fput
$LN16@Fput:
  0005f	33 f6		 xor	 esi, esi
$LN316@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  00061	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1666 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

  00064	25 00 30 00 00	 and	 eax, 12288		; 00003000H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  00069	89 75 a0	 mov	 DWORD PTR __Prefix$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1666 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

  0006c	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  00071	74 07		 je	 SHORT $LN4@Fput

; 1667 : 			_Exps = "eE";

  00073	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02MDKMJEGG@eE@

; 1668 : 		else

  00078	eb 25		 jmp	 SHORT $LN6@Fput
$LN4@Fput:

; 1669 : 			{	// correct for hexadecimal floating-point
; 1670 : 			_Exps = "pP";
; 1671 : 			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1672 : 				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  0007a	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  0007d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02OOPEBDOJ@pP@
  00082	3b c3		 cmp	 eax, ebx
  00084	77 19		 ja	 SHORT $LN6@Fput
  00086	80 3c 37 30	 cmp	 BYTE PTR [edi+esi], 48	; 00000030H
  0008a	75 13		 jne	 SHORT $LN6@Fput
  0008c	8a 4c 37 01	 mov	 cl, BYTE PTR [edi+esi+1]
  00090	80 f9 78	 cmp	 cl, 120			; 00000078H
  00093	74 05		 je	 SHORT $LN7@Fput
  00095	80 f9 58	 cmp	 cl, 88			; 00000058H
  00098	75 05		 jne	 SHORT $LN6@Fput
$LN7@Fput:

; 1673 : 				_Prefix += 2;

  0009a	8b f0		 mov	 esi, eax
  0009c	89 75 a0	 mov	 DWORD PTR __Prefix$1$[ebp], esi
$LN6@Fput:

; 1674 : 			}
; 1675 : 		const size_t _Eoff =
; 1676 : 			_CSTD strcspn(&_Buf[0], _Exps);	// find exponent

  0009f	52		 push	 edx
  000a0	57		 push	 edi
  000a1	e8 00 00 00 00	 call	 _strcspn
  000a6	89 45 9c	 mov	 DWORD PTR __Eoff$1$[ebp], eax

; 1677 : 		char _Dp[2] = {"."};

  000a9	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000ae	66 89 45 b4	 mov	 WORD PTR __Dp$[ebp], ax

; 1678 : 		_Dp[0] = _CSTD localeconv()->decimal_point[0];

  000b2	e8 00 00 00 00	 call	 _localeconv
  000b7	8b 00		 mov	 eax, DWORD PTR [eax]
  000b9	8a 00		 mov	 al, BYTE PTR [eax]
  000bb	88 45 b4	 mov	 BYTE PTR __Dp$[ebp], al

; 1679 : 		const size_t _Poff =
; 1680 : 			_CSTD strcspn(&_Buf[0], &_Dp[0]);	// find decimal point

  000be	8d 45 b4	 lea	 eax, DWORD PTR __Dp$[ebp]
  000c1	50		 push	 eax
  000c2	57		 push	 edi
  000c3	e8 00 00 00 00	 call	 _strcspn
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
  000cb	8b f8		 mov	 edi, eax

; 1682 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000d4	8b 45 ac	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  000d7	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	89 4d a8	 mov	 DWORD PTR $T11[ebp+4], ecx
  000e0	89 4d 90	 mov	 DWORD PTR $T2[ebp], ecx

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  000e3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e5	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1682 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000e8	8d 45 a4	 lea	 eax, DWORD PTR $T11[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000eb	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR $T13[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1682 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000f8	89 45 98	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000fb	83 c4 04	 add	 esp, 4
  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	89 45 b8	 mov	 DWORD PTR $T13[ebp], eax
  00106	83 e0 fe	 and	 eax, -2			; fffffffeH
  00109	89 45 b8	 mov	 DWORD PTR $T13[ebp], eax
  0010c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00113	8b 4d 90	 mov	 ecx, DWORD PTR $T2[ebp]
  00116	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  00118	74 11		 je	 SHORT $LN35@Fput

; 410  : 			delete _Ptr->_Decref();

  0011a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011c	ff 50 08	 call	 DWORD PTR [eax+8]
  0011f	8b c8		 mov	 ecx, eax
  00121	85 c9		 test	 ecx, ecx
  00123	74 06		 je	 SHORT $LN35@Fput
  00125	8b 01		 mov	 eax, DWORD PTR [ecx]
  00127	6a 01		 push	 1
  00129	ff 10		 call	 DWORD PTR [eax]
$LN35@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1683 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

  0012b	6a 00		 push	 0
  0012d	53		 push	 ebx
  0012e	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00131	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00136	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  0013d	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00140	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00144	8b 45 98	 mov	 eax, DWORD PTR __Ctype_fac$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  00147	0f 43 4d d8	 cmovae	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  0014b	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1684 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  0014c	8b 4d b0	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  0014f	8b 00		 mov	 eax, DWORD PTR [eax]
  00151	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1684 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  00154	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2572 : 		return (do_widen(_First, _Last, _Dest));

  00157	50		 push	 eax
  00158	51		 push	 ecx
  00159	8b 4d 98	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  0015c	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1686 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0015e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00162	8b 45 ac	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00165	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00168	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016b	89 4d a8	 mov	 DWORD PTR $T10[ebp+4], ecx
  0016e	89 4d b0	 mov	 DWORD PTR $T12[ebp], ecx

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  00171	8b 01		 mov	 eax, DWORD PTR [ecx]
  00173	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1686 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00176	8d 45 a4	 lea	 eax, DWORD PTR $T10[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00179	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR $T13[ebp], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1686 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00186	8b d8		 mov	 ebx, eax
  00188	83 c4 04	 add	 esp, 4
  0018b	b8 02 00 00 00	 mov	 eax, 2
  00190	89 45 b8	 mov	 DWORD PTR $T13[ebp], eax
  00193	83 e0 fd	 and	 eax, -3			; fffffffdH
  00196	89 45 b8	 mov	 DWORD PTR $T13[ebp], eax
  00199	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0019d	8b 4d b0	 mov	 ecx, DWORD PTR $T12[ebp]
  001a0	85 c9		 test	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  001a2	74 11		 je	 SHORT $LN61@Fput

; 410  : 			delete _Ptr->_Decref();

  001a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a6	ff 50 08	 call	 DWORD PTR [eax+8]
  001a9	8b c8		 mov	 ecx, eax
  001ab	85 c9		 test	 ecx, ecx
  001ad	74 06		 je	 SHORT $LN61@Fput
  001af	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b1	6a 01		 push	 1
  001b3	ff 10		 call	 DWORD PTR [eax]
$LN61@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1687 : 		const string _Grouping = _Punct_fac.grouping();

  001b5	8d 45 c0	 lea	 eax, DWORD PTR __Grouping$[ebp]
  001b8	8b cb		 mov	 ecx, ebx
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  001c0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001c4	8b 03		 mov	 eax, DWORD PTR [ebx]
  001c6	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  001c9	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7?$numpunct@D@std@@6B@
  001ce	0f 85 d1 02 00
	00		 jne	 $LN70@Fput

; 234  : 		return (_Kseparator);

  001d4	8a 43 0d	 mov	 al, BYTE PTR [ebx+13]
$LN317@Fput:

; 1688 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();
; 1689 : 
; 1690 : 		if (_Poff != _Count)

  001d7	8b 4d 94	 mov	 ecx, DWORD PTR __Count$GSCopy$1$[ebp]
  001da	88 45 bf	 mov	 BYTE PTR __Kseparator$1$[ebp], al
  001dd	88 45 b0	 mov	 BYTE PTR __Kseparator$[ebp], al
  001e0	3b f9		 cmp	 edi, ecx
  001e2	74 23		 je	 SHORT $LN318@Fput
  001e4	8b 03		 mov	 eax, DWORD PTR [ebx]
  001e6	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  001e9	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7?$numpunct@D@std@@6B@
  001ee	0f 85 ba 02 00
	00		 jne	 $LN76@Fput

; 229  : 		return (_Dp);

  001f4	8a 53 0c	 mov	 dl, BYTE PTR [ebx+12]
$LN75@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001f7	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  001fb	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  001fe	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1693 : 		size_t _Off = _Poff == _Count ? _Eoff : _Poff;

  00202	3b f9		 cmp	 edi, ecx
  00204	88 14 38	 mov	 BYTE PTR [eax+edi], dl
$LN318@Fput:
  00207	0f 44 7d 9c	 cmove	 edi, DWORD PTR __Eoff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0020b	8d 5d c0	 lea	 ebx, DWORD PTR __Grouping$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0020e	83 7d d4 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00212	0f 43 5d c0	 cmovae	 ebx, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1696 : 			&& (size_t)*_Pg < _Off - _Prefix)

  00216	8a 03		 mov	 al, BYTE PTR [ebx]
  00218	3c 7f		 cmp	 al, 127			; 0000007fH
  0021a	0f 84 91 00 00
	00		 je	 $LN3@Fput
$LL2@Fput:
  00220	84 c0		 test	 al, al
  00222	0f 8e 89 00 00
	00		 jle	 $LN3@Fput
  00228	0f be c8	 movsx	 ecx, al
  0022b	8b c7		 mov	 eax, edi
  0022d	2b c6		 sub	 eax, esi
  0022f	3b c8		 cmp	 ecx, eax
  00231	73 7e		 jae	 SHORT $LN3@Fput

; 1697 : 			{	// add thousands separator
; 1698 : 			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);

  00233	2b f9		 sub	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  00235	8b 4d e8	 mov	 ecx, DWORD PTR __Groupstring$[ebp+16]
  00238	3b cf		 cmp	 ecx, edi
  0023a	0f 82 7c 02 00
	00		 jb	 $LN309@Fput

; 2789 : 		const size_type _Old_size = _My_data._Mysize;

  00240	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]
  00243	8b c2		 mov	 eax, edx
  00245	2b c1		 sub	 eax, ecx

; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

  00247	83 f8 01	 cmp	 eax, 1
  0024a	72 38		 jb	 SHORT $LN106@Fput

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  0024c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0024f	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00252	8d 75 d8	 lea	 esi, DWORD PTR __Groupstring$[ebp]

; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  00255	89 45 e8	 mov	 DWORD PTR __Groupstring$[ebp+16], eax

; 1804 : 		if (_Large_string_engaged())

  00258	0f 43 75 d8	 cmovae	 esi, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0025c	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  0025e	03 f7		 add	 esi, edi

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00260	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00261	51		 push	 ecx
  00262	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00263	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 _memmove

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0026c	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00270	83 c4 0c	 add	 esp, 12			; 0000000cH

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00273	0f b6 c1	 movzx	 eax, cl
  00276	66 c1 e1 08	 shl	 cx, 8
  0027a	66 0b c8	 or	 cx, ax
  0027d	88 0e		 mov	 BYTE PTR [esi], cl
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2797 : 			return (*this);

  0027f	8b 75 a0	 mov	 esi, DWORD PTR __Prefix$1$[ebp]
  00282	eb 17		 jmp	 SHORT $LN105@Fput
$LN106@Fput:

; 2798 : 			}
; 2799 : 
; 2800 : 		return (_Reallocate_grow_by(_Count,

  00284	ff 75 b0	 push	 DWORD PTR __Kseparator$[ebp]
  00287	c6 45 9c 00	 mov	 BYTE PTR $T3[ebp], 0
  0028b	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0028e	6a 01		 push	 1
  00290	57		 push	 edi
  00291	ff 75 9c	 push	 DWORD PTR $T3[ebp]
  00294	6a 01		 push	 1
  00296	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
$LN105@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1696 : 			&& (size_t)*_Pg < _Off - _Prefix)

  0029b	80 7b 01 00	 cmp	 BYTE PTR [ebx+1], 0

; 1699 : 			if ('\0' < _Pg[1])

  0029f	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  002a2	0f 4e c3	 cmovle	 eax, ebx
  002a5	8b d8		 mov	 ebx, eax
  002a7	8a 03		 mov	 al, BYTE PTR [ebx]
  002a9	3c 7f		 cmp	 al, 127			; 0000007fH
  002ab	0f 85 6f ff ff
	ff		 jne	 $LL2@Fput
$LN3@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  002b1	8b 45 ac	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  002b4	8b 5d e8	 mov	 ebx, DWORD PTR __Groupstring$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1705 : 			|| (size_t)_Iosbase.width() <= _Count

  002b7	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  002bb	8b 78 20	 mov	 edi, DWORD PTR [eax+32]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1705 : 			|| (size_t)_Iosbase.width() <= _Count

  002be	7c 0e		 jl	 SHORT $LN18@Fput
  002c0	7f 04		 jg	 SHORT $LN313@Fput
  002c2	85 ff		 test	 edi, edi
  002c4	74 08		 je	 SHORT $LN18@Fput
$LN313@Fput:
  002c6	3b fb		 cmp	 edi, ebx
  002c8	76 04		 jbe	 SHORT $LN18@Fput
  002ca	2b fb		 sub	 edi, ebx
  002cc	eb 02		 jmp	 SHORT $LN19@Fput
$LN18@Fput:
  002ce	33 ff		 xor	 edi, edi
$LN19@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  002d0	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1709 : 			_Iosbase.flags() & ios_base::adjustfield;

  002d3	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1710 : 		if (_Adjustfield != ios_base::left
; 1711 : 			&& _Adjustfield != ios_base::internal)

  002d8	83 f8 40	 cmp	 eax, 64			; 00000040H
  002db	0f 84 97 00 00
	00		 je	 $LN12@Fput
  002e1	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  002e6	74 48		 je	 SHORT $LN312@Fput

; 1712 : 			{	// put leading fill
; 1713 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  002e8	57		 push	 edi
  002e9	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  002ec	8d 45 a4	 lea	 eax, DWORD PTR $T9[ebp]
  002ef	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002f2	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002f5	50		 push	 eax
  002f6	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002f9	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002fe	8b c8		 mov	 ecx, eax

; 1714 : 			_Fillcount = 0;

  00300	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00302	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1715 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00306	56		 push	 esi
  00307	8b 01		 mov	 eax, DWORD PTR [ecx]
  00309	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  0030c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0030f	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  00312	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  00315	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1715 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00319	50		 push	 eax
  0031a	ff 71 04	 push	 DWORD PTR [ecx+4]
  0031d	8d 45 a4	 lea	 eax, DWORD PTR $T8[ebp]
  00320	ff 31		 push	 DWORD PTR [ecx]
  00322	50		 push	 eax
  00323	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00326	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0032b	83 c4 30	 add	 esp, 48			; 00000030H
  0032e	eb 6a		 jmp	 SHORT $LN319@Fput
$LN312@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00330	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00334	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1719 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00337	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  00338	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1719 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0033c	50		 push	 eax
  0033d	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00340	8d 45 a4	 lea	 eax, DWORD PTR $T7[ebp]
  00343	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00346	50		 push	 eax
  00347	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0034a	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0034f	8b c8		 mov	 ecx, eax

; 1720 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00351	57		 push	 edi
  00352	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00355	8b 01		 mov	 eax, DWORD PTR [ecx]
  00357	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  0035a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0035d	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00360	8d 45 a4	 lea	 eax, DWORD PTR $T6[ebp]
  00363	ff 71 04	 push	 DWORD PTR [ecx+4]
  00366	ff 31		 push	 DWORD PTR [ecx]
  00368	50		 push	 eax
  00369	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0036c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00371	83 c4 30	 add	 esp, 48			; 00000030H

; 1721 : 			_Fillcount = 0;

  00374	33 ff		 xor	 edi, edi

; 1722 : 			}
; 1723 : 		else

  00376	eb 22		 jmp	 SHORT $LN319@Fput
$LN12@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00378	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  0037c	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1724 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0037f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  00380	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1724 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00384	50		 push	 eax
  00385	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00388	8d 45 a4	 lea	 eax, DWORD PTR $T5[ebp]
  0038b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0038e	50		 push	 eax
  0038f	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00392	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00397	83 c4 18	 add	 esp, 24			; 00000018H
$LN319@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  0039a	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0039c	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  003a0	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003a6	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  003a9	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  003ad	2b de		 sub	 ebx, esi
  003af	53		 push	 ebx
  003b0	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3206 : 		return (_My_data._Myptr()[_Off]);

  003b3	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  003b5	50		 push	 eax
  003b6	52		 push	 edx
  003b7	51		 push	 ecx
  003b8	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  003bb	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  003be	50		 push	 eax
  003bf	53		 push	 ebx
  003c0	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  003c5	8b 55 ac	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  003c8	8b 75 8c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  003cb	57		 push	 edi
  003cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ce	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  003d1	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003d4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003d7	50		 push	 eax
  003d8	51		 push	 ecx
  003d9	56		 push	 esi
  003da	53		 push	 ebx
  003db	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  003de	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  003e5	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  003ec	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003f1	83 c4 30	 add	 esp, 48			; 00000030H
  003f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003f8	8b 55 d4	 mov	 edx, DWORD PTR __Grouping$[ebp+20]
  003fb	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  003fe	72 2c		 jb	 SHORT $LN238@Fput
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00400	8b 4d c0	 mov	 ecx, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00403	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00404	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00406	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0040c	72 14		 jb	 SHORT $LN237@Fput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0040e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00411	83 c2 23	 add	 edx, 35			; 00000023H
  00414	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00416	83 c0 fc	 add	 eax, -4			; fffffffcH
  00419	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0041c	0f 87 9f 00 00
	00		 ja	 $LN321@Fput
$LN237@Fput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00422	52		 push	 edx
  00423	51		 push	 ecx
  00424	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00429	83 c4 08	 add	 esp, 8
$LN238@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0042c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00433	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0043a	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0043e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00445	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]
  00448	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0044b	72 28		 jb	 SHORT $LN294@Fput
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0044d	8b 4d d8	 mov	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00450	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00451	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00453	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00459	72 10		 jb	 SHORT $LN293@Fput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0045b	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0045e	83 c2 23	 add	 edx, 35			; 00000023H
  00461	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00463	83 c0 fc	 add	 eax, -4			; fffffffcH
  00466	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00469	77 5b		 ja	 SHORT $LN322@Fput
$LN293@Fput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0046b	52		 push	 edx
  0046c	51		 push	 ecx
  0046d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00472	83 c4 08	 add	 esp, 8
$LN294@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00475	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0047c	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0047e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00485	c6 45 d8 00	 mov	 BYTE PTR __Groupstring$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1729 : 		}

  00489	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0048c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00493	59		 pop	 ecx
  00494	5f		 pop	 edi
  00495	5e		 pop	 esi
  00496	5b		 pop	 ebx
  00497	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0049a	33 cd		 xor	 ecx, ebp
  0049c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a1	8b e5		 mov	 esp, ebp
  004a3	5d		 pop	 ebp
  004a4	c3		 ret	 0
$LN70@Fput:
  004a5	8b cb		 mov	 ecx, ebx

; 128  : 		return (do_thousands_sep());

  004a7	ff d2		 call	 edx
  004a9	e9 29 fd ff ff	 jmp	 $LN317@Fput
$LN76@Fput:
  004ae	8b cb		 mov	 ecx, ebx

; 123  : 		return (do_decimal_point());

  004b0	ff d2		 call	 edx
  004b2	8b 4d 94	 mov	 ecx, DWORD PTR __Count$GSCopy$1$[ebp]
  004b5	8a d0		 mov	 dl, al
  004b7	e9 3b fd ff ff	 jmp	 $LN75@Fput
$LN309@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1832 : 			_Xran();

  004bc	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN321@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004c1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN322@Fput:
  004c6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN315@Fput:
  004cb	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$4:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T13[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN29@Fput
  0000c	83 65 b8 fe	 and	 DWORD PTR $T13[ebp], -2	; fffffffeH
  00010	8d 4d a4	 lea	 ecx, DWORD PTR $T11[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN29@Fput:
  00018	c3		 ret	 0
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1:
  00019	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$5:
  00021	8b 45 b8	 mov	 eax, DWORD PTR $T13[ebp]
  00024	83 e0 02	 and	 eax, 2
  00027	0f 84 0c 00 00
	00		 je	 $LN55@Fput
  0002d	83 65 b8 fd	 and	 DWORD PTR $T13[ebp], -3	; fffffffdH
  00031	8d 4d a4	 lea	 ecx, DWORD PTR $T10[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN55@Fput:
  00039	c3		 ret	 0
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3:
  0003a	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1633 : 		{	// generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1634 : 		char *_Ptr = _Fmt;
; 1635 : 		*_Ptr++ = '%';
; 1636 : 
; 1637 : 		if (_Flags & ios_base::showpos)

  00003	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Fmt$[ebp]
  0000a	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00010	f6 c2 20	 test	 dl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN2@Ffmt

; 1638 : 			*_Ptr++ = '+';

  00015	c6 00 2b	 mov	 BYTE PTR [eax], 43	; 0000002bH
  00018	40		 inc	 eax
$LN2@Ffmt:

; 1639 : 		if (_Flags & ios_base::showpoint)

  00019	f6 c2 10	 test	 dl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN3@Ffmt

; 1640 : 			*_Ptr++ = '#';

  0001e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00021	40		 inc	 eax
$LN3@Ffmt:

; 1641 : 		*_Ptr++ = '.';
; 1642 : 		*_Ptr++ = '*';	// for precision argument
; 1643 : 		if (_Spec != '\0')

  00022	8a 4d 10	 mov	 cl, BYTE PTR __Spec$[ebp]
  00025	66 c7 00 2e 2a	 mov	 WORD PTR [eax], 10798	; 00002a2eH
  0002a	83 c0 02	 add	 eax, 2
  0002d	84 c9		 test	 cl, cl
  0002f	74 03		 je	 SHORT $LN4@Ffmt

; 1644 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 08		 mov	 BYTE PTR [eax], cl
  00033	40		 inc	 eax
$LN4@Ffmt:

; 1645 : 
; 1646 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	8b ca		 mov	 ecx, edx
  00036	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H

; 1647 : 		if (_Flags & ios_base::uppercase)

  0003c	f6 c2 04	 test	 dl, 4
  0003f	74 38		 je	 SHORT $LN5@Ffmt

; 1648 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00041	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00047	74 38		 je	 SHORT $LN16@Ffmt
  00049	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  0004f	75 0d		 jne	 SHORT $LN8@Ffmt
  00051	b1 41		 mov	 cl, 65			; 00000041H

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  00053	88 08		 mov	 BYTE PTR [eax], cl
  00055	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi

; 1658 : 		}

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN8@Ffmt:

; 1648 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0005e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00064	0f 95 c1	 setne	 cl
  00067	8d 0c 4d 45 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+69]

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  0006e	88 08		 mov	 BYTE PTR [eax], cl
  00070	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  00074	8b c6		 mov	 eax, esi
  00076	5e		 pop	 esi

; 1658 : 		}

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN5@Ffmt:

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else
; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00079	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0007f	75 0d		 jne	 SHORT $LN14@Ffmt
$LN16@Ffmt:

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  00081	b1 66		 mov	 cl, 102			; 00000066H
  00083	88 08		 mov	 BYTE PTR [eax], cl
  00085	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi

; 1658 : 		}

  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN14@Ffmt:

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else
; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0008e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00094	75 0d		 jne	 SHORT $LN12@Ffmt
  00096	b1 61		 mov	 cl, 97			; 00000061H

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  00098	88 08		 mov	 BYTE PTR [eax], cl
  0009a	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi

; 1658 : 		}

  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN12@Ffmt:

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else
; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  000a3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a9	0f 95 c1	 setne	 cl
  000ac	8d 0c 4d 65 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+101]

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  000b3	88 08		 mov	 BYTE PTR [eax], cl
  000b5	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  000b9	8b c6		 mov	 eax, esi
  000bb	5e		 pop	 esi

; 1658 : 		}

  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1716 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 993  : 		}

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	83 c8 ff	 or	 eax, -1

; 893  : 		}

  00003	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2315 : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 2302 : 		if (this != _STD addressof(_Right))

  00026	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00029	3b f7		 cmp	 esi, edi
  0002b	74 61		 je	 SHORT $LN6@assign

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00030	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00033	72 27		 jb	 SHORT $LN50@assign
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00037	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN49@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00040	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	83 c0 fc	 add	 eax, -4			; fffffffcH
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 53		 ja	 SHORT $LN46@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00050	8b c2		 mov	 eax, edx
$LN49@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
$LN50@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0005c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00063	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0006a	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0006d	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00070	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00073	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00078	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0007d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00084	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0008b	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN6@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2317 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi

; 2318 : 		}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
$LN46@assign:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN102@assign:
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2150 : 		}

  00007	8b c1		 mov	 eax, ecx

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00009	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2150 : 		}

  00013	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
_TEXT	SEGMENT
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; __Mode$dead$ = ecx

; 425  : 		int _State = 0;
; 426  : 		if (!(_Mode & ios_base::in))
; 427  : 			{
; 428  : 			_State |= _Noread;
; 429  : 			}
; 430  : 
; 431  : 		if (!(_Mode & ios_base::out))
; 432  : 			{
; 433  : 			_State |= _Constant;
; 434  : 			}
; 435  : 
; 436  : 		if (_Mode & ios_base::app)
; 437  : 			{
; 438  : 			_State |= _Append;
; 439  : 			}
; 440  : 
; 441  : 		if (_Mode & ios_base::ate)
; 442  : 			{
; 443  : 			_State |= _Atend;
; 444  : 			}
; 445  : 
; 446  : 		return (_State);

  00000	33 c0		 xor	 eax, eax

; 447  : 		}

  00002	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
__Ok$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 586  : 		{	// flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 587  : 		if (_Myios::rdbuf() != nullptr)

  0002d	83 7c 30 38 00	 cmp	 DWORD PTR [eax+esi+56], 0
  00032	74 66		 je	 SHORT $LN71@flush

; 588  : 			{	// buffer exists, flush it
; 589  : 			const sentry _Ok(*this);

  00034	56		 push	 esi
  00035	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00038	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00044	80 7d f0 00	 cmp	 BYTE PTR __Ok$2[ebp+4], 0
  00048	74 15		 je	 SHORT $LN3@flush
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004f	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00058	3d 00 00 00 00	 cmp	 eax, OFFSET ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
  0005d	75 4d		 jne	 SHORT $LN75@flush
$LN3@flush:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 135  : 			{	// destroy the object

  0005f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00066	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0006b	84 c0		 test	 al, al
  0006d	75 08		 jne	 SHORT $LN56@flush

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  0006f	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$2[ebp]
  00072	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN56@flush:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  0007e	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$2[ebp]
  00081	8b 01		 mov	 eax, DWORD PTR [ecx]
  00083	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00086	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0008a	85 c9		 test	 ecx, ecx
  0008c	74 0c		 je	 SHORT $LN71@flush
  0008e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00090	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00093	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  00098	75 31		 jne	 SHORT $LN76@flush
$LN71@flush:

; 593  : 			}
; 594  : 		return (*this);
; 595  : 		}

  0009a	8b c6		 mov	 eax, esi
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5e		 pop	 esi
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN75@flush:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 143  : 		return (sync());

  000ac	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  000ae	83 f8 ff	 cmp	 eax, -1
  000b1	75 ac		 jne	 SHORT $LN3@flush

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  000b5	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  000b7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  000ba	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  000be	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  000c0	83 c8 04	 or	 eax, 4
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
  000c9	eb 94		 jmp	 SHORT $LN3@flush
$LN76@flush:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 107  : 				_Myostr.rdbuf()->_Unlock();

  000cb	ff d0		 call	 eax
  000cd	eb cb		 jmp	 SHORT $LN71@flush
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$2:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 176  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00029	8b f1		 mov	 esi, ecx

; 177  : 		_TRY_BEGIN

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 330  : 		return (_Mystate);

  00032	8b 06		 mov	 eax, DWORD PTR [esi]
  00034	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 352  : 		return (rdstate() == ios_base::goodbit);

  00037	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 178  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  0003c	75 17		 jne	 SHORT $LN9@Osfx
  0003e	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00043	74 10		 je	 SHORT $LN9@Osfx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  00045	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0004e	3d 00 00 00 00	 cmp	 eax, OFFSET ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
  00053	75 1f		 jne	 SHORT $LN26@Osfx
$LN9@Osfx:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 183  : 		}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 181  : 		_CATCH_ALL
; 182  : 		_CATCH_END

  0006e	b8 00 00 00 00	 mov	 eax, $LN9@Osfx
  00073	c3		 ret	 0
$LN26@Osfx:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 143  : 		return (sync());

  00074	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 179  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  00076	83 f8 ff	 cmp	 eax, -1
  00079	75 da		 jne	 SHORT $LN9@Osfx

; 180  : 				_Myios::setstate(ios_base::badbit);

  0007b	8b 06		 mov	 eax, DWORD PTR [esi]
  0007d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00080	03 ce		 add	 ecx, esi
  00082	6a 00		 push	 0
  00084	6a 04		 push	 4
  00086	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0008b	eb c8		 jmp	 SHORT $LN9@Osfx
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___formal$dead$ = 8					; size = 4
__Addit$dead$ = 12					; size = 1
_$initVBases$dead$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 57   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		{	// construct uninitialized

  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00021	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00024	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax

; 59   : 		if (_Addit)
; 60   : 			this->_Addstd(this);	// suppress for basic_iostream
; 61   : 		}

  00028	8b c1		 mov	 eax, ecx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -32						; size = 8
_this$ = -24						; size = 4
$T3 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
$T4 = 11						; size = 1
__Isstd$dead$ = 12					; size = 1
_$initVBases$dead$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00034	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 45   : 		{	// construct from stream buffer pointer

  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	c7 04 03 00 00
	00 00		 mov	 DWORD PTR [ebx+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00044	8b 03		 mov	 eax, DWORD PTR [ebx]
  00046	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00049	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  0004c	89 44 1a fc	 mov	 DWORD PTR [edx+ebx-4], eax

; 46   : 		_Myios::init(_Strbuf, _Isstd);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]
  00052	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00059	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00060	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00063	03 fb		 add	 edi, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00065	8b cf		 mov	 ecx, edi

; 549  : 		_Ploc = nullptr;

  00067	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 550  : 		_Stdstr = 0;

  0006e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 551  : 		_Except = goodbit;

  00075	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 552  : 		_Fmtfl = (fmtflags)(skipws | dec);

  0007c	c7 47 14 01 02
	00 00		 mov	 DWORD PTR [edi+20], 513	; 00000201H

; 553  : 		_Prec = 6;

  00083	c7 47 18 06 00
	00 00		 mov	 DWORD PTR [edi+24], 6
  0008a	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 554  : 		_Wide = 0;

  00091	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00098	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 555  : 		_Arr = nullptr;

  0009f	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 556  : 		_Calls = nullptr;

  000a6	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 318  : 		clear(_State, false);

  000ad	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 558  : 		_Ploc = new locale;

  000b2	6a 08		 push	 8
  000b4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b9	83 c4 04	 add	 esp, 4
  000bc	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  000be	6a 01		 push	 1
  000c0	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000c5	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000c8	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  000cb	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 558  : 		_Ploc = new locale;

  000ce	89 77 30	 mov	 DWORD PTR [edi+48], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  000d1	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 166  : 		_Tiestr = nullptr;

  000d4	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000db	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000e2	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  000e5	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  000e8	8b ce		 mov	 ecx, esi
  000ea	89 75 e4	 mov	 DWORD PTR $T2[ebp+4], esi
  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000f2	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000f5	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00102	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2566 : 		return (do_widen(_Byte));

  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	6a 20		 push	 32			; 00000020H
  00109	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0010c	8b c8		 mov	 ecx, eax
  0010e	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00110	ba 02 00 00 00	 mov	 edx, 2
  00115	88 45 0b	 mov	 BYTE PTR $T4[ebp], al
  00118	89 55 ec	 mov	 DWORD PTR $T3[ebp], edx
  0011b	83 e2 fd	 and	 edx, -3			; fffffffdH
  0011e	89 55 ec	 mov	 DWORD PTR $T3[ebp], edx
  00121	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 410  : 			delete _Ptr->_Decref();

  00125	8b ce		 mov	 ecx, esi
  00127	8b 16		 mov	 edx, DWORD PTR [esi]
  00129	ff 52 08	 call	 DWORD PTR [edx+8]
  0012c	85 c0		 test	 eax, eax
  0012e	74 0a		 je	 SHORT $LN45@basic_istr
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	6a 01		 push	 1
  00134	8b 11		 mov	 edx, DWORD PTR [ecx]
  00136	8b c8		 mov	 ecx, eax
  00138	ff d2		 call	 edx
$LN45@basic_istr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 169  : 		if (_Mystrbuf == nullptr)

  0013a	83 7f 38 00	 cmp	 DWORD PTR [edi+56], 0
  0013e	8a 45 0b	 mov	 al, BYTE PTR $T4[ebp]
  00141	88 47 40	 mov	 BYTE PTR [edi+64], al
  00144	75 10		 jne	 SHORT $LN55@basic_istr

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00146	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00149	8b cf		 mov	 ecx, edi
  0014b	83 c8 04	 or	 eax, 4
  0014e	6a 00		 push	 0
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN55@basic_istr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\istream

; 47   : 		}

  00156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015d	8b c3		 mov	 eax, ebx
  0015f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00162	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00169	59		 pop	 ecx
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$3:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00003	83 e0 02	 and	 eax, 2
  00006	0f 84 0c 00 00
	00		 je	 $LN37@basic_istr
  0000c	83 65 ec fd	 and	 DWORD PTR $T3[ebp], -3	; fffffffdH
  00010	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN37@basic_istr:
  00018	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 292  : 		*_IPfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  00009	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  00012	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 295  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 230  : 		return (*_IPfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 231  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 24   : 		{	// construct with no buffers

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	6a 08		 push	 8
  00006	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  00011	6a 01		 push	 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 23   : 		: _Plocale(new locale)

  00013	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  00015	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 318  : 		_IPfirst = &_Pfirst;

  0001d	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00020	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 23   : 		: _Plocale(new locale)

  00023	89 77 34	 mov	 DWORD PTR [edi+52], esi

; 317  : 		_IGfirst = &_Gfirst;

  00026	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  00029	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 319  : 		_IGnext = &_Gnext;

  0002c	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002f	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00032	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 320  : 		_IPnext = &_Pnext;

  00035	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00038	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 321  : 		_IGcount = &_Gcount;

  0003b	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  0003e	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 322  : 		_IPcount = &_Pcount;

  00041	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00044	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 292  : 		*_IPfirst = _First;

  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 293  : 		*_IPnext = _First;

  0004d	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00050	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  00056	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 251  : 		*_IGfirst = _First;

  0005f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00062	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00068	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0006b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00071	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 25   : 		_Init();
; 26   : 		}

  0007a	8b c7		 mov	 eax, edi
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	c3		 ret	 0
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 75   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 76   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 42   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00003	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00009	83 ca 04	 or	 edx, 4
  0000c	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00010	0f 45 55 08	 cmovne	 edx, DWORD PTR __State$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 44   : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$numpunct@D@std@@MAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 174  : 		{	// destroy the object

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 255  : 		_CSTD free((void *)_Grouping);

  00036	ff 76 08	 push	 DWORD PTR [esi+8]
  00039	e8 00 00 00 00	 call	 _free

; 256  : 		_CSTD free((void *)_Falsename);

  0003e	ff 76 10	 push	 DWORD PTR [esi+16]
  00041	e8 00 00 00 00	 call	 _free

; 257  : 		_CSTD free((void *)_Truename);

  00046	ff 76 14	 push	 DWORD PTR [esi+20]
  00049	e8 00 00 00 00	 call	 _free
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 		}

  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  0005e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00065	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00069	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0006f	74 0b		 je	 SHORT $LN14@scalar
  00071	6a 18		 push	 24			; 00000018H
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00079	83 c4 08	 add	 esp, 8
$LN14@scalar:
  0007c	8b c6		 mov	 eax, esi
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$numpunct@D@std@@MAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??_G?$numpunct@D@std@@MAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__ehhandler$??_G?$numpunct@D@std@@MAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$numpunct@D@std@@MAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 254  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 255  : 		_CSTD free((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 _free

; 256  : 		_CSTD free((void *)_Falsename);

  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	e8 00 00 00 00	 call	 _free

; 257  : 		_CSTD free((void *)_Truename);

  00013	ff 76 14	 push	 DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 _free
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi

; 258  : 		}

  0001f	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 132  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 133  : 		return (do_grouping());

  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0002f	ff 50 14	 call	 DWORD PTR [eax+20]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 134  : 		}

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@grouping
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@grouping:
  00018	c3		 ret	 0
__ehhandler$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 127  : 		{	// return thousands separator

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7?$numpunct@D@std@@6B@
  00007	75 04		 jne	 SHORT $LN4@thousands_

; 234  : 		return (_Kseparator);

  00009	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 129  : 		}

  0000c	c3		 ret	 0
$LN4@thousands_:

; 128  : 		return (do_thousands_sep());

  0000d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00010	ff e0		 jmp	 eax
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 122  : 		{	// return decimal point

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3d 00 00 00 00	 cmp	 eax, OFFSET ??_7?$numpunct@D@std@@6B@
  00007	75 04		 jne	 SHORT $LN4@decimal_po

; 229  : 		return (_Dp);

  00009	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 124  : 		}

  0000c	c3		 ret	 0
$LN4@decimal_po:

; 123  : 		return (do_decimal_point());

  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	ff e0		 jmp	 eax
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 695  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 696  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 690  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 691  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 680  : 		{	// store element and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 39		 je	 SHORT $LN3@operator

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  0000d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00010	83 38 00	 cmp	 DWORD PTR [eax], 0
  00013	74 20		 je	 SHORT $LN7@operator
  00015	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  0001a	85 c0		 test	 eax, eax
  0001c	7e 17		 jle	 SHORT $LN7@operator

; 306  : 		--*_IPcount;

  0001e	48		 dec	 eax
  0001f	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  00021	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00029	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  0002b	8a 45 08	 mov	 al, BYTE PTR __Right$[ebp]
  0002e	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00030	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00033	eb 0c		 jmp	 SHORT $LN8@operator
$LN7@operator:
  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  0003a	0f b6 45 08	 movzx	 eax, BYTE PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0003e	50		 push	 eax
  0003f	ff d2		 call	 edx
$LN8@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00041	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00044	75 03		 jne	 SHORT $LN24@operator
$LN3@operator:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

  00046	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN24@operator:

; 685  : 		return (*this);
; 686  : 		}

  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3210 : 		{	// subscript immutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00007	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000a	72 02		 jb	 SHORT $LN14@operator
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3216 : 		}

  0000e	03 c1		 add	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2786 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1830 : 		if (_Mysize < _Off)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]

; 2786 : 		{	// insert _Count * _Ch at _Off

  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1830 : 		if (_Mysize < _Off)

  0000b	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0000e	3b ca		 cmp	 ecx, edx
  00010	72 61		 jb	 SHORT $LN25@insert

; 2787 : 		auto& _My_data = this->_Get_data();
; 2788 : 		_My_data._Check_offset(_Off);
; 2789 : 		const size_type _Old_size = _My_data._Mysize;
; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

  00012	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00015	8b c6		 mov	 eax, esi
  00017	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001a	2b c1		 sub	 eax, ecx
  0001c	3b d8		 cmp	 ebx, eax
  0001e	77 38		 ja	 SHORT $LN2@insert

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  00020	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00023	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00026	8b c7		 mov	 eax, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00028	83 fe 10	 cmp	 esi, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0002b	72 02		 jb	 SHORT $LN13@insert
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002d	8b 07		 mov	 eax, DWORD PTR [edi]
$LN13@insert:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0002f	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  00031	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00034	41		 inc	 ecx
  00035	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00038	51		 push	 ecx
  00039	56		 push	 esi
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memmove

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00040	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2797 : 			return (*this);

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi

; 2801 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {
; 2803 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);
; 2804 : 			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 2806 : 			}, _Off, _Count, _Ch));
; 2807 : 		}

  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
$LN2@insert:

; 2798 : 			}
; 2799 : 
; 2800 : 		return (_Reallocate_grow_by(_Count,

  00058	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  0005b	c6 45 08 00	 mov	 BYTE PTR $T1[ebp], 0
  0005f	8b cf		 mov	 ecx, edi
  00061	53		 push	 ebx
  00062	52		 push	 edx
  00063	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00066	53		 push	 ebx
  00067	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
  0006c	5f		 pop	 edi

; 2801 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {
; 2803 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);
; 2804 : 			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 2806 : 			}, _Off, _Count, _Ch));
; 2807 : 		}

  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
$LN25@insert:

; 1832 : 			_Xran();

  00073	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN23@insert:
  00078	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBE@QADQBDIIID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__Count$ = 24						; size = 4
__Ch$ = 28						; size = 1
??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBE@QADQBDIIID@Z PROC ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator(), COMDAT
; _this$dead$ = ecx

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Old_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  00007	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  0000b	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0000c	8b 7d 14	 mov	 edi, DWORD PTR __Off$[ebp]
  0000f	57		 push	 edi
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00017	0f be 45 1c	 movsx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2804 : 			_Traits::assign(_New_ptr + _Off, _Count, _Ch);

  0001b	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001d	8b 75 18	 mov	 esi, DWORD PTR __Count$[ebp]
  00020	56		 push	 esi
  00021	50		 push	 eax
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00028	8b 4d 14	 mov	 ecx, DWORD PTR __Off$[ebp]
  0002b	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0002e	2b c1		 sub	 eax, ecx
  00030	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00031	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00032	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00035	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00036	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memcpy
  0003f	83 c4 24	 add	 esp, 36			; 00000024H
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2806 : 			}, _Off, _Count, _Ch));

  00045	5d		 pop	 ebp
  00046	c2 18 00	 ret	 24			; 00000018H
??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBE@QADQBDIIID@Z ENDP ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2301 : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 2302 : 		if (this != _STD addressof(_Right))

  00026	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00029	3b f7		 cmp	 esi, edi
  0002b	74 61		 je	 SHORT $LN2@operator

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00030	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00033	72 27		 jb	 SHORT $LN46@operator
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00037	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN45@operator

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00040	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	83 c0 fc	 add	 eax, -4			; fffffffcH
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 53		 ja	 SHORT $LN42@operator

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00050	8b c2		 mov	 eax, edx
$LN45@operator:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
$LN46@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0005c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00063	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0006a	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0006d	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00070	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00073	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00078	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0007d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00084	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0008b	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN2@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2311 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi

; 2312 : 		}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
$LN42@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@operator:
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 317  : 		_IGfirst = &_Gfirst;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 318  : 		_IPfirst = &_Pfirst;

  00006	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]

; 319  : 		_IGnext = &_Gnext;

  00009	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0000c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 320  : 		_IPnext = &_Pnext;

  00012	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00015	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 321  : 		_IGcount = &_Gcount;

  00018	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  0001b	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 322  : 		_IPcount = &_Pcount;

  0001e	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00021	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 292  : 		*_IPfirst = _First;

  00024	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 293  : 		*_IPnext = _First;

  0002a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  00033	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 251  : 		*_IGfirst = _First;

  0003c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00045	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0004e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 323  : 		setp(nullptr, nullptr);
; 324  : 		setg(nullptr, nullptr, nullptr);
; 325  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 142  : 		{	// synchronize with external agent

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00005	3d 00 00 00 00	 cmp	 eax, OFFSET ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
  0000a	75 03		 jne	 SHORT $LN4@pubsync

; 143  : 		return (sync());

  0000c	33 c0		 xor	 eax, eax

; 144  : 		}

  0000e	c3		 ret	 0
$LN4@pubsync:

; 143  : 		return (sync());

  0000f	ff e0		 jmp	 eax
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
$T2 = -24						; size = 8
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$dead$ = 12					; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 163  : 		{	// initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 318  : 		clear(_State, false);

  00031	6a 00		 push	 0
  00033	6a 00		 push	 0

; 549  : 		_Ploc = nullptr;

  00035	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 550  : 		_Stdstr = 0;

  0003c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 551  : 		_Except = goodbit;

  00043	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 552  : 		_Fmtfl = (fmtflags)(skipws | dec);

  0004a	c7 47 14 01 02
	00 00		 mov	 DWORD PTR [edi+20], 513	; 00000201H

; 553  : 		_Prec = 6;

  00051	c7 47 18 06 00
	00 00		 mov	 DWORD PTR [edi+24], 6
  00058	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 554  : 		_Wide = 0;

  0005f	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00066	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 555  : 		_Arr = nullptr;

  0006d	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 556  : 		_Calls = nullptr;

  00074	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 318  : 		clear(_State, false);

  0007b	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 558  : 		_Ploc = new locale;

  00080	6a 08		 push	 8
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 308  : 		: _Ptr(_Init(true))

  0008c	6a 01		 push	 1
  0008e	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00093	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00096	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  00099	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 558  : 		_Ploc = new locale;

  0009c	89 77 30	 mov	 DWORD PTR [edi+48], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 165  : 		_Mystrbuf = _Strbuf;

  0009f	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 166  : 		_Tiestr = nullptr;

  000a2	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000b0	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  000b3	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  000b6	8b ce		 mov	 ecx, esi
  000b8	89 75 ec	 mov	 DWORD PTR $T2[ebp+4], esi
  000bb	8b 06		 mov	 eax, DWORD PTR [esi]
  000bd	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000c0	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000c9	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2566 : 		return (do_widen(_Byte));

  000cc	8b c8		 mov	 ecx, eax
  000ce	8b 10		 mov	 edx, DWORD PTR [eax]
  000d0	6a 20		 push	 32			; 00000020H
  000d2	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  000d5	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000d7	8a d8		 mov	 bl, al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  000d9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 410  : 			delete _Ptr->_Decref();

  000e7	8b ce		 mov	 ecx, esi
  000e9	8b 16		 mov	 edx, DWORD PTR [esi]
  000eb	ff 52 08	 call	 DWORD PTR [edx+8]
  000ee	85 c0		 test	 eax, eax
  000f0	74 08		 je	 SHORT $LN35@init
  000f2	8b 10		 mov	 edx, DWORD PTR [eax]
  000f4	8b c8		 mov	 ecx, eax
  000f6	6a 01		 push	 1
  000f8	ff 12		 call	 DWORD PTR [edx]
$LN35@init:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 169  : 		if (_Mystrbuf == nullptr)

  000fa	83 7f 38 00	 cmp	 DWORD PTR [edi+56], 0
  000fe	88 5f 40	 mov	 BYTE PTR [edi+64], bl
  00101	75 10		 jne	 SHORT $LN3@init

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00103	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00106	8b cf		 mov	 ecx, edi
  00108	83 c8 04	 or	 eax, 4
  0010b	6a 00		 push	 0
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN3@init:

; 170  : 			setstate(badbit);
; 171  : 
; 172  : 		if (_Isstd)
; 173  : 			_Addstd(this);	// special handling for standard streams
; 174  : 		}

  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$1:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN27@init
  0000c	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00010	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN27@init:
  00018	c3		 ret	 0
__ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1829 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1830 : 		if (_Mysize < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00009	72 04		 jb	 SHORT $LN6@Check_offs

; 1833 : 			}
; 1834 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN6@Check_offs:

; 1831 : 			{
; 1832 : 			_Xran();

  0000f	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN4@Check_offs:
  00014	cc		 int	 3
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 1928 : 		_Pocma(_Getal(), _Al);
; 1929 : 		}

  00000	c2 04 00	 ret	 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents, COMDAT
; _this$ = ecx

; 2321 : 		{	// assign either as an rvalue or as an lvalue copy, allocators always equal optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00009	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0000c	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00011	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00016	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001d	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00024	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2326 : 		}

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 197  : 		{	// put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 22		 je	 SHORT $LN3@sputc
  0000b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  00010	85 c0		 test	 eax, eax
  00012	7e 19		 jle	 SHORT $LN3@sputc

; 306  : 		--*_IPcount;

  00014	48		 dec	 eax
  00015	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  00017	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  00021	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00024	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00026	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 201  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN3@sputc:

; 198  : 		return (0 < _Pnavail()

  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00032	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00036	89 45 08	 mov	 DWORD PTR __Ch$[ebp], eax

; 201  : 		}

  00039	5d		 pop	 ebp

; 198  : 		return (0 < _Pnavail()

  0003a	ff e2		 jmp	 edx
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 8
$T3 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Byte$dead$ = 8					; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 124  : 		{	// convert _Byte to character using imbued locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00035	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 302  : 		: _Ptr(_Right._Ptr)

  00038	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 303  : 		{	// construct by copying
; 304  : 		_Ptr->_Incref();

  0003b	8b ce		 mov	 ecx, esi
  0003d	89 75 e8	 mov	 DWORD PTR $T2[ebp+4], esi
  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00045	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 445  : 		return (*_Ploc);

  00048	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00055	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2566 : 		return (do_widen(_Byte));

  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	6a 20		 push	 32			; 00000020H
  0005c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0005f	8b c8		 mov	 ecx, eax
  00061	ff d2		 call	 edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00063	ba 01 00 00 00	 mov	 edx, 1
  00068	8a d8		 mov	 bl, al
  0006a	89 55 ec	 mov	 DWORD PTR $T3[ebp], edx
  0006d	83 e2 fe	 and	 edx, -2			; fffffffeH
  00070	89 55 ec	 mov	 DWORD PTR $T3[ebp], edx
  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	85 f6		 test	 esi, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 409  : 		if (_Ptr != nullptr)

  0007c	74 13		 je	 SHORT $LN18@widen

; 410  : 			delete _Ptr->_Decref();

  0007e	8b 16		 mov	 edx, DWORD PTR [esi]
  00080	8b ce		 mov	 ecx, esi
  00082	ff 52 08	 call	 DWORD PTR [edx+8]
  00085	85 c0		 test	 eax, eax
  00087	74 08		 je	 SHORT $LN18@widen
  00089	8b 10		 mov	 edx, DWORD PTR [eax]
  0008b	8b c8		 mov	 ecx, eax
  0008d	6a 01		 push	 1
  0008f	ff 12		 call	 DWORD PTR [edx]
$LN18@widen:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 126  : 		}

  00091	8a c3		 mov	 al, bl
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$1:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN7@widen
  0000c	83 65 ec fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00010	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN7@widen:
  00018	c3		 ret	 0
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1846 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 42 c2	 cmovb	 eax, edx

; 25   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 588  : 	if constexpr (_Range_verifiable_v<_Iter, _Sentinel>)
; 589  : 		{
; 590  : 		_Verify_range(_First, _Last);
; 591  : 		}
; 592  : 	else
; 593  : 		{
; 594  : 		(void)_First;
; 595  : 		(void)_Last;
; 596  : 		}
; 597  : 	}

  00000	c3		 ret	 0
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 52
$T3 = -48						; size = 16
__Lock$4 = -32						; size = 4
__Psave$1$ = -28					; size = 4
$T5 = -28						; size = 4
__Psave_guard$6 = -28					; size = 4
__Lock$7 = -24						; size = 4
$T8 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 58	 sub	 esp, 88			; 00000058H
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0003b	6a 00		 push	 0
  0003d	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00040	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0
  00047	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 116  : 			if (_Id == 0)

  00053	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0005e	89 45 e4	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 116  : 			if (_Id == 0)

  00061	85 ff		 test	 edi, edi
  00063	75 37		 jne	 SHORT $LN13@use_facet

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00065	57		 push	 edi
  00066	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00069	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 119  : 					if (_Id == 0)

  00072	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  00078	75 10		 jne	 SHORT $LN14@use_facet

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0007f	40		 inc	 eax
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00085	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN14@use_facet:

; 122  : 						}
; 123  : 				_END_LOCK()

  0008a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0008e	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00091	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00096	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN13@use_facet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0009c	8b 4b 08	 mov	 ecx, DWORD PTR __Loc$[ebx]
  0009f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a2	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  000a5	73 10		 jae	 SHORT $LN22@use_facet
  000a7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000aa	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  000ad	85 f6		 test	 esi, esi
  000af	0f 85 08 01 00
	00		 jne	 $LN101@use_facet
  000b5	eb 02		 jmp	 SHORT $LN103@use_facet
$LN22@use_facet:

; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  000b7	33 f6		 xor	 esi, esi
$LN103@use_facet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  000b9	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000bd	74 10		 je	 SHORT $LN19@use_facet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  000bf	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  000c4	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000c7	73 0e		 jae	 SHORT $LN104@use_facet
  000c9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000cc	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN19@use_facet:

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)

  000cf	85 f6		 test	 esi, esi
  000d1	0f 85 e6 00 00
	00		 jne	 $LN101@use_facet
$LN104@use_facet:

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  000d7	8b 45 e4	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000da	85 c0		 test	 eax, eax
  000dc	74 07		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  000de	8b f0		 mov	 esi, eax

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

  000e0	e9 d8 00 00 00	 jmp	 $LN101@use_facet
$LN3@use_facet:

; 2620 : 			*_Ppf = new ctype<_Elem>(

  000e5	6a 18		 push	 24			; 00000018H
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	8b f0		 mov	 esi, eax
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 75 e4	 mov	 DWORD PTR $T5[ebp], esi
  000f4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  000f8	8b 43 08	 mov	 eax, DWORD PTR __Loc$[ebx]
  000fb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000fe	85 c9		 test	 ecx, ecx
  00100	75 07		 jne	 SHORT $LN37@use_facet
  00102	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  00107	eb 0a		 jmp	 SHORT $LN42@use_facet
$LN37@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00109	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0010c	85 c0		 test	 eax, eax
  0010e	75 03		 jne	 SHORT $LN42@use_facet
  00110	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN42@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2620 : 			*_Ppf = new ctype<_Elem>(

  00113	50		 push	 eax
  00114	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00117	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0011c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00120	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T8[ebp], 1
  00127	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@

; 172  : 			{	// construct with initial reference count

  0012d	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 154  : 			}
; 155  : 
; 156  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref() override
; 157  : 			{	// decrement use count
; 158  : 			if (_MT_DECR(_Myrefs) == 0)
; 159  : 				{
; 160  : 				return (this);
; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);
; 164  : 			}
; 165  : 
; 166  : 	private:
; 167  : 		_Atomic_counter_t _Myrefs;	// the reference count
; 168  : 
; 169  : 	protected:
; 170  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00134	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00137	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0013d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2212 : 		: locale::facet(_Refs)

  00143	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5

; 2213 : 		{	// default constructor

  0014a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ctype_base@std@@6B@

; 2611 : 		: ctype_base(_Refs)

  00150	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  00157	8d 45 d0	 lea	 eax, DWORD PTR $T3[ebp]
  0015a	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2612 : 		{	// construct from current locale

  0015b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 117  : 		return (::_Getctype());

  00161	e8 00 00 00 00	 call	 __Getctype
  00166	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 2646 : 		_Ctype = _Lobj._Getctype();

  00169	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0016c	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2620 : 			*_Ppf = new ctype<_Elem>(

  00170	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00177	b8 01 00 00 00	 mov	 eax, 1
  0017c	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
  0017f	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00182	83 e0 fe	 and	 eax, -2			; fffffffeH
  00185	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
  00188	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0018d	89 75 e4	 mov	 DWORD PTR __Psave_guard$6[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

  00190	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

  00194	56		 push	 esi
  00195	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  0019a	8b 06		 mov	 eax, DWORD PTR [esi]
  0019c	83 c4 04	 add	 esp, 4
  0019f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001a2	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref
  001a7	75 39		 jne	 SHORT $LN9@use_facet

; 153  : 			_MT_INCR(_Myrefs);

  001a9	f0 ff 07	 lock	  inc	 DWORD PTR [edi]
$LN8@use_facet:

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  001ac	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory

; 2323 : 		this->_Myptr() = pointer();

  001b2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Psave_guard$6[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 543  : 				}

  001b9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
$LN101@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  001bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c4	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  001c7	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  001cc	8b c6		 mov	 eax, esi

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  001ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d8	59		 pop	 ecx
  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	8b e3		 mov	 esp, ebx
  001e0	5b		 pop	 ebx
  001e1	c3		 ret	 0
$LN9@use_facet:
  001e2	8b ce		 mov	 ecx, esi

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  001e4	ff d0		 call	 eax
  001e6	eb c4		 jmp	 SHORT $LN8@use_facet
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$3:
  00010	6a 18		 push	 24			; 00000018H
  00012	8b 45 e4	 mov	 eax, DWORD PTR $T5[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001b	83 c4 08	 add	 esp, 8
  0001e	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$4:
  0001f	8b 45 ec	 mov	 eax, DWORD PTR $T8[ebp]
  00022	83 e0 01	 and	 eax, 1
  00025	0f 84 0c 00 00
	00		 je	 $LN33@use_facet
  0002b	83 65 ec fe	 and	 DWORD PTR $T8[ebp], -2	; fffffffeH
  0002f	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN33@use_facet:
  00037	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$7:
  00038	8b 4d e4	 mov	 ecx, DWORD PTR $T5[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$6:
  00040	8b 4d e4	 mov	 ecx, DWORD PTR $T5[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$5:
  00048	8b 4d e4	 mov	 ecx, DWORD PTR $T5[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00050	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00058	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005f	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ
_TEXT	SEGMENT
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ PROC ; std::_Immortalize<std::_Iostream_error_category>, COMDAT

; 608  : 	static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
; 609  : 	static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
; 610  : 	static void * _Flag = nullptr;
; 611  : 	static aligned_union_t<1, _Ty> _Storage;
; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00000	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00005	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000a	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
  0000f	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	0f 84 00 00 00
	00		 je	 _terminate

; 613  : 		{	// _Execute_once should never fail if the callback never fails
; 614  : 		_STD terminate();
; 615  : 		}
; 616  : 
; 617  : 	return (reinterpret_cast<_Ty&>(_Storage));

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage

; 618  : 	}

  00024	c3		 ret	 0
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ENDP ; std::_Immortalize<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -48						; size = 8
__Pad$ = -40						; size = 8
__Val$1$ = -32						; size = 4
__Count$2$ = -28					; size = 4
__State$ = -24						; size = 4
__Ostr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; __Ostr$ = ecx
; __Val$ = edx

; 790  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c2		 mov	 eax, edx
  0002d	89 45 e0	 mov	 DWORD PTR __Val$1$[ebp], eax
  00030	89 4d ec	 mov	 DWORD PTR __Ostr$[ebp], ecx

; 791  : 	typedef char _Elem;
; 792  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 793  : 	ios_base::iostate _State = ios_base::goodbit;

  00033	33 db		 xor	 ebx, ebx
  00035	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00038	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0003b	0f 1f 44 00 00	 npad	 5
$LL91@operator:
  00040	8a 02		 mov	 al, BYTE PTR [edx]
  00042	42		 inc	 edx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL91@operator
  00047	2b d6		 sub	 edx, esi
  00049	89 55 e4	 mov	 DWORD PTR __Count$2$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 433  : 		return (_Wide);

  0004c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	8b 74 08 20	 mov	 esi, DWORD PTR [eax+ecx+32]
  00055	8b 7c 08 24	 mov	 edi, DWORD PTR [eax+ecx+36]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 795  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  00059	85 ff		 test	 edi, edi
  0005b	7c 16		 jl	 SHORT $LN17@operator
  0005d	7f 0e		 jg	 SHORT $LN93@operator
  0005f	85 f6		 test	 esi, esi
  00061	74 10		 je	 SHORT $LN17@operator
  00063	85 ff		 test	 edi, edi
  00065	7c 0c		 jl	 SHORT $LN17@operator
  00067	7f 04		 jg	 SHORT $LN93@operator
  00069	3b f2		 cmp	 esi, edx
  0006b	76 06		 jbe	 SHORT $LN17@operator
$LN93@operator:
  0006d	2b f2		 sub	 esi, edx
  0006f	1b fb		 sbb	 edi, ebx
  00071	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00073	0f 57 c0	 xorps	 xmm0, xmm0
  00076	66 0f 13 45 d8	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  0007b	8b 7d dc	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  0007e	8b 75 d8	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 796  : 		? 0 : _Ostr.width() - _Count;
; 797  : 	const typename _Myos::sentry _Ok(_Ostr);

  00081	51		 push	 ecx
  00082	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00085	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 798  : 
; 799  : 	if (!_Ok)

  00091	80 7d d4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00095	75 0a		 jne	 SHORT $LN8@operator

; 800  : 		_State |= ios_base::badbit;

  00097	bb 04 00 00 00	 mov	 ebx, 4

; 801  : 	else

  0009c	e9 f0 00 00 00	 jmp	 $LN104@operator
$LN8@operator:

; 802  : 		{	// state okay, insert
; 803  : 		_TRY_IO_BEGIN

  000a1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 804  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000a5	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a8	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 390  : 		return (_Fmtfl);

  000aa	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ad	8b 44 10 14	 mov	 eax, DWORD PTR [eax+edx+20]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 804  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000b1	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000b6	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b9	74 3a		 je	 SHORT $LN87@operator
  000bb	0f 1f 44 00 00	 npad	 5
$LL4@operator:

; 805  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000c0	85 ff		 test	 edi, edi
  000c2	7c 2f		 jl	 SHORT $LN3@operator
  000c4	7f 04		 jg	 SHORT $LN94@operator
  000c6	85 f6		 test	 esi, esi
  000c8	74 29		 je	 SHORT $LN3@operator
$LN94@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  000ca	8b 02		 mov	 eax, DWORD PTR [edx]
  000cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cf	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]

; 108  : 		return (_Fillch);

  000d3	8a 44 10 40	 mov	 al, BYTE PTR [eax+edx+64]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 806  : 				if (_Traits::eq_int_type(_Traits::eof(),

  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  000dd	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 806  : 				if (_Traits::eq_int_type(_Traits::eof(),

  000e0	74 63		 je	 SHORT $LN95@operator

; 805  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000e2	83 c6 ff	 add	 esi, -1
  000e5	89 75 d8	 mov	 DWORD PTR __Pad$[ebp], esi
  000e8	83 d7 ff	 adc	 edi, -1
  000eb	89 7d dc	 mov	 DWORD PTR __Pad$[ebp+4], edi
  000ee	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000f1	eb cd		 jmp	 SHORT $LL4@operator
$LN3@operator:

; 814  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000f3	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN87@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  000f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 814  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000f8	6a 00		 push	 0
  000fa	ff 75 e4	 push	 DWORD PTR __Count$2$[ebp]
  000fd	ff 75 e0	 push	 DWORD PTR __Val$1$[ebp]
  00100	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00104	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  00109	3b 45 e4	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  0010c	75 37		 jne	 SHORT $LN95@operator
  0010e	85 d2		 test	 edx, edx
  00110	75 33		 jne	 SHORT $LN95@operator
$LL97@operator:

; 815  : 			_State |= ios_base::badbit;
; 816  : 
; 817  : 		if (_State == ios_base::goodbit)
; 818  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00112	85 ff		 test	 edi, edi
  00114	7c 37		 jl	 SHORT $LN6@operator
  00116	7f 04		 jg	 SHORT $LN96@operator
  00118	85 f6		 test	 esi, esi
  0011a	74 31		 je	 SHORT $LN6@operator
$LN96@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 87   : 		return (_Mystrbuf);

  0011c	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0011f	8b 02		 mov	 eax, DWORD PTR [edx]
  00121	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00124	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]

; 108  : 		return (_Fillch);

  00128	8a 44 10 40	 mov	 al, BYTE PTR [eax+edx+64]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 819  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00132	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 819  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00135	74 0e		 je	 SHORT $LN95@operator

; 815  : 			_State |= ios_base::badbit;
; 816  : 
; 817  : 		if (_State == ios_base::goodbit)
; 818  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00137	83 c6 ff	 add	 esi, -1
  0013a	89 75 d8	 mov	 DWORD PTR __Pad$[ebp], esi
  0013d	83 d7 ff	 adc	 edi, -1
  00140	89 7d dc	 mov	 DWORD PTR __Pad$[ebp+4], edi
  00143	eb cd		 jmp	 SHORT $LL97@operator
$LN95@operator:

; 820  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 821  : 					{	// insertion failed, quit
; 822  : 					_State |= ios_base::badbit;
; 823  : 					break;
; 824  : 					}
; 825  : 		_Ostr.width(0);

  00145	bb 04 00 00 00	 mov	 ebx, 4
  0014a	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
$LN6@operator:
  0014d	8b 75 ec	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00150	8b 06		 mov	 eax, DWORD PTR [esi]
  00152	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  00155	c7 44 30 20 00
	00 00 00	 mov	 DWORD PTR [eax+esi+32], 0
  0015d	c7 44 30 24 00
	00 00 00	 mov	 DWORD PTR [eax+esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream
  00165	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0016c	eb 26		 jmp	 SHORT $LN22@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 826  : 		_CATCH_IO_(_Ostr)

  0016e	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00171	8b 02		 mov	 eax, DWORD PTR [edx]
  00173	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00176	03 ca		 add	 ecx, edx
  00178	6a 01		 push	 1
  0017a	6a 04		 push	 4
  0017c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00181	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00186	c3		 ret	 0
$LN23@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
  00187	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0018e	8b 5d e8	 mov	 ebx, DWORD PTR __State$[ebp]
$LN104@operator:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 827  : 		}
; 828  : 
; 829  : 	_Ostr.setstate(_State);

  00191	8b 75 ec	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN22@operator:
  00194	8b 06		 mov	 eax, DWORD PTR [esi]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xiosbase

; 330  : 		return (_Mystate);

  0019b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0019e	0b d3		 or	 edx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ios

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  001a0	6a 00		 push	 0
  001a2	8b c2		 mov	 eax, edx
  001a4	83 c8 04	 or	 eax, 4
  001a7	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  001ab	0f 45 c2	 cmovne	 eax, edx
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\ostream

; 135  : 			{	// destroy the object

  001b4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  001bb	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  001c0	84 c0		 test	 al, al
  001c2	75 08		 jne	 SHORT $LN67@operator

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  001c4	8b 4d d0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001c7	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN67@operator:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  001cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  001d3	8b 4d d0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001db	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  001df	85 c9		 test	 ecx, ecx
  001e1	74 0c		 je	 SHORT $LN98@operator
  001e3	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001e8	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
  001ed	75 14		 jne	 SHORT $LN106@operator
$LN98@operator:

; 830  : 	return (_Ostr);
; 831  : 	}

  001ef	8b c6		 mov	 eax, esi
  001f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fb	59		 pop	 ecx
  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	5b		 pop	 ebx
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
$LN106@operator:

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00203	ff d0		 call	 eax
  00205	eb e8		 jmp	 SHORT $LN98@operator
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]

; 1784 : 		_Mysize(0),

  00006	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 1785 : 		_Myres(0)

  0000d	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0001a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001f	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00024	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0002b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00032	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
tv545 = -40						; size = 4
__Oldsize$1$ = -36					; size = 4
__Newcapacity$ = -32					; size = 4
__Whereoff$1$ = -28					; size = 4
__Constructed_last$ = -28				; size = 4
$T2 = -24						; size = 4
__Constructed_first$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  0002d	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0002f	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00032	2b d7		 sub	 edx, edi
  00034	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00039	f7 ea		 imul	 edx
  0003b	c1 fa 02	 sar	 edx, 2
  0003e	8b c2		 mov	 eax, edx
  00040	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00043	03 c2		 add	 eax, edx
  00045	89 45 e4	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00048	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0004b	2b cf		 sub	 ecx, edi
  0004d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00052	f7 e9		 imul	 ecx
  00054	c1 fa 02	 sar	 edx, 2
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx
  0005e	89 45 dc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 945  : 		_Alty& _Al = this->_Getal();
; 946  : 		const size_type _Oldsize = size();
; 947  : 
; 948  : 		if (_Oldsize == max_size())

  00061	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00066	0f 84 43 01 00
	00		 je	 $LN169@Emplace_re

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  0006c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0006f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00072	2b cf		 sub	 ecx, edi
  00074	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00079	f7 e9		 imul	 ecx
  0007b	c1 fa 02	 sar	 edx, 2
  0007e	8b ca		 mov	 ecx, edx
  00080	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00083	03 ca		 add	 ecx, edx

; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00085	8b d1		 mov	 edx, ecx
  00087	d1 ea		 shr	 edx, 1
  00089	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  0008e	2b c2		 sub	 eax, edx
  00090	3b c8		 cmp	 ecx, eax
  00092	76 07		 jbe	 SHORT $LN48@Emplace_re

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  00094	8b fe		 mov	 edi, esi
  00096	89 75 e0	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  00099	eb 0b		 jmp	 SHORT $LN49@Emplace_re
$LN48@Emplace_re:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009b	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0009e	3b fe		 cmp	 edi, esi
  000a0	0f 42 fe	 cmovb	 edi, esi
  000a3	89 7d e0	 mov	 DWORD PTR __Newcapacity$[ebp], edi
$LN49@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  000a6	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000a9	c1 e1 03	 shl	 ecx, 3

; 26   : 	if (_Max_possible < _Count)

  000ac	81 ff aa aa aa
	0a		 cmp	 edi, 178956970		; 0aaaaaaaH
  000b2	76 05		 jbe	 SHORT $LN80@Emplace_re

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  000b4	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  000b7	eb 08		 jmp	 SHORT $LN164@Emplace_re
$LN80@Emplace_re:
  000b9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000bf	72 27		 jb	 SHORT $LN83@Emplace_re
$LN164@Emplace_re:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  000c1	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  000c4	83 ca ff	 or	 edx, -1
  000c7	3b c1		 cmp	 eax, ecx
  000c9	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d2	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000d5	85 c0		 test	 eax, eax
  000d7	0f 84 d7 00 00
	00		 je	 $LN92@Emplace_re

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000dd	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  000e0	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000e3	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000e6	eb 16		 jmp	 SHORT $LN167@Emplace_re
$LN83@Emplace_re:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000e8	85 c9		 test	 ecx, ecx
  000ea	74 10		 je	 SHORT $LN84@Emplace_re

; 52   : 		return (::operator new(_Bytes));

  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f2	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000f5	8b f0		 mov	 esi, eax
  000f7	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  000fa	eb 05		 jmp	 SHORT $LN82@Emplace_re
$LN84@Emplace_re:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000fc	33 f6		 xor	 esi, esi
$LN167@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000fe	89 75 e8	 mov	 DWORD PTR $T2[ebp], esi
$LN82@Emplace_re:
  00101	8b 45 e4	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  00104	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00107	c1 e0 03	 shl	 eax, 3
  0010a	89 45 d8	 mov	 DWORD PTR tv545[ebp], eax
  0010d	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  00110	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00113	89 45 e4	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 958  : 		pointer _Constructed_first = _Constructed_last;

  00116	89 45 ec	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 959  : 
; 960  : 		_TRY_BEGIN

  00119	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00120	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00123	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00128	83 c4 04	 add	 esp, 4

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

  0012b	89 55 ec	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

  0012e	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00131	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00134	53		 push	 ebx
  00135	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00137	56		 push	 esi
  00138	3b c2		 cmp	 eax, edx
  0013a	75 0a		 jne	 SHORT $LN4@Emplace_re

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  0013c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00141	83 c4 08	 add	 esp, 8

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 967  : 			}
; 968  : 		else

  00144	eb 1c		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00146	8b d0		 mov	 edx, eax
  00148	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);
; 971  : 			_Constructed_first = _Newvec;

  0014d	89 75 ec	 mov	 DWORD PTR __Constructed_first$[ebp], esi

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00150	53		 push	 ebx
  00151	ff 75 e4	 push	 DWORD PTR __Constructed_last$[ebp]
  00154	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00157	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0015a	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0015f	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:
  00162	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 978  : 		_CATCH_END
; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

  00169	57		 push	 edi
  0016a	8b 45 dc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0016d	40		 inc	 eax
  0016e	50		 push	 eax
  0016f	56		 push	 esi
  00170	8b cb		 mov	 ecx, ebx
  00172	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

  00177	8b 03		 mov	 eax, DWORD PTR [ebx]
  00179	03 45 d8	 add	 eax, DWORD PTR tv545[ebp]

; 982  : 		}

  0017c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0017f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00186	59		 pop	 ecx
  00187	5f		 pop	 edi
  00188	5e		 pop	 esi
  00189	5b		 pop	 ebx
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$0:

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);
; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

  00190	ff 75 e4	 push	 DWORD PTR __Constructed_last$[ebp]
  00193	ff 75 ec	 push	 DWORD PTR __Constructed_first$[ebp]
  00196	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

  0019b	ff 75 e0	 push	 DWORD PTR __Newcapacity$[ebp]
  0019e	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  001a1	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 977  : 		_RERAISE;

  001a6	6a 00		 push	 0
  001a8	6a 00		 push	 0
  001aa	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN169@Emplace_re:

; 949  : 			{
; 950  : 			_Xlength();

  001af	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN92@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  001b4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN166@Emplace_re:
  001b9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1919 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1919 : 		}

  00010	c2 04 00	 ret	 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@PAD@std@@YAABQADABQAD0@Z
_TEXT	SEGMENT
??$_Max_value@PAD@std@@YAABQADABQAD0@Z PROC		; std::_Max_value<char *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 02		 cmp	 eax, DWORD PTR [edx]
  00004	0f 42 ca	 cmovb	 ecx, edx
  00007	8b c1		 mov	 eax, ecx

; 34   : 	}

  00009	c3		 ret	 0
??$_Max_value@PAD@std@@YAABQADABQAD0@Z ENDP		; std::_Max_value<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -76						; size = 52
__Lock$3 = -24						; size = 4
$T4 = -20						; size = 4
__Lock$5 = -20						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$7 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  00034	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 116  : 			if (_Id == 0)

  00040	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00046	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave

; 116  : 			if (_Id == 0)

  0004c	85 ff		 test	 edi, edi
  0004e	75 37		 jne	 SHORT $LN13@use_facet

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00050	57		 push	 edi
  00051	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00054	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 119  : 					if (_Id == 0)

  0005d	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, edi ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00063	75 10		 jne	 SHORT $LN14@use_facet

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0006a	40		 inc	 eax
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00070	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN14@use_facet:

; 122  : 						}
; 123  : 				_END_LOCK()

  00075	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00079	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00081	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN13@use_facet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0008a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0008d	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00090	73 10		 jae	 SHORT $LN22@use_facet
  00092	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00095	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00098	85 f6		 test	 esi, esi
  0009a	0f 85 e5 00 00
	00		 jne	 $LN96@use_facet
  000a0	eb 02		 jmp	 SHORT $LN98@use_facet
$LN22@use_facet:

; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  000a2	33 f6		 xor	 esi, esi
$LN98@use_facet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  000a4	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a8	74 10		 je	 SHORT $LN19@use_facet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  000aa	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  000af	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b2	73 0e		 jae	 SHORT $LN99@use_facet
  000b4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b7	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN19@use_facet:

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)

  000ba	85 f6		 test	 esi, esi
  000bc	0f 85 c3 00 00
	00		 jne	 $LN96@use_facet
$LN99@use_facet:

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  000c2	85 db		 test	 ebx, ebx
  000c4	74 07		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  000c6	8b f3		 mov	 esi, ebx

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

  000c8	e9 b8 00 00 00	 jmp	 $LN96@use_facet
$LN3@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  000cd	6a 08		 push	 8
  000cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d4	8b f0		 mov	 esi, eax
  000d6	83 c4 04	 add	 esp, 4
  000d9	89 75 ec	 mov	 DWORD PTR $T4[ebp], esi
  000dc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  000e0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	85 c9		 test	 ecx, ecx
  000e8	75 07		 jne	 SHORT $LN37@use_facet
  000ea	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  000ef	eb 0a		 jmp	 SHORT $LN42@use_facet
$LN37@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  000f1	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000f4	85 c0		 test	 eax, eax
  000f6	75 03		 jne	 SHORT $LN42@use_facet
  000f8	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN42@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  000fb	50		 push	 eax
  000fc	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000ff	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00104	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00108	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
  0010f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 172  : 			{	// construct with initial reference count

  00115	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 154  : 			}
; 155  : 
; 156  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref() override
; 157  : 			{	// decrement use count
; 158  : 			if (_MT_DECR(_Myrefs) == 0)
; 159  : 				{
; 160  : 				return (this);
; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);
; 164  : 			}
; 165  : 
; 166  : 	private:
; 167  : 		_Atomic_counter_t _Myrefs;	// the reference count
; 168  : 
; 169  : 	protected:
; 170  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0011c	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0011f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00125	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1447 : 		: locale::facet(_Refs)

  0012b	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5

; 1448 : 		{	// construct from specified locale

  00132	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00138	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  00147	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0014a	83 e0 fe	 and	 eax, -2			; fffffffeH
  0014d	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  00150	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00155	89 75 08	 mov	 DWORD PTR __Psave_guard$7[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

  00158	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

  0015c	56		 push	 esi
  0015d	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00162	8b 06		 mov	 eax, DWORD PTR [esi]
  00164	83 c4 04	 add	 esp, 4
  00167	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016a	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref
  0016f	75 37		 jne	 SHORT $LN9@use_facet

; 153  : 			_MT_INCR(_Myrefs);

  00171	f0 ff 07	 lock	  inc	 DWORD PTR [edi]
$LN8@use_facet:

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  00174	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory

; 2323 : 		this->_Myptr() = pointer();

  0017a	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Psave_guard$7[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 543  : 				}

  00181	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
$LN96@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  00185	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018c	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0018f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00194	8b c6		 mov	 eax, esi

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
$LN9@use_facet:
  001a8	8b ce		 mov	 ecx, esi

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  001aa	ff d0		 call	 eax
  001ac	eb c6		 jmp	 SHORT $LN8@use_facet
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$3:
  00010	6a 08		 push	 8
  00012	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001b	83 c4 08	 add	 esp, 8
  0001e	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$4:
  0001f	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  00022	83 e0 01	 and	 eax, 1
  00025	0f 84 0c 00 00
	00		 je	 $LN33@use_facet
  0002b	83 65 f0 fe	 and	 DWORD PTR $T6[ebp], -2	; fffffffeH
  0002f	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN33@use_facet:
  00037	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$6:
  00038	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$5:
  00040	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1:
  00048	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$7[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00050	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00054	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00057	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00066	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -76						; size = 52
__Lock$3 = -24						; size = 4
$T4 = -20						; size = 4
__Lock$5 = -20						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$7 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  00034	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 116  : 			if (_Id == 0)

  00040	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00046	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave

; 116  : 			if (_Id == 0)

  0004c	85 ff		 test	 edi, edi
  0004e	75 37		 jne	 SHORT $LN13@use_facet

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00050	57		 push	 edi
  00051	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00054	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 119  : 					if (_Id == 0)

  0005d	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, edi ; std::numpunct<char>::id
  00063	75 10		 jne	 SHORT $LN14@use_facet

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0006a	40		 inc	 eax
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00070	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN14@use_facet:

; 122  : 						}
; 123  : 				_END_LOCK()

  00075	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00079	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00081	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
$LN13@use_facet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0008a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0008d	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00090	73 10		 jae	 SHORT $LN22@use_facet
  00092	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00095	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00098	85 f6		 test	 esi, esi
  0009a	0f 85 ef 00 00
	00		 jne	 $LN94@use_facet
  000a0	eb 02		 jmp	 SHORT $LN96@use_facet
$LN22@use_facet:

; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  000a2	33 f6		 xor	 esi, esi
$LN96@use_facet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  000a4	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a8	74 10		 je	 SHORT $LN19@use_facet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  000aa	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  000af	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b2	73 0e		 jae	 SHORT $LN97@use_facet
  000b4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b7	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN19@use_facet:

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)

  000ba	85 f6		 test	 esi, esi
  000bc	0f 85 cd 00 00
	00		 jne	 $LN94@use_facet
$LN97@use_facet:

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  000c2	85 db		 test	 ebx, ebx
  000c4	74 07		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  000c6	8b f3		 mov	 esi, ebx

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

  000c8	e9 c2 00 00 00	 jmp	 $LN94@use_facet
$LN3@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  000cd	6a 18		 push	 24			; 00000018H
  000cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d4	8b f0		 mov	 esi, eax
  000d6	83 c4 04	 add	 esp, 4
  000d9	89 75 ec	 mov	 DWORD PTR $T4[ebp], esi
  000dc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  000e0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	85 c9		 test	 ecx, ecx
  000e8	75 07		 jne	 SHORT $LN37@use_facet
  000ea	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  000ef	eb 0a		 jmp	 SHORT $LN42@use_facet
$LN37@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  000f1	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000f4	85 c0		 test	 eax, eax
  000f6	75 03		 jne	 SHORT $LN42@use_facet
  000f8	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN42@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  000fb	50		 push	 eax
  000fc	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000ff	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00104	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00108	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
  0010f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 172  : 			{	// construct with initial reference count

  00115	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 154  : 			}
; 155  : 
; 156  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref() override
; 157  : 			{	// decrement use count
; 158  : 			if (_MT_DECR(_Myrefs) == 0)
; 159  : 				{
; 160  : 				return (this);
; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);
; 164  : 			}
; 165  : 
; 166  : 	private:
; 167  : 		_Atomic_counter_t _Myrefs;	// the reference count
; 168  : 
; 169  : 	protected:
; 170  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0011c	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0011f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00125	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 158  : 		: locale::facet(_Refs)

  0012b	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5

; 159  : 		{	// construct from specified locale
; 160  : 		_Init(_Lobj, _Isdef);

  00132	8b ce		 mov	 ecx, esi
  00134	6a 01		 push	 1
  00136	50		 push	 eax
  00137	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0013d	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00142	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00149	b8 01 00 00 00	 mov	 eax, 1
  0014e	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  00151	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00154	83 e0 fe	 and	 eax, -2			; fffffffeH
  00157	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  0015a	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0015f	89 75 08	 mov	 DWORD PTR __Psave_guard$7[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

  00162	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  0016c	8b 06		 mov	 eax, DWORD PTR [esi]
  0016e	83 c4 04	 add	 esp, 4
  00171	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00174	3d 00 00 00 00	 cmp	 eax, OFFSET ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref
  00179	75 37		 jne	 SHORT $LN9@use_facet

; 153  : 			_MT_INCR(_Myrefs);

  0017b	f0 ff 07	 lock	  inc	 DWORD PTR [edi]
$LN8@use_facet:

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  0017e	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory

; 2323 : 		this->_Myptr() = pointer();

  00184	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Psave_guard$7[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 543  : 				}

  0018b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
$LN94@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  0018f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00196	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00199	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0019e	8b c6		 mov	 eax, esi

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  001a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001aa	59		 pop	 ecx
  001ab	5f		 pop	 edi
  001ac	5e		 pop	 esi
  001ad	5b		 pop	 ebx
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c3		 ret	 0
$LN9@use_facet:
  001b2	8b ce		 mov	 ecx, esi

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  001b4	ff d0		 call	 eax
  001b6	eb c6		 jmp	 SHORT $LN8@use_facet
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$2:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3:
  00010	6a 18		 push	 24			; 00000018H
  00012	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001b	83 c4 08	 add	 esp, 8
  0001e	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4:
  0001f	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  00022	83 e0 01	 and	 eax, 1
  00025	0f 84 0c 00 00
	00		 je	 $LN33@use_facet
  0002b	83 65 f0 fe	 and	 DWORD PTR $T6[ebp], -2	; fffffffeH
  0002f	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN33@use_facet:
  00037	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$6:
  00038	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$5:
  00040	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1:
  00048	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$7[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00050	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00054	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00057	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00066	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b fa		 mov	 edi, edx
  00004	8b f1		 mov	 esi, ecx

; 1134 : 	for (; _First != _Last; ++_First)

  00006	3b f7		 cmp	 esi, edi
  00008	74 4d		 je	 SHORT $LN79@Destroy_ra
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00016	72 27		 jb	 SHORT $LN57@Destroy_ra
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN56@Destroy_ra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 27		 ja	 SHORT $LN53@Destroy_ra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN56@Destroy_ra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN57@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 1134 : 	for (; _First != _Last; ++_First)

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL6@Destroy_ra
$LN79@Destroy_ra:
  00057	5f		 pop	 edi

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00058	5e		 pop	 esi
  00059	c3		 ret	 0
$LN53@Destroy_ra:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN80@Destroy_ra:
  0005f	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00004	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00010	0f 87 da 00 00
	00		 ja	 $LN115@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00016	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00019	56		 push	 esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001a	8b f0		 mov	 esi, eax

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  0001c	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00022	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00028	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0002a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0002f	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00031	8b d1		 mov	 edx, ecx
  00033	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00038	d1 ea		 shr	 edx, 1
  0003a	2b c2		 sub	 eax, edx
  0003c	3b c8		 cmp	 ecx, eax
  0003e	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00040	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00045	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00047	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004a	3b f0		 cmp	 esi, eax
  0004c	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0004f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00052	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00058	72 23		 jb	 SHORT $LN57@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0005a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0005d	83 ca ff	 or	 edx, -1
  00060	3b c1		 cmp	 eax, ecx
  00062	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006b	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0006e	85 c0		 test	 eax, eax
  00070	74 79		 je	 SHORT $LN99@Reallocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00072	8d 78 23	 lea	 edi, DWORD PTR [eax+35]
  00075	83 e7 e0	 and	 edi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00078	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0007b	eb 13		 jmp	 SHORT $LN56@Reallocate
$LN57@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0d		 je	 SHORT $LN58@Reallocate

; 52   : 		return (::operator new(_Bytes));

  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0008a	8b f8		 mov	 edi, eax
  0008c	eb 02		 jmp	 SHORT $LN56@Reallocate
$LN58@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0008e	33 ff		 xor	 edi, edi
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  00090	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00093	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  00094	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00097	0f be 45 10	 movsx	 eax, BYTE PTR _<_Args_0>$[ebp]
  0009b	50		 push	 eax
  0009c	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0009d	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000a0	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000a5	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000ae	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000b2	5e		 pop	 esi
  000b3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000b6	72 27		 jb	 SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b8	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000ba	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000bb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c1	72 12		 jb	 SHORT $LN102@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000c3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000c6	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c9	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ce	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d1	77 18		 ja	 SHORT $LN99@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000d3	8b c2		 mov	 eax, edx
$LN102@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000dc	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3913 : 		return (*this);

  000df	89 3b		 mov	 DWORD PTR [ebx], edi
  000e1	8b c3		 mov	 eax, ebx
  000e3	5f		 pop	 edi
  000e4	5b		 pop	 ebx

; 3914 : 		}

  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH
$LN99@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN115@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  000f0	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN113@Reallocate:
  000f5	cc		 int	 3
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00004	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00010	0f 87 d8 00 00
	00		 ja	 $LN115@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00016	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00019	56		 push	 esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001a	8b f0		 mov	 esi, eax

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  0001c	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00022	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00028	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0002a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0002f	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00031	8b d1		 mov	 edx, ecx
  00033	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00038	d1 ea		 shr	 edx, 1
  0003a	2b c2		 sub	 eax, edx
  0003c	3b c8		 cmp	 ecx, eax
  0003e	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00040	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00045	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00047	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004a	3b f0		 cmp	 esi, eax
  0004c	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0004f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00052	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00058	72 23		 jb	 SHORT $LN57@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0005a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0005d	83 ca ff	 or	 edx, -1
  00060	3b c1		 cmp	 eax, ecx
  00062	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006b	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0006e	85 c0		 test	 eax, eax
  00070	74 77		 je	 SHORT $LN99@Reallocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00072	8d 78 23	 lea	 edi, DWORD PTR [eax+35]
  00075	83 e7 e0	 and	 edi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00078	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0007b	eb 13		 jmp	 SHORT $LN56@Reallocate
$LN57@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0d		 je	 SHORT $LN58@Reallocate

; 52   : 		return (::operator new(_Bytes));

  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0008a	8b f8		 mov	 edi, eax
  0008c	eb 02		 jmp	 SHORT $LN56@Reallocate
$LN58@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0008e	33 ff		 xor	 edi, edi
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  00090	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00093	50		 push	 eax
  00094	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  00097	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0009b	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009e	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000a3	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000ac	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000b0	5e		 pop	 esi
  000b1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000b4	72 27		 jb	 SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000b8	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000b9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000bf	72 12		 jb	 SHORT $LN102@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000c1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000c4	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c7	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000cc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000cf	77 18		 ja	 SHORT $LN99@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000d1	8b c2		 mov	 eax, edx
$LN102@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000d3	51		 push	 ecx
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000da	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3913 : 		return (*this);

  000dd	89 3b		 mov	 DWORD PTR [ebx], edi
  000df	8b c3		 mov	 eax, ebx
  000e1	5f		 pop	 edi
  000e2	5b		 pop	 ebx

; 3914 : 		}

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
$LN99@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN115@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  000ee	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN113@Reallocate:
  000f3	cc		 int	 3
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z
_TEXT	SEGMENT
tv508 = -8						; size = 4
__New_size$1$ = -8					; size = 4
tv507 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
tv509 = 20						; size = 4
_<_Args_1>$ = 20					; size = 1
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00009	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0000e	8b c1		 mov	 eax, ecx
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR __Size_increase$[ebp]
  00014	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00017	2b c2		 sub	 eax, edx
  00019	89 55 fc	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001c	57		 push	 edi
  0001d	3b c6		 cmp	 eax, esi
  0001f	0f 82 1f 01 00
	00		 jb	 $LN127@Reallocate

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00025	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00028	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002b	8b f8		 mov	 edi, eax

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00030	83 cf 0f	 or	 edi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00033	89 75 08	 mov	 DWORD PTR __Old$1$[ebp], esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00036	3b f9		 cmp	 edi, ecx

; 3870 : 		if (_Masked > _Max)

  00038	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0003a	8b f9		 mov	 edi, ecx
  0003c	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003e	8b c6		 mov	 eax, esi
  00040	d1 e8		 shr	 eax, 1
  00042	2b c8		 sub	 ecx, eax
  00044	3b f1		 cmp	 esi, ecx
  00046	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00048	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0004d	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004f	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00051	3b f8		 cmp	 edi, eax
  00053	0f 42 f8	 cmovb	 edi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00056	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00059	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005f	72 2a		 jb	 SHORT $LN57@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00061	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00064	83 ca ff	 or	 edx, -1
  00067	3b c1		 cmp	 eax, ecx
  00069	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00075	85 c0		 test	 eax, eax
  00077	0f 84 cc 00 00
	00		 je	 $LN103@Reallocate

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0007d	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]

; 103  : 		& ~(_Big_allocation_alignment - 1));

  00080	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  00083	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00086	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00089	eb 16		 jmp	 SHORT $LN56@Reallocate
$LN57@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0008b	85 c9		 test	 ecx, ecx
  0008d	74 10		 je	 SHORT $LN58@Reallocate

; 52   : 		return (::operator new(_Bytes));

  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00095	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]

; 52   : 		return (::operator new(_Bytes));

  00098	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0009b	8b f0		 mov	 esi, eax
  0009d	eb 02		 jmp	 SHORT $LN56@Reallocate
$LN58@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0009f	33 f6		 xor	 esi, esi
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3934 : 		_My_data._Mysize = _New_size;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000a4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000a7	0f be 45 14	 movsx	 eax, BYTE PTR _<_Args_1>$[ebp]
  000ab	89 45 14	 mov	 DWORD PTR tv509[ebp], eax
  000ae	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000b1	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
  000b4	8d 3c 16	 lea	 edi, DWORD PTR [esi+edx]
  000b7	03 c7		 add	 eax, edi
  000b9	89 7d f8	 mov	 DWORD PTR tv508[ebp], edi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000bc	83 7d 08 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c0	89 45 fc	 mov	 DWORD PTR tv507[ebp], eax
  000c3	52		 push	 edx
  000c4	72 55		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c6	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c8	57		 push	 edi
  000c9	56		 push	 esi
  000ca	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000cf	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  000d2	ff 75 14	 push	 DWORD PTR tv509[ebp]
  000d5	ff 75 f8	 push	 DWORD PTR tv508[ebp]
  000d8	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR tv507[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000e0	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e3	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  000e6	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000e7	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN106@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000f2	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 47		 ja	 SHORT $LN103@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00102	8b fa		 mov	 edi, edx
$LN106@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	57		 push	 edi
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  0010e	89 33		 mov	 DWORD PTR [ebx], esi
  00110	8b c3		 mov	 eax, ebx
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 3951 : 		}

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0011b	53		 push	 ebx
  0011c	56		 push	 esi
  0011d	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00122	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00125	ff 75 14	 push	 DWORD PTR tv509[ebp]
  00128	57		 push	 edi
  00129	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  0012e	8b 45 fc	 mov	 eax, DWORD PTR tv507[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00131	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00134	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  00137	8b c3		 mov	 eax, ebx
  00139	5f		 pop	 edi
  0013a	89 33		 mov	 DWORD PTR [ebx], esi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx

; 3951 : 		}

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 10 00	 ret	 16			; 00000010H
$LN127@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  00144	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN103@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00149	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@Reallocate:
  0014e	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
tv501 = -8						; size = 4
__New_size$1$ = -8					; size = 4
tv500 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00009	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0000e	8b c1		 mov	 eax, ecx
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR __Size_increase$[ebp]
  00014	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00017	2b c2		 sub	 eax, edx
  00019	89 55 fc	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001c	57		 push	 edi
  0001d	3b c6		 cmp	 eax, esi
  0001f	0f 82 18 01 00
	00		 jb	 $LN127@Reallocate

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00025	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00028	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002b	8b f8		 mov	 edi, eax

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00030	83 cf 0f	 or	 edi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00033	89 75 08	 mov	 DWORD PTR __Old$1$[ebp], esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00036	3b f9		 cmp	 edi, ecx

; 3870 : 		if (_Masked > _Max)

  00038	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0003a	8b f9		 mov	 edi, ecx
  0003c	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003e	8b c6		 mov	 eax, esi
  00040	d1 e8		 shr	 eax, 1
  00042	2b c8		 sub	 ecx, eax
  00044	3b f1		 cmp	 esi, ecx
  00046	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00048	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0004d	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004f	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00051	3b f8		 cmp	 edi, eax
  00053	0f 42 f8	 cmovb	 edi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00056	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00059	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005f	72 2a		 jb	 SHORT $LN57@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00061	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00064	83 ca ff	 or	 edx, -1
  00067	3b c1		 cmp	 eax, ecx
  00069	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00075	85 c0		 test	 eax, eax
  00077	0f 84 c5 00 00
	00		 je	 $LN103@Reallocate

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0007d	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]

; 103  : 		& ~(_Big_allocation_alignment - 1));

  00080	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  00083	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00086	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00089	eb 16		 jmp	 SHORT $LN56@Reallocate
$LN57@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0008b	85 c9		 test	 ecx, ecx
  0008d	74 10		 je	 SHORT $LN58@Reallocate

; 52   : 		return (::operator new(_Bytes));

  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00095	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]

; 52   : 		return (::operator new(_Bytes));

  00098	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0009b	8b f0		 mov	 esi, eax
  0009d	eb 02		 jmp	 SHORT $LN56@Reallocate
$LN58@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0009f	33 f6		 xor	 esi, esi
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3934 : 		_My_data._Mysize = _New_size;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000a4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000a7	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000aa	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
  000ad	8d 3c 16	 lea	 edi, DWORD PTR [esi+edx]
  000b0	03 c7		 add	 eax, edi
  000b2	89 7d f8	 mov	 DWORD PTR tv501[ebp], edi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000b5	83 7d 08 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000b9	89 45 fc	 mov	 DWORD PTR tv500[ebp], eax
  000bc	52		 push	 edx
  000bd	72 55		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000bf	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c1	57		 push	 edi
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 _memcpy
  000c8	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000cb	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  000ce	ff 75 f8	 push	 DWORD PTR tv501[ebp]
  000d1	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR tv500[ebp]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000d9	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000dc	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  000df	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000e0	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000e3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e9	72 12		 jb	 SHORT $LN106@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000eb	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000ee	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f1	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000f6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f9	77 47		 ja	 SHORT $LN103@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000fb	8b fa		 mov	 edi, edx
$LN106@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000fd	51		 push	 ecx
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00104	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  00107	89 33		 mov	 DWORD PTR [ebx], esi
  00109	8b c3		 mov	 eax, ebx
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx

; 3951 : 		}

  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00114	53		 push	 ebx
  00115	56		 push	 esi
  00116	e8 00 00 00 00	 call	 _memcpy
  0011b	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  0011e	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00121	57		 push	 edi
  00122	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  00127	8b 45 fc	 mov	 eax, DWORD PTR tv500[ebp]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0012a	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  0012d	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  00130	8b c3		 mov	 eax, ebx
  00132	5f		 pop	 edi
  00133	89 33		 mov	 DWORD PTR [ebx], esi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx

; 3951 : 		}

  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 10 00	 ret	 16			; 00000010H
$LN127@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  0013d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN103@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00142	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@Reallocate:
  00147	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 2a		 jb	 SHORT $LN2@Allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00011	83 ca ff	 or	 edx, -1
  00014	3b c1		 cmp	 eax, ecx
  00016	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001f	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00021	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00024	85 c9		 test	 ecx, ecx
  00026	74 0b		 je	 SHORT $LN11@Allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00028	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0002e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 194  : 	}

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN11@Allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00033	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN2@Allocate:

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00038	85 c9		 test	 ecx, ecx
  0003a	74 09		 je	 SHORT $LN3@Allocate

; 52   : 		return (::operator new(_Bytes));

  0003c	89 4d 08	 mov	 DWORD PTR __Bytes$[ebp], ecx

; 194  : 	}

  0003f	5d		 pop	 ebp

; 52   : 		return (::operator new(_Bytes));

  00040	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));
; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00045	33 c0		 xor	 eax, eax

; 194  : 	}

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 208  : 	}

  0002f	5d		 pop	 ebp

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1919 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1919 : 		}

  00010	c2 04 00	 ret	 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z
_TEXT	SEGMENT
tv551 = -12						; size = 4
tv549 = -8						; size = 4
__New_size$1$ = -8					; size = 4
tv550 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
tv552 = 24						; size = 4
_<_Args_2>$ = 24					; size = 1
??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00011	56		 push	 esi
  00012	8b c1		 mov	 eax, ecx
  00014	57		 push	 edi
  00015	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  00018	2b c6		 sub	 eax, esi
  0001a	89 75 fc	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001d	3b c2		 cmp	 eax, edx
  0001f	0f 82 3b 01 00
	00		 jb	 $LN127@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00025	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  00028	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002b	8b f0		 mov	 esi, eax

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00030	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00033	89 7d 08	 mov	 DWORD PTR __Old$1$[ebp], edi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00036	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00038	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0003a	8b f1		 mov	 esi, ecx
  0003c	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003e	8b c7		 mov	 eax, edi
  00040	d1 e8		 shr	 eax, 1
  00042	2b c8		 sub	 ecx, eax
  00044	3b f9		 cmp	 edi, ecx
  00046	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00048	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0004d	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004f	03 c7		 add	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00051	3b f0		 cmp	 esi, eax
  00053	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00056	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00059	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005f	72 27		 jb	 SHORT $LN57@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00061	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00064	83 ca ff	 or	 edx, -1
  00067	3b c1		 cmp	 eax, ecx
  00069	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00075	85 c0		 test	 eax, eax
  00077	0f 84 e8 00 00
	00		 je	 $LN103@Reallocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0007d	8d 78 23	 lea	 edi, DWORD PTR [eax+35]
  00080	83 e7 e0	 and	 edi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00083	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00086	eb 13		 jmp	 SHORT $LN56@Reallocate
$LN57@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00088	85 c9		 test	 ecx, ecx
  0008a	74 0d		 je	 SHORT $LN58@Reallocate

; 52   : 		return (::operator new(_Bytes));

  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN56@Reallocate
$LN58@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00099	33 ff		 xor	 edi, edi
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3934 : 		_My_data._Mysize = _New_size;

  0009b	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000a1	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000a4	0f be 45 18	 movsx	 eax, BYTE PTR _<_Args_2>$[ebp]
  000a8	89 45 18	 mov	 DWORD PTR tv552[ebp], eax
  000ab	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000ae	2b c8		 sub	 ecx, eax
  000b0	41		 inc	 ecx
  000b1	89 73 14	 mov	 DWORD PTR [ebx+20], esi
  000b4	89 4d fc	 mov	 DWORD PTR tv550[ebp], ecx
  000b7	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  000ba	8d 34 07	 lea	 esi, DWORD PTR [edi+eax]
  000bd	03 ce		 add	 ecx, esi
  000bf	89 75 f4	 mov	 DWORD PTR tv551[ebp], esi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c2	83 7d 08 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000c6	89 4d f8	 mov	 DWORD PTR tv549[ebp], ecx
  000c9	50		 push	 eax
  000ca	72 60		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 33		 mov	 esi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ce	56		 push	 esi
  000cf	57		 push	 edi
  000d0	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000d5	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000d8	ff 75 18	 push	 DWORD PTR tv552[ebp]
  000db	ff 75 f4	 push	 DWORD PTR tv551[ebp]
  000de	e8 00 00 00 00	 call	 _memset

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000e3	ff 75 fc	 push	 DWORD PTR tv550[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  000e6	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000e9	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000eb	50		 push	 eax
  000ec	ff 75 f8	 push	 DWORD PTR tv549[ebp]
  000ef	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000f4	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000f7	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fa	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000fb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00101	72 12		 jb	 SHORT $LN106@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00103	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00106	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00109	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010b	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0010e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00111	77 52		 ja	 SHORT $LN103@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00113	8b f2		 mov	 esi, edx
$LN106@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00115	51		 push	 ecx
  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  0011f	89 3b		 mov	 DWORD PTR [ebx], edi
  00121	8b c3		 mov	 eax, ebx
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 3951 : 		}

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 14 00	 ret	 20			; 00000014H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0012c	53		 push	 ebx
  0012d	57		 push	 edi
  0012e	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00133	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  00136	ff 75 18	 push	 DWORD PTR tv552[ebp]
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 _memset

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0013f	ff 75 fc	 push	 DWORD PTR tv550[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00142	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00145	03 c3		 add	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00147	50		 push	 eax
  00148	ff 75 f8	 push	 DWORD PTR tv549[ebp]
  0014b	e8 00 00 00 00	 call	 _memcpy
  00150	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  00153	89 3b		 mov	 DWORD PTR [ebx], edi
  00155	8b c3		 mov	 eax, ebx
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx

; 3951 : 		}

  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 14 00	 ret	 20			; 00000014H
$LN127@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  00160	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN103@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00165	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@Reallocate:
  0016a	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1100 : 	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
; 1101 : 	_Pocma(_Left, _Right, _Tag);
; 1102 : 	}

  00000	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_cast@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 67   :         : _Data()

  00029	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 68   :     {

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00032	0f 57 c0	 xorps	 xmm0, xmm0

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00035	50		 push	 eax
  00036	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ___std_exception_copy
  00046	83 c4 08	 add	 esp, 8
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b c6		 mov	 eax, esi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_cast@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_cast@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_cast@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 2312 : 		return (this->_Myptr());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2322 : 		pointer _Ans = get();
; 2323 : 		this->_Myptr() = pointer();

  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2324 : 		return (_Ans);
; 2325 : 		}

  00008	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 2294 : 		if (get() != pointer())

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN22@unique_ptr

; 2084 : 		delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN22@unique_ptr:

; 2295 : 			{
; 2296 : 			this->get_deleter()(get());
; 2297 : 			}
; 2298 : 		}

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 165  : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 166  : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  0002e	8b 75 08	 mov	 esi, DWORD PTR __Ppf$[ebp]
  00031	85 f6		 test	 esi, esi
  00033	0f 84 a5 00 00
	00		 je	 $LN26@Getcat
  00039	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0003c	0f 85 9c 00 00
	00		 jne	 $LN26@Getcat

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00042	6a 18		 push	 24			; 00000018H
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f8		 mov	 edi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 7d 08	 mov	 DWORD PTR $T4[ebp], edi
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  0005b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0005e	85 c9		 test	 ecx, ecx
  00060	75 07		 jne	 SHORT $LN12@Getcat
  00062	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  00067	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00069	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0006c	85 c0		 test	 eax, eax
  0006e	75 03		 jne	 SHORT $LN17@Getcat
  00070	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00073	50		 push	 eax
  00074	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0007c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00080	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  00087	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 172  : 			{	// construct with initial reference count

  0008d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00094	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0009a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 158  : 		: locale::facet(_Refs)

  000a1	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 159  : 		{	// construct from specified locale
; 160  : 		_Init(_Lobj, _Isdef);

  000a8	8b cf		 mov	 ecx, edi
  000aa	6a 01		 push	 1
  000ac	50		 push	 eax
  000ad	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$numpunct@D@std@@6B@
  000b3	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 167  : 			*_Ppf = new numpunct<_Elem>(

  000b8	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  000bf	89 3e		 mov	 DWORD PTR [esi], edi
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  000d0	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  000d3	83 e0 fe	 and	 eax, -2			; fffffffeH
  000d6	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  000d9	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN26@Getcat:

; 168  : 				_Locinfo(_Ploc->c_str()), 0, true);
; 169  : 		return (_X_NUMERIC);
; 170  : 		}

  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ed	59		 pop	 ecx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  0001f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1419 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 1420 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  0002e	8b 75 08	 mov	 esi, DWORD PTR __Ppf$[ebp]
  00031	85 f6		 test	 esi, esi
  00033	0f 84 9b 00 00
	00		 je	 $LN28@Getcat
  00039	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0003c	0f 85 92 00 00
	00		 jne	 $LN28@Getcat

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00042	6a 08		 push	 8
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f8		 mov	 edi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 7d 08	 mov	 DWORD PTR $T4[ebp], edi
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  0005b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0005e	85 c9		 test	 ecx, ecx
  00060	75 07		 jne	 SHORT $LN12@Getcat
  00062	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  00067	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00069	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0006c	85 c0		 test	 eax, eax
  0006e	75 03		 jne	 SHORT $LN17@Getcat
  00070	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00073	50		 push	 eax
  00074	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0007c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00080	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  00087	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 172  : 			{	// construct with initial reference count

  0008d	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00094	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0009a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1447 : 		: locale::facet(_Refs)

  000a1	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 1448 : 		{	// construct from specified locale

  000a8	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  000ae	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  000b5	89 3e		 mov	 DWORD PTR [esi], edi
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  000c6	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  000c9	83 e0 fe	 and	 eax, -2			; fffffffeH
  000cc	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN28@Getcat:

; 1422 : 				_Locinfo(_Ploc->c_str()));
; 1423 : 		return (_X_NUMERIC);
; 1424 : 		}

  000d4	b8 04 00 00 00	 mov	 eax, 4
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  0001f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1926 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1896 : 		this->_Orphan_all();
; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00006	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 50		 je	 SHORT $LN75@Change_arr

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0000c	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0000f	56		 push	 esi
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00016	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	8b 37		 mov	 esi, DWORD PTR [edi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00020	83 c4 04	 add	 esp, 4

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00023	2b ce		 sub	 ecx, esi
  00025	f7 e9		 imul	 ecx
  00027	c1 fa 02	 sar	 edx, 2
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00031	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00034	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00037	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003d	72 12		 jb	 SHORT $LN74@Change_arr

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0003f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00042	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00045	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004d	77 2f		 ja	 SHORT $LN71@Change_arr

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004f	8b f2		 mov	 esi, edx
$LN74@Change_arr:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00051	51		 push	 ecx
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00058	83 c4 08	 add	 esp, 8
  0005b	5e		 pop	 esi
$LN75@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector

; 1904 : 		this->_Myfirst() = _Newvec;

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00062	89 0f		 mov	 DWORD PTR [edi], ecx
  00064	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00067	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  0006d	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00070	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00073	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00076	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00079	5f		 pop	 edi

; 1907 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
$LN71@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Change_arr:
  00083	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	f7 ea		 imul	 edx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  0000f	56		 push	 esi

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00010	c1 fa 02	 sar	 edx, 2

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00013	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00018	8b ca		 mov	 ecx, edx
  0001a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0001d	03 ca		 add	 ecx, edx

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  0001f	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00022	8b f1		 mov	 esi, ecx
  00024	d1 ee		 shr	 esi, 1
  00026	2b c6		 sub	 eax, esi
  00028	3b c8		 cmp	 ecx, eax
  0002a	77 07		 ja	 SHORT $LN31@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow
; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0002c	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0002f	3b c2		 cmp	 eax, edx
  00031	73 02		 jae	 SHORT $LN1@Calculate_
$LN31@Calculate_:

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  00033	8b c2		 mov	 eax, edx
$LN1@Calculate_:
  00035	5e		 pop	 esi

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient
; 1869 : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00012	83 c4 08	 add	 esp, 8

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,
; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00012	83 c4 08	 add	 esp, 8

; 1829 : 		}

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1705 : 		}

  00016	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	c1 e1 03	 shl	 ecx, 3

; 26   : 	if (_Max_possible < _Count)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00013	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00016	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 27		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00023	83 ca ff	 or	 edx, -1
  00026	3b c1		 cmp	 eax, ecx
  00028	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00031	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00033	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00036	85 c9		 test	 ecx, ecx
  00038	74 24		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003d	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00040	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  00047	85 c9		 test	 ecx, ecx
  00049	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  00058	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@allocate:
  00063	cc		 int	 3
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1787 : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4004 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3866 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3867 : 		const size_type _Max = max_size();
; 3868 : 		auto& _My_data = this->_Get_data();
; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00006	83 ca 0f	 or	 edx, 15			; 0000000fH
  00009	56		 push	 esi
  0000a	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00010	77 21		 ja	 SHORT $LN25@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);
; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

  00012	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 3876 : 		if (_Old > _Max - _Old / 2)

  00015	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0001a	8b ce		 mov	 ecx, esi
  0001c	d1 e9		 shr	 ecx, 1
  0001e	2b c1		 sub	 eax, ecx
  00020	3b f0		 cmp	 esi, eax
  00022	77 0f		 ja	 SHORT $LN25@Calculate_

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00024	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00027	3b d0		 cmp	 edx, eax
  00029	5e		 pop	 esi
  0002a	0f 42 d0	 cmovb	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0002d	8b c2		 mov	 eax, edx

; 3882 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN25@Calculate_:

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00033	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00038	5e		 pop	 esi

; 3882 : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 205  : 		{	// put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 206  : 		return (xsputn(_Ptr, _Count));

  00006	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00011	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00014	ff d0		 call	 eax

; 207  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2159 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2160 : 		}

  00002	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter, COMDAT
; _this$ = ecx

; 2149 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2150 : 		}

  00002	c3		 ret	 0
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get, COMDAT
; _this$ = ecx

; 2312 : 		return (this->_Myptr());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2313 : 		}

  00002	c3		 ret	 0
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 2081 : 		{	// delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2082 : 		static_assert(0 < sizeof (_Ty),
; 2083 : 			"can't delete an incomplete type");
; 2084 : 		delete _Ptr;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0c		 je	 SHORT $LN3@operator
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	c7 45 08 01 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 1

; 2085 : 		}

  00013	5d		 pop	 ebp

; 2082 : 		static_assert(0 < sizeof (_Ty),
; 2083 : 			"can't delete an incomplete type");
; 2084 : 		delete _Ptr;

  00014	ff 20		 jmp	 DWORD PTR [eax]
$LN3@operator:

; 2085 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 159  : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 172  : 			{	// construct with initial reference count

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00036	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0003f	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 158  : 		: locale::facet(_Refs)

  00042	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 160  : 		_Init(_Lobj, _Isdef);

  00049	ff 75 10	 push	 DWORD PTR __Isdef$[ebp]
  0004c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00052	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  00055	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 161  : 		}

  0005a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00061	8b c6		 mov	 eax, esi
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1448 : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale

; 172  : 			{	// construct with initial reference count

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00033	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00036	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  0003c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 1447 : 		: locale::facet(_Refs)

  0003f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1448 : 		{	// construct from specified locale

  00046	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1449 : 		_Init(_Lobj);
; 1450 : 		}

  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b c1		 mov	 eax, ecx
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
__unwindfunclet$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00012	83 c4 08	 add	 esp, 8

; 1834 : 		}

  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2164 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2165 : 		}

  00002	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T2 = -112						; size = 44
_this$GSCopy$ = -68					; size = 4
$T3 = -64						; size = 44
$T4 = -64						; size = 44
__Cvt$ = -64						; size = 44
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 200  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	8b f1		 mov	 esi, ecx
  00030	89 75 bc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 127  : 		return (localeconv());

  00033	e8 00 00 00 00	 call	 _localeconv
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 201  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00038	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 122  : 		return (::_Getcvt());

  0003a	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 __Getcvt
  00043	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 204  : 		_Grouping = nullptr;

  00046	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 205  : 		_Falsename = nullptr;

  0004d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 206  : 		_Truename = nullptr;

  00054	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 207  : 
; 208  : 		_TRY_BEGIN

  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocinfo

; 122  : 		return (::_Getcvt());

  00062	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 __Getcvt
  0006b	83 c4 04	 add	 esp, 4
  0006e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00071	0f 11 45 c0	 movups	 XMMWORD PTR $T4[ebp], xmm0
  00075	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00079	0f 11 45 d0	 movups	 XMMWORD PTR $T4[ebp+16], xmm0
  0007d	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00082	66 0f d6 45 e0	 movq	 QWORD PTR $T4[ebp+32], xmm0
  00087	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0008a	89 45 e8	 mov	 DWORD PTR $T4[ebp+40], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum

; 209  : 		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char *>(nullptr), _Lobj._Getcvt());

  0008d	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  00091	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  00096	75 03		 jne	 SHORT $LN7@Init
  00098	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
$LN7@Init:
  0009b	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0009e	51		 push	 ecx
  0009f	6a 00		 push	 0
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 210  : 		_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem *>(nullptr), _Cvt);

  000aa	8d 45 c0	 lea	 eax, DWORD PTR __Cvt$[ebp]
  000ad	50		 push	 eax
  000ae	6a 00		 push	 0
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false@
  000b5	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000ba	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 211  : 		_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem *>(nullptr), _Cvt);

  000bd	8d 45 c0	 lea	 eax, DWORD PTR __Cvt$[ebp]
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true@
  000c8	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000cd	83 c4 24	 add	 esp, 36			; 00000024H
  000d0	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 215  : 		_CATCH_END
; 216  : 
; 217  : 		if (_Isdef)

  000da	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  000de	74 24		 je	 SHORT $LN3@Init

; 218  : 			{	// apply defaults for required facets
; 219  : //			_Grouping = _Maklocstr("", static_cast<char *>(nullptr), _Cvt);
; 220  : 			_Dp = _Maklocchr('.', static_cast<_Elem *>(nullptr), _Cvt);

  000e0	66 c7 46 0c 2e
	2c		 mov	 WORD PTR [esi+12], 11310 ; 00002c2eH
$LN4@Init:

; 221  : 			_Kseparator = _Maklocchr(',', static_cast<_Elem *>(nullptr), _Cvt);
; 222  : 			}
; 223  : 		else
; 224  : 			_Getvals((_Elem)0, _Ptr, _Cvt);
; 225  : 		}

  000e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	33 cd		 xor	 ecx, ebp
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 08 00	 ret	 8
$LN3@Init:

; 189  : 		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  00104	8b 07		 mov	 eax, DWORD PTR [edi]
  00106	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00109	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 190  : 		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  0010c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010f	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00112	88 46 0d	 mov	 BYTE PTR [esi+13], al
  00115	eb cf		 jmp	 SHORT $LN4@Init
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 212  : 		_CATCH_ALL
; 213  : 		_Tidy();

  00117	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0011a	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 214  : 		_RERAISE;

  0011f	6a 00		 push	 0
  00121	6a 00		 push	 0
  00123	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Init:
  00128	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1435 : 		}

  00000	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 2212 : 		{	// construct with pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory

; 2213 : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Storage_ptr$ = 12					; size = 4
___formal$ = 16						; size = 4
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z PROC ; std::_Immortalize_impl<std::_Iostream_error_category>, COMDAT

; 600  : 	{	// adapt True Placement New to _Execute_once

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  : 	_Iostream_error_category() noexcept

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Storage_ptr$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 506  : 		{	// default constructor
; 507  : 		_Addr = _Iostream_addr;

  0000c	c7 40 04 05 00
	00 00		 mov	 DWORD PTR [eax+4], 5

; 601  : 	::new (_Storage_ptr) _Ty();
; 602  : 	return (1);

  00013	b8 01 00 00 00	 mov	 eax, 1

; 603  : 	}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ENDP ; std::_Immortalize_impl<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z PROC ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ENDP ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00010	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1133 : 	{	// destroy [_First, _Last), no special optimization

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b fa		 mov	 edi, edx
  00004	8b f1		 mov	 esi, ecx

; 1134 : 	for (; _First != _Last; ++_First)

  00006	3b f7		 cmp	 esi, edi
  00008	74 4d		 je	 SHORT $LN76@Destroy_ra
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00016	72 27		 jb	 SHORT $LN55@Destroy_ra
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN54@Destroy_ra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 27		 ja	 SHORT $LN51@Destroy_ra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN54@Destroy_ra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN55@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 1134 : 	for (; _First != _Last; ++_First)

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN76@Destroy_ra:
  00057	5f		 pop	 edi

; 1135 : 		{
; 1136 : 		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1137 : 		}
; 1138 : 	}

  00058	5e		 pop	 esi
  00059	c3		 ret	 0
$LN51@Destroy_ra:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@Destroy_ra:
  0005f	cc		 int	 3
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]

; 94   : 	if (_Block_size <= _Bytes)

  00006	83 ca ff	 or	 edx, -1
  00009	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0000c	3b c8		 cmp	 ecx, eax
  0000e	0f 46 ca	 cmovbe	 ecx, edx

; 52   : 		return (::operator new(_Bytes));

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);
; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00019	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;
; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);
; 110  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00010	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1089 : 	_Left = _STD move(_Right);
; 1090 : 	}

  00000	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -24					; size = 12
__$EHRec$ = -12						; size = 12
__Dest$ = 8						; size = 4
__Al$ = 12						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 147  : 		: _First(_Dest),

  00026	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]

; 148  : 		_Last(_Dest),
; 149  : 		_Al(_Al_)

  00029	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  0002c	89 75 ec	 mov	 DWORD PTR __Backout$2[ebp+4], esi
  0002f	89 75 e8	 mov	 DWORD PTR __Backout$2[ebp], esi
  00032	89 45 f0	 mov	 DWORD PTR __Backout$2[ebp+8], eax

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 	for (; _First != _Last; ++_First)

  0003c	3b ca		 cmp	 ecx, edx
  0003e	74 3c		 je	 SHORT $LN17@Uninitiali
$LL18@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00040	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00047	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0004e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00051	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00054	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00059	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  0005e	83 c6 18	 add	 esi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00061	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00068	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0006f	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 230  : 	for (; _First != _Last; ++_First)

  00072	83 c1 18	 add	 ecx, 24			; 00000018H

; 165  : 		++_Last;

  00075	89 75 ec	 mov	 DWORD PTR __Backout$2[ebp+4], esi

; 230  : 	for (; _First != _Last; ++_First)

  00078	3b ca		 cmp	 ecx, edx
  0007a	75 c4		 jne	 SHORT $LL18@Uninitiali
$LN17@Uninitiali:

; 170  : 		_First = _Last;

  0007c	89 75 e8	 mov	 DWORD PTR __Backout$2[ebp], esi

; 235  : 	return (_Backout._Release());

  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 158  : 		_Destroy_range(_First, _Last, _Al);

  00086	8b d6		 mov	 edx, esi
  00088	51		 push	 ecx
  00089	8b ce		 mov	 ecx, esi
  0008b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00090	83 c4 04	 add	 esp, 4

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);
; 254  : 	const auto _ULast = _Get_unwrapped(_Last);
; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 256  : 	_Seek_wrapped(_Dest,
; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

  00093	8b c6		 mov	 eax, esi

; 261  : 	}

  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 12		 mov	 edx, DWORD PTR [edx]
  00002	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00007	2b 11		 sub	 edx, DWORD PTR [ecx]
  00009	f7 ea		 imul	 edx
  0000b	c1 fa 02	 sar	 edx, 2
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00015	c3		 ret	 0
??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT
; __Count$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

  00000	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]

; 26   : 	if (_Max_possible < _Count)

  00003	83 ca ff	 or	 edx, -1
  00006	c1 e0 03	 shl	 eax, 3
  00009	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  0000f	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00012	c3		 ret	 0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	57		 push	 edi
  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL11@Maklocstr:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL11@Maklocstr
  00017	2b f9		 sub	 edi, ecx
  00019	47		 inc	 edi

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001a	6a 01		 push	 1
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _calloc
  00022	8b d0		 mov	 edx, eax
  00024	83 c4 08	 add	 esp, 8

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00027	85 d2		 test	 edx, edx
  00029	74 1c		 je	 SHORT $LN14@Maklocstr

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  0002b	85 ff		 test	 edi, edi
  0002d	74 12		 je	 SHORT $LN3@Maklocstr
  0002f	8b ca		 mov	 ecx, edx
  00031	2b ce		 sub	 ecx, esi
$LL4@Maklocstr:

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00033	8a 06		 mov	 al, BYTE PTR [esi]
  00035	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00038	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  0003c	83 ef 01	 sub	 edi, 1
  0003f	75 f2		 jne	 SHORT $LL4@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00041	5f		 pop	 edi
  00042	8b c2		 mov	 eax, edx
  00044	5e		 pop	 esi

; 677  : 	}

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN14@Maklocstr:

; 671  : 		_Xbad_alloc();

  00047	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN12@Maklocstr:
  0004c	cc		 int	 3
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 634  : 	{	// convert char to _Elem using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 635  : 	return ((_Elem)(unsigned char)_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 636  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Ptr$ = 12						; size = 4
__Cvt$ = 16						; size = 44
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z PROC ; std::numpunct<char>::_Getvals<char>, COMDAT
; _this$ = ecx

; 188  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  : 		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 190  : 		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00014	88 41 0d	 mov	 BYTE PTR [ecx+13], al

; 191  : 		}

  00017	5d		 pop	 ebp
  00018	c2 34 00	 ret	 52			; 00000034H
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ENDP ; std::numpunct<char>::_Getvals<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>, COMDAT
; _this$ = ecx

; 2144 : 		{	// construct with compatible pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\memory

; 2145 : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 886  : 		{	// destroy object at _Ptr

  00000	56		 push	 esi
  00001	8b f2		 mov	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 27		 jb	 SHORT $LN48@destroy
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN47@destroy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN44@destroy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN47@destroy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN48@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 888  : 		}

  00044	c3		 ret	 0
$LN44@destroy:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@destroy:
  0004a	cc		 int	 3
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z PROC ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z ENDP ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1087 : 	return {};

  00000	32 c0		 xor	 al, al

; 1088 : 	}

  00002	c3		 ret	 0
??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__Dest$ = 8						; size = 4
__Al$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 228  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 147  : 		: _First(_Dest),

  00026	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]

; 148  : 		_Last(_Dest),
; 149  : 		_Al(_Al_)

  00029	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  0002c	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi
  0002f	89 75 e8	 mov	 DWORD PTR __Backout$[ebp], esi
  00032	89 45 f0	 mov	 DWORD PTR __Backout$[ebp+8], eax

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 	for (; _First != _Last; ++_First)

  0003c	3b ca		 cmp	 ecx, edx
  0003e	74 3c		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00040	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00047	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0004e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00051	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00054	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00059	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  0005e	83 c6 18	 add	 esi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00061	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00068	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0006f	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 230  : 	for (; _First != _Last; ++_First)

  00072	83 c1 18	 add	 ecx, 24			; 00000018H

; 165  : 		++_Last;

  00075	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi

; 230  : 	for (; _First != _Last; ++_First)

  00078	3b ca		 cmp	 ecx, edx
  0007a	75 c4		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 170  : 		_First = _Last;

  0007c	89 75 e8	 mov	 DWORD PTR __Backout$[ebp], esi

; 231  : 		{
; 232  : 		_Backout._Emplace_back(_STD move(*_First));
; 233  : 		}
; 234  : 
; 235  : 	return (_Backout._Release());

  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 158  : 		_Destroy_range(_First, _Last, _Al);

  00086	8b d6		 mov	 edx, esi
  00088	51		 push	 ecx
  00089	8b ce		 mov	 ecx, esi
  0008b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00090	83 c4 04	 add	 esp, 4

; 231  : 		{
; 232  : 		_Backout._Emplace_back(_STD move(*_First));
; 233  : 		}
; 234  : 
; 235  : 	return (_Backout._Release());

  00093	8b c6		 mov	 eax, esi

; 236  : 	}

  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 436  : 		constexpr _Unused_parameter(_Ty&&) noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z
_TEXT	SEGMENT
??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z PROC ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ENDP ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$dead$ = 8					; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0002b	72 27		 jb	 SHORT $LN46@scalar
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0002f	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00030	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00036	72 12		 jb	 SHORT $LN45@scalar

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00038	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003b	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003e	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00040	83 c0 fc	 add	 eax, -4			; fffffffcH
  00043	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00046	77 31		 ja	 SHORT $LN42@scalar

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00048	8b c2		 mov	 eax, edx
$LN45@scalar:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004a	51		 push	 ecx
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00051	83 c4 08	 add	 esp, 8
$LN46@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00054	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0005b	8b c6		 mov	 eax, esi

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0005d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00064	c6 06 00	 mov	 BYTE PTR [esi], 0
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5e		 pop	 esi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN42@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00079	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN62@scalar:
  0007e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release, COMDAT
; _this$ = ecx

; 170  : 		_First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 171  : 		return (_Last);
; 172  : 		}

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 158  : 		_Destroy_range(_First, _Last, _Al);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	51		 push	 ecx
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000b	59		 pop	 ecx

; 159  : 		}

  0000c	c3		 ret	 0
??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 150  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 147  : 		: _First(_Dest),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 148  : 		_Last(_Dest),

  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 149  : 		_Al(_Al_)

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 151  : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 278  : 		{	// construct from forwarded values
; 279  : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00006	8b 55 08	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]

; 1784 : 		_Mysize(0),

  00009	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1785 : 		_Myres(0)

  00010	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00017	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0001a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001d	f3 0f 7e 42 10	 movq	 xmm0, QWORD PTR [edx+16]
  00022	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00027	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0002e	c7 42 14 0f 00
	00 00		 mov	 DWORD PTR [edx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00035	c6 02 00	 mov	 BYTE PTR [edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00038	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 166  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
END
